{
"AutoScaling":
{
  "metadata":{
    "apiVersion":"2011-01-01",
    "endpointPrefix":"autoscaling",
    "serviceFullName":"Auto Scaling",
    "signatureVersion":"v4",
    "xmlNamespace":"http://autoscaling.amazonaws.com/doc/2011-01-01/",
    "protocol":"query"
  },
  "operations":{
    "AttachInstances":{
      "name":"AttachInstances",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"AttachInstancesQuery"}
    },
    "CompleteLifecycleAction":{
      "name":"CompleteLifecycleAction",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CompleteLifecycleActionType"},
      "output":{
        "shape":"CompleteLifecycleActionAnswer",
        "resultWrapper":"CompleteLifecycleActionResult"
      }
    },
    "CreateAutoScalingGroup":{
      "name":"CreateAutoScalingGroup",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateAutoScalingGroupType"},
      "errors":[
        {
          "shape":"AlreadyExistsFault",
          "error":{
            "code":"AlreadyExists",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"LimitExceededFault",
          "error":{
            "code":"LimitExceeded",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "CreateLaunchConfiguration":{
      "name":"CreateLaunchConfiguration",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateLaunchConfigurationType"},
      "errors":[
        {
          "shape":"AlreadyExistsFault",
          "error":{
            "code":"AlreadyExists",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"LimitExceededFault",
          "error":{
            "code":"LimitExceeded",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "CreateOrUpdateTags":{
      "name":"CreateOrUpdateTags",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateOrUpdateTagsType"},
      "errors":[
        {
          "shape":"LimitExceededFault",
          "error":{
            "code":"LimitExceeded",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"AlreadyExistsFault",
          "error":{
            "code":"AlreadyExists",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DeleteAutoScalingGroup":{
      "name":"DeleteAutoScalingGroup",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteAutoScalingGroupType"},
      "errors":[
        {
          "shape":"ScalingActivityInProgressFault",
          "error":{
            "code":"ScalingActivityInProgress",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"ResourceInUseFault",
          "error":{
            "code":"ResourceInUse",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DeleteLaunchConfiguration":{
      "name":"DeleteLaunchConfiguration",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"LaunchConfigurationNameType"},
      "errors":[
        {
          "shape":"ResourceInUseFault",
          "error":{
            "code":"ResourceInUse",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DeleteLifecycleHook":{
      "name":"DeleteLifecycleHook",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteLifecycleHookType"},
      "output":{
        "shape":"DeleteLifecycleHookAnswer",
        "resultWrapper":"DeleteLifecycleHookResult"
      }
    },
    "DeleteNotificationConfiguration":{
      "name":"DeleteNotificationConfiguration",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteNotificationConfigurationType"}
    },
    "DeletePolicy":{
      "name":"DeletePolicy",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeletePolicyType"}
    },
    "DeleteScheduledAction":{
      "name":"DeleteScheduledAction",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteScheduledActionType"}
    },
    "DeleteTags":{
      "name":"DeleteTags",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteTagsType"}
    },
    "DescribeAccountLimits":{
      "name":"DescribeAccountLimits",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "output":{
        "shape":"DescribeAccountLimitsAnswer",
        "resultWrapper":"DescribeAccountLimitsResult"
      }
    },
    "DescribeAdjustmentTypes":{
      "name":"DescribeAdjustmentTypes",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "output":{
        "shape":"DescribeAdjustmentTypesAnswer",
        "resultWrapper":"DescribeAdjustmentTypesResult"
      }
    },
    "DescribeAutoScalingGroups":{
      "name":"DescribeAutoScalingGroups",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"AutoScalingGroupNamesType"},
      "output":{
        "shape":"AutoScalingGroupsType",
        "resultWrapper":"DescribeAutoScalingGroupsResult"
      },
      "errors":[
        {
          "shape":"InvalidNextToken",
          "error":{
            "code":"InvalidNextToken",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DescribeAutoScalingInstances":{
      "name":"DescribeAutoScalingInstances",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeAutoScalingInstancesType"},
      "output":{
        "shape":"AutoScalingInstancesType",
        "resultWrapper":"DescribeAutoScalingInstancesResult"
      },
      "errors":[
        {
          "shape":"InvalidNextToken",
          "error":{
            "code":"InvalidNextToken",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DescribeAutoScalingNotificationTypes":{
      "name":"DescribeAutoScalingNotificationTypes",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "output":{
        "shape":"DescribeAutoScalingNotificationTypesAnswer",
        "resultWrapper":"DescribeAutoScalingNotificationTypesResult"
      }
    },
    "DescribeLaunchConfigurations":{
      "name":"DescribeLaunchConfigurations",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"LaunchConfigurationNamesType"},
      "output":{
        "shape":"LaunchConfigurationsType",
        "resultWrapper":"DescribeLaunchConfigurationsResult"
      },
      "errors":[
        {
          "shape":"InvalidNextToken",
          "error":{
            "code":"InvalidNextToken",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DescribeLifecycleHookTypes":{
      "name":"DescribeLifecycleHookTypes",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "output":{
        "shape":"DescribeLifecycleHookTypesAnswer",
        "resultWrapper":"DescribeLifecycleHookTypesResult"
      }
    },
    "DescribeLifecycleHooks":{
      "name":"DescribeLifecycleHooks",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeLifecycleHooksType"},
      "output":{
        "shape":"DescribeLifecycleHooksAnswer",
        "resultWrapper":"DescribeLifecycleHooksResult"
      }
    },
    "DescribeMetricCollectionTypes":{
      "name":"DescribeMetricCollectionTypes",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "output":{
        "shape":"DescribeMetricCollectionTypesAnswer",
        "resultWrapper":"DescribeMetricCollectionTypesResult"
      }
    },
    "DescribeNotificationConfigurations":{
      "name":"DescribeNotificationConfigurations",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeNotificationConfigurationsType"},
      "output":{
        "shape":"DescribeNotificationConfigurationsAnswer",
        "resultWrapper":"DescribeNotificationConfigurationsResult"
      },
      "errors":[
        {
          "shape":"InvalidNextToken",
          "error":{
            "code":"InvalidNextToken",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DescribePolicies":{
      "name":"DescribePolicies",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribePoliciesType"},
      "output":{
        "shape":"PoliciesType",
        "resultWrapper":"DescribePoliciesResult"
      },
      "errors":[
        {
          "shape":"InvalidNextToken",
          "error":{
            "code":"InvalidNextToken",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DescribeScalingActivities":{
      "name":"DescribeScalingActivities",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeScalingActivitiesType"},
      "output":{
        "shape":"ActivitiesType",
        "resultWrapper":"DescribeScalingActivitiesResult"
      },
      "errors":[
        {
          "shape":"InvalidNextToken",
          "error":{
            "code":"InvalidNextToken",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DescribeScalingProcessTypes":{
      "name":"DescribeScalingProcessTypes",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "output":{
        "shape":"ProcessesType",
        "resultWrapper":"DescribeScalingProcessTypesResult"
      }
    },
    "DescribeScheduledActions":{
      "name":"DescribeScheduledActions",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeScheduledActionsType"},
      "output":{
        "shape":"ScheduledActionsType",
        "resultWrapper":"DescribeScheduledActionsResult"
      },
      "errors":[
        {
          "shape":"InvalidNextToken",
          "error":{
            "code":"InvalidNextToken",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DescribeTags":{
      "name":"DescribeTags",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeTagsType"},
      "output":{
        "shape":"TagsType",
        "resultWrapper":"DescribeTagsResult"
      },
      "errors":[
        {
          "shape":"InvalidNextToken",
          "error":{
            "code":"InvalidNextToken",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DescribeTerminationPolicyTypes":{
      "name":"DescribeTerminationPolicyTypes",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "output":{
        "shape":"DescribeTerminationPolicyTypesAnswer",
        "resultWrapper":"DescribeTerminationPolicyTypesResult"
      }
    },
    "DetachInstances":{
      "name":"DetachInstances",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DetachInstancesQuery"},
      "output":{
        "shape":"DetachInstancesAnswer",
        "resultWrapper":"DetachInstancesResult"
      }
    },
    "DisableMetricsCollection":{
      "name":"DisableMetricsCollection",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DisableMetricsCollectionQuery"}
    },
    "EnableMetricsCollection":{
      "name":"EnableMetricsCollection",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"EnableMetricsCollectionQuery"}
    },
    "EnterStandby":{
      "name":"EnterStandby",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"EnterStandbyQuery"},
      "output":{
        "shape":"EnterStandbyAnswer",
        "resultWrapper":"EnterStandbyResult"
      }
    },
    "ExecutePolicy":{
      "name":"ExecutePolicy",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ExecutePolicyType"},
      "errors":[
        {
          "shape":"ScalingActivityInProgressFault",
          "error":{
            "code":"ScalingActivityInProgress",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "ExitStandby":{
      "name":"ExitStandby",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ExitStandbyQuery"},
      "output":{
        "shape":"ExitStandbyAnswer",
        "resultWrapper":"ExitStandbyResult"
      }
    },
    "PutLifecycleHook":{
      "name":"PutLifecycleHook",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"PutLifecycleHookType"},
      "output":{
        "shape":"PutLifecycleHookAnswer",
        "resultWrapper":"PutLifecycleHookResult"
      },
      "errors":[
        {
          "shape":"LimitExceededFault",
          "error":{
            "code":"LimitExceeded",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "PutNotificationConfiguration":{
      "name":"PutNotificationConfiguration",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"PutNotificationConfigurationType"},
      "errors":[
        {
          "shape":"LimitExceededFault",
          "error":{
            "code":"LimitExceeded",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "PutScalingPolicy":{
      "name":"PutScalingPolicy",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"PutScalingPolicyType"},
      "output":{
        "shape":"PolicyARNType",
        "resultWrapper":"PutScalingPolicyResult"
      },
      "errors":[
        {
          "shape":"LimitExceededFault",
          "error":{
            "code":"LimitExceeded",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "PutScheduledUpdateGroupAction":{
      "name":"PutScheduledUpdateGroupAction",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"PutScheduledUpdateGroupActionType"},
      "errors":[
        {
          "shape":"AlreadyExistsFault",
          "error":{
            "code":"AlreadyExists",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"LimitExceededFault",
          "error":{
            "code":"LimitExceeded",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "RecordLifecycleActionHeartbeat":{
      "name":"RecordLifecycleActionHeartbeat",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"RecordLifecycleActionHeartbeatType"},
      "output":{
        "shape":"RecordLifecycleActionHeartbeatAnswer",
        "resultWrapper":"RecordLifecycleActionHeartbeatResult"
      }
    },
    "ResumeProcesses":{
      "name":"ResumeProcesses",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ScalingProcessQuery"}
    },
    "SetDesiredCapacity":{
      "name":"SetDesiredCapacity",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"SetDesiredCapacityType"},
      "errors":[
        {
          "shape":"ScalingActivityInProgressFault",
          "error":{
            "code":"ScalingActivityInProgress",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "SetInstanceHealth":{
      "name":"SetInstanceHealth",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"SetInstanceHealthQuery"}
    },
    "SuspendProcesses":{
      "name":"SuspendProcesses",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ScalingProcessQuery"}
    },
    "TerminateInstanceInAutoScalingGroup":{
      "name":"TerminateInstanceInAutoScalingGroup",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"TerminateInstanceInAutoScalingGroupType"},
      "output":{
        "shape":"ActivityType",
        "resultWrapper":"TerminateInstanceInAutoScalingGroupResult"
      },
      "errors":[
        {
          "shape":"ScalingActivityInProgressFault",
          "error":{
            "code":"ScalingActivityInProgress",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "UpdateAutoScalingGroup":{
      "name":"UpdateAutoScalingGroup",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"UpdateAutoScalingGroupType"},
      "errors":[
        {
          "shape":"ScalingActivityInProgressFault",
          "error":{
            "code":"ScalingActivityInProgress",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    }
  },
  "shapes":{
    "Activities":{
      "type":"list",
      "member":{"shape":"Activity"}
    },
    "ActivitiesType":{
      "type":"structure",
      "required":["Activities"],
      "members":{
        "Activities":{"shape":"Activities"},
        "NextToken":{"shape":"XmlString"}
      }
    },
    "Activity":{
      "type":"structure",
      "required":[
        "ActivityId",
        "AutoScalingGroupName",
        "Cause",
        "StartTime",
        "StatusCode"
      ],
      "members":{
        "ActivityId":{"shape":"XmlString"},
        "AutoScalingGroupName":{"shape":"XmlStringMaxLen255"},
        "Description":{"shape":"XmlString"},
        "Cause":{"shape":"XmlStringMaxLen1023"},
        "StartTime":{"shape":"TimestampType"},
        "EndTime":{"shape":"TimestampType"},
        "StatusCode":{"shape":"ScalingActivityStatusCode"},
        "StatusMessage":{"shape":"XmlStringMaxLen255"},
        "Progress":{"shape":"Progress"},
        "Details":{"shape":"XmlString"}
      }
    },
    "ActivityIds":{
      "type":"list",
      "member":{"shape":"XmlString"}
    },
    "ActivityType":{
      "type":"structure",
      "members":{
        "Activity":{"shape":"Activity"}
      }
    },
    "AdjustmentType":{
      "type":"structure",
      "members":{
        "AdjustmentType":{"shape":"XmlStringMaxLen255"}
      }
    },
    "AdjustmentTypes":{
      "type":"list",
      "member":{"shape":"AdjustmentType"}
    },
    "Alarm":{
      "type":"structure",
      "members":{
        "AlarmName":{"shape":"XmlStringMaxLen255"},
        "AlarmARN":{"shape":"ResourceName"}
      }
    },
    "Alarms":{
      "type":"list",
      "member":{"shape":"Alarm"}
    },
    "AlreadyExistsFault":{
      "type":"structure",
      "members":{
        "message":{"shape":"XmlStringMaxLen255"}
      },
      "error":{
        "code":"AlreadyExists",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "AsciiStringMaxLen255":{
      "type":"string",
      "min":1,
      "max":255,
      "pattern":"[A-Za-z0-9\\-_\\/]+"
    },
    "AssociatePublicIpAddress":{"type":"boolean"},
    "AttachInstancesQuery":{
      "type":"structure",
      "required":["AutoScalingGroupName"],
      "members":{
        "InstanceIds":{"shape":"InstanceIds"},
        "AutoScalingGroupName":{"shape":"ResourceName"}
      }
    },
    "AutoScalingGroup":{
      "type":"structure",
      "required":[
        "AutoScalingGroupName",
        "LaunchConfigurationName",
        "MinSize",
        "MaxSize",
        "DesiredCapacity",
        "DefaultCooldown",
        "AvailabilityZones",
        "HealthCheckType",
        "CreatedTime"
      ],
      "members":{
        "AutoScalingGroupName":{"shape":"XmlStringMaxLen255"},
        "AutoScalingGroupARN":{"shape":"ResourceName"},
        "LaunchConfigurationName":{"shape":"XmlStringMaxLen255"},
        "MinSize":{"shape":"AutoScalingGroupMinSize"},
        "MaxSize":{"shape":"AutoScalingGroupMaxSize"},
        "DesiredCapacity":{"shape":"AutoScalingGroupDesiredCapacity"},
        "DefaultCooldown":{"shape":"Cooldown"},
        "AvailabilityZones":{"shape":"AvailabilityZones"},
        "LoadBalancerNames":{"shape":"LoadBalancerNames"},
        "HealthCheckType":{"shape":"XmlStringMaxLen32"},
        "HealthCheckGracePeriod":{"shape":"HealthCheckGracePeriod"},
        "Instances":{"shape":"Instances"},
        "CreatedTime":{"shape":"TimestampType"},
        "SuspendedProcesses":{"shape":"SuspendedProcesses"},
        "PlacementGroup":{"shape":"XmlStringMaxLen255"},
        "VPCZoneIdentifier":{"shape":"XmlStringMaxLen255"},
        "EnabledMetrics":{"shape":"EnabledMetrics"},
        "Status":{"shape":"XmlStringMaxLen255"},
        "Tags":{"shape":"TagDescriptionList"},
        "TerminationPolicies":{"shape":"TerminationPolicies"}
      }
    },
    "AutoScalingGroupDesiredCapacity":{"type":"integer"},
    "AutoScalingGroupMaxSize":{"type":"integer"},
    "AutoScalingGroupMinSize":{"type":"integer"},
    "AutoScalingGroupNames":{
      "type":"list",
      "member":{"shape":"ResourceName"}
    },
    "AutoScalingGroupNamesType":{
      "type":"structure",
      "members":{
        "AutoScalingGroupNames":{"shape":"AutoScalingGroupNames"},
        "NextToken":{"shape":"XmlString"},
        "MaxRecords":{"shape":"MaxRecords"}
      }
    },
    "AutoScalingGroups":{
      "type":"list",
      "member":{"shape":"AutoScalingGroup"}
    },
    "AutoScalingGroupsType":{
      "type":"structure",
      "required":["AutoScalingGroups"],
      "members":{
        "AutoScalingGroups":{"shape":"AutoScalingGroups"},
        "NextToken":{"shape":"XmlString"}
      }
    },
    "AutoScalingInstanceDetails":{
      "type":"structure",
      "required":[
        "InstanceId",
        "AutoScalingGroupName",
        "AvailabilityZone",
        "LifecycleState",
        "HealthStatus",
        "LaunchConfigurationName"
      ],
      "members":{
        "InstanceId":{"shape":"XmlStringMaxLen16"},
        "AutoScalingGroupName":{"shape":"XmlStringMaxLen255"},
        "AvailabilityZone":{"shape":"XmlStringMaxLen255"},
        "LifecycleState":{"shape":"XmlStringMaxLen32"},
        "HealthStatus":{"shape":"XmlStringMaxLen32"},
        "LaunchConfigurationName":{"shape":"XmlStringMaxLen255"}
      }
    },
    "AutoScalingInstances":{
      "type":"list",
      "member":{"shape":"AutoScalingInstanceDetails"}
    },
    "AutoScalingInstancesType":{
      "type":"structure",
      "members":{
        "AutoScalingInstances":{"shape":"AutoScalingInstances"},
        "NextToken":{"shape":"XmlString"}
      }
    },
    "AutoScalingNotificationTypes":{
      "type":"list",
      "member":{"shape":"XmlStringMaxLen255"}
    },
    "AvailabilityZones":{
      "type":"list",
      "member":{"shape":"XmlStringMaxLen255"},
      "min":1
    },
    "BlockDeviceEbsDeleteOnTermination":{"type":"boolean"},
    "BlockDeviceEbsIops":{
      "type":"integer",
      "min":100,
      "max":4000
    },
    "BlockDeviceEbsVolumeSize":{
      "type":"integer",
      "min":1,
      "max":1024
    },
    "BlockDeviceEbsVolumeType":{
      "type":"string",
      "min":1,
      "max":255
    },
    "BlockDeviceMapping":{
      "type":"structure",
      "required":["DeviceName"],
      "members":{
        "VirtualName":{"shape":"XmlStringMaxLen255"},
        "DeviceName":{"shape":"XmlStringMaxLen255"},
        "Ebs":{"shape":"Ebs"},
        "NoDevice":{"shape":"NoDevice"}
      }
    },
    "BlockDeviceMappings":{
      "type":"list",
      "member":{"shape":"BlockDeviceMapping"}
    },
    "CompleteLifecycleActionAnswer":{
      "type":"structure",
      "members":{
      }
    },
    "CompleteLifecycleActionType":{
      "type":"structure",
      "required":[
        "LifecycleHookName",
        "AutoScalingGroupName",
        "LifecycleActionToken",
        "LifecycleActionResult"
      ],
      "members":{
        "LifecycleHookName":{"shape":"AsciiStringMaxLen255"},
        "AutoScalingGroupName":{"shape":"ResourceName"},
        "LifecycleActionToken":{"shape":"LifecycleActionToken"},
        "LifecycleActionResult":{"shape":"LifecycleActionResult"}
      }
    },
    "Cooldown":{"type":"integer"},
    "CreateAutoScalingGroupType":{
      "type":"structure",
      "required":[
        "AutoScalingGroupName",
        "MinSize",
        "MaxSize"
      ],
      "members":{
        "AutoScalingGroupName":{"shape":"XmlStringMaxLen255"},
        "LaunchConfigurationName":{"shape":"ResourceName"},
        "InstanceId":{"shape":"XmlStringMaxLen16"},
        "MinSize":{"shape":"AutoScalingGroupMinSize"},
        "MaxSize":{"shape":"AutoScalingGroupMaxSize"},
        "DesiredCapacity":{"shape":"AutoScalingGroupDesiredCapacity"},
        "DefaultCooldown":{"shape":"Cooldown"},
        "AvailabilityZones":{"shape":"AvailabilityZones"},
        "LoadBalancerNames":{"shape":"LoadBalancerNames"},
        "HealthCheckType":{"shape":"XmlStringMaxLen32"},
        "HealthCheckGracePeriod":{"shape":"HealthCheckGracePeriod"},
        "PlacementGroup":{"shape":"XmlStringMaxLen255"},
        "VPCZoneIdentifier":{"shape":"XmlStringMaxLen255"},
        "TerminationPolicies":{"shape":"TerminationPolicies"},
        "Tags":{"shape":"Tags"}
      }
    },
    "CreateLaunchConfigurationType":{
      "type":"structure",
      "required":["LaunchConfigurationName"],
      "members":{
        "LaunchConfigurationName":{"shape":"XmlStringMaxLen255"},
        "ImageId":{"shape":"XmlStringMaxLen255"},
        "KeyName":{"shape":"XmlStringMaxLen255"},
        "SecurityGroups":{"shape":"SecurityGroups"},
        "UserData":{"shape":"XmlStringUserData"},
        "InstanceId":{"shape":"XmlStringMaxLen16"},
        "InstanceType":{"shape":"XmlStringMaxLen255"},
        "KernelId":{"shape":"XmlStringMaxLen255"},
        "RamdiskId":{"shape":"XmlStringMaxLen255"},
        "BlockDeviceMappings":{"shape":"BlockDeviceMappings"},
        "InstanceMonitoring":{"shape":"InstanceMonitoring"},
        "SpotPrice":{"shape":"SpotPrice"},
        "IamInstanceProfile":{"shape":"XmlStringMaxLen1600"},
        "EbsOptimized":{"shape":"EbsOptimized"},
        "AssociatePublicIpAddress":{"shape":"AssociatePublicIpAddress"},
        "PlacementTenancy":{"shape":"XmlStringMaxLen64"}
      }
    },
    "CreateOrUpdateTagsType":{
      "type":"structure",
      "required":["Tags"],
      "members":{
        "Tags":{"shape":"Tags"}
      }
    },
    "DeleteAutoScalingGroupType":{
      "type":"structure",
      "required":["AutoScalingGroupName"],
      "members":{
        "AutoScalingGroupName":{"shape":"ResourceName"},
        "ForceDelete":{"shape":"ForceDelete"}
      }
    },
    "DeleteLifecycleHookAnswer":{
      "type":"structure",
      "members":{
      }
    },
    "DeleteLifecycleHookType":{
      "type":"structure",
      "required":[
        "LifecycleHookName",
        "AutoScalingGroupName"
      ],
      "members":{
        "LifecycleHookName":{"shape":"AsciiStringMaxLen255"},
        "AutoScalingGroupName":{"shape":"ResourceName"}
      }
    },
    "DeleteNotificationConfigurationType":{
      "type":"structure",
      "required":[
        "AutoScalingGroupName",
        "TopicARN"
      ],
      "members":{
        "AutoScalingGroupName":{"shape":"ResourceName"},
        "TopicARN":{"shape":"ResourceName"}
      }
    },
    "DeletePolicyType":{
      "type":"structure",
      "required":["PolicyName"],
      "members":{
        "AutoScalingGroupName":{"shape":"ResourceName"},
        "PolicyName":{"shape":"ResourceName"}
      }
    },
    "DeleteScheduledActionType":{
      "type":"structure",
      "required":["ScheduledActionName"],
      "members":{
        "AutoScalingGroupName":{"shape":"ResourceName"},
        "ScheduledActionName":{"shape":"ResourceName"}
      }
    },
    "DeleteTagsType":{
      "type":"structure",
      "required":["Tags"],
      "members":{
        "Tags":{"shape":"Tags"}
      }
    },
    "DescribeAccountLimitsAnswer":{
      "type":"structure",
      "members":{
        "MaxNumberOfAutoScalingGroups":{"shape":"MaxNumberOfAutoScalingGroups"},
        "MaxNumberOfLaunchConfigurations":{"shape":"MaxNumberOfLaunchConfigurations"}
      }
    },
    "DescribeAdjustmentTypesAnswer":{
      "type":"structure",
      "members":{
        "AdjustmentTypes":{"shape":"AdjustmentTypes"}
      }
    },
    "DescribeAutoScalingInstancesType":{
      "type":"structure",
      "members":{
        "InstanceIds":{"shape":"InstanceIds"},
        "MaxRecords":{"shape":"MaxRecords"},
        "NextToken":{"shape":"XmlString"}
      }
    },
    "DescribeAutoScalingNotificationTypesAnswer":{
      "type":"structure",
      "members":{
        "AutoScalingNotificationTypes":{"shape":"AutoScalingNotificationTypes"}
      }
    },
    "DescribeLifecycleHookTypesAnswer":{
      "type":"structure",
      "members":{
        "LifecycleHookTypes":{"shape":"AutoScalingNotificationTypes"}
      }
    },
    "DescribeLifecycleHooksAnswer":{
      "type":"structure",
      "members":{
        "LifecycleHooks":{"shape":"LifecycleHooks"}
      }
    },
    "DescribeLifecycleHooksType":{
      "type":"structure",
      "required":["AutoScalingGroupName"],
      "members":{
        "AutoScalingGroupName":{"shape":"ResourceName"},
        "LifecycleHookNames":{"shape":"LifecycleHookNames"}
      }
    },
    "DescribeMetricCollectionTypesAnswer":{
      "type":"structure",
      "members":{
        "Metrics":{"shape":"MetricCollectionTypes"},
        "Granularities":{"shape":"MetricGranularityTypes"}
      }
    },
    "DescribeNotificationConfigurationsAnswer":{
      "type":"structure",
      "required":["NotificationConfigurations"],
      "members":{
        "NotificationConfigurations":{"shape":"NotificationConfigurations"},
        "NextToken":{"shape":"XmlString"}
      }
    },
    "DescribeNotificationConfigurationsType":{
      "type":"structure",
      "members":{
        "AutoScalingGroupNames":{"shape":"AutoScalingGroupNames"},
        "NextToken":{"shape":"XmlString"},
        "MaxRecords":{"shape":"MaxRecords"}
      }
    },
    "DescribePoliciesType":{
      "type":"structure",
      "members":{
        "AutoScalingGroupName":{"shape":"ResourceName"},
        "PolicyNames":{"shape":"PolicyNames"},
        "NextToken":{"shape":"XmlString"},
        "MaxRecords":{"shape":"MaxRecords"}
      }
    },
    "DescribeScalingActivitiesType":{
      "type":"structure",
      "members":{
        "ActivityIds":{"shape":"ActivityIds"},
        "AutoScalingGroupName":{"shape":"ResourceName"},
        "MaxRecords":{"shape":"MaxRecords"},
        "NextToken":{"shape":"XmlString"}
      }
    },
    "DescribeScheduledActionsType":{
      "type":"structure",
      "members":{
        "AutoScalingGroupName":{"shape":"ResourceName"},
        "ScheduledActionNames":{"shape":"ScheduledActionNames"},
        "StartTime":{"shape":"TimestampType"},
        "EndTime":{"shape":"TimestampType"},
        "NextToken":{"shape":"XmlString"},
        "MaxRecords":{"shape":"MaxRecords"}
      }
    },
    "DescribeTagsType":{
      "type":"structure",
      "members":{
        "Filters":{"shape":"Filters"},
        "NextToken":{"shape":"XmlString"},
        "MaxRecords":{"shape":"MaxRecords"}
      }
    },
    "DescribeTerminationPolicyTypesAnswer":{
      "type":"structure",
      "members":{
        "TerminationPolicyTypes":{"shape":"TerminationPolicies"}
      }
    },
    "DetachInstancesAnswer":{
      "type":"structure",
      "members":{
        "Activities":{"shape":"Activities"}
      }
    },
    "DetachInstancesQuery":{
      "type":"structure",
      "required":[
        "AutoScalingGroupName",
        "ShouldDecrementDesiredCapacity"
      ],
      "members":{
        "InstanceIds":{"shape":"InstanceIds"},
        "AutoScalingGroupName":{"shape":"ResourceName"},
        "ShouldDecrementDesiredCapacity":{"shape":"ShouldDecrementDesiredCapacity"}
      }
    },
    "DisableMetricsCollectionQuery":{
      "type":"structure",
      "required":["AutoScalingGroupName"],
      "members":{
        "AutoScalingGroupName":{"shape":"ResourceName"},
        "Metrics":{"shape":"Metrics"}
      }
    },
    "Ebs":{
      "type":"structure",
      "members":{
        "SnapshotId":{"shape":"XmlStringMaxLen255"},
        "VolumeSize":{"shape":"BlockDeviceEbsVolumeSize"},
        "VolumeType":{"shape":"BlockDeviceEbsVolumeType"},
        "DeleteOnTermination":{"shape":"BlockDeviceEbsDeleteOnTermination"},
        "Iops":{"shape":"BlockDeviceEbsIops"}
      }
    },
    "EbsOptimized":{"type":"boolean"},
    "EnableMetricsCollectionQuery":{
      "type":"structure",
      "required":[
        "AutoScalingGroupName",
        "Granularity"
      ],
      "members":{
        "AutoScalingGroupName":{"shape":"ResourceName"},
        "Metrics":{"shape":"Metrics"},
        "Granularity":{"shape":"XmlStringMaxLen255"}
      }
    },
    "EnabledMetric":{
      "type":"structure",
      "members":{
        "Metric":{"shape":"XmlStringMaxLen255"},
        "Granularity":{"shape":"XmlStringMaxLen255"}
      }
    },
    "EnabledMetrics":{
      "type":"list",
      "member":{"shape":"EnabledMetric"}
    },
    "EnterStandbyAnswer":{
      "type":"structure",
      "members":{
        "Activities":{"shape":"Activities"}
      }
    },
    "EnterStandbyQuery":{
      "type":"structure",
      "required":[
        "AutoScalingGroupName",
        "ShouldDecrementDesiredCapacity"
      ],
      "members":{
        "InstanceIds":{"shape":"InstanceIds"},
        "AutoScalingGroupName":{"shape":"ResourceName"},
        "ShouldDecrementDesiredCapacity":{"shape":"ShouldDecrementDesiredCapacity"}
      }
    },
    "ExecutePolicyType":{
      "type":"structure",
      "required":["PolicyName"],
      "members":{
        "AutoScalingGroupName":{"shape":"ResourceName"},
        "PolicyName":{"shape":"ResourceName"},
        "HonorCooldown":{"shape":"HonorCooldown"}
      }
    },
    "ExitStandbyAnswer":{
      "type":"structure",
      "members":{
        "Activities":{"shape":"Activities"}
      }
    },
    "ExitStandbyQuery":{
      "type":"structure",
      "required":["AutoScalingGroupName"],
      "members":{
        "InstanceIds":{"shape":"InstanceIds"},
        "AutoScalingGroupName":{"shape":"ResourceName"}
      }
    },
    "Filter":{
      "type":"structure",
      "members":{
        "Name":{"shape":"XmlString"},
        "Values":{"shape":"Values"}
      }
    },
    "Filters":{
      "type":"list",
      "member":{"shape":"Filter"}
    },
    "ForceDelete":{"type":"boolean"},
    "GlobalTimeout":{"type":"integer"},
    "HealthCheckGracePeriod":{"type":"integer"},
    "HeartbeatTimeout":{"type":"integer"},
    "HonorCooldown":{"type":"boolean"},
    "Instance":{
      "type":"structure",
      "required":[
        "InstanceId",
        "AvailabilityZone",
        "LifecycleState",
        "HealthStatus",
        "LaunchConfigurationName"
      ],
      "members":{
        "InstanceId":{"shape":"XmlStringMaxLen16"},
        "AvailabilityZone":{"shape":"XmlStringMaxLen255"},
        "LifecycleState":{"shape":"LifecycleState"},
        "HealthStatus":{"shape":"XmlStringMaxLen32"},
        "LaunchConfigurationName":{"shape":"XmlStringMaxLen255"}
      }
    },
    "InstanceIds":{
      "type":"list",
      "member":{"shape":"XmlStringMaxLen16"}
    },
    "InstanceMonitoring":{
      "type":"structure",
      "members":{
        "Enabled":{"shape":"MonitoringEnabled"}
      }
    },
    "Instances":{
      "type":"list",
      "member":{"shape":"Instance"}
    },
    "InvalidNextToken":{
      "type":"structure",
      "members":{
        "message":{"shape":"XmlStringMaxLen255"}
      },
      "error":{
        "code":"InvalidNextToken",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "LaunchConfiguration":{
      "type":"structure",
      "required":[
        "LaunchConfigurationName",
        "ImageId",
        "InstanceType",
        "CreatedTime"
      ],
      "members":{
        "LaunchConfigurationName":{"shape":"XmlStringMaxLen255"},
        "LaunchConfigurationARN":{"shape":"ResourceName"},
        "ImageId":{"shape":"XmlStringMaxLen255"},
        "KeyName":{"shape":"XmlStringMaxLen255"},
        "SecurityGroups":{"shape":"SecurityGroups"},
        "UserData":{"shape":"XmlStringUserData"},
        "InstanceType":{"shape":"XmlStringMaxLen255"},
        "KernelId":{"shape":"XmlStringMaxLen255"},
        "RamdiskId":{"shape":"XmlStringMaxLen255"},
        "BlockDeviceMappings":{"shape":"BlockDeviceMappings"},
        "InstanceMonitoring":{"shape":"InstanceMonitoring"},
        "SpotPrice":{"shape":"SpotPrice"},
        "IamInstanceProfile":{"shape":"XmlStringMaxLen1600"},
        "CreatedTime":{"shape":"TimestampType"},
        "EbsOptimized":{"shape":"EbsOptimized"},
        "AssociatePublicIpAddress":{"shape":"AssociatePublicIpAddress"},
        "PlacementTenancy":{"shape":"XmlStringMaxLen64"}
      }
    },
    "LaunchConfigurationNameType":{
      "type":"structure",
      "required":["LaunchConfigurationName"],
      "members":{
        "LaunchConfigurationName":{"shape":"ResourceName"}
      }
    },
    "LaunchConfigurationNames":{
      "type":"list",
      "member":{"shape":"ResourceName"}
    },
    "LaunchConfigurationNamesType":{
      "type":"structure",
      "members":{
        "LaunchConfigurationNames":{"shape":"LaunchConfigurationNames"},
        "NextToken":{"shape":"XmlString"},
        "MaxRecords":{"shape":"MaxRecords"}
      }
    },
    "LaunchConfigurations":{
      "type":"list",
      "member":{"shape":"LaunchConfiguration"}
    },
    "LaunchConfigurationsType":{
      "type":"structure",
      "required":["LaunchConfigurations"],
      "members":{
        "LaunchConfigurations":{"shape":"LaunchConfigurations"},
        "NextToken":{"shape":"XmlString"}
      }
    },
    "LifecycleActionResult":{"type":"string"},
    "LifecycleActionToken":{
      "type":"string",
      "min":36,
      "max":36
    },
    "LifecycleHook":{
      "type":"structure",
      "members":{
        "LifecycleHookName":{"shape":"AsciiStringMaxLen255"},
        "AutoScalingGroupName":{"shape":"ResourceName"},
        "LifecycleTransition":{"shape":"LifecycleTransition"},
        "NotificationTargetARN":{"shape":"ResourceName"},
        "RoleARN":{"shape":"ResourceName"},
        "NotificationMetadata":{"shape":"XmlStringMaxLen1023"},
        "HeartbeatTimeout":{"shape":"HeartbeatTimeout"},
        "GlobalTimeout":{"shape":"GlobalTimeout"},
        "DefaultResult":{"shape":"LifecycleActionResult"}
      }
    },
    "LifecycleHookNames":{
      "type":"list",
      "member":{"shape":"AsciiStringMaxLen255"}
    },
    "LifecycleHooks":{
      "type":"list",
      "member":{"shape":"LifecycleHook"}
    },
    "LifecycleState":{
      "type":"string",
      "enum":[
        "Pending",
        "Pending:Wait",
        "Pending:Proceed",
        "Quarantined",
        "InService",
        "Terminating",
        "Terminating:Wait",
        "Terminating:Proceed",
        "Terminated",
        "Detaching",
        "Detached",
        "EnteringStandby",
        "Standby"
      ]
    },
    "LifecycleTransition":{"type":"string"},
    "LimitExceededFault":{
      "type":"structure",
      "members":{
        "message":{"shape":"XmlStringMaxLen255"}
      },
      "error":{
        "code":"LimitExceeded",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "LoadBalancerNames":{
      "type":"list",
      "member":{"shape":"XmlStringMaxLen255"}
    },
    "MaxNumberOfAutoScalingGroups":{"type":"integer"},
    "MaxNumberOfLaunchConfigurations":{"type":"integer"},
    "MaxRecords":{"type":"integer"},
    "MetricCollectionType":{
      "type":"structure",
      "members":{
        "Metric":{"shape":"XmlStringMaxLen255"}
      }
    },
    "MetricCollectionTypes":{
      "type":"list",
      "member":{"shape":"MetricCollectionType"}
    },
    "MetricGranularityType":{
      "type":"structure",
      "members":{
        "Granularity":{"shape":"XmlStringMaxLen255"}
      }
    },
    "MetricGranularityTypes":{
      "type":"list",
      "member":{"shape":"MetricGranularityType"}
    },
    "Metrics":{
      "type":"list",
      "member":{"shape":"XmlStringMaxLen255"}
    },
    "MinAdjustmentStep":{"type":"integer"},
    "MonitoringEnabled":{"type":"boolean"},
    "NoDevice":{"type":"boolean"},
    "NotificationConfiguration":{
      "type":"structure",
      "members":{
        "AutoScalingGroupName":{"shape":"ResourceName"},
        "TopicARN":{"shape":"ResourceName"},
        "NotificationType":{"shape":"XmlStringMaxLen255"}
      }
    },
    "NotificationConfigurations":{
      "type":"list",
      "member":{"shape":"NotificationConfiguration"}
    },
    "PoliciesType":{
      "type":"structure",
      "members":{
        "ScalingPolicies":{"shape":"ScalingPolicies"},
        "NextToken":{"shape":"XmlString"}
      }
    },
    "PolicyARNType":{
      "type":"structure",
      "members":{
        "PolicyARN":{"shape":"ResourceName"}
      }
    },
    "PolicyIncrement":{"type":"integer"},
    "PolicyNames":{
      "type":"list",
      "member":{"shape":"ResourceName"}
    },
    "ProcessNames":{
      "type":"list",
      "member":{"shape":"XmlStringMaxLen255"}
    },
    "ProcessType":{
      "type":"structure",
      "required":["ProcessName"],
      "members":{
        "ProcessName":{"shape":"XmlStringMaxLen255"}
      }
    },
    "Processes":{
      "type":"list",
      "member":{"shape":"ProcessType"}
    },
    "ProcessesType":{
      "type":"structure",
      "members":{
        "Processes":{"shape":"Processes"}
      }
    },
    "Progress":{"type":"integer"},
    "PropagateAtLaunch":{"type":"boolean"},
    "PutLifecycleHookAnswer":{
      "type":"structure",
      "members":{
      }
    },
    "PutLifecycleHookType":{
      "type":"structure",
      "required":[
        "LifecycleHookName",
        "AutoScalingGroupName"
      ],
      "members":{
        "LifecycleHookName":{"shape":"AsciiStringMaxLen255"},
        "AutoScalingGroupName":{"shape":"ResourceName"},
        "LifecycleTransition":{"shape":"LifecycleTransition"},
        "RoleARN":{"shape":"ResourceName"},
        "NotificationTargetARN":{"shape":"ResourceName"},
        "NotificationMetadata":{"shape":"XmlStringMaxLen1023"},
        "HeartbeatTimeout":{"shape":"HeartbeatTimeout"},
        "DefaultResult":{"shape":"LifecycleActionResult"}
      }
    },
    "PutNotificationConfigurationType":{
      "type":"structure",
      "required":[
        "AutoScalingGroupName",
        "TopicARN",
        "NotificationTypes"
      ],
      "members":{
        "AutoScalingGroupName":{"shape":"ResourceName"},
        "TopicARN":{"shape":"ResourceName"},
        "NotificationTypes":{"shape":"AutoScalingNotificationTypes"}
      }
    },
    "PutScalingPolicyType":{
      "type":"structure",
      "required":[
        "AutoScalingGroupName",
        "PolicyName",
        "ScalingAdjustment",
        "AdjustmentType"
      ],
      "members":{
        "AutoScalingGroupName":{"shape":"ResourceName"},
        "PolicyName":{"shape":"XmlStringMaxLen255"},
        "ScalingAdjustment":{"shape":"PolicyIncrement"},
        "AdjustmentType":{"shape":"XmlStringMaxLen255"},
        "Cooldown":{"shape":"Cooldown"},
        "MinAdjustmentStep":{"shape":"MinAdjustmentStep"}
      }
    },
    "PutScheduledUpdateGroupActionType":{
      "type":"structure",
      "required":[
        "AutoScalingGroupName",
        "ScheduledActionName"
      ],
      "members":{
        "AutoScalingGroupName":{"shape":"ResourceName"},
        "ScheduledActionName":{"shape":"XmlStringMaxLen255"},
        "Time":{"shape":"TimestampType"},
        "StartTime":{"shape":"TimestampType"},
        "EndTime":{"shape":"TimestampType"},
        "Recurrence":{"shape":"XmlStringMaxLen255"},
        "MinSize":{"shape":"AutoScalingGroupMinSize"},
        "MaxSize":{"shape":"AutoScalingGroupMaxSize"},
        "DesiredCapacity":{"shape":"AutoScalingGroupDesiredCapacity"}
      }
    },
    "RecordLifecycleActionHeartbeatAnswer":{
      "type":"structure",
      "members":{
      }
    },
    "RecordLifecycleActionHeartbeatType":{
      "type":"structure",
      "required":[
        "LifecycleHookName",
        "AutoScalingGroupName",
        "LifecycleActionToken"
      ],
      "members":{
        "LifecycleHookName":{"shape":"AsciiStringMaxLen255"},
        "AutoScalingGroupName":{"shape":"ResourceName"},
        "LifecycleActionToken":{"shape":"LifecycleActionToken"}
      }
    },
    "ResourceInUseFault":{
      "type":"structure",
      "members":{
        "message":{"shape":"XmlStringMaxLen255"}
      },
      "error":{
        "code":"ResourceInUse",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "ResourceName":{
      "type":"string",
      "min":1,
      "max":1600,
      "pattern":"[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*"
    },
    "ScalingActivityInProgressFault":{
      "type":"structure",
      "members":{
        "message":{"shape":"XmlStringMaxLen255"}
      },
      "error":{
        "code":"ScalingActivityInProgress",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "ScalingActivityStatusCode":{
      "type":"string",
      "enum":[
        "WaitingForSpotInstanceRequestId",
        "WaitingForSpotInstanceId",
        "WaitingForInstanceId",
        "PreInService",
        "InProgress",
        "WaitingForELBConnectionDraining",
        "MidLifecycleAction",
        "Successful",
        "Failed",
        "Cancelled"
      ]
    },
    "ScalingPolicies":{
      "type":"list",
      "member":{"shape":"ScalingPolicy"}
    },
    "ScalingPolicy":{
      "type":"structure",
      "members":{
        "AutoScalingGroupName":{"shape":"XmlStringMaxLen255"},
        "PolicyName":{"shape":"XmlStringMaxLen255"},
        "ScalingAdjustment":{"shape":"PolicyIncrement"},
        "AdjustmentType":{"shape":"XmlStringMaxLen255"},
        "Cooldown":{"shape":"Cooldown"},
        "PolicyARN":{"shape":"ResourceName"},
        "Alarms":{"shape":"Alarms"},
        "MinAdjustmentStep":{"shape":"MinAdjustmentStep"}
      }
    },
    "ScalingProcessQuery":{
      "type":"structure",
      "required":["AutoScalingGroupName"],
      "members":{
        "AutoScalingGroupName":{"shape":"ResourceName"},
        "ScalingProcesses":{"shape":"ProcessNames"}
      }
    },
    "ScheduledActionNames":{
      "type":"list",
      "member":{"shape":"ResourceName"}
    },
    "ScheduledActionsType":{
      "type":"structure",
      "members":{
        "ScheduledUpdateGroupActions":{"shape":"ScheduledUpdateGroupActions"},
        "NextToken":{"shape":"XmlString"}
      }
    },
    "ScheduledUpdateGroupAction":{
      "type":"structure",
      "members":{
        "AutoScalingGroupName":{"shape":"XmlStringMaxLen255"},
        "ScheduledActionName":{"shape":"XmlStringMaxLen255"},
        "ScheduledActionARN":{"shape":"ResourceName"},
        "Time":{"shape":"TimestampType"},
        "StartTime":{"shape":"TimestampType"},
        "EndTime":{"shape":"TimestampType"},
        "Recurrence":{"shape":"XmlStringMaxLen255"},
        "MinSize":{"shape":"AutoScalingGroupMinSize"},
        "MaxSize":{"shape":"AutoScalingGroupMaxSize"},
        "DesiredCapacity":{"shape":"AutoScalingGroupDesiredCapacity"}
      }
    },
    "ScheduledUpdateGroupActions":{
      "type":"list",
      "member":{"shape":"ScheduledUpdateGroupAction"}
    },
    "SecurityGroups":{
      "type":"list",
      "member":{"shape":"XmlString"}
    },
    "SetDesiredCapacityType":{
      "type":"structure",
      "required":[
        "AutoScalingGroupName",
        "DesiredCapacity"
      ],
      "members":{
        "AutoScalingGroupName":{"shape":"ResourceName"},
        "DesiredCapacity":{"shape":"AutoScalingGroupDesiredCapacity"},
        "HonorCooldown":{"shape":"HonorCooldown"}
      }
    },
    "SetInstanceHealthQuery":{
      "type":"structure",
      "required":[
        "InstanceId",
        "HealthStatus"
      ],
      "members":{
        "InstanceId":{"shape":"XmlStringMaxLen16"},
        "HealthStatus":{"shape":"XmlStringMaxLen32"},
        "ShouldRespectGracePeriod":{"shape":"ShouldRespectGracePeriod"}
      }
    },
    "ShouldDecrementDesiredCapacity":{"type":"boolean"},
    "ShouldRespectGracePeriod":{"type":"boolean"},
    "SpotPrice":{
      "type":"string",
      "min":1,
      "max":255
    },
    "SuspendedProcess":{
      "type":"structure",
      "members":{
        "ProcessName":{"shape":"XmlStringMaxLen255"},
        "SuspensionReason":{"shape":"XmlStringMaxLen255"}
      }
    },
    "SuspendedProcesses":{
      "type":"list",
      "member":{"shape":"SuspendedProcess"}
    },
    "Tag":{
      "type":"structure",
      "required":["Key"],
      "members":{
        "ResourceId":{"shape":"XmlString"},
        "ResourceType":{"shape":"XmlString"},
        "Key":{"shape":"TagKey"},
        "Value":{"shape":"TagValue"},
        "PropagateAtLaunch":{"shape":"PropagateAtLaunch"}
      }
    },
    "TagDescription":{
      "type":"structure",
      "members":{
        "ResourceId":{"shape":"XmlString"},
        "ResourceType":{"shape":"XmlString"},
        "Key":{"shape":"TagKey"},
        "Value":{"shape":"TagValue"},
        "PropagateAtLaunch":{"shape":"PropagateAtLaunch"}
      }
    },
    "TagDescriptionList":{
      "type":"list",
      "member":{"shape":"TagDescription"}
    },
    "TagKey":{
      "type":"string",
      "min":1,
      "max":128,
      "pattern":"[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*"
    },
    "TagValue":{
      "type":"string",
      "min":0,
      "max":256,
      "pattern":"[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*"
    },
    "Tags":{
      "type":"list",
      "member":{"shape":"Tag"}
    },
    "TagsType":{
      "type":"structure",
      "members":{
        "Tags":{"shape":"TagDescriptionList"},
        "NextToken":{"shape":"XmlString"}
      }
    },
    "TerminateInstanceInAutoScalingGroupType":{
      "type":"structure",
      "required":[
        "InstanceId",
        "ShouldDecrementDesiredCapacity"
      ],
      "members":{
        "InstanceId":{"shape":"XmlStringMaxLen16"},
        "ShouldDecrementDesiredCapacity":{"shape":"ShouldDecrementDesiredCapacity"}
      }
    },
    "TerminationPolicies":{
      "type":"list",
      "member":{"shape":"XmlStringMaxLen1600"}
    },
    "TimestampType":{"type":"timestamp"},
    "UpdateAutoScalingGroupType":{
      "type":"structure",
      "required":["AutoScalingGroupName"],
      "members":{
        "AutoScalingGroupName":{"shape":"ResourceName"},
        "LaunchConfigurationName":{"shape":"ResourceName"},
        "MinSize":{"shape":"AutoScalingGroupMinSize"},
        "MaxSize":{"shape":"AutoScalingGroupMaxSize"},
        "DesiredCapacity":{"shape":"AutoScalingGroupDesiredCapacity"},
        "DefaultCooldown":{"shape":"Cooldown"},
        "AvailabilityZones":{"shape":"AvailabilityZones"},
        "HealthCheckType":{"shape":"XmlStringMaxLen32"},
        "HealthCheckGracePeriod":{"shape":"HealthCheckGracePeriod"},
        "PlacementGroup":{"shape":"XmlStringMaxLen255"},
        "VPCZoneIdentifier":{"shape":"XmlStringMaxLen255"},
        "TerminationPolicies":{"shape":"TerminationPolicies"}
      }
    },
    "Values":{
      "type":"list",
      "member":{"shape":"XmlString"}
    },
    "XmlString":{
      "type":"string",
      "pattern":"[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*"
    },
    "XmlStringMaxLen1023":{
      "type":"string",
      "min":1,
      "max":1023,
      "pattern":"[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*"
    },
    "XmlStringMaxLen16":{
      "type":"string",
      "min":1,
      "max":16,
      "pattern":"[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*"
    },
    "XmlStringMaxLen1600":{
      "type":"string",
      "min":1,
      "max":1600,
      "pattern":"[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*"
    },
    "XmlStringMaxLen255":{
      "type":"string",
      "min":1,
      "max":255,
      "pattern":"[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*"
    },
    "XmlStringMaxLen32":{
      "type":"string",
      "min":1,
      "max":32,
      "pattern":"[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*"
    },
    "XmlStringMaxLen64":{
      "type":"string",
      "min":1,
      "max":64,
      "pattern":"[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*"
    },
    "XmlStringUserData":{
      "type":"string",
      "max":21847,
      "pattern":"[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*"
    }
  }
}
,
"CloudFormation":
{
  "metadata":{
    "apiVersion":"2010-05-15",
    "endpointPrefix":"cloudformation",
    "serviceFullName":"AWS CloudFormation",
    "signatureVersion":"v4",
    "xmlNamespace":"http://cloudformation.amazonaws.com/doc/2010-05-15/",
    "protocol":"query"
  },
  "operations":{
    "CancelUpdateStack":{
      "name":"CancelUpdateStack",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CancelUpdateStackInput"}
    },
    "CreateStack":{
      "name":"CreateStack",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateStackInput"},
      "output":{
        "shape":"CreateStackOutput",
        "resultWrapper":"CreateStackResult"
      },
      "errors":[
        {
          "shape":"LimitExceededException",
          "error":{
            "code":"LimitExceededException",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"AlreadyExistsException",
          "error":{
            "code":"AlreadyExistsException",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InsufficientCapabilitiesException",
          "error":{
            "code":"InsufficientCapabilitiesException",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DeleteStack":{
      "name":"DeleteStack",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteStackInput"}
    },
    "DescribeStackEvents":{
      "name":"DescribeStackEvents",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeStackEventsInput"},
      "output":{
        "shape":"DescribeStackEventsOutput",
        "resultWrapper":"DescribeStackEventsResult"
      }
    },
    "DescribeStackResource":{
      "name":"DescribeStackResource",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeStackResourceInput"},
      "output":{
        "shape":"DescribeStackResourceOutput",
        "resultWrapper":"DescribeStackResourceResult"
      }
    },
    "DescribeStackResources":{
      "name":"DescribeStackResources",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeStackResourcesInput"},
      "output":{
        "shape":"DescribeStackResourcesOutput",
        "resultWrapper":"DescribeStackResourcesResult"
      }
    },
    "DescribeStacks":{
      "name":"DescribeStacks",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeStacksInput"},
      "output":{
        "shape":"DescribeStacksOutput",
        "resultWrapper":"DescribeStacksResult"
      }
    },
    "EstimateTemplateCost":{
      "name":"EstimateTemplateCost",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"EstimateTemplateCostInput"},
      "output":{
        "shape":"EstimateTemplateCostOutput",
        "resultWrapper":"EstimateTemplateCostResult"
      }
    },
    "GetStackPolicy":{
      "name":"GetStackPolicy",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"GetStackPolicyInput"},
      "output":{
        "shape":"GetStackPolicyOutput",
        "resultWrapper":"GetStackPolicyResult"
      }
    },
    "GetTemplate":{
      "name":"GetTemplate",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"GetTemplateInput"},
      "output":{
        "shape":"GetTemplateOutput",
        "resultWrapper":"GetTemplateResult"
      }
    },
    "GetTemplateSummary":{
      "name":"GetTemplateSummary",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"GetTemplateSummaryInput"},
      "output":{
        "shape":"GetTemplateSummaryOutput",
        "resultWrapper":"GetTemplateSummaryResult"
      }
    },
    "ListStackResources":{
      "name":"ListStackResources",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ListStackResourcesInput"},
      "output":{
        "shape":"ListStackResourcesOutput",
        "resultWrapper":"ListStackResourcesResult"
      }
    },
    "ListStacks":{
      "name":"ListStacks",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ListStacksInput"},
      "output":{
        "shape":"ListStacksOutput",
        "resultWrapper":"ListStacksResult"
      }
    },
    "SetStackPolicy":{
      "name":"SetStackPolicy",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"SetStackPolicyInput"}
    },
    "SignalResource":{
      "name":"SignalResource",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"SignalResourceInput"}
    },
    "UpdateStack":{
      "name":"UpdateStack",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"UpdateStackInput"},
      "output":{
        "shape":"UpdateStackOutput",
        "resultWrapper":"UpdateStackResult"
      },
      "errors":[
        {
          "shape":"InsufficientCapabilitiesException",
          "error":{
            "code":"InsufficientCapabilitiesException",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "ValidateTemplate":{
      "name":"ValidateTemplate",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ValidateTemplateInput"},
      "output":{
        "shape":"ValidateTemplateOutput",
        "resultWrapper":"ValidateTemplateResult"
      }
    }
  },
  "shapes":{
    "AlreadyExistsException":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"AlreadyExistsException",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "CancelUpdateStackInput":{
      "type":"structure",
      "required":["StackName"],
      "members":{
        "StackName":{"shape":"StackName"}
      }
    },
    "Capabilities":{
      "type":"list",
      "member":{"shape":"Capability"}
    },
    "CapabilitiesReason":{"type":"string"},
    "Capability":{
      "type":"string",
      "enum":["CAPABILITY_IAM"]
    },
    "CreateStackInput":{
      "type":"structure",
      "required":["StackName"],
      "members":{
        "StackName":{"shape":"StackName"},
        "TemplateBody":{"shape":"TemplateBody"},
        "TemplateURL":{"shape":"TemplateURL"},
        "Parameters":{"shape":"Parameters"},
        "DisableRollback":{"shape":"DisableRollback"},
        "TimeoutInMinutes":{"shape":"TimeoutMinutes"},
        "NotificationARNs":{"shape":"NotificationARNs"},
        "Capabilities":{"shape":"Capabilities"},
        "OnFailure":{"shape":"OnFailure"},
        "StackPolicyBody":{"shape":"StackPolicyBody"},
        "StackPolicyURL":{"shape":"StackPolicyURL"},
        "Tags":{"shape":"Tags"}
      }
    },
    "CreateStackOutput":{
      "type":"structure",
      "members":{
        "StackId":{"shape":"StackId"}
      }
    },
    "CreationTime":{"type":"timestamp"},
    "DeleteStackInput":{
      "type":"structure",
      "required":["StackName"],
      "members":{
        "StackName":{"shape":"StackName"}
      }
    },
    "DeletionTime":{"type":"timestamp"},
    "DescribeStackEventsInput":{
      "type":"structure",
      "members":{
        "StackName":{"shape":"StackName"},
        "NextToken":{"shape":"NextToken"}
      }
    },
    "DescribeStackEventsOutput":{
      "type":"structure",
      "members":{
        "StackEvents":{"shape":"StackEvents"},
        "NextToken":{"shape":"NextToken"}
      }
    },
    "DescribeStackResourceInput":{
      "type":"structure",
      "required":[
        "StackName",
        "LogicalResourceId"
      ],
      "members":{
        "StackName":{"shape":"StackName"},
        "LogicalResourceId":{"shape":"LogicalResourceId"}
      }
    },
    "DescribeStackResourceOutput":{
      "type":"structure",
      "members":{
        "StackResourceDetail":{"shape":"StackResourceDetail"}
      }
    },
    "DescribeStackResourcesInput":{
      "type":"structure",
      "members":{
        "StackName":{"shape":"StackName"},
        "LogicalResourceId":{"shape":"LogicalResourceId"},
        "PhysicalResourceId":{"shape":"PhysicalResourceId"}
      }
    },
    "DescribeStackResourcesOutput":{
      "type":"structure",
      "members":{
        "StackResources":{"shape":"StackResources"}
      }
    },
    "DescribeStacksInput":{
      "type":"structure",
      "members":{
        "StackName":{"shape":"StackName"},
        "NextToken":{"shape":"NextToken"}
      }
    },
    "DescribeStacksOutput":{
      "type":"structure",
      "members":{
        "Stacks":{"shape":"Stacks"},
        "NextToken":{"shape":"NextToken"}
      }
    },
    "Description":{"type":"string"},
    "DisableRollback":{"type":"boolean"},
    "EstimateTemplateCostInput":{
      "type":"structure",
      "members":{
        "TemplateBody":{"shape":"TemplateBody"},
        "TemplateURL":{"shape":"TemplateURL"},
        "Parameters":{"shape":"Parameters"}
      }
    },
    "EstimateTemplateCostOutput":{
      "type":"structure",
      "members":{
        "Url":{"shape":"Url"}
      }
    },
    "EventId":{"type":"string"},
    "GetStackPolicyInput":{
      "type":"structure",
      "required":["StackName"],
      "members":{
        "StackName":{"shape":"StackName"}
      }
    },
    "GetStackPolicyOutput":{
      "type":"structure",
      "members":{
        "StackPolicyBody":{"shape":"StackPolicyBody"}
      }
    },
    "GetTemplateInput":{
      "type":"structure",
      "required":["StackName"],
      "members":{
        "StackName":{"shape":"StackName"}
      }
    },
    "GetTemplateOutput":{
      "type":"structure",
      "members":{
        "TemplateBody":{"shape":"TemplateBody"}
      }
    },
    "GetTemplateSummaryInput":{
      "type":"structure",
      "members":{
        "TemplateBody":{"shape":"TemplateBody"},
        "TemplateURL":{"shape":"TemplateURL"},
        "StackName":{"shape":"StackNameOrId"}
      }
    },
    "GetTemplateSummaryOutput":{
      "type":"structure",
      "members":{
        "Parameters":{"shape":"ParameterDeclarations"},
        "Description":{"shape":"Description"},
        "Capabilities":{"shape":"Capabilities"},
        "CapabilitiesReason":{"shape":"CapabilitiesReason"},
        "Version":{"shape":"Version"}
      }
    },
    "InsufficientCapabilitiesException":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"InsufficientCapabilitiesException",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "LastUpdatedTime":{"type":"timestamp"},
    "LimitExceededException":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"LimitExceededException",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "ListStackResourcesInput":{
      "type":"structure",
      "required":["StackName"],
      "members":{
        "StackName":{"shape":"StackName"},
        "NextToken":{"shape":"NextToken"}
      }
    },
    "ListStackResourcesOutput":{
      "type":"structure",
      "members":{
        "StackResourceSummaries":{"shape":"StackResourceSummaries"},
        "NextToken":{"shape":"NextToken"}
      }
    },
    "ListStacksInput":{
      "type":"structure",
      "members":{
        "NextToken":{"shape":"NextToken"},
        "StackStatusFilter":{"shape":"StackStatusFilter"}
      }
    },
    "ListStacksOutput":{
      "type":"structure",
      "members":{
        "StackSummaries":{"shape":"StackSummaries"},
        "NextToken":{"shape":"NextToken"}
      }
    },
    "LogicalResourceId":{"type":"string"},
    "Metadata":{"type":"string"},
    "NextToken":{
      "type":"string",
      "min":1,
      "max":1024
    },
    "NoEcho":{"type":"boolean"},
    "NotificationARN":{"type":"string"},
    "NotificationARNs":{
      "type":"list",
      "member":{"shape":"NotificationARN"},
      "max":5
    },
    "OnFailure":{
      "type":"string",
      "enum":[
        "DO_NOTHING",
        "ROLLBACK",
        "DELETE"
      ]
    },
    "Output":{
      "type":"structure",
      "members":{
        "OutputKey":{"shape":"OutputKey"},
        "OutputValue":{"shape":"OutputValue"},
        "Description":{"shape":"Description"}
      }
    },
    "OutputKey":{"type":"string"},
    "OutputValue":{"type":"string"},
    "Outputs":{
      "type":"list",
      "member":{"shape":"Output"}
    },
    "Parameter":{
      "type":"structure",
      "members":{
        "ParameterKey":{"shape":"ParameterKey"},
        "ParameterValue":{"shape":"ParameterValue"},
        "UsePreviousValue":{"shape":"UsePreviousValue"}
      }
    },
    "ParameterDeclaration":{
      "type":"structure",
      "members":{
        "ParameterKey":{"shape":"ParameterKey"},
        "DefaultValue":{"shape":"ParameterValue"},
        "ParameterType":{"shape":"ParameterType"},
        "NoEcho":{"shape":"NoEcho"},
        "Description":{"shape":"Description"}
      }
    },
    "ParameterDeclarations":{
      "type":"list",
      "member":{"shape":"ParameterDeclaration"}
    },
    "ParameterKey":{"type":"string"},
    "ParameterType":{"type":"string"},
    "ParameterValue":{"type":"string"},
    "Parameters":{
      "type":"list",
      "member":{"shape":"Parameter"}
    },
    "PhysicalResourceId":{"type":"string"},
    "ResourceProperties":{"type":"string"},
    "ResourceSignalStatus":{
      "type":"string",
      "enum":[
        "SUCCESS",
        "FAILURE"
      ]
    },
    "ResourceSignalUniqueId":{
      "type":"string",
      "min":1,
      "max":64
    },
    "ResourceStatus":{
      "type":"string",
      "enum":[
        "CREATE_IN_PROGRESS",
        "CREATE_FAILED",
        "CREATE_COMPLETE",
        "DELETE_IN_PROGRESS",
        "DELETE_FAILED",
        "DELETE_COMPLETE",
        "DELETE_SKIPPED",
        "UPDATE_IN_PROGRESS",
        "UPDATE_FAILED",
        "UPDATE_COMPLETE"
      ]
    },
    "ResourceStatusReason":{"type":"string"},
    "ResourceType":{"type":"string"},
    "SetStackPolicyInput":{
      "type":"structure",
      "required":["StackName"],
      "members":{
        "StackName":{"shape":"StackName"},
        "StackPolicyBody":{"shape":"StackPolicyBody"},
        "StackPolicyURL":{"shape":"StackPolicyURL"}
      }
    },
    "SignalResourceInput":{
      "type":"structure",
      "required":[
        "StackName",
        "LogicalResourceId",
        "UniqueId",
        "Status"
      ],
      "members":{
        "StackName":{"shape":"StackNameOrId"},
        "LogicalResourceId":{"shape":"LogicalResourceId"},
        "UniqueId":{"shape":"ResourceSignalUniqueId"},
        "Status":{"shape":"ResourceSignalStatus"}
      }
    },
    "Stack":{
      "type":"structure",
      "required":[
        "StackName",
        "CreationTime",
        "StackStatus"
      ],
      "members":{
        "StackId":{"shape":"StackId"},
        "StackName":{"shape":"StackName"},
        "Description":{"shape":"Description"},
        "Parameters":{"shape":"Parameters"},
        "CreationTime":{"shape":"CreationTime"},
        "LastUpdatedTime":{"shape":"LastUpdatedTime"},
        "StackStatus":{"shape":"StackStatus"},
        "StackStatusReason":{"shape":"StackStatusReason"},
        "DisableRollback":{"shape":"DisableRollback"},
        "NotificationARNs":{"shape":"NotificationARNs"},
        "TimeoutInMinutes":{"shape":"TimeoutMinutes"},
        "Capabilities":{"shape":"Capabilities"},
        "Outputs":{"shape":"Outputs"},
        "Tags":{"shape":"Tags"}
      }
    },
    "StackEvent":{
      "type":"structure",
      "required":[
        "StackId",
        "EventId",
        "StackName",
        "Timestamp"
      ],
      "members":{
        "StackId":{"shape":"StackId"},
        "EventId":{"shape":"EventId"},
        "StackName":{"shape":"StackName"},
        "LogicalResourceId":{"shape":"LogicalResourceId"},
        "PhysicalResourceId":{"shape":"PhysicalResourceId"},
        "ResourceType":{"shape":"ResourceType"},
        "Timestamp":{"shape":"Timestamp"},
        "ResourceStatus":{"shape":"ResourceStatus"},
        "ResourceStatusReason":{"shape":"ResourceStatusReason"},
        "ResourceProperties":{"shape":"ResourceProperties"}
      }
    },
    "StackEvents":{
      "type":"list",
      "member":{"shape":"StackEvent"}
    },
    "StackId":{"type":"string"},
    "StackName":{"type":"string"},
    "StackNameOrId":{
      "type":"string",
      "min":1,
      "pattern":"([a-zA-Z][-a-zA-Z0-9]*)|(arn:\\b(aws|aws-us-gov|aws-cn)\\b:[-a-zA-Z0-9:/._+]*)"
    },
    "StackPolicyBody":{
      "type":"string",
      "min":1,
      "max":16384
    },
    "StackPolicyDuringUpdateBody":{
      "type":"string",
      "min":1,
      "max":16384
    },
    "StackPolicyDuringUpdateURL":{
      "type":"string",
      "min":1,
      "max":1350
    },
    "StackPolicyURL":{
      "type":"string",
      "min":1,
      "max":1350
    },
    "StackResource":{
      "type":"structure",
      "required":[
        "LogicalResourceId",
        "ResourceType",
        "Timestamp",
        "ResourceStatus"
      ],
      "members":{
        "StackName":{"shape":"StackName"},
        "StackId":{"shape":"StackId"},
        "LogicalResourceId":{"shape":"LogicalResourceId"},
        "PhysicalResourceId":{"shape":"PhysicalResourceId"},
        "ResourceType":{"shape":"ResourceType"},
        "Timestamp":{"shape":"Timestamp"},
        "ResourceStatus":{"shape":"ResourceStatus"},
        "ResourceStatusReason":{"shape":"ResourceStatusReason"},
        "Description":{"shape":"Description"}
      }
    },
    "StackResourceDetail":{
      "type":"structure",
      "required":[
        "LogicalResourceId",
        "ResourceType",
        "LastUpdatedTimestamp",
        "ResourceStatus"
      ],
      "members":{
        "StackName":{"shape":"StackName"},
        "StackId":{"shape":"StackId"},
        "LogicalResourceId":{"shape":"LogicalResourceId"},
        "PhysicalResourceId":{"shape":"PhysicalResourceId"},
        "ResourceType":{"shape":"ResourceType"},
        "LastUpdatedTimestamp":{"shape":"Timestamp"},
        "ResourceStatus":{"shape":"ResourceStatus"},
        "ResourceStatusReason":{"shape":"ResourceStatusReason"},
        "Description":{"shape":"Description"},
        "Metadata":{"shape":"Metadata"}
      }
    },
    "StackResourceSummaries":{
      "type":"list",
      "member":{"shape":"StackResourceSummary"}
    },
    "StackResourceSummary":{
      "type":"structure",
      "required":[
        "LogicalResourceId",
        "ResourceType",
        "LastUpdatedTimestamp",
        "ResourceStatus"
      ],
      "members":{
        "LogicalResourceId":{"shape":"LogicalResourceId"},
        "PhysicalResourceId":{"shape":"PhysicalResourceId"},
        "ResourceType":{"shape":"ResourceType"},
        "LastUpdatedTimestamp":{"shape":"Timestamp"},
        "ResourceStatus":{"shape":"ResourceStatus"},
        "ResourceStatusReason":{"shape":"ResourceStatusReason"}
      }
    },
    "StackResources":{
      "type":"list",
      "member":{"shape":"StackResource"}
    },
    "StackStatus":{
      "type":"string",
      "enum":[
        "CREATE_IN_PROGRESS",
        "CREATE_FAILED",
        "CREATE_COMPLETE",
        "ROLLBACK_IN_PROGRESS",
        "ROLLBACK_FAILED",
        "ROLLBACK_COMPLETE",
        "DELETE_IN_PROGRESS",
        "DELETE_FAILED",
        "DELETE_COMPLETE",
        "UPDATE_IN_PROGRESS",
        "UPDATE_COMPLETE_CLEANUP_IN_PROGRESS",
        "UPDATE_COMPLETE",
        "UPDATE_ROLLBACK_IN_PROGRESS",
        "UPDATE_ROLLBACK_FAILED",
        "UPDATE_ROLLBACK_COMPLETE_CLEANUP_IN_PROGRESS",
        "UPDATE_ROLLBACK_COMPLETE"
      ]
    },
    "StackStatusFilter":{
      "type":"list",
      "member":{"shape":"StackStatus"}
    },
    "StackStatusReason":{"type":"string"},
    "StackSummaries":{
      "type":"list",
      "member":{"shape":"StackSummary"}
    },
    "StackSummary":{
      "type":"structure",
      "required":[
        "StackName",
        "CreationTime",
        "StackStatus"
      ],
      "members":{
        "StackId":{"shape":"StackId"},
        "StackName":{"shape":"StackName"},
        "TemplateDescription":{"shape":"TemplateDescription"},
        "CreationTime":{"shape":"CreationTime"},
        "LastUpdatedTime":{"shape":"LastUpdatedTime"},
        "DeletionTime":{"shape":"DeletionTime"},
        "StackStatus":{"shape":"StackStatus"},
        "StackStatusReason":{"shape":"StackStatusReason"}
      }
    },
    "Stacks":{
      "type":"list",
      "member":{"shape":"Stack"}
    },
    "Tag":{
      "type":"structure",
      "members":{
        "Key":{"shape":"TagKey"},
        "Value":{"shape":"TagValue"}
      }
    },
    "TagKey":{"type":"string"},
    "TagValue":{"type":"string"},
    "Tags":{
      "type":"list",
      "member":{"shape":"Tag"}
    },
    "TemplateBody":{
      "type":"string",
      "min":1
    },
    "TemplateDescription":{"type":"string"},
    "TemplateParameter":{
      "type":"structure",
      "members":{
        "ParameterKey":{"shape":"ParameterKey"},
        "DefaultValue":{"shape":"ParameterValue"},
        "NoEcho":{"shape":"NoEcho"},
        "Description":{"shape":"Description"}
      }
    },
    "TemplateParameters":{
      "type":"list",
      "member":{"shape":"TemplateParameter"}
    },
    "TemplateURL":{
      "type":"string",
      "min":1,
      "max":1024
    },
    "TimeoutMinutes":{
      "type":"integer",
      "min":1
    },
    "Timestamp":{"type":"timestamp"},
    "UpdateStackInput":{
      "type":"structure",
      "required":["StackName"],
      "members":{
        "StackName":{"shape":"StackName"},
        "TemplateBody":{"shape":"TemplateBody"},
        "TemplateURL":{"shape":"TemplateURL"},
        "UsePreviousTemplate":{"shape":"UsePreviousTemplate"},
        "StackPolicyDuringUpdateBody":{"shape":"StackPolicyDuringUpdateBody"},
        "StackPolicyDuringUpdateURL":{"shape":"StackPolicyDuringUpdateURL"},
        "Parameters":{"shape":"Parameters"},
        "Capabilities":{"shape":"Capabilities"},
        "StackPolicyBody":{"shape":"StackPolicyBody"},
        "StackPolicyURL":{"shape":"StackPolicyURL"},
        "NotificationARNs":{"shape":"NotificationARNs"}
      }
    },
    "UpdateStackOutput":{
      "type":"structure",
      "members":{
        "StackId":{"shape":"StackId"}
      }
    },
    "Url":{"type":"string"},
    "UsePreviousTemplate":{"type":"boolean"},
    "UsePreviousValue":{"type":"boolean"},
    "ValidateTemplateInput":{
      "type":"structure",
      "members":{
        "TemplateBody":{"shape":"TemplateBody"},
        "TemplateURL":{"shape":"TemplateURL"}
      }
    },
    "ValidateTemplateOutput":{
      "type":"structure",
      "members":{
        "Parameters":{"shape":"TemplateParameters"},
        "Description":{"shape":"Description"},
        "Capabilities":{"shape":"Capabilities"},
        "CapabilitiesReason":{"shape":"CapabilitiesReason"}
      }
    },
    "Version":{"type":"string"}
  }
}
,
"CloudFront":
{
  "metadata":{
    "apiVersion":"2014-10-21",
    "endpointPrefix":"cloudfront",
    "globalEndpoint":"cloudfront.amazonaws.com",
    "serviceAbbreviation":"CloudFront",
    "serviceFullName":"Amazon CloudFront",
    "signatureVersion":"v4",
    "protocol":"rest-xml"
  },
  "operations":{
    "CreateCloudFrontOriginAccessIdentity":{
      "name":"CreateCloudFrontOriginAccessIdentity2014_10_21",
      "http":{
        "method":"POST",
        "requestUri":"/2014-10-21/origin-access-identity/cloudfront",
        "responseCode":201
      },
      "input":{"shape":"CreateCloudFrontOriginAccessIdentityRequest"},
      "output":{"shape":"CreateCloudFrontOriginAccessIdentityResult"},
      "errors":[
        {
          "shape":"CloudFrontOriginAccessIdentityAlreadyExists",
          "error":{"httpStatusCode":409},
          "exception":true
        },
        {
          "shape":"MissingBody",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"TooManyCloudFrontOriginAccessIdentities",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InvalidArgument",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InconsistentQuantities",
          "error":{"httpStatusCode":400},
          "exception":true
        }
      ]
    },
    "CreateDistribution":{
      "name":"CreateDistribution2014_10_21",
      "http":{
        "method":"POST",
        "requestUri":"/2014-10-21/distribution",
        "responseCode":201
      },
      "input":{"shape":"CreateDistributionRequest"},
      "output":{"shape":"CreateDistributionResult"},
      "errors":[
        {
          "shape":"CNAMEAlreadyExists",
          "error":{"httpStatusCode":409},
          "exception":true
        },
        {
          "shape":"DistributionAlreadyExists",
          "error":{"httpStatusCode":409},
          "exception":true
        },
        {
          "shape":"InvalidOrigin",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InvalidOriginAccessIdentity",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"AccessDenied",
          "error":{"httpStatusCode":403},
          "exception":true
        },
        {
          "shape":"TooManyTrustedSigners",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"TrustedSignerDoesNotExist",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InvalidViewerCertificate",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"MissingBody",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"TooManyDistributionCNAMEs",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"TooManyDistributions",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InvalidDefaultRootObject",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InvalidRelativePath",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InvalidErrorCode",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InvalidResponseCode",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InvalidArgument",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InvalidRequiredProtocol",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"NoSuchOrigin",
          "error":{"httpStatusCode":404},
          "exception":true
        },
        {
          "shape":"TooManyOrigins",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"TooManyCacheBehaviors",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"TooManyCookieNamesInWhiteList",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InvalidForwardCookies",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"TooManyHeadersInForwardedValues",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InvalidHeadersForS3Origin",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InconsistentQuantities",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"TooManyCertificates",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InvalidLocationCode",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InvalidGeoRestrictionParameter",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InvalidProtocolSettings",
          "error":{"httpStatusCode":400},
          "exception":true
        }
      ]
    },
    "CreateInvalidation":{
      "name":"CreateInvalidation2014_10_21",
      "http":{
        "method":"POST",
        "requestUri":"/2014-10-21/distribution/{DistributionId}/invalidation",
        "responseCode":201
      },
      "input":{"shape":"CreateInvalidationRequest"},
      "output":{"shape":"CreateInvalidationResult"},
      "errors":[
        {
          "shape":"AccessDenied",
          "error":{"httpStatusCode":403},
          "exception":true
        },
        {
          "shape":"MissingBody",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InvalidArgument",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"NoSuchDistribution",
          "error":{"httpStatusCode":404},
          "exception":true
        },
        {
          "shape":"BatchTooLarge",
          "error":{"httpStatusCode":413},
          "exception":true
        },
        {
          "shape":"TooManyInvalidationsInProgress",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InconsistentQuantities",
          "error":{"httpStatusCode":400},
          "exception":true
        }
      ]
    },
    "CreateStreamingDistribution":{
      "name":"CreateStreamingDistribution2014_10_21",
      "http":{
        "method":"POST",
        "requestUri":"/2014-10-21/streaming-distribution",
        "responseCode":201
      },
      "input":{"shape":"CreateStreamingDistributionRequest"},
      "output":{"shape":"CreateStreamingDistributionResult"},
      "errors":[
        {
          "shape":"CNAMEAlreadyExists",
          "error":{"httpStatusCode":409},
          "exception":true
        },
        {
          "shape":"StreamingDistributionAlreadyExists",
          "error":{"httpStatusCode":409},
          "exception":true
        },
        {
          "shape":"InvalidOrigin",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InvalidOriginAccessIdentity",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"AccessDenied",
          "error":{"httpStatusCode":403},
          "exception":true
        },
        {
          "shape":"TooManyTrustedSigners",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"TrustedSignerDoesNotExist",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"MissingBody",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"TooManyStreamingDistributionCNAMEs",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"TooManyStreamingDistributions",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InvalidArgument",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InconsistentQuantities",
          "error":{"httpStatusCode":400},
          "exception":true
        }
      ]
    },
    "DeleteCloudFrontOriginAccessIdentity":{
      "name":"DeleteCloudFrontOriginAccessIdentity2014_10_21",
      "http":{
        "method":"DELETE",
        "requestUri":"/2014-10-21/origin-access-identity/cloudfront/{Id}",
        "responseCode":204
      },
      "input":{"shape":"DeleteCloudFrontOriginAccessIdentityRequest"},
      "errors":[
        {
          "shape":"AccessDenied",
          "error":{"httpStatusCode":403},
          "exception":true
        },
        {
          "shape":"InvalidIfMatchVersion",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"NoSuchCloudFrontOriginAccessIdentity",
          "error":{"httpStatusCode":404},
          "exception":true
        },
        {
          "shape":"PreconditionFailed",
          "error":{"httpStatusCode":412},
          "exception":true
        },
        {
          "shape":"CloudFrontOriginAccessIdentityInUse",
          "error":{"httpStatusCode":409},
          "exception":true
        }
      ]
    },
    "DeleteDistribution":{
      "name":"DeleteDistribution2014_10_21",
      "http":{
        "method":"DELETE",
        "requestUri":"/2014-10-21/distribution/{Id}",
        "responseCode":204
      },
      "input":{"shape":"DeleteDistributionRequest"},
      "errors":[
        {
          "shape":"AccessDenied",
          "error":{"httpStatusCode":403},
          "exception":true
        },
        {
          "shape":"DistributionNotDisabled",
          "error":{"httpStatusCode":409},
          "exception":true
        },
        {
          "shape":"InvalidIfMatchVersion",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"NoSuchDistribution",
          "error":{"httpStatusCode":404},
          "exception":true
        },
        {
          "shape":"PreconditionFailed",
          "error":{"httpStatusCode":412},
          "exception":true
        }
      ]
    },
    "DeleteStreamingDistribution":{
      "name":"DeleteStreamingDistribution2014_10_21",
      "http":{
        "method":"DELETE",
        "requestUri":"/2014-10-21/streaming-distribution/{Id}",
        "responseCode":204
      },
      "input":{"shape":"DeleteStreamingDistributionRequest"},
      "errors":[
        {
          "shape":"AccessDenied",
          "error":{"httpStatusCode":403},
          "exception":true
        },
        {
          "shape":"StreamingDistributionNotDisabled",
          "error":{"httpStatusCode":409},
          "exception":true
        },
        {
          "shape":"InvalidIfMatchVersion",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"NoSuchStreamingDistribution",
          "error":{"httpStatusCode":404},
          "exception":true
        },
        {
          "shape":"PreconditionFailed",
          "error":{"httpStatusCode":412},
          "exception":true
        }
      ]
    },
    "GetCloudFrontOriginAccessIdentity":{
      "name":"GetCloudFrontOriginAccessIdentity2014_10_21",
      "http":{
        "method":"GET",
        "requestUri":"/2014-10-21/origin-access-identity/cloudfront/{Id}"
      },
      "input":{"shape":"GetCloudFrontOriginAccessIdentityRequest"},
      "output":{"shape":"GetCloudFrontOriginAccessIdentityResult"},
      "errors":[
        {
          "shape":"NoSuchCloudFrontOriginAccessIdentity",
          "error":{"httpStatusCode":404},
          "exception":true
        },
        {
          "shape":"AccessDenied",
          "error":{"httpStatusCode":403},
          "exception":true
        }
      ]
    },
    "GetCloudFrontOriginAccessIdentityConfig":{
      "name":"GetCloudFrontOriginAccessIdentityConfig2014_10_21",
      "http":{
        "method":"GET",
        "requestUri":"/2014-10-21/origin-access-identity/cloudfront/{Id}/config"
      },
      "input":{"shape":"GetCloudFrontOriginAccessIdentityConfigRequest"},
      "output":{"shape":"GetCloudFrontOriginAccessIdentityConfigResult"},
      "errors":[
        {
          "shape":"NoSuchCloudFrontOriginAccessIdentity",
          "error":{"httpStatusCode":404},
          "exception":true
        },
        {
          "shape":"AccessDenied",
          "error":{"httpStatusCode":403},
          "exception":true
        }
      ]
    },
    "GetDistribution":{
      "name":"GetDistribution2014_10_21",
      "http":{
        "method":"GET",
        "requestUri":"/2014-10-21/distribution/{Id}"
      },
      "input":{"shape":"GetDistributionRequest"},
      "output":{"shape":"GetDistributionResult"},
      "errors":[
        {
          "shape":"NoSuchDistribution",
          "error":{"httpStatusCode":404},
          "exception":true
        },
        {
          "shape":"AccessDenied",
          "error":{"httpStatusCode":403},
          "exception":true
        }
      ]
    },
    "GetDistributionConfig":{
      "name":"GetDistributionConfig2014_10_21",
      "http":{
        "method":"GET",
        "requestUri":"/2014-10-21/distribution/{Id}/config"
      },
      "input":{"shape":"GetDistributionConfigRequest"},
      "output":{"shape":"GetDistributionConfigResult"},
      "errors":[
        {
          "shape":"NoSuchDistribution",
          "error":{"httpStatusCode":404},
          "exception":true
        },
        {
          "shape":"AccessDenied",
          "error":{"httpStatusCode":403},
          "exception":true
        }
      ]
    },
    "GetInvalidation":{
      "name":"GetInvalidation2014_10_21",
      "http":{
        "method":"GET",
        "requestUri":"/2014-10-21/distribution/{DistributionId}/invalidation/{Id}"
      },
      "input":{"shape":"GetInvalidationRequest"},
      "output":{"shape":"GetInvalidationResult"},
      "errors":[
        {
          "shape":"NoSuchInvalidation",
          "error":{"httpStatusCode":404},
          "exception":true
        },
        {
          "shape":"NoSuchDistribution",
          "error":{"httpStatusCode":404},
          "exception":true
        },
        {
          "shape":"AccessDenied",
          "error":{"httpStatusCode":403},
          "exception":true
        }
      ]
    },
    "GetStreamingDistribution":{
      "name":"GetStreamingDistribution2014_10_21",
      "http":{
        "method":"GET",
        "requestUri":"/2014-10-21/streaming-distribution/{Id}"
      },
      "input":{"shape":"GetStreamingDistributionRequest"},
      "output":{"shape":"GetStreamingDistributionResult"},
      "errors":[
        {
          "shape":"NoSuchStreamingDistribution",
          "error":{"httpStatusCode":404},
          "exception":true
        },
        {
          "shape":"AccessDenied",
          "error":{"httpStatusCode":403},
          "exception":true
        }
      ]
    },
    "GetStreamingDistributionConfig":{
      "name":"GetStreamingDistributionConfig2014_10_21",
      "http":{
        "method":"GET",
        "requestUri":"/2014-10-21/streaming-distribution/{Id}/config"
      },
      "input":{"shape":"GetStreamingDistributionConfigRequest"},
      "output":{"shape":"GetStreamingDistributionConfigResult"},
      "errors":[
        {
          "shape":"NoSuchStreamingDistribution",
          "error":{"httpStatusCode":404},
          "exception":true
        },
        {
          "shape":"AccessDenied",
          "error":{"httpStatusCode":403},
          "exception":true
        }
      ]
    },
    "ListCloudFrontOriginAccessIdentities":{
      "name":"ListCloudFrontOriginAccessIdentities2014_10_21",
      "http":{
        "method":"GET",
        "requestUri":"/2014-10-21/origin-access-identity/cloudfront"
      },
      "input":{"shape":"ListCloudFrontOriginAccessIdentitiesRequest"},
      "output":{"shape":"ListCloudFrontOriginAccessIdentitiesResult"},
      "errors":[
        {
          "shape":"InvalidArgument",
          "error":{"httpStatusCode":400},
          "exception":true
        }
      ]
    },
    "ListDistributions":{
      "name":"ListDistributions2014_10_21",
      "http":{
        "method":"GET",
        "requestUri":"/2014-10-21/distribution"
      },
      "input":{"shape":"ListDistributionsRequest"},
      "output":{"shape":"ListDistributionsResult"},
      "errors":[
        {
          "shape":"InvalidArgument",
          "error":{"httpStatusCode":400},
          "exception":true
        }
      ]
    },
    "ListInvalidations":{
      "name":"ListInvalidations2014_10_21",
      "http":{
        "method":"GET",
        "requestUri":"/2014-10-21/distribution/{DistributionId}/invalidation"
      },
      "input":{"shape":"ListInvalidationsRequest"},
      "output":{"shape":"ListInvalidationsResult"},
      "errors":[
        {
          "shape":"InvalidArgument",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"NoSuchDistribution",
          "error":{"httpStatusCode":404},
          "exception":true
        },
        {
          "shape":"AccessDenied",
          "error":{"httpStatusCode":403},
          "exception":true
        }
      ]
    },
    "ListStreamingDistributions":{
      "name":"ListStreamingDistributions2014_10_21",
      "http":{
        "method":"GET",
        "requestUri":"/2014-10-21/streaming-distribution"
      },
      "input":{"shape":"ListStreamingDistributionsRequest"},
      "output":{"shape":"ListStreamingDistributionsResult"},
      "errors":[
        {
          "shape":"InvalidArgument",
          "error":{"httpStatusCode":400},
          "exception":true
        }
      ]
    },
    "UpdateCloudFrontOriginAccessIdentity":{
      "name":"UpdateCloudFrontOriginAccessIdentity2014_10_21",
      "http":{
        "method":"PUT",
        "requestUri":"/2014-10-21/origin-access-identity/cloudfront/{Id}/config"
      },
      "input":{"shape":"UpdateCloudFrontOriginAccessIdentityRequest"},
      "output":{"shape":"UpdateCloudFrontOriginAccessIdentityResult"},
      "errors":[
        {
          "shape":"AccessDenied",
          "error":{"httpStatusCode":403},
          "exception":true
        },
        {
          "shape":"IllegalUpdate",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InvalidIfMatchVersion",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"MissingBody",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"NoSuchCloudFrontOriginAccessIdentity",
          "error":{"httpStatusCode":404},
          "exception":true
        },
        {
          "shape":"PreconditionFailed",
          "error":{"httpStatusCode":412},
          "exception":true
        },
        {
          "shape":"InvalidArgument",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InconsistentQuantities",
          "error":{"httpStatusCode":400},
          "exception":true
        }
      ]
    },
    "UpdateDistribution":{
      "name":"UpdateDistribution2014_10_21",
      "http":{
        "method":"PUT",
        "requestUri":"/2014-10-21/distribution/{Id}/config"
      },
      "input":{"shape":"UpdateDistributionRequest"},
      "output":{"shape":"UpdateDistributionResult"},
      "errors":[
        {
          "shape":"AccessDenied",
          "error":{"httpStatusCode":403},
          "exception":true
        },
        {
          "shape":"CNAMEAlreadyExists",
          "error":{"httpStatusCode":409},
          "exception":true
        },
        {
          "shape":"IllegalUpdate",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InvalidIfMatchVersion",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"MissingBody",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"NoSuchDistribution",
          "error":{"httpStatusCode":404},
          "exception":true
        },
        {
          "shape":"PreconditionFailed",
          "error":{"httpStatusCode":412},
          "exception":true
        },
        {
          "shape":"TooManyDistributionCNAMEs",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InvalidDefaultRootObject",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InvalidRelativePath",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InvalidErrorCode",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InvalidResponseCode",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InvalidArgument",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InvalidOriginAccessIdentity",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"TooManyTrustedSigners",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"TrustedSignerDoesNotExist",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InvalidViewerCertificate",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InvalidRequiredProtocol",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"NoSuchOrigin",
          "error":{"httpStatusCode":404},
          "exception":true
        },
        {
          "shape":"TooManyOrigins",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"TooManyCacheBehaviors",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"TooManyCookieNamesInWhiteList",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InvalidForwardCookies",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"TooManyHeadersInForwardedValues",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InvalidHeadersForS3Origin",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InconsistentQuantities",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"TooManyCertificates",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InvalidLocationCode",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InvalidGeoRestrictionParameter",
          "error":{"httpStatusCode":400},
          "exception":true
        }
      ]
    },
    "UpdateStreamingDistribution":{
      "name":"UpdateStreamingDistribution2014_10_21",
      "http":{
        "method":"PUT",
        "requestUri":"/2014-10-21/streaming-distribution/{Id}/config"
      },
      "input":{"shape":"UpdateStreamingDistributionRequest"},
      "output":{"shape":"UpdateStreamingDistributionResult"},
      "errors":[
        {
          "shape":"AccessDenied",
          "error":{"httpStatusCode":403},
          "exception":true
        },
        {
          "shape":"CNAMEAlreadyExists",
          "error":{"httpStatusCode":409},
          "exception":true
        },
        {
          "shape":"IllegalUpdate",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InvalidIfMatchVersion",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"MissingBody",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"NoSuchStreamingDistribution",
          "error":{"httpStatusCode":404},
          "exception":true
        },
        {
          "shape":"PreconditionFailed",
          "error":{"httpStatusCode":412},
          "exception":true
        },
        {
          "shape":"TooManyStreamingDistributionCNAMEs",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InvalidArgument",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InvalidOriginAccessIdentity",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"TooManyTrustedSigners",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"TrustedSignerDoesNotExist",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InconsistentQuantities",
          "error":{"httpStatusCode":400},
          "exception":true
        }
      ]
    }
  },
  "shapes":{
    "AccessDenied":{
      "type":"structure",
      "members":{
        "Message":{"shape":"string"}
      },
      "error":{"httpStatusCode":403},
      "exception":true
    },
    "ActiveTrustedSigners":{
      "type":"structure",
      "required":[
        "Enabled",
        "Quantity"
      ],
      "members":{
        "Enabled":{"shape":"boolean"},
        "Quantity":{"shape":"integer"},
        "Items":{"shape":"SignerList"}
      }
    },
    "AliasList":{
      "type":"list",
      "member":{
        "shape":"string",
        "locationName":"CNAME"
      }
    },
    "Aliases":{
      "type":"structure",
      "required":["Quantity"],
      "members":{
        "Quantity":{"shape":"integer"},
        "Items":{"shape":"AliasList"}
      }
    },
    "AllowedMethods":{
      "type":"structure",
      "required":[
        "Quantity",
        "Items"
      ],
      "members":{
        "Quantity":{"shape":"integer"},
        "Items":{"shape":"MethodsList"},
        "CachedMethods":{"shape":"CachedMethods"}
      }
    },
    "AwsAccountNumberList":{
      "type":"list",
      "member":{
        "shape":"string",
        "locationName":"AwsAccountNumber"
      }
    },
    "BatchTooLarge":{
      "type":"structure",
      "members":{
        "Message":{"shape":"string"}
      },
      "error":{"httpStatusCode":413},
      "exception":true
    },
    "CNAMEAlreadyExists":{
      "type":"structure",
      "members":{
        "Message":{"shape":"string"}
      },
      "error":{"httpStatusCode":409},
      "exception":true
    },
    "CacheBehavior":{
      "type":"structure",
      "required":[
        "PathPattern",
        "TargetOriginId",
        "ForwardedValues",
        "TrustedSigners",
        "ViewerProtocolPolicy",
        "MinTTL"
      ],
      "members":{
        "PathPattern":{"shape":"string"},
        "TargetOriginId":{"shape":"string"},
        "ForwardedValues":{"shape":"ForwardedValues"},
        "TrustedSigners":{"shape":"TrustedSigners"},
        "ViewerProtocolPolicy":{"shape":"ViewerProtocolPolicy"},
        "MinTTL":{"shape":"long"},
        "AllowedMethods":{"shape":"AllowedMethods"},
        "SmoothStreaming":{"shape":"boolean"}
      }
    },
    "CacheBehaviorList":{
      "type":"list",
      "member":{
        "shape":"CacheBehavior",
        "locationName":"CacheBehavior"
      }
    },
    "CacheBehaviors":{
      "type":"structure",
      "required":["Quantity"],
      "members":{
        "Quantity":{"shape":"integer"},
        "Items":{"shape":"CacheBehaviorList"}
      }
    },
    "CachedMethods":{
      "type":"structure",
      "required":[
        "Quantity",
        "Items"
      ],
      "members":{
        "Quantity":{"shape":"integer"},
        "Items":{"shape":"MethodsList"}
      }
    },
    "CloudFrontOriginAccessIdentity":{
      "type":"structure",
      "required":[
        "Id",
        "S3CanonicalUserId"
      ],
      "members":{
        "Id":{"shape":"string"},
        "S3CanonicalUserId":{"shape":"string"},
        "CloudFrontOriginAccessIdentityConfig":{"shape":"CloudFrontOriginAccessIdentityConfig"}
      }
    },
    "CloudFrontOriginAccessIdentityAlreadyExists":{
      "type":"structure",
      "members":{
        "Message":{"shape":"string"}
      },
      "error":{"httpStatusCode":409},
      "exception":true
    },
    "CloudFrontOriginAccessIdentityConfig":{
      "type":"structure",
      "required":[
        "CallerReference",
        "Comment"
      ],
      "members":{
        "CallerReference":{"shape":"string"},
        "Comment":{"shape":"string"}
      }
    },
    "CloudFrontOriginAccessIdentityInUse":{
      "type":"structure",
      "members":{
        "Message":{"shape":"string"}
      },
      "error":{"httpStatusCode":409},
      "exception":true
    },
    "CloudFrontOriginAccessIdentityList":{
      "type":"structure",
      "required":[
        "Marker",
        "MaxItems",
        "IsTruncated",
        "Quantity"
      ],
      "members":{
        "Marker":{"shape":"string"},
        "NextMarker":{"shape":"string"},
        "MaxItems":{"shape":"integer"},
        "IsTruncated":{"shape":"boolean"},
        "Quantity":{"shape":"integer"},
        "Items":{"shape":"CloudFrontOriginAccessIdentitySummaryList"}
      }
    },
    "CloudFrontOriginAccessIdentitySummary":{
      "type":"structure",
      "required":[
        "Id",
        "S3CanonicalUserId",
        "Comment"
      ],
      "members":{
        "Id":{"shape":"string"},
        "S3CanonicalUserId":{"shape":"string"},
        "Comment":{"shape":"string"}
      }
    },
    "CloudFrontOriginAccessIdentitySummaryList":{
      "type":"list",
      "member":{
        "shape":"CloudFrontOriginAccessIdentitySummary",
        "locationName":"CloudFrontOriginAccessIdentitySummary"
      }
    },
    "CookieNameList":{
      "type":"list",
      "member":{
        "shape":"string",
        "locationName":"Name"
      }
    },
    "CookieNames":{
      "type":"structure",
      "required":["Quantity"],
      "members":{
        "Quantity":{"shape":"integer"},
        "Items":{"shape":"CookieNameList"}
      }
    },
    "CookiePreference":{
      "type":"structure",
      "required":["Forward"],
      "members":{
        "Forward":{"shape":"ItemSelection"},
        "WhitelistedNames":{"shape":"CookieNames"}
      }
    },
    "CreateCloudFrontOriginAccessIdentityRequest":{
      "type":"structure",
      "required":["CloudFrontOriginAccessIdentityConfig"],
      "members":{
        "CloudFrontOriginAccessIdentityConfig":{
          "shape":"CloudFrontOriginAccessIdentityConfig",
          "xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2014-10-21/"},
          "locationName":"CloudFrontOriginAccessIdentityConfig"
        }
      },
      "payload":"CloudFrontOriginAccessIdentityConfig"
    },
    "CreateCloudFrontOriginAccessIdentityResult":{
      "type":"structure",
      "members":{
        "CloudFrontOriginAccessIdentity":{"shape":"CloudFrontOriginAccessIdentity"},
        "Location":{
          "shape":"string",
          "location":"header",
          "locationName":"Location"
        },
        "ETag":{
          "shape":"string",
          "location":"header",
          "locationName":"ETag"
        }
      },
      "payload":"CloudFrontOriginAccessIdentity"
    },
    "CreateDistributionRequest":{
      "type":"structure",
      "required":["DistributionConfig"],
      "members":{
        "DistributionConfig":{
          "shape":"DistributionConfig",
          "xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2014-10-21/"},
          "locationName":"DistributionConfig"
        }
      },
      "payload":"DistributionConfig"
    },
    "CreateDistributionResult":{
      "type":"structure",
      "members":{
        "Distribution":{"shape":"Distribution"},
        "Location":{
          "shape":"string",
          "location":"header",
          "locationName":"Location"
        },
        "ETag":{
          "shape":"string",
          "location":"header",
          "locationName":"ETag"
        }
      },
      "payload":"Distribution"
    },
    "CreateInvalidationRequest":{
      "type":"structure",
      "required":[
        "DistributionId",
        "InvalidationBatch"
      ],
      "members":{
        "DistributionId":{
          "shape":"string",
          "location":"uri",
          "locationName":"DistributionId"
        },
        "InvalidationBatch":{
          "shape":"InvalidationBatch",
          "xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2014-10-21/"},
          "locationName":"InvalidationBatch"
        }
      },
      "payload":"InvalidationBatch"
    },
    "CreateInvalidationResult":{
      "type":"structure",
      "members":{
        "Location":{
          "shape":"string",
          "location":"header",
          "locationName":"Location"
        },
        "Invalidation":{"shape":"Invalidation"}
      },
      "payload":"Invalidation"
    },
    "CreateStreamingDistributionRequest":{
      "type":"structure",
      "required":["StreamingDistributionConfig"],
      "members":{
        "StreamingDistributionConfig":{
          "shape":"StreamingDistributionConfig",
          "xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2014-10-21/"},
          "locationName":"StreamingDistributionConfig"
        }
      },
      "payload":"StreamingDistributionConfig"
    },
    "CreateStreamingDistributionResult":{
      "type":"structure",
      "members":{
        "StreamingDistribution":{"shape":"StreamingDistribution"},
        "Location":{
          "shape":"string",
          "location":"header",
          "locationName":"Location"
        },
        "ETag":{
          "shape":"string",
          "location":"header",
          "locationName":"ETag"
        }
      },
      "payload":"StreamingDistribution"
    },
    "CustomErrorResponse":{
      "type":"structure",
      "required":["ErrorCode"],
      "members":{
        "ErrorCode":{"shape":"integer"},
        "ResponsePagePath":{"shape":"string"},
        "ResponseCode":{"shape":"string"},
        "ErrorCachingMinTTL":{"shape":"long"}
      }
    },
    "CustomErrorResponseList":{
      "type":"list",
      "member":{
        "shape":"CustomErrorResponse",
        "locationName":"CustomErrorResponse"
      }
    },
    "CustomErrorResponses":{
      "type":"structure",
      "required":["Quantity"],
      "members":{
        "Quantity":{"shape":"integer"},
        "Items":{"shape":"CustomErrorResponseList"}
      }
    },
    "CustomOriginConfig":{
      "type":"structure",
      "required":[
        "HTTPPort",
        "HTTPSPort",
        "OriginProtocolPolicy"
      ],
      "members":{
        "HTTPPort":{"shape":"integer"},
        "HTTPSPort":{"shape":"integer"},
        "OriginProtocolPolicy":{"shape":"OriginProtocolPolicy"}
      }
    },
    "DefaultCacheBehavior":{
      "type":"structure",
      "required":[
        "TargetOriginId",
        "ForwardedValues",
        "TrustedSigners",
        "ViewerProtocolPolicy",
        "MinTTL"
      ],
      "members":{
        "TargetOriginId":{"shape":"string"},
        "ForwardedValues":{"shape":"ForwardedValues"},
        "TrustedSigners":{"shape":"TrustedSigners"},
        "ViewerProtocolPolicy":{"shape":"ViewerProtocolPolicy"},
        "MinTTL":{"shape":"long"},
        "AllowedMethods":{"shape":"AllowedMethods"},
        "SmoothStreaming":{"shape":"boolean"}
      }
    },
    "DeleteCloudFrontOriginAccessIdentityRequest":{
      "type":"structure",
      "members":{
        "Id":{
          "shape":"string",
          "location":"uri",
          "locationName":"Id"
        },
        "IfMatch":{
          "shape":"string",
          "location":"header",
          "locationName":"If-Match"
        }
      },
      "required":["Id"]
    },
    "DeleteDistributionRequest":{
      "type":"structure",
      "members":{
        "Id":{
          "shape":"string",
          "location":"uri",
          "locationName":"Id"
        },
        "IfMatch":{
          "shape":"string",
          "location":"header",
          "locationName":"If-Match"
        }
      },
      "required":["Id"]
    },
    "DeleteStreamingDistributionRequest":{
      "type":"structure",
      "members":{
        "Id":{
          "shape":"string",
          "location":"uri",
          "locationName":"Id"
        },
        "IfMatch":{
          "shape":"string",
          "location":"header",
          "locationName":"If-Match"
        }
      },
      "required":["Id"]
    },
    "Distribution":{
      "type":"structure",
      "required":[
        "Id",
        "Status",
        "LastModifiedTime",
        "InProgressInvalidationBatches",
        "DomainName",
        "ActiveTrustedSigners",
        "DistributionConfig"
      ],
      "members":{
        "Id":{"shape":"string"},
        "Status":{"shape":"string"},
        "LastModifiedTime":{"shape":"timestamp"},
        "InProgressInvalidationBatches":{"shape":"integer"},
        "DomainName":{"shape":"string"},
        "ActiveTrustedSigners":{"shape":"ActiveTrustedSigners"},
        "DistributionConfig":{"shape":"DistributionConfig"}
      }
    },
    "DistributionAlreadyExists":{
      "type":"structure",
      "members":{
        "Message":{"shape":"string"}
      },
      "error":{"httpStatusCode":409},
      "exception":true
    },
    "DistributionConfig":{
      "type":"structure",
      "required":[
        "CallerReference",
        "Aliases",
        "DefaultRootObject",
        "Origins",
        "DefaultCacheBehavior",
        "CacheBehaviors",
        "Comment",
        "Logging",
        "PriceClass",
        "Enabled"
      ],
      "members":{
        "CallerReference":{"shape":"string"},
        "Aliases":{"shape":"Aliases"},
        "DefaultRootObject":{"shape":"string"},
        "Origins":{"shape":"Origins"},
        "DefaultCacheBehavior":{"shape":"DefaultCacheBehavior"},
        "CacheBehaviors":{"shape":"CacheBehaviors"},
        "CustomErrorResponses":{"shape":"CustomErrorResponses"},
        "Comment":{"shape":"string"},
        "Logging":{"shape":"LoggingConfig"},
        "PriceClass":{"shape":"PriceClass"},
        "Enabled":{"shape":"boolean"},
        "ViewerCertificate":{"shape":"ViewerCertificate"},
        "Restrictions":{"shape":"Restrictions"}
      }
    },
    "DistributionList":{
      "type":"structure",
      "required":[
        "Marker",
        "MaxItems",
        "IsTruncated",
        "Quantity"
      ],
      "members":{
        "Marker":{"shape":"string"},
        "NextMarker":{"shape":"string"},
        "MaxItems":{"shape":"integer"},
        "IsTruncated":{"shape":"boolean"},
        "Quantity":{"shape":"integer"},
        "Items":{"shape":"DistributionSummaryList"}
      }
    },
    "DistributionNotDisabled":{
      "type":"structure",
      "members":{
        "Message":{"shape":"string"}
      },
      "error":{"httpStatusCode":409},
      "exception":true
    },
    "DistributionSummary":{
      "type":"structure",
      "required":[
        "Id",
        "Status",
        "LastModifiedTime",
        "DomainName",
        "Aliases",
        "Origins",
        "DefaultCacheBehavior",
        "CacheBehaviors",
        "CustomErrorResponses",
        "Comment",
        "PriceClass",
        "Enabled",
        "ViewerCertificate",
        "Restrictions"
      ],
      "members":{
        "Id":{"shape":"string"},
        "Status":{"shape":"string"},
        "LastModifiedTime":{"shape":"timestamp"},
        "DomainName":{"shape":"string"},
        "Aliases":{"shape":"Aliases"},
        "Origins":{"shape":"Origins"},
        "DefaultCacheBehavior":{"shape":"DefaultCacheBehavior"},
        "CacheBehaviors":{"shape":"CacheBehaviors"},
        "CustomErrorResponses":{"shape":"CustomErrorResponses"},
        "Comment":{"shape":"string"},
        "PriceClass":{"shape":"PriceClass"},
        "Enabled":{"shape":"boolean"},
        "ViewerCertificate":{"shape":"ViewerCertificate"},
        "Restrictions":{"shape":"Restrictions"}
      }
    },
    "DistributionSummaryList":{
      "type":"list",
      "member":{
        "shape":"DistributionSummary",
        "locationName":"DistributionSummary"
      }
    },
    "ForwardedValues":{
      "type":"structure",
      "required":[
        "QueryString",
        "Cookies"
      ],
      "members":{
        "QueryString":{"shape":"boolean"},
        "Cookies":{"shape":"CookiePreference"},
        "Headers":{"shape":"Headers"}
      }
    },
    "GeoRestriction":{
      "type":"structure",
      "required":[
        "RestrictionType",
        "Quantity"
      ],
      "members":{
        "RestrictionType":{"shape":"GeoRestrictionType"},
        "Quantity":{"shape":"integer"},
        "Items":{"shape":"LocationList"}
      }
    },
    "GeoRestrictionType":{
      "type":"string",
      "enum":[
        "blacklist",
        "whitelist",
        "none"
      ]
    },
    "GetCloudFrontOriginAccessIdentityConfigRequest":{
      "type":"structure",
      "members":{
        "Id":{
          "shape":"string",
          "location":"uri",
          "locationName":"Id"
        }
      },
      "required":["Id"]
    },
    "GetCloudFrontOriginAccessIdentityConfigResult":{
      "type":"structure",
      "members":{
        "CloudFrontOriginAccessIdentityConfig":{"shape":"CloudFrontOriginAccessIdentityConfig"},
        "ETag":{
          "shape":"string",
          "location":"header",
          "locationName":"ETag"
        }
      },
      "payload":"CloudFrontOriginAccessIdentityConfig"
    },
    "GetCloudFrontOriginAccessIdentityRequest":{
      "type":"structure",
      "members":{
        "Id":{
          "shape":"string",
          "location":"uri",
          "locationName":"Id"
        }
      },
      "required":["Id"]
    },
    "GetCloudFrontOriginAccessIdentityResult":{
      "type":"structure",
      "members":{
        "CloudFrontOriginAccessIdentity":{"shape":"CloudFrontOriginAccessIdentity"},
        "ETag":{
          "shape":"string",
          "location":"header",
          "locationName":"ETag"
        }
      },
      "payload":"CloudFrontOriginAccessIdentity"
    },
    "GetDistributionConfigRequest":{
      "type":"structure",
      "members":{
        "Id":{
          "shape":"string",
          "location":"uri",
          "locationName":"Id"
        }
      },
      "required":["Id"]
    },
    "GetDistributionConfigResult":{
      "type":"structure",
      "members":{
        "DistributionConfig":{"shape":"DistributionConfig"},
        "ETag":{
          "shape":"string",
          "location":"header",
          "locationName":"ETag"
        }
      },
      "payload":"DistributionConfig"
    },
    "GetDistributionRequest":{
      "type":"structure",
      "members":{
        "Id":{
          "shape":"string",
          "location":"uri",
          "locationName":"Id"
        }
      },
      "required":["Id"]
    },
    "GetDistributionResult":{
      "type":"structure",
      "members":{
        "Distribution":{"shape":"Distribution"},
        "ETag":{
          "shape":"string",
          "location":"header",
          "locationName":"ETag"
        }
      },
      "payload":"Distribution"
    },
    "GetInvalidationRequest":{
      "type":"structure",
      "required":[
        "DistributionId",
        "Id"
      ],
      "members":{
        "DistributionId":{
          "shape":"string",
          "location":"uri",
          "locationName":"DistributionId"
        },
        "Id":{
          "shape":"string",
          "location":"uri",
          "locationName":"Id"
        }
      }
    },
    "GetInvalidationResult":{
      "type":"structure",
      "members":{
        "Invalidation":{"shape":"Invalidation"}
      },
      "payload":"Invalidation"
    },
    "GetStreamingDistributionConfigRequest":{
      "type":"structure",
      "members":{
        "Id":{
          "shape":"string",
          "location":"uri",
          "locationName":"Id"
        }
      },
      "required":["Id"]
    },
    "GetStreamingDistributionConfigResult":{
      "type":"structure",
      "members":{
        "StreamingDistributionConfig":{"shape":"StreamingDistributionConfig"},
        "ETag":{
          "shape":"string",
          "location":"header",
          "locationName":"ETag"
        }
      },
      "payload":"StreamingDistributionConfig"
    },
    "GetStreamingDistributionRequest":{
      "type":"structure",
      "members":{
        "Id":{
          "shape":"string",
          "location":"uri",
          "locationName":"Id"
        }
      },
      "required":["Id"]
    },
    "GetStreamingDistributionResult":{
      "type":"structure",
      "members":{
        "StreamingDistribution":{"shape":"StreamingDistribution"},
        "ETag":{
          "shape":"string",
          "location":"header",
          "locationName":"ETag"
        }
      },
      "payload":"StreamingDistribution"
    },
    "HeaderList":{
      "type":"list",
      "member":{
        "shape":"string",
        "locationName":"Name"
      }
    },
    "Headers":{
      "type":"structure",
      "required":["Quantity"],
      "members":{
        "Quantity":{"shape":"integer"},
        "Items":{"shape":"HeaderList"}
      }
    },
    "IllegalUpdate":{
      "type":"structure",
      "members":{
        "Message":{"shape":"string"}
      },
      "error":{"httpStatusCode":400},
      "exception":true
    },
    "InconsistentQuantities":{
      "type":"structure",
      "members":{
        "Message":{"shape":"string"}
      },
      "error":{"httpStatusCode":400},
      "exception":true
    },
    "InvalidArgument":{
      "type":"structure",
      "members":{
        "Message":{"shape":"string"}
      },
      "error":{"httpStatusCode":400},
      "exception":true
    },
    "InvalidDefaultRootObject":{
      "type":"structure",
      "members":{
        "Message":{"shape":"string"}
      },
      "error":{"httpStatusCode":400},
      "exception":true
    },
    "InvalidErrorCode":{
      "type":"structure",
      "members":{
        "Message":{"shape":"string"}
      },
      "error":{"httpStatusCode":400},
      "exception":true
    },
    "InvalidForwardCookies":{
      "type":"structure",
      "members":{
        "Message":{"shape":"string"}
      },
      "error":{"httpStatusCode":400},
      "exception":true
    },
    "InvalidGeoRestrictionParameter":{
      "type":"structure",
      "members":{
        "Message":{"shape":"string"}
      },
      "error":{"httpStatusCode":400},
      "exception":true
    },
    "InvalidHeadersForS3Origin":{
      "type":"structure",
      "members":{
        "Message":{"shape":"string"}
      },
      "error":{"httpStatusCode":400},
      "exception":true
    },
    "InvalidIfMatchVersion":{
      "type":"structure",
      "members":{
        "Message":{"shape":"string"}
      },
      "error":{"httpStatusCode":400},
      "exception":true
    },
    "InvalidLocationCode":{
      "type":"structure",
      "members":{
        "Message":{"shape":"string"}
      },
      "error":{"httpStatusCode":400},
      "exception":true
    },
    "InvalidOrigin":{
      "type":"structure",
      "members":{
        "Message":{"shape":"string"}
      },
      "error":{"httpStatusCode":400},
      "exception":true
    },
    "InvalidOriginAccessIdentity":{
      "type":"structure",
      "members":{
        "Message":{"shape":"string"}
      },
      "error":{"httpStatusCode":400},
      "exception":true
    },
    "InvalidProtocolSettings":{
      "type":"structure",
      "members":{
        "Message":{"shape":"string"}
      },
      "error":{"httpStatusCode":400},
      "exception":true
    },
    "InvalidRelativePath":{
      "type":"structure",
      "members":{
        "Message":{"shape":"string"}
      },
      "error":{"httpStatusCode":400},
      "exception":true
    },
    "InvalidRequiredProtocol":{
      "type":"structure",
      "members":{
        "Message":{"shape":"string"}
      },
      "error":{"httpStatusCode":400},
      "exception":true
    },
    "InvalidResponseCode":{
      "type":"structure",
      "members":{
        "Message":{"shape":"string"}
      },
      "error":{"httpStatusCode":400},
      "exception":true
    },
    "InvalidViewerCertificate":{
      "type":"structure",
      "members":{
        "Message":{"shape":"string"}
      },
      "error":{"httpStatusCode":400},
      "exception":true
    },
    "Invalidation":{
      "type":"structure",
      "required":[
        "Id",
        "Status",
        "CreateTime",
        "InvalidationBatch"
      ],
      "members":{
        "Id":{"shape":"string"},
        "Status":{"shape":"string"},
        "CreateTime":{"shape":"timestamp"},
        "InvalidationBatch":{"shape":"InvalidationBatch"}
      }
    },
    "InvalidationBatch":{
      "type":"structure",
      "required":[
        "Paths",
        "CallerReference"
      ],
      "members":{
        "Paths":{"shape":"Paths"},
        "CallerReference":{"shape":"string"}
      }
    },
    "InvalidationList":{
      "type":"structure",
      "required":[
        "Marker",
        "MaxItems",
        "IsTruncated",
        "Quantity"
      ],
      "members":{
        "Marker":{"shape":"string"},
        "NextMarker":{"shape":"string"},
        "MaxItems":{"shape":"integer"},
        "IsTruncated":{"shape":"boolean"},
        "Quantity":{"shape":"integer"},
        "Items":{"shape":"InvalidationSummaryList"}
      }
    },
    "InvalidationSummary":{
      "type":"structure",
      "required":[
        "Id",
        "CreateTime",
        "Status"
      ],
      "members":{
        "Id":{"shape":"string"},
        "CreateTime":{"shape":"timestamp"},
        "Status":{"shape":"string"}
      }
    },
    "InvalidationSummaryList":{
      "type":"list",
      "member":{
        "shape":"InvalidationSummary",
        "locationName":"InvalidationSummary"
      }
    },
    "ItemSelection":{
      "type":"string",
      "enum":[
        "none",
        "whitelist",
        "all"
      ]
    },
    "KeyPairIdList":{
      "type":"list",
      "member":{
        "shape":"string",
        "locationName":"KeyPairId"
      }
    },
    "KeyPairIds":{
      "type":"structure",
      "required":["Quantity"],
      "members":{
        "Quantity":{"shape":"integer"},
        "Items":{"shape":"KeyPairIdList"}
      }
    },
    "ListCloudFrontOriginAccessIdentitiesRequest":{
      "type":"structure",
      "members":{
        "Marker":{
          "shape":"string",
          "location":"querystring",
          "locationName":"Marker"
        },
        "MaxItems":{
          "shape":"string",
          "location":"querystring",
          "locationName":"MaxItems"
        }
      }
    },
    "ListCloudFrontOriginAccessIdentitiesResult":{
      "type":"structure",
      "members":{
        "CloudFrontOriginAccessIdentityList":{"shape":"CloudFrontOriginAccessIdentityList"}
      },
      "payload":"CloudFrontOriginAccessIdentityList"
    },
    "ListDistributionsRequest":{
      "type":"structure",
      "members":{
        "Marker":{
          "shape":"string",
          "location":"querystring",
          "locationName":"Marker"
        },
        "MaxItems":{
          "shape":"string",
          "location":"querystring",
          "locationName":"MaxItems"
        }
      }
    },
    "ListDistributionsResult":{
      "type":"structure",
      "members":{
        "DistributionList":{"shape":"DistributionList"}
      },
      "payload":"DistributionList"
    },
    "ListInvalidationsRequest":{
      "type":"structure",
      "required":["DistributionId"],
      "members":{
        "DistributionId":{
          "shape":"string",
          "location":"uri",
          "locationName":"DistributionId"
        },
        "Marker":{
          "shape":"string",
          "location":"querystring",
          "locationName":"Marker"
        },
        "MaxItems":{
          "shape":"string",
          "location":"querystring",
          "locationName":"MaxItems"
        }
      }
    },
    "ListInvalidationsResult":{
      "type":"structure",
      "members":{
        "InvalidationList":{"shape":"InvalidationList"}
      },
      "payload":"InvalidationList"
    },
    "ListStreamingDistributionsRequest":{
      "type":"structure",
      "members":{
        "Marker":{
          "shape":"string",
          "location":"querystring",
          "locationName":"Marker"
        },
        "MaxItems":{
          "shape":"string",
          "location":"querystring",
          "locationName":"MaxItems"
        }
      }
    },
    "ListStreamingDistributionsResult":{
      "type":"structure",
      "members":{
        "StreamingDistributionList":{"shape":"StreamingDistributionList"}
      },
      "payload":"StreamingDistributionList"
    },
    "LocationList":{
      "type":"list",
      "member":{
        "shape":"string",
        "locationName":"Location"
      }
    },
    "LoggingConfig":{
      "type":"structure",
      "required":[
        "Enabled",
        "IncludeCookies",
        "Bucket",
        "Prefix"
      ],
      "members":{
        "Enabled":{"shape":"boolean"},
        "IncludeCookies":{"shape":"boolean"},
        "Bucket":{"shape":"string"},
        "Prefix":{"shape":"string"}
      }
    },
    "Method":{
      "type":"string",
      "enum":[
        "GET",
        "HEAD",
        "POST",
        "PUT",
        "PATCH",
        "OPTIONS",
        "DELETE"
      ]
    },
    "MethodsList":{
      "type":"list",
      "member":{
        "shape":"Method",
        "locationName":"Method"
      }
    },
    "MinimumProtocolVersion":{
      "type":"string",
      "enum":[
        "SSLv3",
        "TLSv1"
      ]
    },
    "MissingBody":{
      "type":"structure",
      "members":{
        "Message":{"shape":"string"}
      },
      "error":{"httpStatusCode":400},
      "exception":true
    },
    "NoSuchCloudFrontOriginAccessIdentity":{
      "type":"structure",
      "members":{
        "Message":{"shape":"string"}
      },
      "error":{"httpStatusCode":404},
      "exception":true
    },
    "NoSuchDistribution":{
      "type":"structure",
      "members":{
        "Message":{"shape":"string"}
      },
      "error":{"httpStatusCode":404},
      "exception":true
    },
    "NoSuchInvalidation":{
      "type":"structure",
      "members":{
        "Message":{"shape":"string"}
      },
      "error":{"httpStatusCode":404},
      "exception":true
    },
    "NoSuchOrigin":{
      "type":"structure",
      "members":{
        "Message":{"shape":"string"}
      },
      "error":{"httpStatusCode":404},
      "exception":true
    },
    "NoSuchStreamingDistribution":{
      "type":"structure",
      "members":{
        "Message":{"shape":"string"}
      },
      "error":{"httpStatusCode":404},
      "exception":true
    },
    "Origin":{
      "type":"structure",
      "required":[
        "Id",
        "DomainName"
      ],
      "members":{
        "Id":{"shape":"string"},
        "DomainName":{"shape":"string"},
        "S3OriginConfig":{"shape":"S3OriginConfig"},
        "CustomOriginConfig":{"shape":"CustomOriginConfig"}
      }
    },
    "OriginList":{
      "type":"list",
      "member":{
        "shape":"Origin",
        "locationName":"Origin"
      },
      "min":1
    },
    "OriginProtocolPolicy":{
      "type":"string",
      "enum":[
        "http-only",
        "match-viewer"
      ]
    },
    "Origins":{
      "type":"structure",
      "required":["Quantity"],
      "members":{
        "Quantity":{"shape":"integer"},
        "Items":{"shape":"OriginList"}
      }
    },
    "PathList":{
      "type":"list",
      "member":{
        "shape":"string",
        "locationName":"Path"
      }
    },
    "Paths":{
      "type":"structure",
      "required":["Quantity"],
      "members":{
        "Quantity":{"shape":"integer"},
        "Items":{"shape":"PathList"}
      }
    },
    "PreconditionFailed":{
      "type":"structure",
      "members":{
        "Message":{"shape":"string"}
      },
      "error":{"httpStatusCode":412},
      "exception":true
    },
    "PriceClass":{
      "type":"string",
      "enum":[
        "PriceClass_100",
        "PriceClass_200",
        "PriceClass_All"
      ]
    },
    "Restrictions":{
      "type":"structure",
      "required":["GeoRestriction"],
      "members":{
        "GeoRestriction":{"shape":"GeoRestriction"}
      }
    },
    "S3Origin":{
      "type":"structure",
      "required":[
        "DomainName",
        "OriginAccessIdentity"
      ],
      "members":{
        "DomainName":{"shape":"string"},
        "OriginAccessIdentity":{"shape":"string"}
      }
    },
    "S3OriginConfig":{
      "type":"structure",
      "required":["OriginAccessIdentity"],
      "members":{
        "OriginAccessIdentity":{"shape":"string"}
      }
    },
    "SSLSupportMethod":{
      "type":"string",
      "enum":[
        "sni-only",
        "vip"
      ]
    },
    "Signer":{
      "type":"structure",
      "members":{
        "AwsAccountNumber":{"shape":"string"},
        "KeyPairIds":{"shape":"KeyPairIds"}
      }
    },
    "SignerList":{
      "type":"list",
      "member":{
        "shape":"Signer",
        "locationName":"Signer"
      }
    },
    "StreamingDistribution":{
      "type":"structure",
      "required":[
        "Id",
        "Status",
        "DomainName",
        "ActiveTrustedSigners",
        "StreamingDistributionConfig"
      ],
      "members":{
        "Id":{"shape":"string"},
        "Status":{"shape":"string"},
        "LastModifiedTime":{"shape":"timestamp"},
        "DomainName":{"shape":"string"},
        "ActiveTrustedSigners":{"shape":"ActiveTrustedSigners"},
        "StreamingDistributionConfig":{"shape":"StreamingDistributionConfig"}
      }
    },
    "StreamingDistributionAlreadyExists":{
      "type":"structure",
      "members":{
        "Message":{"shape":"string"}
      },
      "error":{"httpStatusCode":409},
      "exception":true
    },
    "StreamingDistributionConfig":{
      "type":"structure",
      "required":[
        "CallerReference",
        "S3Origin",
        "Aliases",
        "Comment",
        "Logging",
        "TrustedSigners",
        "PriceClass",
        "Enabled"
      ],
      "members":{
        "CallerReference":{"shape":"string"},
        "S3Origin":{"shape":"S3Origin"},
        "Aliases":{"shape":"Aliases"},
        "Comment":{"shape":"string"},
        "Logging":{"shape":"StreamingLoggingConfig"},
        "TrustedSigners":{"shape":"TrustedSigners"},
        "PriceClass":{"shape":"PriceClass"},
        "Enabled":{"shape":"boolean"}
      }
    },
    "StreamingDistributionList":{
      "type":"structure",
      "required":[
        "Marker",
        "MaxItems",
        "IsTruncated",
        "Quantity"
      ],
      "members":{
        "Marker":{"shape":"string"},
        "NextMarker":{"shape":"string"},
        "MaxItems":{"shape":"integer"},
        "IsTruncated":{"shape":"boolean"},
        "Quantity":{"shape":"integer"},
        "Items":{"shape":"StreamingDistributionSummaryList"}
      }
    },
    "StreamingDistributionNotDisabled":{
      "type":"structure",
      "members":{
        "Message":{"shape":"string"}
      },
      "error":{"httpStatusCode":409},
      "exception":true
    },
    "StreamingDistributionSummary":{
      "type":"structure",
      "required":[
        "Id",
        "Status",
        "LastModifiedTime",
        "DomainName",
        "S3Origin",
        "Aliases",
        "TrustedSigners",
        "Comment",
        "PriceClass",
        "Enabled"
      ],
      "members":{
        "Id":{"shape":"string"},
        "Status":{"shape":"string"},
        "LastModifiedTime":{"shape":"timestamp"},
        "DomainName":{"shape":"string"},
        "S3Origin":{"shape":"S3Origin"},
        "Aliases":{"shape":"Aliases"},
        "TrustedSigners":{"shape":"TrustedSigners"},
        "Comment":{"shape":"string"},
        "PriceClass":{"shape":"PriceClass"},
        "Enabled":{"shape":"boolean"}
      }
    },
    "StreamingDistributionSummaryList":{
      "type":"list",
      "member":{
        "shape":"StreamingDistributionSummary",
        "locationName":"StreamingDistributionSummary"
      }
    },
    "StreamingLoggingConfig":{
      "type":"structure",
      "required":[
        "Enabled",
        "Bucket",
        "Prefix"
      ],
      "members":{
        "Enabled":{"shape":"boolean"},
        "Bucket":{"shape":"string"},
        "Prefix":{"shape":"string"}
      }
    },
    "TooManyCacheBehaviors":{
      "type":"structure",
      "members":{
        "Message":{"shape":"string"}
      },
      "error":{"httpStatusCode":400},
      "exception":true
    },
    "TooManyCertificates":{
      "type":"structure",
      "members":{
        "Message":{"shape":"string"}
      },
      "error":{"httpStatusCode":400},
      "exception":true
    },
    "TooManyCloudFrontOriginAccessIdentities":{
      "type":"structure",
      "members":{
        "Message":{"shape":"string"}
      },
      "error":{"httpStatusCode":400},
      "exception":true
    },
    "TooManyCookieNamesInWhiteList":{
      "type":"structure",
      "members":{
        "Message":{"shape":"string"}
      },
      "error":{"httpStatusCode":400},
      "exception":true
    },
    "TooManyDistributionCNAMEs":{
      "type":"structure",
      "members":{
        "Message":{"shape":"string"}
      },
      "error":{"httpStatusCode":400},
      "exception":true
    },
    "TooManyDistributions":{
      "type":"structure",
      "members":{
        "Message":{"shape":"string"}
      },
      "error":{"httpStatusCode":400},
      "exception":true
    },
    "TooManyHeadersInForwardedValues":{
      "type":"structure",
      "members":{
        "Message":{"shape":"string"}
      },
      "error":{"httpStatusCode":400},
      "exception":true
    },
    "TooManyInvalidationsInProgress":{
      "type":"structure",
      "members":{
        "Message":{"shape":"string"}
      },
      "error":{"httpStatusCode":400},
      "exception":true
    },
    "TooManyOrigins":{
      "type":"structure",
      "members":{
        "Message":{"shape":"string"}
      },
      "error":{"httpStatusCode":400},
      "exception":true
    },
    "TooManyStreamingDistributionCNAMEs":{
      "type":"structure",
      "members":{
        "Message":{"shape":"string"}
      },
      "error":{"httpStatusCode":400},
      "exception":true
    },
    "TooManyStreamingDistributions":{
      "type":"structure",
      "members":{
        "Message":{"shape":"string"}
      },
      "error":{"httpStatusCode":400},
      "exception":true
    },
    "TooManyTrustedSigners":{
      "type":"structure",
      "members":{
        "Message":{"shape":"string"}
      },
      "error":{"httpStatusCode":400},
      "exception":true
    },
    "TrustedSignerDoesNotExist":{
      "type":"structure",
      "members":{
        "Message":{"shape":"string"}
      },
      "error":{"httpStatusCode":400},
      "exception":true
    },
    "TrustedSigners":{
      "type":"structure",
      "required":[
        "Enabled",
        "Quantity"
      ],
      "members":{
        "Enabled":{"shape":"boolean"},
        "Quantity":{"shape":"integer"},
        "Items":{"shape":"AwsAccountNumberList"}
      }
    },
    "UpdateCloudFrontOriginAccessIdentityRequest":{
      "type":"structure",
      "required":[
        "CloudFrontOriginAccessIdentityConfig",
        "Id"
      ],
      "members":{
        "CloudFrontOriginAccessIdentityConfig":{
          "shape":"CloudFrontOriginAccessIdentityConfig",
          "xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2014-10-21/"},
          "locationName":"CloudFrontOriginAccessIdentityConfig"
        },
        "Id":{
          "shape":"string",
          "location":"uri",
          "locationName":"Id"
        },
        "IfMatch":{
          "shape":"string",
          "location":"header",
          "locationName":"If-Match"
        }
      },
      "payload":"CloudFrontOriginAccessIdentityConfig"
    },
    "UpdateCloudFrontOriginAccessIdentityResult":{
      "type":"structure",
      "members":{
        "CloudFrontOriginAccessIdentity":{"shape":"CloudFrontOriginAccessIdentity"},
        "ETag":{
          "shape":"string",
          "location":"header",
          "locationName":"ETag"
        }
      },
      "payload":"CloudFrontOriginAccessIdentity"
    },
    "UpdateDistributionRequest":{
      "type":"structure",
      "required":[
        "DistributionConfig",
        "Id"
      ],
      "members":{
        "DistributionConfig":{
          "shape":"DistributionConfig",
          "xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2014-10-21/"},
          "locationName":"DistributionConfig"
        },
        "Id":{
          "shape":"string",
          "location":"uri",
          "locationName":"Id"
        },
        "IfMatch":{
          "shape":"string",
          "location":"header",
          "locationName":"If-Match"
        }
      },
      "payload":"DistributionConfig"
    },
    "UpdateDistributionResult":{
      "type":"structure",
      "members":{
        "Distribution":{"shape":"Distribution"},
        "ETag":{
          "shape":"string",
          "location":"header",
          "locationName":"ETag"
        }
      },
      "payload":"Distribution"
    },
    "UpdateStreamingDistributionRequest":{
      "type":"structure",
      "required":[
        "StreamingDistributionConfig",
        "Id"
      ],
      "members":{
        "StreamingDistributionConfig":{
          "shape":"StreamingDistributionConfig",
          "xmlNamespace":{"uri":"http://cloudfront.amazonaws.com/doc/2014-10-21/"},
          "locationName":"StreamingDistributionConfig"
        },
        "Id":{
          "shape":"string",
          "location":"uri",
          "locationName":"Id"
        },
        "IfMatch":{
          "shape":"string",
          "location":"header",
          "locationName":"If-Match"
        }
      },
      "payload":"StreamingDistributionConfig"
    },
    "UpdateStreamingDistributionResult":{
      "type":"structure",
      "members":{
        "StreamingDistribution":{"shape":"StreamingDistribution"},
        "ETag":{
          "shape":"string",
          "location":"header",
          "locationName":"ETag"
        }
      },
      "payload":"StreamingDistribution"
    },
    "ViewerCertificate":{
      "type":"structure",
      "members":{
        "IAMCertificateId":{"shape":"string"},
        "CloudFrontDefaultCertificate":{"shape":"boolean"},
        "SSLSupportMethod":{"shape":"SSLSupportMethod"},
        "MinimumProtocolVersion":{"shape":"MinimumProtocolVersion"}
      }
    },
    "ViewerProtocolPolicy":{
      "type":"string",
      "enum":[
        "allow-all",
        "https-only",
        "redirect-to-https"
      ]
    },
    "boolean":{"type":"boolean"},
    "integer":{"type":"integer"},
    "long":{"type":"long"},
    "string":{"type":"string"},
    "timestamp":{"type":"timestamp"}
  }
}
,
"CloudSearch":
{
  "metadata":{
    "apiVersion":"2013-01-01",
    "endpointPrefix":"cloudsearch",
    "serviceFullName":"Amazon CloudSearch",
    "signatureVersion":"v4",
    "xmlNamespace":"http://cloudsearch.amazonaws.com/doc/2013-01-01/",
    "protocol":"query"
  },
  "operations":{
    "BuildSuggesters":{
      "name":"BuildSuggesters",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"BuildSuggestersRequest"},
      "output":{
        "shape":"BuildSuggestersResponse",
        "resultWrapper":"BuildSuggestersResult"
      },
      "errors":[
        {
          "shape":"BaseException",
          "exception":true
        },
        {
          "shape":"InternalException",
          "error":{
            "code":"InternalException",
            "httpStatusCode":500
          },
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "error":{
            "code":"ResourceNotFound",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "CreateDomain":{
      "name":"CreateDomain",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateDomainRequest"},
      "output":{
        "shape":"CreateDomainResponse",
        "resultWrapper":"CreateDomainResult"
      },
      "errors":[
        {
          "shape":"BaseException",
          "exception":true
        },
        {
          "shape":"InternalException",
          "error":{
            "code":"InternalException",
            "httpStatusCode":500
          },
          "exception":true
        },
        {
          "shape":"LimitExceededException",
          "error":{
            "code":"LimitExceeded",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DefineAnalysisScheme":{
      "name":"DefineAnalysisScheme",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DefineAnalysisSchemeRequest"},
      "output":{
        "shape":"DefineAnalysisSchemeResponse",
        "resultWrapper":"DefineAnalysisSchemeResult"
      },
      "errors":[
        {
          "shape":"BaseException",
          "exception":true
        },
        {
          "shape":"InternalException",
          "error":{
            "code":"InternalException",
            "httpStatusCode":500
          },
          "exception":true
        },
        {
          "shape":"LimitExceededException",
          "error":{
            "code":"LimitExceeded",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidTypeException",
          "error":{
            "code":"InvalidType",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "error":{
            "code":"ResourceNotFound",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DefineExpression":{
      "name":"DefineExpression",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DefineExpressionRequest"},
      "output":{
        "shape":"DefineExpressionResponse",
        "resultWrapper":"DefineExpressionResult"
      },
      "errors":[
        {
          "shape":"BaseException",
          "exception":true
        },
        {
          "shape":"InternalException",
          "error":{
            "code":"InternalException",
            "httpStatusCode":500
          },
          "exception":true
        },
        {
          "shape":"LimitExceededException",
          "error":{
            "code":"LimitExceeded",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidTypeException",
          "error":{
            "code":"InvalidType",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "error":{
            "code":"ResourceNotFound",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DefineIndexField":{
      "name":"DefineIndexField",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DefineIndexFieldRequest"},
      "output":{
        "shape":"DefineIndexFieldResponse",
        "resultWrapper":"DefineIndexFieldResult"
      },
      "errors":[
        {
          "shape":"BaseException",
          "exception":true
        },
        {
          "shape":"InternalException",
          "error":{
            "code":"InternalException",
            "httpStatusCode":500
          },
          "exception":true
        },
        {
          "shape":"LimitExceededException",
          "error":{
            "code":"LimitExceeded",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidTypeException",
          "error":{
            "code":"InvalidType",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "error":{
            "code":"ResourceNotFound",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DefineSuggester":{
      "name":"DefineSuggester",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DefineSuggesterRequest"},
      "output":{
        "shape":"DefineSuggesterResponse",
        "resultWrapper":"DefineSuggesterResult"
      },
      "errors":[
        {
          "shape":"BaseException",
          "exception":true
        },
        {
          "shape":"InternalException",
          "error":{
            "code":"InternalException",
            "httpStatusCode":500
          },
          "exception":true
        },
        {
          "shape":"LimitExceededException",
          "error":{
            "code":"LimitExceeded",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidTypeException",
          "error":{
            "code":"InvalidType",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "error":{
            "code":"ResourceNotFound",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DeleteAnalysisScheme":{
      "name":"DeleteAnalysisScheme",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteAnalysisSchemeRequest"},
      "output":{
        "shape":"DeleteAnalysisSchemeResponse",
        "resultWrapper":"DeleteAnalysisSchemeResult"
      },
      "errors":[
        {
          "shape":"BaseException",
          "exception":true
        },
        {
          "shape":"InternalException",
          "error":{
            "code":"InternalException",
            "httpStatusCode":500
          },
          "exception":true
        },
        {
          "shape":"InvalidTypeException",
          "error":{
            "code":"InvalidType",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "error":{
            "code":"ResourceNotFound",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DeleteDomain":{
      "name":"DeleteDomain",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteDomainRequest"},
      "output":{
        "shape":"DeleteDomainResponse",
        "resultWrapper":"DeleteDomainResult"
      },
      "errors":[
        {
          "shape":"BaseException",
          "exception":true
        },
        {
          "shape":"InternalException",
          "error":{
            "code":"InternalException",
            "httpStatusCode":500
          },
          "exception":true
        }
      ]
    },
    "DeleteExpression":{
      "name":"DeleteExpression",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteExpressionRequest"},
      "output":{
        "shape":"DeleteExpressionResponse",
        "resultWrapper":"DeleteExpressionResult"
      },
      "errors":[
        {
          "shape":"BaseException",
          "exception":true
        },
        {
          "shape":"InternalException",
          "error":{
            "code":"InternalException",
            "httpStatusCode":500
          },
          "exception":true
        },
        {
          "shape":"InvalidTypeException",
          "error":{
            "code":"InvalidType",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "error":{
            "code":"ResourceNotFound",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DeleteIndexField":{
      "name":"DeleteIndexField",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteIndexFieldRequest"},
      "output":{
        "shape":"DeleteIndexFieldResponse",
        "resultWrapper":"DeleteIndexFieldResult"
      },
      "errors":[
        {
          "shape":"BaseException",
          "exception":true
        },
        {
          "shape":"InternalException",
          "error":{
            "code":"InternalException",
            "httpStatusCode":500
          },
          "exception":true
        },
        {
          "shape":"InvalidTypeException",
          "error":{
            "code":"InvalidType",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "error":{
            "code":"ResourceNotFound",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DeleteSuggester":{
      "name":"DeleteSuggester",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteSuggesterRequest"},
      "output":{
        "shape":"DeleteSuggesterResponse",
        "resultWrapper":"DeleteSuggesterResult"
      },
      "errors":[
        {
          "shape":"BaseException",
          "exception":true
        },
        {
          "shape":"InternalException",
          "error":{
            "code":"InternalException",
            "httpStatusCode":500
          },
          "exception":true
        },
        {
          "shape":"InvalidTypeException",
          "error":{
            "code":"InvalidType",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "error":{
            "code":"ResourceNotFound",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DescribeAnalysisSchemes":{
      "name":"DescribeAnalysisSchemes",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeAnalysisSchemesRequest"},
      "output":{
        "shape":"DescribeAnalysisSchemesResponse",
        "resultWrapper":"DescribeAnalysisSchemesResult"
      },
      "errors":[
        {
          "shape":"BaseException",
          "exception":true
        },
        {
          "shape":"InternalException",
          "error":{
            "code":"InternalException",
            "httpStatusCode":500
          },
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "error":{
            "code":"ResourceNotFound",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DescribeAvailabilityOptions":{
      "name":"DescribeAvailabilityOptions",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeAvailabilityOptionsRequest"},
      "output":{
        "shape":"DescribeAvailabilityOptionsResponse",
        "resultWrapper":"DescribeAvailabilityOptionsResult"
      },
      "errors":[
        {
          "shape":"BaseException",
          "exception":true
        },
        {
          "shape":"InternalException",
          "error":{
            "code":"InternalException",
            "httpStatusCode":500
          },
          "exception":true
        },
        {
          "shape":"InvalidTypeException",
          "error":{
            "code":"InvalidType",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"LimitExceededException",
          "error":{
            "code":"LimitExceeded",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "error":{
            "code":"ResourceNotFound",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"DisabledOperationException",
          "error":{
            "code":"DisabledAction",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DescribeDomains":{
      "name":"DescribeDomains",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeDomainsRequest"},
      "output":{
        "shape":"DescribeDomainsResponse",
        "resultWrapper":"DescribeDomainsResult"
      },
      "errors":[
        {
          "shape":"BaseException",
          "exception":true
        },
        {
          "shape":"InternalException",
          "error":{
            "code":"InternalException",
            "httpStatusCode":500
          },
          "exception":true
        }
      ]
    },
    "DescribeExpressions":{
      "name":"DescribeExpressions",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeExpressionsRequest"},
      "output":{
        "shape":"DescribeExpressionsResponse",
        "resultWrapper":"DescribeExpressionsResult"
      },
      "errors":[
        {
          "shape":"BaseException",
          "exception":true
        },
        {
          "shape":"InternalException",
          "error":{
            "code":"InternalException",
            "httpStatusCode":500
          },
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "error":{
            "code":"ResourceNotFound",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DescribeIndexFields":{
      "name":"DescribeIndexFields",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeIndexFieldsRequest"},
      "output":{
        "shape":"DescribeIndexFieldsResponse",
        "resultWrapper":"DescribeIndexFieldsResult"
      },
      "errors":[
        {
          "shape":"BaseException",
          "exception":true
        },
        {
          "shape":"InternalException",
          "error":{
            "code":"InternalException",
            "httpStatusCode":500
          },
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "error":{
            "code":"ResourceNotFound",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DescribeScalingParameters":{
      "name":"DescribeScalingParameters",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeScalingParametersRequest"},
      "output":{
        "shape":"DescribeScalingParametersResponse",
        "resultWrapper":"DescribeScalingParametersResult"
      },
      "errors":[
        {
          "shape":"BaseException",
          "exception":true
        },
        {
          "shape":"InternalException",
          "error":{
            "code":"InternalException",
            "httpStatusCode":500
          },
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "error":{
            "code":"ResourceNotFound",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DescribeServiceAccessPolicies":{
      "name":"DescribeServiceAccessPolicies",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeServiceAccessPoliciesRequest"},
      "output":{
        "shape":"DescribeServiceAccessPoliciesResponse",
        "resultWrapper":"DescribeServiceAccessPoliciesResult"
      },
      "errors":[
        {
          "shape":"BaseException",
          "exception":true
        },
        {
          "shape":"InternalException",
          "error":{
            "code":"InternalException",
            "httpStatusCode":500
          },
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "error":{
            "code":"ResourceNotFound",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DescribeSuggesters":{
      "name":"DescribeSuggesters",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeSuggestersRequest"},
      "output":{
        "shape":"DescribeSuggestersResponse",
        "resultWrapper":"DescribeSuggestersResult"
      },
      "errors":[
        {
          "shape":"BaseException",
          "exception":true
        },
        {
          "shape":"InternalException",
          "error":{
            "code":"InternalException",
            "httpStatusCode":500
          },
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "error":{
            "code":"ResourceNotFound",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "IndexDocuments":{
      "name":"IndexDocuments",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"IndexDocumentsRequest"},
      "output":{
        "shape":"IndexDocumentsResponse",
        "resultWrapper":"IndexDocumentsResult"
      },
      "errors":[
        {
          "shape":"BaseException",
          "exception":true
        },
        {
          "shape":"InternalException",
          "error":{
            "code":"InternalException",
            "httpStatusCode":500
          },
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "error":{
            "code":"ResourceNotFound",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "ListDomainNames":{
      "name":"ListDomainNames",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "output":{
        "shape":"ListDomainNamesResponse",
        "resultWrapper":"ListDomainNamesResult"
      },
      "errors":[
        {
          "shape":"BaseException",
          "exception":true
        }
      ]
    },
    "UpdateAvailabilityOptions":{
      "name":"UpdateAvailabilityOptions",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"UpdateAvailabilityOptionsRequest"},
      "output":{
        "shape":"UpdateAvailabilityOptionsResponse",
        "resultWrapper":"UpdateAvailabilityOptionsResult"
      },
      "errors":[
        {
          "shape":"BaseException",
          "exception":true
        },
        {
          "shape":"InternalException",
          "error":{
            "code":"InternalException",
            "httpStatusCode":500
          },
          "exception":true
        },
        {
          "shape":"InvalidTypeException",
          "error":{
            "code":"InvalidType",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"LimitExceededException",
          "error":{
            "code":"LimitExceeded",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "error":{
            "code":"ResourceNotFound",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"DisabledOperationException",
          "error":{
            "code":"DisabledAction",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "UpdateScalingParameters":{
      "name":"UpdateScalingParameters",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"UpdateScalingParametersRequest"},
      "output":{
        "shape":"UpdateScalingParametersResponse",
        "resultWrapper":"UpdateScalingParametersResult"
      },
      "errors":[
        {
          "shape":"BaseException",
          "exception":true
        },
        {
          "shape":"InternalException",
          "error":{
            "code":"InternalException",
            "httpStatusCode":500
          },
          "exception":true
        },
        {
          "shape":"LimitExceededException",
          "error":{
            "code":"LimitExceeded",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "error":{
            "code":"ResourceNotFound",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidTypeException",
          "error":{
            "code":"InvalidType",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "UpdateServiceAccessPolicies":{
      "name":"UpdateServiceAccessPolicies",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"UpdateServiceAccessPoliciesRequest"},
      "output":{
        "shape":"UpdateServiceAccessPoliciesResponse",
        "resultWrapper":"UpdateServiceAccessPoliciesResult"
      },
      "errors":[
        {
          "shape":"BaseException",
          "exception":true
        },
        {
          "shape":"InternalException",
          "error":{
            "code":"InternalException",
            "httpStatusCode":500
          },
          "exception":true
        },
        {
          "shape":"LimitExceededException",
          "error":{
            "code":"LimitExceeded",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "error":{
            "code":"ResourceNotFound",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidTypeException",
          "error":{
            "code":"InvalidType",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        }
      ]
    }
  },
  "shapes":{
    "APIVersion":{"type":"string"},
    "ARN":{"type":"string"},
    "AccessPoliciesStatus":{
      "type":"structure",
      "required":[
        "Options",
        "Status"
      ],
      "members":{
        "Options":{"shape":"PolicyDocument"},
        "Status":{"shape":"OptionStatus"}
      }
    },
    "AlgorithmicStemming":{
      "type":"string",
      "enum":[
        "none",
        "minimal",
        "light",
        "full"
      ]
    },
    "AnalysisOptions":{
      "type":"structure",
      "members":{
        "Synonyms":{"shape":"String"},
        "Stopwords":{"shape":"String"},
        "StemmingDictionary":{"shape":"String"},
        "JapaneseTokenizationDictionary":{"shape":"String"},
        "AlgorithmicStemming":{"shape":"AlgorithmicStemming"}
      }
    },
    "AnalysisScheme":{
      "type":"structure",
      "required":[
        "AnalysisSchemeName",
        "AnalysisSchemeLanguage"
      ],
      "members":{
        "AnalysisSchemeName":{"shape":"FieldName"},
        "AnalysisSchemeLanguage":{"shape":"AnalysisSchemeLanguage"},
        "AnalysisOptions":{"shape":"AnalysisOptions"}
      }
    },
    "AnalysisSchemeLanguage":{
      "type":"string",
      "enum":[
        "ar",
        "bg",
        "ca",
        "cs",
        "da",
        "de",
        "el",
        "en",
        "es",
        "eu",
        "fa",
        "fi",
        "fr",
        "ga",
        "gl",
        "he",
        "hi",
        "hu",
        "hy",
        "id",
        "it",
        "ja",
        "ko",
        "lv",
        "mul",
        "nl",
        "no",
        "pt",
        "ro",
        "ru",
        "sv",
        "th",
        "tr",
        "zh-Hans",
        "zh-Hant"
      ]
    },
    "AnalysisSchemeStatus":{
      "type":"structure",
      "required":[
        "Options",
        "Status"
      ],
      "members":{
        "Options":{"shape":"AnalysisScheme"},
        "Status":{"shape":"OptionStatus"}
      }
    },
    "AnalysisSchemeStatusList":{
      "type":"list",
      "member":{"shape":"AnalysisSchemeStatus"}
    },
    "AvailabilityOptionsStatus":{
      "type":"structure",
      "required":[
        "Options",
        "Status"
      ],
      "members":{
        "Options":{"shape":"MultiAZ"},
        "Status":{"shape":"OptionStatus"}
      }
    },
    "BaseException":{
      "type":"structure",
      "members":{
        "Code":{"shape":"ErrorCode"},
        "Message":{"shape":"ErrorMessage"}
      },
      "exception":true
    },
    "Boolean":{"type":"boolean"},
    "BuildSuggestersRequest":{
      "type":"structure",
      "required":["DomainName"],
      "members":{
        "DomainName":{"shape":"DomainName"}
      }
    },
    "BuildSuggestersResponse":{
      "type":"structure",
      "members":{
        "FieldNames":{"shape":"FieldNameList"}
      }
    },
    "CreateDomainRequest":{
      "type":"structure",
      "required":["DomainName"],
      "members":{
        "DomainName":{"shape":"DomainName"}
      }
    },
    "CreateDomainResponse":{
      "type":"structure",
      "members":{
        "DomainStatus":{"shape":"DomainStatus"}
      }
    },
    "DateArrayOptions":{
      "type":"structure",
      "members":{
        "DefaultValue":{"shape":"FieldValue"},
        "SourceFields":{"shape":"FieldNameCommaList"},
        "FacetEnabled":{"shape":"Boolean"},
        "SearchEnabled":{"shape":"Boolean"},
        "ReturnEnabled":{"shape":"Boolean"}
      }
    },
    "DateOptions":{
      "type":"structure",
      "members":{
        "DefaultValue":{"shape":"FieldValue"},
        "SourceField":{"shape":"FieldName"},
        "FacetEnabled":{"shape":"Boolean"},
        "SearchEnabled":{"shape":"Boolean"},
        "ReturnEnabled":{"shape":"Boolean"},
        "SortEnabled":{"shape":"Boolean"}
      }
    },
    "DefineAnalysisSchemeRequest":{
      "type":"structure",
      "required":[
        "DomainName",
        "AnalysisScheme"
      ],
      "members":{
        "DomainName":{"shape":"DomainName"},
        "AnalysisScheme":{"shape":"AnalysisScheme"}
      }
    },
    "DefineAnalysisSchemeResponse":{
      "type":"structure",
      "required":["AnalysisScheme"],
      "members":{
        "AnalysisScheme":{"shape":"AnalysisSchemeStatus"}
      }
    },
    "DefineExpressionRequest":{
      "type":"structure",
      "required":[
        "DomainName",
        "Expression"
      ],
      "members":{
        "DomainName":{"shape":"DomainName"},
        "Expression":{"shape":"Expression"}
      }
    },
    "DefineExpressionResponse":{
      "type":"structure",
      "required":["Expression"],
      "members":{
        "Expression":{"shape":"ExpressionStatus"}
      }
    },
    "DefineIndexFieldRequest":{
      "type":"structure",
      "required":[
        "DomainName",
        "IndexField"
      ],
      "members":{
        "DomainName":{"shape":"DomainName"},
        "IndexField":{"shape":"IndexField"}
      }
    },
    "DefineIndexFieldResponse":{
      "type":"structure",
      "required":["IndexField"],
      "members":{
        "IndexField":{"shape":"IndexFieldStatus"}
      }
    },
    "DefineSuggesterRequest":{
      "type":"structure",
      "required":[
        "DomainName",
        "Suggester"
      ],
      "members":{
        "DomainName":{"shape":"DomainName"},
        "Suggester":{"shape":"Suggester"}
      }
    },
    "DefineSuggesterResponse":{
      "type":"structure",
      "required":["Suggester"],
      "members":{
        "Suggester":{"shape":"SuggesterStatus"}
      }
    },
    "DeleteAnalysisSchemeRequest":{
      "type":"structure",
      "required":[
        "DomainName",
        "AnalysisSchemeName"
      ],
      "members":{
        "DomainName":{"shape":"DomainName"},
        "AnalysisSchemeName":{"shape":"FieldName"}
      }
    },
    "DeleteAnalysisSchemeResponse":{
      "type":"structure",
      "required":["AnalysisScheme"],
      "members":{
        "AnalysisScheme":{"shape":"AnalysisSchemeStatus"}
      }
    },
    "DeleteDomainRequest":{
      "type":"structure",
      "required":["DomainName"],
      "members":{
        "DomainName":{"shape":"DomainName"}
      }
    },
    "DeleteDomainResponse":{
      "type":"structure",
      "members":{
        "DomainStatus":{"shape":"DomainStatus"}
      }
    },
    "DeleteExpressionRequest":{
      "type":"structure",
      "required":[
        "DomainName",
        "ExpressionName"
      ],
      "members":{
        "DomainName":{"shape":"DomainName"},
        "ExpressionName":{"shape":"FieldName"}
      }
    },
    "DeleteExpressionResponse":{
      "type":"structure",
      "required":["Expression"],
      "members":{
        "Expression":{"shape":"ExpressionStatus"}
      }
    },
    "DeleteIndexFieldRequest":{
      "type":"structure",
      "required":[
        "DomainName",
        "IndexFieldName"
      ],
      "members":{
        "DomainName":{"shape":"DomainName"},
        "IndexFieldName":{"shape":"FieldName"}
      }
    },
    "DeleteIndexFieldResponse":{
      "type":"structure",
      "required":["IndexField"],
      "members":{
        "IndexField":{"shape":"IndexFieldStatus"}
      }
    },
    "DeleteSuggesterRequest":{
      "type":"structure",
      "required":[
        "DomainName",
        "SuggesterName"
      ],
      "members":{
        "DomainName":{"shape":"DomainName"},
        "SuggesterName":{"shape":"FieldName"}
      }
    },
    "DeleteSuggesterResponse":{
      "type":"structure",
      "required":["Suggester"],
      "members":{
        "Suggester":{"shape":"SuggesterStatus"}
      }
    },
    "DescribeAnalysisSchemesRequest":{
      "type":"structure",
      "required":["DomainName"],
      "members":{
        "DomainName":{"shape":"DomainName"},
        "AnalysisSchemeNames":{"shape":"FieldNameList"},
        "Deployed":{"shape":"Boolean"}
      }
    },
    "DescribeAnalysisSchemesResponse":{
      "type":"structure",
      "required":["AnalysisSchemes"],
      "members":{
        "AnalysisSchemes":{"shape":"AnalysisSchemeStatusList"}
      }
    },
    "DescribeAvailabilityOptionsRequest":{
      "type":"structure",
      "required":["DomainName"],
      "members":{
        "DomainName":{"shape":"DomainName"},
        "Deployed":{"shape":"Boolean"}
      }
    },
    "DescribeAvailabilityOptionsResponse":{
      "type":"structure",
      "members":{
        "AvailabilityOptions":{"shape":"AvailabilityOptionsStatus"}
      }
    },
    "DescribeDomainsRequest":{
      "type":"structure",
      "members":{
        "DomainNames":{"shape":"DomainNameList"}
      }
    },
    "DescribeDomainsResponse":{
      "type":"structure",
      "required":["DomainStatusList"],
      "members":{
        "DomainStatusList":{"shape":"DomainStatusList"}
      }
    },
    "DescribeExpressionsRequest":{
      "type":"structure",
      "required":["DomainName"],
      "members":{
        "DomainName":{"shape":"DomainName"},
        "ExpressionNames":{"shape":"FieldNameList"},
        "Deployed":{"shape":"Boolean"}
      }
    },
    "DescribeExpressionsResponse":{
      "type":"structure",
      "required":["Expressions"],
      "members":{
        "Expressions":{"shape":"ExpressionStatusList"}
      }
    },
    "DescribeIndexFieldsRequest":{
      "type":"structure",
      "required":["DomainName"],
      "members":{
        "DomainName":{"shape":"DomainName"},
        "FieldNames":{"shape":"FieldNameList"},
        "Deployed":{"shape":"Boolean"}
      }
    },
    "DescribeIndexFieldsResponse":{
      "type":"structure",
      "required":["IndexFields"],
      "members":{
        "IndexFields":{"shape":"IndexFieldStatusList"}
      }
    },
    "DescribeScalingParametersRequest":{
      "type":"structure",
      "required":["DomainName"],
      "members":{
        "DomainName":{"shape":"DomainName"}
      }
    },
    "DescribeScalingParametersResponse":{
      "type":"structure",
      "required":["ScalingParameters"],
      "members":{
        "ScalingParameters":{"shape":"ScalingParametersStatus"}
      }
    },
    "DescribeServiceAccessPoliciesRequest":{
      "type":"structure",
      "required":["DomainName"],
      "members":{
        "DomainName":{"shape":"DomainName"},
        "Deployed":{"shape":"Boolean"}
      }
    },
    "DescribeServiceAccessPoliciesResponse":{
      "type":"structure",
      "required":["AccessPolicies"],
      "members":{
        "AccessPolicies":{"shape":"AccessPoliciesStatus"}
      }
    },
    "DescribeSuggestersRequest":{
      "type":"structure",
      "required":["DomainName"],
      "members":{
        "DomainName":{"shape":"DomainName"},
        "SuggesterNames":{"shape":"FieldNameList"},
        "Deployed":{"shape":"Boolean"}
      }
    },
    "DescribeSuggestersResponse":{
      "type":"structure",
      "required":["Suggesters"],
      "members":{
        "Suggesters":{"shape":"SuggesterStatusList"}
      }
    },
    "DisabledOperationException":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"DisabledAction",
        "httpStatusCode":409,
        "senderFault":true
      },
      "exception":true
    },
    "DocumentSuggesterOptions":{
      "type":"structure",
      "required":["SourceField"],
      "members":{
        "SourceField":{"shape":"FieldName"},
        "FuzzyMatching":{"shape":"SuggesterFuzzyMatching"},
        "SortExpression":{"shape":"String"}
      }
    },
    "DomainId":{
      "type":"string",
      "min":1,
      "max":64
    },
    "DomainName":{
      "type":"string",
      "min":3,
      "max":28,
      "pattern":"[a-z][a-z0-9\\-]+"
    },
    "DomainNameList":{
      "type":"list",
      "member":{"shape":"DomainName"}
    },
    "DomainNameMap":{
      "type":"map",
      "key":{"shape":"DomainName"},
      "value":{"shape":"APIVersion"}
    },
    "DomainStatus":{
      "type":"structure",
      "required":[
        "DomainId",
        "DomainName",
        "RequiresIndexDocuments"
      ],
      "members":{
        "DomainId":{"shape":"DomainId"},
        "DomainName":{"shape":"DomainName"},
        "ARN":{"shape":"ARN"},
        "Created":{"shape":"Boolean"},
        "Deleted":{"shape":"Boolean"},
        "DocService":{"shape":"ServiceEndpoint"},
        "SearchService":{"shape":"ServiceEndpoint"},
        "RequiresIndexDocuments":{"shape":"Boolean"},
        "Processing":{"shape":"Boolean"},
        "SearchInstanceType":{"shape":"SearchInstanceType"},
        "SearchPartitionCount":{"shape":"PartitionCount"},
        "SearchInstanceCount":{"shape":"InstanceCount"},
        "Limits":{"shape":"Limits"}
      }
    },
    "DomainStatusList":{
      "type":"list",
      "member":{"shape":"DomainStatus"}
    },
    "Double":{"type":"double"},
    "DoubleArrayOptions":{
      "type":"structure",
      "members":{
        "DefaultValue":{"shape":"Double"},
        "SourceFields":{"shape":"FieldNameCommaList"},
        "FacetEnabled":{"shape":"Boolean"},
        "SearchEnabled":{"shape":"Boolean"},
        "ReturnEnabled":{"shape":"Boolean"}
      }
    },
    "DoubleOptions":{
      "type":"structure",
      "members":{
        "DefaultValue":{"shape":"Double"},
        "SourceField":{"shape":"FieldName"},
        "FacetEnabled":{"shape":"Boolean"},
        "SearchEnabled":{"shape":"Boolean"},
        "ReturnEnabled":{"shape":"Boolean"},
        "SortEnabled":{"shape":"Boolean"}
      }
    },
    "ErrorCode":{"type":"string"},
    "ErrorMessage":{"type":"string"},
    "Expression":{
      "type":"structure",
      "required":[
        "ExpressionName",
        "ExpressionValue"
      ],
      "members":{
        "ExpressionName":{"shape":"FieldName"},
        "ExpressionValue":{"shape":"ExpressionValue"}
      }
    },
    "ExpressionStatus":{
      "type":"structure",
      "required":[
        "Options",
        "Status"
      ],
      "members":{
        "Options":{"shape":"Expression"},
        "Status":{"shape":"OptionStatus"}
      }
    },
    "ExpressionStatusList":{
      "type":"list",
      "member":{"shape":"ExpressionStatus"}
    },
    "ExpressionValue":{
      "type":"string",
      "min":1,
      "max":10240
    },
    "FieldName":{
      "type":"string",
      "min":1,
      "max":64,
      "pattern":"[a-z][a-z0-9_]*"
    },
    "FieldNameCommaList":{
      "type":"string",
      "pattern":"\\s*[a-z][a-z0-9_]*\\s*(,\\s*[a-z][a-z0-9_]*\\s*)*"
    },
    "FieldNameList":{
      "type":"list",
      "member":{"shape":"FieldName"}
    },
    "FieldValue":{
      "type":"string",
      "min":0,
      "max":1024
    },
    "IndexDocumentsRequest":{
      "type":"structure",
      "required":["DomainName"],
      "members":{
        "DomainName":{"shape":"DomainName"}
      }
    },
    "IndexDocumentsResponse":{
      "type":"structure",
      "members":{
        "FieldNames":{"shape":"FieldNameList"}
      }
    },
    "IndexField":{
      "type":"structure",
      "required":[
        "IndexFieldName",
        "IndexFieldType"
      ],
      "members":{
        "IndexFieldName":{"shape":"FieldName"},
        "IndexFieldType":{"shape":"IndexFieldType"},
        "IntOptions":{"shape":"IntOptions"},
        "DoubleOptions":{"shape":"DoubleOptions"},
        "LiteralOptions":{"shape":"LiteralOptions"},
        "TextOptions":{"shape":"TextOptions"},
        "DateOptions":{"shape":"DateOptions"},
        "LatLonOptions":{"shape":"LatLonOptions"},
        "IntArrayOptions":{"shape":"IntArrayOptions"},
        "DoubleArrayOptions":{"shape":"DoubleArrayOptions"},
        "LiteralArrayOptions":{"shape":"LiteralArrayOptions"},
        "TextArrayOptions":{"shape":"TextArrayOptions"},
        "DateArrayOptions":{"shape":"DateArrayOptions"}
      }
    },
    "IndexFieldStatus":{
      "type":"structure",
      "required":[
        "Options",
        "Status"
      ],
      "members":{
        "Options":{"shape":"IndexField"},
        "Status":{"shape":"OptionStatus"}
      }
    },
    "IndexFieldStatusList":{
      "type":"list",
      "member":{"shape":"IndexFieldStatus"}
    },
    "IndexFieldType":{
      "type":"string",
      "enum":[
        "int",
        "double",
        "literal",
        "text",
        "date",
        "latlon",
        "int-array",
        "double-array",
        "literal-array",
        "text-array",
        "date-array"
      ]
    },
    "InstanceCount":{
      "type":"integer",
      "min":1
    },
    "IntArrayOptions":{
      "type":"structure",
      "members":{
        "DefaultValue":{"shape":"Long"},
        "SourceFields":{"shape":"FieldNameCommaList"},
        "FacetEnabled":{"shape":"Boolean"},
        "SearchEnabled":{"shape":"Boolean"},
        "ReturnEnabled":{"shape":"Boolean"}
      }
    },
    "IntOptions":{
      "type":"structure",
      "members":{
        "DefaultValue":{"shape":"Long"},
        "SourceField":{"shape":"FieldName"},
        "FacetEnabled":{"shape":"Boolean"},
        "SearchEnabled":{"shape":"Boolean"},
        "ReturnEnabled":{"shape":"Boolean"},
        "SortEnabled":{"shape":"Boolean"}
      }
    },
    "InternalException":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"InternalException",
        "httpStatusCode":500
      },
      "exception":true
    },
    "InvalidTypeException":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"InvalidType",
        "httpStatusCode":409,
        "senderFault":true
      },
      "exception":true
    },
    "LatLonOptions":{
      "type":"structure",
      "members":{
        "DefaultValue":{"shape":"FieldValue"},
        "SourceField":{"shape":"FieldName"},
        "FacetEnabled":{"shape":"Boolean"},
        "SearchEnabled":{"shape":"Boolean"},
        "ReturnEnabled":{"shape":"Boolean"},
        "SortEnabled":{"shape":"Boolean"}
      }
    },
    "LimitExceededException":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"LimitExceeded",
        "httpStatusCode":409,
        "senderFault":true
      },
      "exception":true
    },
    "Limits":{
      "type":"structure",
      "required":[
        "MaximumReplicationCount",
        "MaximumPartitionCount"
      ],
      "members":{
        "MaximumReplicationCount":{"shape":"MaximumReplicationCount"},
        "MaximumPartitionCount":{"shape":"MaximumPartitionCount"}
      }
    },
    "ListDomainNamesResponse":{
      "type":"structure",
      "members":{
        "DomainNames":{"shape":"DomainNameMap"}
      }
    },
    "LiteralArrayOptions":{
      "type":"structure",
      "members":{
        "DefaultValue":{"shape":"FieldValue"},
        "SourceFields":{"shape":"FieldNameCommaList"},
        "FacetEnabled":{"shape":"Boolean"},
        "SearchEnabled":{"shape":"Boolean"},
        "ReturnEnabled":{"shape":"Boolean"}
      }
    },
    "LiteralOptions":{
      "type":"structure",
      "members":{
        "DefaultValue":{"shape":"FieldValue"},
        "SourceField":{"shape":"FieldName"},
        "FacetEnabled":{"shape":"Boolean"},
        "SearchEnabled":{"shape":"Boolean"},
        "ReturnEnabled":{"shape":"Boolean"},
        "SortEnabled":{"shape":"Boolean"}
      }
    },
    "Long":{"type":"long"},
    "MaximumPartitionCount":{
      "type":"integer",
      "min":1
    },
    "MaximumReplicationCount":{
      "type":"integer",
      "min":1
    },
    "MultiAZ":{"type":"boolean"},
    "OptionState":{
      "type":"string",
      "enum":[
        "RequiresIndexDocuments",
        "Processing",
        "Active",
        "FailedToValidate"
      ]
    },
    "OptionStatus":{
      "type":"structure",
      "required":[
        "CreationDate",
        "UpdateDate",
        "State"
      ],
      "members":{
        "CreationDate":{"shape":"UpdateTimestamp"},
        "UpdateDate":{"shape":"UpdateTimestamp"},
        "UpdateVersion":{"shape":"UIntValue"},
        "State":{"shape":"OptionState"},
        "PendingDeletion":{"shape":"Boolean"}
      }
    },
    "PartitionCount":{
      "type":"integer",
      "min":1
    },
    "PartitionInstanceType":{
      "type":"string",
      "enum":[
        "search.m1.small",
        "search.m1.large",
        "search.m2.xlarge",
        "search.m2.2xlarge"
      ]
    },
    "PolicyDocument":{"type":"string"},
    "ResourceNotFoundException":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"ResourceNotFound",
        "httpStatusCode":409,
        "senderFault":true
      },
      "exception":true
    },
    "ScalingParameters":{
      "type":"structure",
      "members":{
        "DesiredInstanceType":{"shape":"PartitionInstanceType"},
        "DesiredReplicationCount":{"shape":"UIntValue"},
        "DesiredPartitionCount":{"shape":"UIntValue"}
      }
    },
    "ScalingParametersStatus":{
      "type":"structure",
      "required":[
        "Options",
        "Status"
      ],
      "members":{
        "Options":{"shape":"ScalingParameters"},
        "Status":{"shape":"OptionStatus"}
      }
    },
    "SearchInstanceType":{"type":"string"},
    "ServiceEndpoint":{
      "type":"structure",
      "members":{
        "Endpoint":{"shape":"ServiceUrl"}
      }
    },
    "ServiceUrl":{"type":"string"},
    "String":{"type":"string"},
    "Suggester":{
      "type":"structure",
      "required":[
        "SuggesterName",
        "DocumentSuggesterOptions"
      ],
      "members":{
        "SuggesterName":{"shape":"FieldName"},
        "DocumentSuggesterOptions":{"shape":"DocumentSuggesterOptions"}
      }
    },
    "SuggesterFuzzyMatching":{
      "type":"string",
      "enum":[
        "none",
        "low",
        "high"
      ]
    },
    "SuggesterStatus":{
      "type":"structure",
      "required":[
        "Options",
        "Status"
      ],
      "members":{
        "Options":{"shape":"Suggester"},
        "Status":{"shape":"OptionStatus"}
      }
    },
    "SuggesterStatusList":{
      "type":"list",
      "member":{"shape":"SuggesterStatus"}
    },
    "TextArrayOptions":{
      "type":"structure",
      "members":{
        "DefaultValue":{"shape":"FieldValue"},
        "SourceFields":{"shape":"FieldNameCommaList"},
        "ReturnEnabled":{"shape":"Boolean"},
        "HighlightEnabled":{"shape":"Boolean"},
        "AnalysisScheme":{"shape":"Word"}
      }
    },
    "TextOptions":{
      "type":"structure",
      "members":{
        "DefaultValue":{"shape":"FieldValue"},
        "SourceField":{"shape":"FieldName"},
        "ReturnEnabled":{"shape":"Boolean"},
        "SortEnabled":{"shape":"Boolean"},
        "HighlightEnabled":{"shape":"Boolean"},
        "AnalysisScheme":{"shape":"Word"}
      }
    },
    "UIntValue":{
      "type":"integer",
      "min":0
    },
    "UpdateAvailabilityOptionsRequest":{
      "type":"structure",
      "required":[
        "DomainName",
        "MultiAZ"
      ],
      "members":{
        "DomainName":{"shape":"DomainName"},
        "MultiAZ":{"shape":"Boolean"}
      }
    },
    "UpdateAvailabilityOptionsResponse":{
      "type":"structure",
      "members":{
        "AvailabilityOptions":{"shape":"AvailabilityOptionsStatus"}
      }
    },
    "UpdateScalingParametersRequest":{
      "type":"structure",
      "required":[
        "DomainName",
        "ScalingParameters"
      ],
      "members":{
        "DomainName":{"shape":"DomainName"},
        "ScalingParameters":{"shape":"ScalingParameters"}
      }
    },
    "UpdateScalingParametersResponse":{
      "type":"structure",
      "required":["ScalingParameters"],
      "members":{
        "ScalingParameters":{"shape":"ScalingParametersStatus"}
      }
    },
    "UpdateServiceAccessPoliciesRequest":{
      "type":"structure",
      "required":[
        "DomainName",
        "AccessPolicies"
      ],
      "members":{
        "DomainName":{"shape":"DomainName"},
        "AccessPolicies":{"shape":"PolicyDocument"}
      }
    },
    "UpdateServiceAccessPoliciesResponse":{
      "type":"structure",
      "required":["AccessPolicies"],
      "members":{
        "AccessPolicies":{"shape":"AccessPoliciesStatus"}
      }
    },
    "UpdateTimestamp":{"type":"timestamp"},
    "Word":{
      "type":"string",
      "pattern":"[\\S]+"
    }
  }
}
,
"CloudSearchDomain":
{
  "metadata":{
    "apiVersion":"2013-01-01",
    "endpointPrefix":"cloudsearchdomain",
    "jsonVersion":"1.1",
    "serviceFullName":"Amazon CloudSearch Domain",
    "signatureVersion":"v4",
    "signingName":"cloudsearch",
    "protocol":"rest-json"
  },
  "operations":{
    "Search":{
      "name":"Search",
      "http":{
        "method":"GET",
        "requestUri":"/2013-01-01/search?format=sdk&pretty=true"
      },
      "input":{"shape":"SearchRequest"},
      "output":{"shape":"SearchResponse"},
      "errors":[
        {
          "shape":"SearchException",
          "exception":true
        }
      ]
    },
    "Suggest":{
      "name":"Suggest",
      "http":{
        "method":"GET",
        "requestUri":"/2013-01-01/suggest?format=sdk&pretty=true"
      },
      "input":{"shape":"SuggestRequest"},
      "output":{"shape":"SuggestResponse"},
      "errors":[
        {
          "shape":"SearchException",
          "exception":true
        }
      ]
    },
    "UploadDocuments":{
      "name":"UploadDocuments",
      "http":{
        "method":"POST",
        "requestUri":"/2013-01-01/documents/batch?format=sdk"
      },
      "input":{"shape":"UploadDocumentsRequest"},
      "output":{"shape":"UploadDocumentsResponse"},
      "errors":[
        {
          "shape":"DocumentServiceException",
          "exception":true
        }
      ]
    }
  },
  "shapes":{
    "Adds":{"type":"long"},
    "Blob":{
      "type":"blob",
      "streaming":true
    },
    "Bucket":{
      "type":"structure",
      "members":{
        "value":{"shape":"String"},
        "count":{"shape":"Long"}
      }
    },
    "BucketInfo":{
      "type":"structure",
      "members":{
        "buckets":{"shape":"BucketList"}
      }
    },
    "BucketList":{
      "type":"list",
      "member":{"shape":"Bucket"}
    },
    "ContentType":{
      "type":"string",
      "enum":[
        "application/json",
        "application/xml"
      ]
    },
    "Cursor":{"type":"string"},
    "Deletes":{"type":"long"},
    "DocumentServiceException":{
      "type":"structure",
      "members":{
        "status":{"shape":"String"},
        "message":{"shape":"String"}
      },
      "exception":true
    },
    "DocumentServiceWarning":{
      "type":"structure",
      "members":{
        "message":{"shape":"String"}
      }
    },
    "DocumentServiceWarnings":{
      "type":"list",
      "member":{"shape":"DocumentServiceWarning"}
    },
    "Expr":{"type":"string"},
    "Facet":{"type":"string"},
    "Facets":{
      "type":"map",
      "key":{"shape":"String"},
      "value":{"shape":"BucketInfo"}
    },
    "FieldValue":{
      "type":"list",
      "member":{"shape":"String"}
    },
    "Fields":{
      "type":"map",
      "key":{"shape":"String"},
      "value":{"shape":"FieldValue"}
    },
    "FilterQuery":{"type":"string"},
    "Highlight":{"type":"string"},
    "Highlights":{
      "type":"map",
      "key":{"shape":"String"},
      "value":{"shape":"String"}
    },
    "Hit":{
      "type":"structure",
      "members":{
        "id":{"shape":"String"},
        "fields":{"shape":"Fields"},
        "highlights":{"shape":"Highlights"}
      }
    },
    "HitList":{
      "type":"list",
      "member":{"shape":"Hit"}
    },
    "Hits":{
      "type":"structure",
      "members":{
        "found":{"shape":"Long"},
        "start":{"shape":"Long"},
        "cursor":{"shape":"String"},
        "hit":{"shape":"HitList"}
      }
    },
    "Long":{"type":"long"},
    "Partial":{"type":"boolean"},
    "Query":{"type":"string"},
    "QueryOptions":{"type":"string"},
    "QueryParser":{
      "type":"string",
      "enum":[
        "simple",
        "structured",
        "lucene",
        "dismax"
      ]
    },
    "Return":{"type":"string"},
    "SearchException":{
      "type":"structure",
      "members":{
        "message":{"shape":"String"}
      },
      "exception":true
    },
    "SearchRequest":{
      "type":"structure",
      "required":["query"],
      "members":{
        "cursor":{
          "shape":"Cursor",
          "location":"querystring",
          "locationName":"cursor"
        },
        "expr":{
          "shape":"Expr",
          "location":"querystring",
          "locationName":"expr"
        },
        "facet":{
          "shape":"Facet",
          "location":"querystring",
          "locationName":"facet"
        },
        "filterQuery":{
          "shape":"FilterQuery",
          "location":"querystring",
          "locationName":"fq"
        },
        "highlight":{
          "shape":"Highlight",
          "location":"querystring",
          "locationName":"highlight"
        },
        "partial":{
          "shape":"Partial",
          "location":"querystring",
          "locationName":"partial"
        },
        "query":{
          "shape":"Query",
          "location":"querystring",
          "locationName":"q"
        },
        "queryOptions":{
          "shape":"QueryOptions",
          "location":"querystring",
          "locationName":"q.options"
        },
        "queryParser":{
          "shape":"QueryParser",
          "location":"querystring",
          "locationName":"q.parser"
        },
        "return":{
          "shape":"Return",
          "location":"querystring",
          "locationName":"return"
        },
        "size":{
          "shape":"Size",
          "location":"querystring",
          "locationName":"size"
        },
        "sort":{
          "shape":"Sort",
          "location":"querystring",
          "locationName":"sort"
        },
        "start":{
          "shape":"Start",
          "location":"querystring",
          "locationName":"start"
        }
      }
    },
    "SearchResponse":{
      "type":"structure",
      "members":{
        "status":{"shape":"SearchStatus"},
        "hits":{"shape":"Hits"},
        "facets":{"shape":"Facets"}
      }
    },
    "SearchStatus":{
      "type":"structure",
      "members":{
        "timems":{"shape":"Long"},
        "rid":{"shape":"String"}
      }
    },
    "Size":{"type":"long"},
    "Sort":{"type":"string"},
    "Start":{"type":"long"},
    "String":{"type":"string"},
    "SuggestModel":{
      "type":"structure",
      "members":{
        "query":{"shape":"String"},
        "found":{"shape":"Long"},
        "suggestions":{"shape":"Suggestions"}
      }
    },
    "SuggestRequest":{
      "type":"structure",
      "required":[
        "query",
        "suggester"
      ],
      "members":{
        "query":{
          "shape":"Query",
          "location":"querystring",
          "locationName":"q"
        },
        "suggester":{
          "shape":"Suggester",
          "location":"querystring",
          "locationName":"suggester"
        },
        "size":{
          "shape":"SuggestionsSize",
          "location":"querystring",
          "locationName":"size"
        }
      }
    },
    "SuggestResponse":{
      "type":"structure",
      "members":{
        "status":{"shape":"SuggestStatus"},
        "suggest":{"shape":"SuggestModel"}
      }
    },
    "SuggestStatus":{
      "type":"structure",
      "members":{
        "timems":{"shape":"Long"},
        "rid":{"shape":"String"}
      }
    },
    "Suggester":{"type":"string"},
    "SuggestionMatch":{
      "type":"structure",
      "members":{
        "suggestion":{"shape":"String"},
        "score":{"shape":"Long"},
        "id":{"shape":"String"}
      }
    },
    "Suggestions":{
      "type":"list",
      "member":{"shape":"SuggestionMatch"}
    },
    "SuggestionsSize":{"type":"long"},
    "UploadDocumentsRequest":{
      "type":"structure",
      "required":[
        "documents",
        "contentType"
      ],
      "members":{
        "documents":{"shape":"Blob"},
        "contentType":{
          "shape":"ContentType",
          "location":"header",
          "locationName":"Content-Type"
        }
      },
      "payload":"documents"
    },
    "UploadDocumentsResponse":{
      "type":"structure",
      "members":{
        "status":{"shape":"String"},
        "adds":{"shape":"Adds"},
        "deletes":{"shape":"Deletes"},
        "warnings":{"shape":"DocumentServiceWarnings"}
      }
    }
  }
}
,
"CloudTrail":
{
  "metadata":{
    "apiVersion":"2013-11-01",
    "endpointPrefix":"cloudtrail",
    "jsonVersion":"1.1",
    "serviceAbbreviation":"CloudTrail",
    "serviceFullName":"AWS CloudTrail",
    "signatureVersion":"v4",
    "targetPrefix":"com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101",
    "protocol":"json"
  },
  "operations":{
    "CreateTrail":{
      "name":"CreateTrail",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateTrailRequest"},
      "output":{"shape":"CreateTrailResponse"},
      "errors":[
        {
          "shape":"MaximumNumberOfTrailsExceededException",
          "error":{
            "code":"MaximumNumberOfTrailsExceeded",
            "httpStatusCode":403,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"TrailAlreadyExistsException",
          "error":{
            "code":"TrailAlreadyExists",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"S3BucketDoesNotExistException",
          "error":{
            "code":"S3BucketDoesNotExist",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InsufficientS3BucketPolicyException",
          "error":{
            "code":"InsufficientS3BucketPolicy",
            "httpStatusCode":403,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InsufficientSnsTopicPolicyException",
          "error":{
            "code":"InsufficientSnsTopicPolicy",
            "httpStatusCode":403,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidS3BucketNameException",
          "error":{
            "code":"InvalidS3BucketName",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidS3PrefixException",
          "error":{
            "code":"InvalidS3Prefix",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidSnsTopicNameException",
          "error":{
            "code":"InvalidSnsTopicName",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidTrailNameException",
          "error":{
            "code":"InvalidTrailName",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidCloudWatchLogsLogGroupArnException",
          "error":{
            "code":"InvalidCloudWatchLogsLogGroupArn",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidCloudWatchLogsRoleArnException",
          "error":{
            "code":"InvalidCloudWatchLogsRoleArn",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"CloudWatchLogsDeliveryUnavailableException",
          "error":{
            "code":"CloudWatchLogsDeliveryUnavailable",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DeleteTrail":{
      "name":"DeleteTrail",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteTrailRequest"},
      "output":{"shape":"DeleteTrailResponse"},
      "errors":[
        {
          "shape":"TrailNotFoundException",
          "error":{
            "code":"TrailNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidTrailNameException",
          "error":{
            "code":"InvalidTrailName",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DescribeTrails":{
      "name":"DescribeTrails",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeTrailsRequest"},
      "output":{"shape":"DescribeTrailsResponse"}
    },
    "GetTrailStatus":{
      "name":"GetTrailStatus",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"GetTrailStatusRequest"},
      "output":{"shape":"GetTrailStatusResponse"},
      "errors":[
        {
          "shape":"TrailNotFoundException",
          "error":{
            "code":"TrailNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidTrailNameException",
          "error":{
            "code":"InvalidTrailName",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "StartLogging":{
      "name":"StartLogging",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"StartLoggingRequest"},
      "output":{"shape":"StartLoggingResponse"},
      "errors":[
        {
          "shape":"TrailNotFoundException",
          "error":{
            "code":"TrailNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidTrailNameException",
          "error":{
            "code":"InvalidTrailName",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "StopLogging":{
      "name":"StopLogging",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"StopLoggingRequest"},
      "output":{"shape":"StopLoggingResponse"},
      "errors":[
        {
          "shape":"TrailNotFoundException",
          "error":{
            "code":"TrailNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidTrailNameException",
          "error":{
            "code":"InvalidTrailName",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "UpdateTrail":{
      "name":"UpdateTrail",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"UpdateTrailRequest"},
      "output":{"shape":"UpdateTrailResponse"},
      "errors":[
        {
          "shape":"S3BucketDoesNotExistException",
          "error":{
            "code":"S3BucketDoesNotExist",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InsufficientS3BucketPolicyException",
          "error":{
            "code":"InsufficientS3BucketPolicy",
            "httpStatusCode":403,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InsufficientSnsTopicPolicyException",
          "error":{
            "code":"InsufficientSnsTopicPolicy",
            "httpStatusCode":403,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"TrailNotFoundException",
          "error":{
            "code":"TrailNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidS3BucketNameException",
          "error":{
            "code":"InvalidS3BucketName",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidS3PrefixException",
          "error":{
            "code":"InvalidS3Prefix",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidSnsTopicNameException",
          "error":{
            "code":"InvalidSnsTopicName",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidTrailNameException",
          "error":{
            "code":"InvalidTrailName",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidCloudWatchLogsLogGroupArnException",
          "error":{
            "code":"InvalidCloudWatchLogsLogGroupArn",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidCloudWatchLogsRoleArnException",
          "error":{
            "code":"InvalidCloudWatchLogsRoleArn",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"CloudWatchLogsDeliveryUnavailableException",
          "error":{
            "code":"CloudWatchLogsDeliveryUnavailable",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    }
  },
  "shapes":{
    "Boolean":{"type":"boolean"},
    "CloudWatchLogsDeliveryUnavailableException":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"CloudWatchLogsDeliveryUnavailable",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "CreateTrailRequest":{
      "type":"structure",
      "required":[
        "Name",
        "S3BucketName"
      ],
      "members":{
        "Name":{"shape":"String"},
        "S3BucketName":{"shape":"String"},
        "S3KeyPrefix":{"shape":"String"},
        "SnsTopicName":{"shape":"String"},
        "IncludeGlobalServiceEvents":{"shape":"Boolean"},
        "CloudWatchLogsLogGroupArn":{"shape":"String"},
        "CloudWatchLogsRoleArn":{"shape":"String"}
      }
    },
    "CreateTrailResponse":{
      "type":"structure",
      "members":{
        "Name":{"shape":"String"},
        "S3BucketName":{"shape":"String"},
        "S3KeyPrefix":{"shape":"String"},
        "SnsTopicName":{"shape":"String"},
        "IncludeGlobalServiceEvents":{"shape":"Boolean"},
        "CloudWatchLogsLogGroupArn":{"shape":"String"},
        "CloudWatchLogsRoleArn":{"shape":"String"}
      }
    },
    "Date":{"type":"timestamp"},
    "DeleteTrailRequest":{
      "type":"structure",
      "required":["Name"],
      "members":{
        "Name":{"shape":"String"}
      }
    },
    "DeleteTrailResponse":{
      "type":"structure",
      "members":{
      }
    },
    "DescribeTrailsRequest":{
      "type":"structure",
      "members":{
        "trailNameList":{"shape":"TrailNameList"}
      }
    },
    "DescribeTrailsResponse":{
      "type":"structure",
      "members":{
        "trailList":{"shape":"TrailList"}
      }
    },
    "GetTrailStatusRequest":{
      "type":"structure",
      "required":["Name"],
      "members":{
        "Name":{"shape":"String"}
      }
    },
    "GetTrailStatusResponse":{
      "type":"structure",
      "members":{
        "IsLogging":{"shape":"Boolean"},
        "LatestDeliveryError":{"shape":"String"},
        "LatestNotificationError":{"shape":"String"},
        "LatestDeliveryTime":{"shape":"Date"},
        "LatestNotificationTime":{"shape":"Date"},
        "StartLoggingTime":{"shape":"Date"},
        "StopLoggingTime":{"shape":"Date"},
        "LatestCloudWatchLogsDeliveryError":{"shape":"String"},
        "LatestCloudWatchLogsDeliveryTime":{"shape":"Date"}
      }
    },
    "InsufficientS3BucketPolicyException":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"InsufficientS3BucketPolicy",
        "httpStatusCode":403,
        "senderFault":true
      },
      "exception":true
    },
    "InsufficientSnsTopicPolicyException":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"InsufficientSnsTopicPolicy",
        "httpStatusCode":403,
        "senderFault":true
      },
      "exception":true
    },
    "InvalidCloudWatchLogsLogGroupArnException":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"InvalidCloudWatchLogsLogGroupArn",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "InvalidCloudWatchLogsRoleArnException":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"InvalidCloudWatchLogsRoleArn",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "InvalidS3BucketNameException":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"InvalidS3BucketName",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "InvalidS3PrefixException":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"InvalidS3Prefix",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "InvalidSnsTopicNameException":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"InvalidSnsTopicName",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "InvalidTrailNameException":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"InvalidTrailName",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "MaximumNumberOfTrailsExceededException":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"MaximumNumberOfTrailsExceeded",
        "httpStatusCode":403,
        "senderFault":true
      },
      "exception":true
    },
    "S3BucketDoesNotExistException":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"S3BucketDoesNotExist",
        "httpStatusCode":404,
        "senderFault":true
      },
      "exception":true
    },
    "StartLoggingRequest":{
      "type":"structure",
      "required":["Name"],
      "members":{
        "Name":{"shape":"String"}
      }
    },
    "StartLoggingResponse":{
      "type":"structure",
      "members":{
      }
    },
    "StopLoggingRequest":{
      "type":"structure",
      "required":["Name"],
      "members":{
        "Name":{"shape":"String"}
      }
    },
    "StopLoggingResponse":{
      "type":"structure",
      "members":{
      }
    },
    "String":{"type":"string"},
    "Trail":{
      "type":"structure",
      "members":{
        "Name":{"shape":"String"},
        "S3BucketName":{"shape":"String"},
        "S3KeyPrefix":{"shape":"String"},
        "SnsTopicName":{"shape":"String"},
        "IncludeGlobalServiceEvents":{"shape":"Boolean"},
        "CloudWatchLogsLogGroupArn":{"shape":"String"},
        "CloudWatchLogsRoleArn":{"shape":"String"}
      }
    },
    "TrailAlreadyExistsException":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"TrailAlreadyExists",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "TrailList":{
      "type":"list",
      "member":{"shape":"Trail"}
    },
    "TrailNameList":{
      "type":"list",
      "member":{"shape":"String"}
    },
    "TrailNotFoundException":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"TrailNotFound",
        "httpStatusCode":404,
        "senderFault":true
      },
      "exception":true
    },
    "UpdateTrailRequest":{
      "type":"structure",
      "required":["Name"],
      "members":{
        "Name":{"shape":"String"},
        "S3BucketName":{"shape":"String"},
        "S3KeyPrefix":{"shape":"String"},
        "SnsTopicName":{"shape":"String"},
        "IncludeGlobalServiceEvents":{"shape":"Boolean"},
        "CloudWatchLogsLogGroupArn":{"shape":"String"},
        "CloudWatchLogsRoleArn":{"shape":"String"}
      }
    },
    "UpdateTrailResponse":{
      "type":"structure",
      "members":{
        "Name":{"shape":"String"},
        "S3BucketName":{"shape":"String"},
        "S3KeyPrefix":{"shape":"String"},
        "SnsTopicName":{"shape":"String"},
        "IncludeGlobalServiceEvents":{"shape":"Boolean"},
        "CloudWatchLogsLogGroupArn":{"shape":"String"},
        "CloudWatchLogsRoleArn":{"shape":"String"}
      }
    }
  }
}
,
"CloudWatch":
{
  "metadata":{
    "apiVersion":"2010-08-01",
    "endpointPrefix":"monitoring",
    "serviceAbbreviation":"CloudWatch",
    "serviceFullName":"Amazon CloudWatch",
    "signatureVersion":"v4",
    "xmlNamespace":"http://monitoring.amazonaws.com/doc/2010-08-01/",
    "protocol":"query"
  },
  "operations":{
    "DeleteAlarms":{
      "name":"DeleteAlarms",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteAlarmsInput"},
      "errors":[
        {
          "shape":"ResourceNotFound",
          "error":{
            "code":"ResourceNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DescribeAlarmHistory":{
      "name":"DescribeAlarmHistory",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeAlarmHistoryInput"},
      "output":{
        "shape":"DescribeAlarmHistoryOutput",
        "resultWrapper":"DescribeAlarmHistoryResult"
      },
      "errors":[
        {
          "shape":"InvalidNextToken",
          "error":{
            "code":"InvalidNextToken",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DescribeAlarms":{
      "name":"DescribeAlarms",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeAlarmsInput"},
      "output":{
        "shape":"DescribeAlarmsOutput",
        "resultWrapper":"DescribeAlarmsResult"
      },
      "errors":[
        {
          "shape":"InvalidNextToken",
          "error":{
            "code":"InvalidNextToken",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DescribeAlarmsForMetric":{
      "name":"DescribeAlarmsForMetric",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeAlarmsForMetricInput"},
      "output":{
        "shape":"DescribeAlarmsForMetricOutput",
        "resultWrapper":"DescribeAlarmsForMetricResult"
      }
    },
    "DisableAlarmActions":{
      "name":"DisableAlarmActions",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DisableAlarmActionsInput"}
    },
    "EnableAlarmActions":{
      "name":"EnableAlarmActions",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"EnableAlarmActionsInput"}
    },
    "GetMetricStatistics":{
      "name":"GetMetricStatistics",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"GetMetricStatisticsInput"},
      "output":{
        "shape":"GetMetricStatisticsOutput",
        "resultWrapper":"GetMetricStatisticsResult"
      },
      "errors":[
        {
          "shape":"InvalidParameterValueException",
          "error":{
            "code":"InvalidParameterValue",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"MissingRequiredParameterException",
          "error":{
            "code":"MissingParameter",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidParameterCombinationException",
          "error":{
            "code":"InvalidParameterCombination",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InternalServiceFault",
          "error":{
            "code":"InternalServiceError",
            "httpStatusCode":500
          },
          "exception":true,
          "xmlOrder":["Message"]
        }
      ]
    },
    "ListMetrics":{
      "name":"ListMetrics",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ListMetricsInput"},
      "output":{
        "shape":"ListMetricsOutput",
        "xmlOrder":[
          "Metrics",
          "NextToken"
        ],
        "resultWrapper":"ListMetricsResult"
      },
      "errors":[
        {
          "shape":"InternalServiceFault",
          "error":{
            "code":"InternalServiceError",
            "httpStatusCode":500
          },
          "exception":true,
          "xmlOrder":["Message"]
        },
        {
          "shape":"InvalidParameterValueException",
          "error":{
            "code":"InvalidParameterValue",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "PutMetricAlarm":{
      "name":"PutMetricAlarm",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"PutMetricAlarmInput"},
      "errors":[
        {
          "shape":"LimitExceededFault",
          "error":{
            "code":"LimitExceeded",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "PutMetricData":{
      "name":"PutMetricData",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"PutMetricDataInput"},
      "errors":[
        {
          "shape":"InvalidParameterValueException",
          "error":{
            "code":"InvalidParameterValue",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"MissingRequiredParameterException",
          "error":{
            "code":"MissingParameter",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidParameterCombinationException",
          "error":{
            "code":"InvalidParameterCombination",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InternalServiceFault",
          "error":{
            "code":"InternalServiceError",
            "httpStatusCode":500
          },
          "exception":true,
          "xmlOrder":["Message"]
        }
      ]
    },
    "SetAlarmState":{
      "name":"SetAlarmState",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"SetAlarmStateInput"},
      "errors":[
        {
          "shape":"ResourceNotFound",
          "error":{
            "code":"ResourceNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidFormatFault",
          "error":{
            "code":"InvalidFormat",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    }
  },
  "shapes":{
    "ActionPrefix":{
      "type":"string",
      "min":1,
      "max":1024
    },
    "ActionsEnabled":{"type":"boolean"},
    "AlarmArn":{
      "type":"string",
      "min":1,
      "max":1600
    },
    "AlarmDescription":{
      "type":"string",
      "min":0,
      "max":255
    },
    "AlarmHistoryItem":{
      "type":"structure",
      "members":{
        "AlarmName":{"shape":"AlarmName"},
        "Timestamp":{"shape":"Timestamp"},
        "HistoryItemType":{"shape":"HistoryItemType"},
        "HistorySummary":{"shape":"HistorySummary"},
        "HistoryData":{"shape":"HistoryData"}
      }
    },
    "AlarmHistoryItems":{
      "type":"list",
      "member":{"shape":"AlarmHistoryItem"}
    },
    "AlarmName":{
      "type":"string",
      "min":1,
      "max":255
    },
    "AlarmNamePrefix":{
      "type":"string",
      "min":1,
      "max":255
    },
    "AlarmNames":{
      "type":"list",
      "member":{"shape":"AlarmName"},
      "max":100
    },
    "AwsQueryErrorMessage":{"type":"string"},
    "ComparisonOperator":{
      "type":"string",
      "enum":[
        "GreaterThanOrEqualToThreshold",
        "GreaterThanThreshold",
        "LessThanThreshold",
        "LessThanOrEqualToThreshold"
      ]
    },
    "Datapoint":{
      "type":"structure",
      "members":{
        "Timestamp":{"shape":"Timestamp"},
        "SampleCount":{"shape":"DatapointValue"},
        "Average":{"shape":"DatapointValue"},
        "Sum":{"shape":"DatapointValue"},
        "Minimum":{"shape":"DatapointValue"},
        "Maximum":{"shape":"DatapointValue"},
        "Unit":{"shape":"StandardUnit"}
      },
      "xmlOrder":[
        "Timestamp",
        "SampleCount",
        "Average",
        "Sum",
        "Minimum",
        "Maximum",
        "Unit"
      ]
    },
    "DatapointValue":{"type":"double"},
    "Datapoints":{
      "type":"list",
      "member":{"shape":"Datapoint"}
    },
    "DeleteAlarmsInput":{
      "type":"structure",
      "required":["AlarmNames"],
      "members":{
        "AlarmNames":{"shape":"AlarmNames"}
      }
    },
    "DescribeAlarmHistoryInput":{
      "type":"structure",
      "members":{
        "AlarmName":{"shape":"AlarmName"},
        "HistoryItemType":{"shape":"HistoryItemType"},
        "StartDate":{"shape":"Timestamp"},
        "EndDate":{"shape":"Timestamp"},
        "MaxRecords":{"shape":"MaxRecords"},
        "NextToken":{"shape":"NextToken"}
      }
    },
    "DescribeAlarmHistoryOutput":{
      "type":"structure",
      "members":{
        "AlarmHistoryItems":{"shape":"AlarmHistoryItems"},
        "NextToken":{"shape":"NextToken"}
      }
    },
    "DescribeAlarmsForMetricInput":{
      "type":"structure",
      "required":[
        "MetricName",
        "Namespace"
      ],
      "members":{
        "MetricName":{"shape":"MetricName"},
        "Namespace":{"shape":"Namespace"},
        "Statistic":{"shape":"Statistic"},
        "Dimensions":{"shape":"Dimensions"},
        "Period":{"shape":"Period"},
        "Unit":{"shape":"StandardUnit"}
      }
    },
    "DescribeAlarmsForMetricOutput":{
      "type":"structure",
      "members":{
        "MetricAlarms":{"shape":"MetricAlarms"}
      }
    },
    "DescribeAlarmsInput":{
      "type":"structure",
      "members":{
        "AlarmNames":{"shape":"AlarmNames"},
        "AlarmNamePrefix":{"shape":"AlarmNamePrefix"},
        "StateValue":{"shape":"StateValue"},
        "ActionPrefix":{"shape":"ActionPrefix"},
        "MaxRecords":{"shape":"MaxRecords"},
        "NextToken":{"shape":"NextToken"}
      }
    },
    "DescribeAlarmsOutput":{
      "type":"structure",
      "members":{
        "MetricAlarms":{"shape":"MetricAlarms"},
        "NextToken":{"shape":"NextToken"}
      }
    },
    "Dimension":{
      "type":"structure",
      "required":[
        "Name",
        "Value"
      ],
      "members":{
        "Name":{"shape":"DimensionName"},
        "Value":{"shape":"DimensionValue"}
      },
      "xmlOrder":[
        "Name",
        "Value"
      ]
    },
    "DimensionFilter":{
      "type":"structure",
      "required":["Name"],
      "members":{
        "Name":{"shape":"DimensionName"},
        "Value":{"shape":"DimensionValue"}
      }
    },
    "DimensionFilters":{
      "type":"list",
      "member":{"shape":"DimensionFilter"},
      "max":10
    },
    "DimensionName":{
      "type":"string",
      "min":1,
      "max":255
    },
    "DimensionValue":{
      "type":"string",
      "min":1,
      "max":255
    },
    "Dimensions":{
      "type":"list",
      "member":{"shape":"Dimension"},
      "max":10
    },
    "DisableAlarmActionsInput":{
      "type":"structure",
      "required":["AlarmNames"],
      "members":{
        "AlarmNames":{"shape":"AlarmNames"}
      }
    },
    "EnableAlarmActionsInput":{
      "type":"structure",
      "required":["AlarmNames"],
      "members":{
        "AlarmNames":{"shape":"AlarmNames"}
      }
    },
    "ErrorMessage":{
      "type":"string",
      "min":1,
      "max":255
    },
    "EvaluationPeriods":{
      "type":"integer",
      "min":1
    },
    "FaultDescription":{"type":"string"},
    "GetMetricStatisticsInput":{
      "type":"structure",
      "required":[
        "Namespace",
        "MetricName",
        "StartTime",
        "EndTime",
        "Period",
        "Statistics"
      ],
      "members":{
        "Namespace":{"shape":"Namespace"},
        "MetricName":{"shape":"MetricName"},
        "Dimensions":{"shape":"Dimensions"},
        "StartTime":{"shape":"Timestamp"},
        "EndTime":{"shape":"Timestamp"},
        "Period":{"shape":"Period"},
        "Statistics":{"shape":"Statistics"},
        "Unit":{"shape":"StandardUnit"}
      }
    },
    "GetMetricStatisticsOutput":{
      "type":"structure",
      "members":{
        "Label":{"shape":"MetricLabel"},
        "Datapoints":{"shape":"Datapoints"}
      }
    },
    "HistoryData":{
      "type":"string",
      "min":1,
      "max":4095
    },
    "HistoryItemType":{
      "type":"string",
      "enum":[
        "ConfigurationUpdate",
        "StateUpdate",
        "Action"
      ]
    },
    "HistorySummary":{
      "type":"string",
      "min":1,
      "max":255
    },
    "InternalServiceFault":{
      "type":"structure",
      "members":{
        "Message":{"shape":"FaultDescription"}
      },
      "error":{
        "code":"InternalServiceError",
        "httpStatusCode":500
      },
      "exception":true,
      "xmlOrder":["Message"]
    },
    "InvalidFormatFault":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "error":{
        "code":"InvalidFormat",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "InvalidNextToken":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "error":{
        "code":"InvalidNextToken",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "InvalidParameterCombinationException":{
      "type":"structure",
      "members":{
        "message":{"shape":"AwsQueryErrorMessage"}
      },
      "error":{
        "code":"InvalidParameterCombination",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "InvalidParameterValueException":{
      "type":"structure",
      "members":{
        "message":{"shape":"AwsQueryErrorMessage"}
      },
      "error":{
        "code":"InvalidParameterValue",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "LimitExceededFault":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "error":{
        "code":"LimitExceeded",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "ListMetricsInput":{
      "type":"structure",
      "members":{
        "Namespace":{"shape":"Namespace"},
        "MetricName":{"shape":"MetricName"},
        "Dimensions":{"shape":"DimensionFilters"},
        "NextToken":{"shape":"NextToken"}
      }
    },
    "ListMetricsOutput":{
      "type":"structure",
      "members":{
        "Metrics":{"shape":"Metrics"},
        "NextToken":{"shape":"NextToken"}
      },
      "xmlOrder":[
        "Metrics",
        "NextToken"
      ]
    },
    "MaxRecords":{
      "type":"integer",
      "min":1,
      "max":100
    },
    "Metric":{
      "type":"structure",
      "members":{
        "Namespace":{"shape":"Namespace"},
        "MetricName":{"shape":"MetricName"},
        "Dimensions":{"shape":"Dimensions"}
      },
      "xmlOrder":[
        "Namespace",
        "MetricName",
        "Dimensions"
      ]
    },
    "MetricAlarm":{
      "type":"structure",
      "members":{
        "AlarmName":{"shape":"AlarmName"},
        "AlarmArn":{"shape":"AlarmArn"},
        "AlarmDescription":{"shape":"AlarmDescription"},
        "AlarmConfigurationUpdatedTimestamp":{"shape":"Timestamp"},
        "ActionsEnabled":{"shape":"ActionsEnabled"},
        "OKActions":{"shape":"ResourceList"},
        "AlarmActions":{"shape":"ResourceList"},
        "InsufficientDataActions":{"shape":"ResourceList"},
        "StateValue":{"shape":"StateValue"},
        "StateReason":{"shape":"StateReason"},
        "StateReasonData":{"shape":"StateReasonData"},
        "StateUpdatedTimestamp":{"shape":"Timestamp"},
        "MetricName":{"shape":"MetricName"},
        "Namespace":{"shape":"Namespace"},
        "Statistic":{"shape":"Statistic"},
        "Dimensions":{"shape":"Dimensions"},
        "Period":{"shape":"Period"},
        "Unit":{"shape":"StandardUnit"},
        "EvaluationPeriods":{"shape":"EvaluationPeriods"},
        "Threshold":{"shape":"Threshold"},
        "ComparisonOperator":{"shape":"ComparisonOperator"}
      },
      "xmlOrder":[
        "AlarmName",
        "AlarmArn",
        "AlarmDescription",
        "AlarmConfigurationUpdatedTimestamp",
        "ActionsEnabled",
        "OKActions",
        "AlarmActions",
        "InsufficientDataActions",
        "StateValue",
        "StateReason",
        "StateReasonData",
        "StateUpdatedTimestamp",
        "MetricName",
        "Namespace",
        "Statistic",
        "Dimensions",
        "Period",
        "Unit",
        "EvaluationPeriods",
        "Threshold",
        "ComparisonOperator"
      ]
    },
    "MetricAlarms":{
      "type":"list",
      "member":{"shape":"MetricAlarm"}
    },
    "MetricData":{
      "type":"list",
      "member":{"shape":"MetricDatum"}
    },
    "MetricDatum":{
      "type":"structure",
      "required":["MetricName"],
      "members":{
        "MetricName":{"shape":"MetricName"},
        "Dimensions":{"shape":"Dimensions"},
        "Timestamp":{"shape":"Timestamp"},
        "Value":{"shape":"DatapointValue"},
        "StatisticValues":{"shape":"StatisticSet"},
        "Unit":{"shape":"StandardUnit"}
      }
    },
    "MetricLabel":{"type":"string"},
    "MetricName":{
      "type":"string",
      "min":1,
      "max":255
    },
    "Metrics":{
      "type":"list",
      "member":{"shape":"Metric"}
    },
    "MissingRequiredParameterException":{
      "type":"structure",
      "members":{
        "message":{"shape":"AwsQueryErrorMessage"}
      },
      "error":{
        "code":"MissingParameter",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "Namespace":{
      "type":"string",
      "min":1,
      "max":255,
      "pattern":"[^:].*"
    },
    "NextToken":{"type":"string"},
    "Period":{
      "type":"integer",
      "min":60
    },
    "PutMetricAlarmInput":{
      "type":"structure",
      "required":[
        "AlarmName",
        "MetricName",
        "Namespace",
        "Statistic",
        "Period",
        "EvaluationPeriods",
        "Threshold",
        "ComparisonOperator"
      ],
      "members":{
        "AlarmName":{"shape":"AlarmName"},
        "AlarmDescription":{"shape":"AlarmDescription"},
        "ActionsEnabled":{"shape":"ActionsEnabled"},
        "OKActions":{"shape":"ResourceList"},
        "AlarmActions":{"shape":"ResourceList"},
        "InsufficientDataActions":{"shape":"ResourceList"},
        "MetricName":{"shape":"MetricName"},
        "Namespace":{"shape":"Namespace"},
        "Statistic":{"shape":"Statistic"},
        "Dimensions":{"shape":"Dimensions"},
        "Period":{"shape":"Period"},
        "Unit":{"shape":"StandardUnit"},
        "EvaluationPeriods":{"shape":"EvaluationPeriods"},
        "Threshold":{"shape":"Threshold"},
        "ComparisonOperator":{"shape":"ComparisonOperator"}
      }
    },
    "PutMetricDataInput":{
      "type":"structure",
      "required":[
        "Namespace",
        "MetricData"
      ],
      "members":{
        "Namespace":{"shape":"Namespace"},
        "MetricData":{"shape":"MetricData"}
      }
    },
    "ResourceList":{
      "type":"list",
      "member":{"shape":"ResourceName"},
      "max":5
    },
    "ResourceName":{
      "type":"string",
      "min":1,
      "max":1024
    },
    "ResourceNotFound":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "error":{
        "code":"ResourceNotFound",
        "httpStatusCode":404,
        "senderFault":true
      },
      "exception":true
    },
    "SetAlarmStateInput":{
      "type":"structure",
      "required":[
        "AlarmName",
        "StateValue",
        "StateReason"
      ],
      "members":{
        "AlarmName":{"shape":"AlarmName"},
        "StateValue":{"shape":"StateValue"},
        "StateReason":{"shape":"StateReason"},
        "StateReasonData":{"shape":"StateReasonData"}
      }
    },
    "StandardUnit":{
      "type":"string",
      "enum":[
        "Seconds",
        "Microseconds",
        "Milliseconds",
        "Bytes",
        "Kilobytes",
        "Megabytes",
        "Gigabytes",
        "Terabytes",
        "Bits",
        "Kilobits",
        "Megabits",
        "Gigabits",
        "Terabits",
        "Percent",
        "Count",
        "Bytes/Second",
        "Kilobytes/Second",
        "Megabytes/Second",
        "Gigabytes/Second",
        "Terabytes/Second",
        "Bits/Second",
        "Kilobits/Second",
        "Megabits/Second",
        "Gigabits/Second",
        "Terabits/Second",
        "Count/Second",
        "None"
      ]
    },
    "StateReason":{
      "type":"string",
      "min":0,
      "max":1023
    },
    "StateReasonData":{
      "type":"string",
      "min":0,
      "max":4000
    },
    "StateValue":{
      "type":"string",
      "enum":[
        "OK",
        "ALARM",
        "INSUFFICIENT_DATA"
      ]
    },
    "Statistic":{
      "type":"string",
      "enum":[
        "SampleCount",
        "Average",
        "Sum",
        "Minimum",
        "Maximum"
      ]
    },
    "StatisticSet":{
      "type":"structure",
      "required":[
        "SampleCount",
        "Sum",
        "Minimum",
        "Maximum"
      ],
      "members":{
        "SampleCount":{"shape":"DatapointValue"},
        "Sum":{"shape":"DatapointValue"},
        "Minimum":{"shape":"DatapointValue"},
        "Maximum":{"shape":"DatapointValue"}
      }
    },
    "Statistics":{
      "type":"list",
      "member":{"shape":"Statistic"},
      "min":1,
      "max":5
    },
    "Threshold":{"type":"double"},
    "Timestamp":{"type":"timestamp"}
  }
}
,
"CloudWatchLogs":
{
  "metadata":{
    "apiVersion":"2014-03-28",
    "endpointPrefix":"logs",
    "jsonVersion":"1.1",
    "serviceFullName":"Amazon CloudWatch Logs",
    "signatureVersion":"v4",
    "targetPrefix":"Logs_20140328",
    "protocol":"json"
  },
  "operations":{
    "CreateLogGroup":{
      "name":"CreateLogGroup",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateLogGroupRequest"},
      "errors":[
        {
          "shape":"InvalidParameterException",
          "exception":true
        },
        {
          "shape":"ResourceAlreadyExistsException",
          "exception":true
        },
        {
          "shape":"LimitExceededException",
          "exception":true
        },
        {
          "shape":"OperationAbortedException",
          "exception":true
        },
        {
          "shape":"ServiceUnavailableException",
          "exception":true,
          "fault":true
        }
      ]
    },
    "CreateLogStream":{
      "name":"CreateLogStream",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateLogStreamRequest"},
      "errors":[
        {
          "shape":"InvalidParameterException",
          "exception":true
        },
        {
          "shape":"ResourceAlreadyExistsException",
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        },
        {
          "shape":"ServiceUnavailableException",
          "exception":true,
          "fault":true
        }
      ]
    },
    "DeleteLogGroup":{
      "name":"DeleteLogGroup",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteLogGroupRequest"},
      "errors":[
        {
          "shape":"InvalidParameterException",
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        },
        {
          "shape":"OperationAbortedException",
          "exception":true
        },
        {
          "shape":"ServiceUnavailableException",
          "exception":true,
          "fault":true
        }
      ]
    },
    "DeleteLogStream":{
      "name":"DeleteLogStream",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteLogStreamRequest"},
      "errors":[
        {
          "shape":"InvalidParameterException",
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        },
        {
          "shape":"OperationAbortedException",
          "exception":true
        },
        {
          "shape":"ServiceUnavailableException",
          "exception":true,
          "fault":true
        }
      ]
    },
    "DeleteMetricFilter":{
      "name":"DeleteMetricFilter",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteMetricFilterRequest"},
      "errors":[
        {
          "shape":"InvalidParameterException",
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        },
        {
          "shape":"OperationAbortedException",
          "exception":true
        },
        {
          "shape":"ServiceUnavailableException",
          "exception":true,
          "fault":true
        }
      ]
    },
    "DeleteRetentionPolicy":{
      "name":"DeleteRetentionPolicy",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteRetentionPolicyRequest"},
      "errors":[
        {
          "shape":"InvalidParameterException",
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        },
        {
          "shape":"OperationAbortedException",
          "exception":true
        },
        {
          "shape":"ServiceUnavailableException",
          "exception":true,
          "fault":true
        }
      ]
    },
    "DescribeLogGroups":{
      "name":"DescribeLogGroups",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeLogGroupsRequest"},
      "output":{"shape":"DescribeLogGroupsResponse"},
      "errors":[
        {
          "shape":"InvalidParameterException",
          "exception":true
        },
        {
          "shape":"ServiceUnavailableException",
          "exception":true,
          "fault":true
        }
      ]
    },
    "DescribeLogStreams":{
      "name":"DescribeLogStreams",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeLogStreamsRequest"},
      "output":{"shape":"DescribeLogStreamsResponse"},
      "errors":[
        {
          "shape":"InvalidParameterException",
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        },
        {
          "shape":"ServiceUnavailableException",
          "exception":true,
          "fault":true
        }
      ]
    },
    "DescribeMetricFilters":{
      "name":"DescribeMetricFilters",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeMetricFiltersRequest"},
      "output":{"shape":"DescribeMetricFiltersResponse"},
      "errors":[
        {
          "shape":"InvalidParameterException",
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        },
        {
          "shape":"ServiceUnavailableException",
          "exception":true,
          "fault":true
        }
      ]
    },
    "GetLogEvents":{
      "name":"GetLogEvents",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"GetLogEventsRequest"},
      "output":{"shape":"GetLogEventsResponse"},
      "errors":[
        {
          "shape":"InvalidParameterException",
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        },
        {
          "shape":"ServiceUnavailableException",
          "exception":true,
          "fault":true
        }
      ]
    },
    "PutLogEvents":{
      "name":"PutLogEvents",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"PutLogEventsRequest"},
      "output":{"shape":"PutLogEventsResponse"},
      "errors":[
        {
          "shape":"InvalidParameterException",
          "exception":true
        },
        {
          "shape":"InvalidSequenceTokenException",
          "exception":true
        },
        {
          "shape":"DataAlreadyAcceptedException",
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        },
        {
          "shape":"OperationAbortedException",
          "exception":true
        },
        {
          "shape":"ServiceUnavailableException",
          "exception":true,
          "fault":true
        }
      ]
    },
    "PutMetricFilter":{
      "name":"PutMetricFilter",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"PutMetricFilterRequest"},
      "errors":[
        {
          "shape":"InvalidParameterException",
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        },
        {
          "shape":"OperationAbortedException",
          "exception":true
        },
        {
          "shape":"LimitExceededException",
          "exception":true
        },
        {
          "shape":"ServiceUnavailableException",
          "exception":true,
          "fault":true
        }
      ]
    },
    "PutRetentionPolicy":{
      "name":"PutRetentionPolicy",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"PutRetentionPolicyRequest"},
      "errors":[
        {
          "shape":"InvalidParameterException",
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        },
        {
          "shape":"OperationAbortedException",
          "exception":true
        },
        {
          "shape":"ServiceUnavailableException",
          "exception":true,
          "fault":true
        }
      ]
    },
    "TestMetricFilter":{
      "name":"TestMetricFilter",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"TestMetricFilterRequest"},
      "output":{"shape":"TestMetricFilterResponse"},
      "errors":[
        {
          "shape":"InvalidParameterException",
          "exception":true
        },
        {
          "shape":"ServiceUnavailableException",
          "exception":true,
          "fault":true
        }
      ]
    }
  },
  "shapes":{
    "Arn":{"type":"string"},
    "CreateLogGroupRequest":{
      "type":"structure",
      "required":["logGroupName"],
      "members":{
        "logGroupName":{"shape":"LogGroupName"}
      }
    },
    "CreateLogStreamRequest":{
      "type":"structure",
      "required":[
        "logGroupName",
        "logStreamName"
      ],
      "members":{
        "logGroupName":{"shape":"LogGroupName"},
        "logStreamName":{"shape":"LogStreamName"}
      }
    },
    "DataAlreadyAcceptedException":{
      "type":"structure",
      "members":{
        "expectedSequenceToken":{"shape":"SequenceToken"}
      },
      "exception":true
    },
    "Days":{"type":"integer"},
    "DeleteLogGroupRequest":{
      "type":"structure",
      "required":["logGroupName"],
      "members":{
        "logGroupName":{"shape":"LogGroupName"}
      }
    },
    "DeleteLogStreamRequest":{
      "type":"structure",
      "required":[
        "logGroupName",
        "logStreamName"
      ],
      "members":{
        "logGroupName":{"shape":"LogGroupName"},
        "logStreamName":{"shape":"LogStreamName"}
      }
    },
    "DeleteMetricFilterRequest":{
      "type":"structure",
      "required":[
        "logGroupName",
        "filterName"
      ],
      "members":{
        "logGroupName":{"shape":"LogGroupName"},
        "filterName":{"shape":"FilterName"}
      }
    },
    "DeleteRetentionPolicyRequest":{
      "type":"structure",
      "required":["logGroupName"],
      "members":{
        "logGroupName":{"shape":"LogGroupName"}
      }
    },
    "DescribeLimit":{
      "type":"integer",
      "min":1,
      "max":50
    },
    "DescribeLogGroupsRequest":{
      "type":"structure",
      "members":{
        "logGroupNamePrefix":{"shape":"LogGroupName"},
        "nextToken":{"shape":"NextToken"},
        "limit":{"shape":"DescribeLimit"}
      }
    },
    "DescribeLogGroupsResponse":{
      "type":"structure",
      "members":{
        "logGroups":{"shape":"LogGroups"},
        "nextToken":{"shape":"NextToken"}
      }
    },
    "DescribeLogStreamsRequest":{
      "type":"structure",
      "required":["logGroupName"],
      "members":{
        "logGroupName":{"shape":"LogGroupName"},
        "logStreamNamePrefix":{"shape":"LogStreamName"},
        "nextToken":{"shape":"NextToken"},
        "limit":{"shape":"DescribeLimit"}
      }
    },
    "DescribeLogStreamsResponse":{
      "type":"structure",
      "members":{
        "logStreams":{"shape":"LogStreams"},
        "nextToken":{"shape":"NextToken"}
      }
    },
    "DescribeMetricFiltersRequest":{
      "type":"structure",
      "required":["logGroupName"],
      "members":{
        "logGroupName":{"shape":"LogGroupName"},
        "filterNamePrefix":{"shape":"FilterName"},
        "nextToken":{"shape":"NextToken"},
        "limit":{"shape":"DescribeLimit"}
      }
    },
    "DescribeMetricFiltersResponse":{
      "type":"structure",
      "members":{
        "metricFilters":{"shape":"MetricFilters"},
        "nextToken":{"shape":"NextToken"}
      }
    },
    "EventMessage":{
      "type":"string",
      "min":1,
      "max":32768
    },
    "EventNumber":{"type":"long"},
    "EventsLimit":{
      "type":"integer",
      "min":1,
      "max":10000
    },
    "ExtractedValues":{
      "type":"map",
      "key":{"shape":"Token"},
      "value":{"shape":"Value"}
    },
    "FilterCount":{"type":"integer"},
    "FilterName":{
      "type":"string",
      "min":1,
      "max":512,
      "pattern":"[^:*]*"
    },
    "FilterPattern":{
      "type":"string",
      "min":0,
      "max":512
    },
    "GetLogEventsRequest":{
      "type":"structure",
      "required":[
        "logGroupName",
        "logStreamName"
      ],
      "members":{
        "logGroupName":{"shape":"LogGroupName"},
        "logStreamName":{"shape":"LogStreamName"},
        "startTime":{"shape":"Timestamp"},
        "endTime":{"shape":"Timestamp"},
        "nextToken":{"shape":"NextToken"},
        "limit":{"shape":"EventsLimit"},
        "startFromHead":{"shape":"StartFromHead"}
      }
    },
    "GetLogEventsResponse":{
      "type":"structure",
      "members":{
        "events":{"shape":"OutputLogEvents"},
        "nextForwardToken":{"shape":"NextToken"},
        "nextBackwardToken":{"shape":"NextToken"}
      }
    },
    "InputLogEvent":{
      "type":"structure",
      "required":[
        "timestamp",
        "message"
      ],
      "members":{
        "timestamp":{"shape":"Timestamp"},
        "message":{"shape":"EventMessage"}
      }
    },
    "InputLogEvents":{
      "type":"list",
      "member":{"shape":"InputLogEvent"},
      "min":1,
      "max":1000
    },
    "InvalidParameterException":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "InvalidSequenceTokenException":{
      "type":"structure",
      "members":{
        "expectedSequenceToken":{"shape":"SequenceToken"}
      },
      "exception":true
    },
    "LimitExceededException":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "LogGroup":{
      "type":"structure",
      "members":{
        "logGroupName":{"shape":"LogGroupName"},
        "creationTime":{"shape":"Timestamp"},
        "retentionInDays":{"shape":"Days"},
        "metricFilterCount":{"shape":"FilterCount"},
        "arn":{"shape":"Arn"},
        "storedBytes":{"shape":"StoredBytes"}
      }
    },
    "LogGroupName":{
      "type":"string",
      "min":1,
      "max":512,
      "pattern":"[\\.\\-_/#A-Za-z0-9]+"
    },
    "LogGroups":{
      "type":"list",
      "member":{"shape":"LogGroup"}
    },
    "LogStream":{
      "type":"structure",
      "members":{
        "logStreamName":{"shape":"LogStreamName"},
        "creationTime":{"shape":"Timestamp"},
        "firstEventTimestamp":{"shape":"Timestamp"},
        "lastEventTimestamp":{"shape":"Timestamp"},
        "lastIngestionTime":{"shape":"Timestamp"},
        "uploadSequenceToken":{"shape":"SequenceToken"},
        "arn":{"shape":"Arn"},
        "storedBytes":{"shape":"StoredBytes"}
      }
    },
    "LogStreamName":{
      "type":"string",
      "min":1,
      "max":512,
      "pattern":"[^:*]*"
    },
    "LogStreams":{
      "type":"list",
      "member":{"shape":"LogStream"}
    },
    "MetricFilter":{
      "type":"structure",
      "members":{
        "filterName":{"shape":"FilterName"},
        "filterPattern":{"shape":"FilterPattern"},
        "metricTransformations":{"shape":"MetricTransformations"},
        "creationTime":{"shape":"Timestamp"}
      }
    },
    "MetricFilterMatchRecord":{
      "type":"structure",
      "members":{
        "eventNumber":{"shape":"EventNumber"},
        "eventMessage":{"shape":"EventMessage"},
        "extractedValues":{"shape":"ExtractedValues"}
      }
    },
    "MetricFilterMatches":{
      "type":"list",
      "member":{"shape":"MetricFilterMatchRecord"}
    },
    "MetricFilters":{
      "type":"list",
      "member":{"shape":"MetricFilter"}
    },
    "MetricName":{
      "type":"string",
      "max":255,
      "pattern":"[^:*$]*"
    },
    "MetricNamespace":{
      "type":"string",
      "max":255,
      "pattern":"[^:*$]*"
    },
    "MetricTransformation":{
      "type":"structure",
      "required":[
        "metricName",
        "metricNamespace",
        "metricValue"
      ],
      "members":{
        "metricName":{"shape":"MetricName"},
        "metricNamespace":{"shape":"MetricNamespace"},
        "metricValue":{"shape":"MetricValue"}
      }
    },
    "MetricTransformations":{
      "type":"list",
      "member":{"shape":"MetricTransformation"},
      "min":1,
      "max":1
    },
    "MetricValue":{
      "type":"string",
      "max":100
    },
    "NextToken":{"type":"string"},
    "OperationAbortedException":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "OutputLogEvent":{
      "type":"structure",
      "members":{
        "timestamp":{"shape":"Timestamp"},
        "message":{"shape":"EventMessage"},
        "ingestionTime":{"shape":"Timestamp"}
      }
    },
    "OutputLogEvents":{
      "type":"list",
      "member":{"shape":"OutputLogEvent"}
    },
    "PutLogEventsRequest":{
      "type":"structure",
      "required":[
        "logGroupName",
        "logStreamName",
        "logEvents"
      ],
      "members":{
        "logGroupName":{"shape":"LogGroupName"},
        "logStreamName":{"shape":"LogStreamName"},
        "logEvents":{"shape":"InputLogEvents"},
        "sequenceToken":{"shape":"SequenceToken"}
      }
    },
    "PutLogEventsResponse":{
      "type":"structure",
      "members":{
        "nextSequenceToken":{"shape":"SequenceToken"}
      }
    },
    "PutMetricFilterRequest":{
      "type":"structure",
      "required":[
        "logGroupName",
        "filterName",
        "filterPattern",
        "metricTransformations"
      ],
      "members":{
        "logGroupName":{"shape":"LogGroupName"},
        "filterName":{"shape":"FilterName"},
        "filterPattern":{"shape":"FilterPattern"},
        "metricTransformations":{"shape":"MetricTransformations"}
      }
    },
    "PutRetentionPolicyRequest":{
      "type":"structure",
      "required":[
        "logGroupName",
        "retentionInDays"
      ],
      "members":{
        "logGroupName":{"shape":"LogGroupName"},
        "retentionInDays":{"shape":"Days"}
      }
    },
    "ResourceAlreadyExistsException":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "ResourceNotFoundException":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "SequenceToken":{
      "type":"string",
      "min":1
    },
    "ServiceUnavailableException":{
      "type":"structure",
      "members":{
      },
      "exception":true,
      "fault":true
    },
    "StartFromHead":{"type":"boolean"},
    "StoredBytes":{
      "type":"long",
      "min":0
    },
    "TestEventMessages":{
      "type":"list",
      "member":{"shape":"EventMessage"},
      "min":1,
      "max":50
    },
    "TestMetricFilterRequest":{
      "type":"structure",
      "required":[
        "filterPattern",
        "logEventMessages"
      ],
      "members":{
        "filterPattern":{"shape":"FilterPattern"},
        "logEventMessages":{"shape":"TestEventMessages"}
      }
    },
    "TestMetricFilterResponse":{
      "type":"structure",
      "members":{
        "matches":{"shape":"MetricFilterMatches"}
      }
    },
    "Timestamp":{
      "type":"long",
      "min":0
    },
    "Token":{"type":"string"},
    "Value":{"type":"string"}
  }
}
,
"CodeDeploy":
{
  "metadata":{
    "apiVersion":"2014-10-06",
    "endpointPrefix":"codedeploy",
    "jsonVersion":"1.1",
    "serviceAbbreviation":"CodeDeploy",
    "serviceFullName":"AWS CodeDeploy",
    "signatureVersion":"v4",
    "targetPrefix":"CodeDeploy_20141006",
    "timestampFormat":"unixTimestamp",
    "protocol":"json"
  },
  "operations":{
    "BatchGetApplications":{
      "name":"BatchGetApplications",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"BatchGetApplicationsInput"},
      "output":{"shape":"BatchGetApplicationsOutput"},
      "errors":[
        {
          "shape":"ApplicationNameRequiredException",
          "exception":true
        },
        {
          "shape":"InvalidApplicationNameException",
          "exception":true
        },
        {
          "shape":"ApplicationDoesNotExistException",
          "exception":true
        }
      ]
    },
    "BatchGetDeployments":{
      "name":"BatchGetDeployments",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"BatchGetDeploymentsInput"},
      "output":{"shape":"BatchGetDeploymentsOutput"},
      "errors":[
        {
          "shape":"DeploymentIdRequiredException",
          "exception":true
        },
        {
          "shape":"InvalidDeploymentIdException",
          "exception":true
        }
      ]
    },
    "CreateApplication":{
      "name":"CreateApplication",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateApplicationInput"},
      "output":{"shape":"CreateApplicationOutput"},
      "errors":[
        {
          "shape":"ApplicationNameRequiredException",
          "exception":true
        },
        {
          "shape":"InvalidApplicationNameException",
          "exception":true
        },
        {
          "shape":"ApplicationAlreadyExistsException",
          "exception":true
        },
        {
          "shape":"ApplicationLimitExceededException",
          "exception":true
        }
      ]
    },
    "CreateDeployment":{
      "name":"CreateDeployment",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateDeploymentInput"},
      "output":{"shape":"CreateDeploymentOutput"},
      "errors":[
        {
          "shape":"ApplicationNameRequiredException",
          "exception":true
        },
        {
          "shape":"InvalidApplicationNameException",
          "exception":true
        },
        {
          "shape":"ApplicationDoesNotExistException",
          "exception":true
        },
        {
          "shape":"DeploymentGroupNameRequiredException",
          "exception":true
        },
        {
          "shape":"InvalidDeploymentGroupNameException",
          "exception":true
        },
        {
          "shape":"DeploymentGroupDoesNotExistException",
          "exception":true
        },
        {
          "shape":"RevisionRequiredException",
          "exception":true
        },
        {
          "shape":"InvalidRevisionException",
          "exception":true
        },
        {
          "shape":"InvalidDeploymentConfigNameException",
          "exception":true
        },
        {
          "shape":"DeploymentConfigDoesNotExistException",
          "exception":true
        },
        {
          "shape":"DescriptionTooLongException",
          "exception":true
        },
        {
          "shape":"DeploymentLimitExceededException",
          "exception":true
        }
      ]
    },
    "CreateDeploymentConfig":{
      "name":"CreateDeploymentConfig",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateDeploymentConfigInput"},
      "output":{"shape":"CreateDeploymentConfigOutput"},
      "errors":[
        {
          "shape":"InvalidDeploymentConfigNameException",
          "exception":true
        },
        {
          "shape":"DeploymentConfigNameRequiredException",
          "exception":true
        },
        {
          "shape":"DeploymentConfigAlreadyExistsException",
          "exception":true
        },
        {
          "shape":"InvalidMinimumHealthyHostValueException",
          "exception":true
        },
        {
          "shape":"DeploymentConfigLimitExceededException",
          "exception":true
        }
      ]
    },
    "CreateDeploymentGroup":{
      "name":"CreateDeploymentGroup",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateDeploymentGroupInput"},
      "output":{"shape":"CreateDeploymentGroupOutput"},
      "errors":[
        {
          "shape":"ApplicationNameRequiredException",
          "exception":true
        },
        {
          "shape":"InvalidApplicationNameException",
          "exception":true
        },
        {
          "shape":"ApplicationDoesNotExistException",
          "exception":true
        },
        {
          "shape":"DeploymentGroupNameRequiredException",
          "exception":true
        },
        {
          "shape":"InvalidDeploymentGroupNameException",
          "exception":true
        },
        {
          "shape":"DeploymentGroupAlreadyExistsException",
          "exception":true
        },
        {
          "shape":"InvalidEC2TagException",
          "exception":true
        },
        {
          "shape":"InvalidAutoScalingGroupException",
          "exception":true
        },
        {
          "shape":"InvalidDeploymentConfigNameException",
          "exception":true
        },
        {
          "shape":"DeploymentConfigDoesNotExistException",
          "exception":true
        },
        {
          "shape":"RoleRequiredException",
          "exception":true
        },
        {
          "shape":"InvalidRoleException",
          "exception":true
        },
        {
          "shape":"DeploymentGroupLimitExceededException",
          "exception":true
        }
      ]
    },
    "DeleteApplication":{
      "name":"DeleteApplication",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteApplicationInput"},
      "errors":[
        {
          "shape":"ApplicationNameRequiredException",
          "exception":true
        },
        {
          "shape":"InvalidApplicationNameException",
          "exception":true
        }
      ]
    },
    "DeleteDeploymentConfig":{
      "name":"DeleteDeploymentConfig",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteDeploymentConfigInput"},
      "errors":[
        {
          "shape":"InvalidDeploymentConfigNameException",
          "exception":true
        },
        {
          "shape":"DeploymentConfigNameRequiredException",
          "exception":true
        },
        {
          "shape":"DeploymentConfigInUseException",
          "exception":true
        },
        {
          "shape":"InvalidOperationException",
          "exception":true
        }
      ]
    },
    "DeleteDeploymentGroup":{
      "name":"DeleteDeploymentGroup",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteDeploymentGroupInput"},
      "output":{"shape":"DeleteDeploymentGroupOutput"},
      "errors":[
        {
          "shape":"ApplicationNameRequiredException",
          "exception":true
        },
        {
          "shape":"InvalidApplicationNameException",
          "exception":true
        },
        {
          "shape":"DeploymentGroupNameRequiredException",
          "exception":true
        },
        {
          "shape":"InvalidDeploymentGroupNameException",
          "exception":true
        },
        {
          "shape":"InvalidRoleException",
          "exception":true
        }
      ]
    },
    "GetApplication":{
      "name":"GetApplication",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"GetApplicationInput"},
      "output":{"shape":"GetApplicationOutput"},
      "errors":[
        {
          "shape":"ApplicationNameRequiredException",
          "exception":true
        },
        {
          "shape":"InvalidApplicationNameException",
          "exception":true
        },
        {
          "shape":"ApplicationDoesNotExistException",
          "exception":true
        }
      ]
    },
    "GetApplicationRevision":{
      "name":"GetApplicationRevision",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"GetApplicationRevisionInput"},
      "output":{"shape":"GetApplicationRevisionOutput"},
      "errors":[
        {
          "shape":"ApplicationDoesNotExistException",
          "exception":true
        },
        {
          "shape":"ApplicationNameRequiredException",
          "exception":true
        },
        {
          "shape":"InvalidApplicationNameException",
          "exception":true
        },
        {
          "shape":"RevisionDoesNotExistException",
          "exception":true
        },
        {
          "shape":"RevisionRequiredException",
          "exception":true
        },
        {
          "shape":"InvalidRevisionException",
          "exception":true
        }
      ]
    },
    "GetDeployment":{
      "name":"GetDeployment",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"GetDeploymentInput"},
      "output":{"shape":"GetDeploymentOutput"},
      "errors":[
        {
          "shape":"DeploymentIdRequiredException",
          "exception":true
        },
        {
          "shape":"InvalidDeploymentIdException",
          "exception":true
        },
        {
          "shape":"DeploymentDoesNotExistException",
          "exception":true
        }
      ]
    },
    "GetDeploymentConfig":{
      "name":"GetDeploymentConfig",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"GetDeploymentConfigInput"},
      "output":{"shape":"GetDeploymentConfigOutput"},
      "errors":[
        {
          "shape":"InvalidDeploymentConfigNameException",
          "exception":true
        },
        {
          "shape":"DeploymentConfigNameRequiredException",
          "exception":true
        },
        {
          "shape":"DeploymentConfigDoesNotExistException",
          "exception":true
        }
      ]
    },
    "GetDeploymentGroup":{
      "name":"GetDeploymentGroup",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"GetDeploymentGroupInput"},
      "output":{"shape":"GetDeploymentGroupOutput"},
      "errors":[
        {
          "shape":"ApplicationNameRequiredException",
          "exception":true
        },
        {
          "shape":"InvalidApplicationNameException",
          "exception":true
        },
        {
          "shape":"ApplicationDoesNotExistException",
          "exception":true
        },
        {
          "shape":"DeploymentGroupNameRequiredException",
          "exception":true
        },
        {
          "shape":"InvalidDeploymentGroupNameException",
          "exception":true
        },
        {
          "shape":"DeploymentGroupDoesNotExistException",
          "exception":true
        }
      ]
    },
    "GetDeploymentInstance":{
      "name":"GetDeploymentInstance",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"GetDeploymentInstanceInput"},
      "output":{"shape":"GetDeploymentInstanceOutput"},
      "errors":[
        {
          "shape":"DeploymentIdRequiredException",
          "exception":true
        },
        {
          "shape":"DeploymentDoesNotExistException",
          "exception":true
        },
        {
          "shape":"InstanceIdRequiredException",
          "exception":true
        },
        {
          "shape":"InvalidDeploymentIdException",
          "exception":true
        },
        {
          "shape":"InstanceDoesNotExistException",
          "exception":true
        }
      ]
    },
    "ListApplicationRevisions":{
      "name":"ListApplicationRevisions",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ListApplicationRevisionsInput"},
      "output":{"shape":"ListApplicationRevisionsOutput"},
      "errors":[
        {
          "shape":"ApplicationDoesNotExistException",
          "exception":true
        },
        {
          "shape":"ApplicationNameRequiredException",
          "exception":true
        },
        {
          "shape":"InvalidApplicationNameException",
          "exception":true
        },
        {
          "shape":"InvalidSortByException",
          "exception":true
        },
        {
          "shape":"InvalidSortOrderException",
          "exception":true
        },
        {
          "shape":"InvalidBucketNameFilterException",
          "exception":true
        },
        {
          "shape":"InvalidKeyPrefixFilterException",
          "exception":true
        },
        {
          "shape":"BucketNameFilterRequiredException",
          "exception":true
        },
        {
          "shape":"InvalidDeployedStateFilterException",
          "exception":true
        },
        {
          "shape":"InvalidNextTokenException",
          "exception":true
        }
      ]
    },
    "ListApplications":{
      "name":"ListApplications",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ListApplicationsInput"},
      "output":{"shape":"ListApplicationsOutput"},
      "errors":[
        {
          "shape":"InvalidNextTokenException",
          "exception":true
        }
      ]
    },
    "ListDeploymentConfigs":{
      "name":"ListDeploymentConfigs",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ListDeploymentConfigsInput"},
      "output":{"shape":"ListDeploymentConfigsOutput"},
      "errors":[
        {
          "shape":"InvalidNextTokenException",
          "exception":true
        }
      ]
    },
    "ListDeploymentGroups":{
      "name":"ListDeploymentGroups",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ListDeploymentGroupsInput"},
      "output":{"shape":"ListDeploymentGroupsOutput"},
      "errors":[
        {
          "shape":"ApplicationNameRequiredException",
          "exception":true
        },
        {
          "shape":"InvalidApplicationNameException",
          "exception":true
        },
        {
          "shape":"ApplicationDoesNotExistException",
          "exception":true
        },
        {
          "shape":"InvalidNextTokenException",
          "exception":true
        }
      ]
    },
    "ListDeploymentInstances":{
      "name":"ListDeploymentInstances",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ListDeploymentInstancesInput"},
      "output":{"shape":"ListDeploymentInstancesOutput"},
      "errors":[
        {
          "shape":"DeploymentIdRequiredException",
          "exception":true
        },
        {
          "shape":"DeploymentDoesNotExistException",
          "exception":true
        },
        {
          "shape":"DeploymentNotStartedException",
          "exception":true
        },
        {
          "shape":"InvalidNextTokenException",
          "exception":true
        },
        {
          "shape":"InvalidDeploymentIdException",
          "exception":true
        },
        {
          "shape":"InvalidInstanceStatusException",
          "exception":true
        }
      ]
    },
    "ListDeployments":{
      "name":"ListDeployments",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ListDeploymentsInput"},
      "output":{"shape":"ListDeploymentsOutput"},
      "errors":[
        {
          "shape":"ApplicationNameRequiredException",
          "exception":true
        },
        {
          "shape":"InvalidApplicationNameException",
          "exception":true
        },
        {
          "shape":"ApplicationDoesNotExistException",
          "exception":true
        },
        {
          "shape":"InvalidDeploymentGroupNameException",
          "exception":true
        },
        {
          "shape":"DeploymentGroupDoesNotExistException",
          "exception":true
        },
        {
          "shape":"DeploymentGroupNameRequiredException",
          "exception":true
        },
        {
          "shape":"InvalidTimeRangeException",
          "exception":true
        },
        {
          "shape":"InvalidDeploymentStatusException",
          "exception":true
        },
        {
          "shape":"InvalidNextTokenException",
          "exception":true
        }
      ]
    },
    "RegisterApplicationRevision":{
      "name":"RegisterApplicationRevision",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"RegisterApplicationRevisionInput"},
      "errors":[
        {
          "shape":"ApplicationDoesNotExistException",
          "exception":true
        },
        {
          "shape":"ApplicationNameRequiredException",
          "exception":true
        },
        {
          "shape":"InvalidApplicationNameException",
          "exception":true
        },
        {
          "shape":"DescriptionTooLongException",
          "exception":true
        },
        {
          "shape":"RevisionRequiredException",
          "exception":true
        },
        {
          "shape":"InvalidRevisionException",
          "exception":true
        }
      ]
    },
    "StopDeployment":{
      "name":"StopDeployment",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"StopDeploymentInput"},
      "output":{"shape":"StopDeploymentOutput"},
      "errors":[
        {
          "shape":"DeploymentIdRequiredException",
          "exception":true
        },
        {
          "shape":"DeploymentDoesNotExistException",
          "exception":true
        },
        {
          "shape":"DeploymentAlreadyCompletedException",
          "exception":true
        },
        {
          "shape":"InvalidDeploymentIdException",
          "exception":true
        }
      ]
    },
    "UpdateApplication":{
      "name":"UpdateApplication",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"UpdateApplicationInput"},
      "errors":[
        {
          "shape":"ApplicationNameRequiredException",
          "exception":true
        },
        {
          "shape":"InvalidApplicationNameException",
          "exception":true
        },
        {
          "shape":"ApplicationAlreadyExistsException",
          "exception":true
        },
        {
          "shape":"ApplicationDoesNotExistException",
          "exception":true
        }
      ]
    },
    "UpdateDeploymentGroup":{
      "name":"UpdateDeploymentGroup",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"UpdateDeploymentGroupInput"},
      "output":{"shape":"UpdateDeploymentGroupOutput"},
      "errors":[
        {
          "shape":"ApplicationNameRequiredException",
          "exception":true
        },
        {
          "shape":"InvalidApplicationNameException",
          "exception":true
        },
        {
          "shape":"ApplicationDoesNotExistException",
          "exception":true
        },
        {
          "shape":"InvalidDeploymentGroupNameException",
          "exception":true
        },
        {
          "shape":"DeploymentGroupAlreadyExistsException",
          "exception":true
        },
        {
          "shape":"DeploymentGroupNameRequiredException",
          "exception":true
        },
        {
          "shape":"InvalidEC2TagException",
          "exception":true
        },
        {
          "shape":"InvalidAutoScalingGroupException",
          "exception":true
        },
        {
          "shape":"InvalidDeploymentConfigNameException",
          "exception":true
        },
        {
          "shape":"DeploymentConfigDoesNotExistException",
          "exception":true
        },
        {
          "shape":"InvalidRoleException",
          "exception":true
        }
      ]
    }
  },
  "shapes":{
    "ApplicationAlreadyExistsException":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "ApplicationDoesNotExistException":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "ApplicationId":{"type":"string"},
    "ApplicationInfo":{
      "type":"structure",
      "members":{
        "applicationId":{"shape":"ApplicationId"},
        "applicationName":{"shape":"ApplicationName"},
        "createTime":{"shape":"Timestamp"},
        "linkedToGitHub":{"shape":"Boolean"}
      }
    },
    "ApplicationLimitExceededException":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "ApplicationName":{
      "type":"string",
      "min":1,
      "max":100
    },
    "ApplicationNameRequiredException":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "ApplicationRevisionSortBy":{
      "type":"string",
      "enum":[
        "registerTime",
        "firstUsedTime",
        "lastUsedTime"
      ]
    },
    "ApplicationsInfoList":{
      "type":"list",
      "member":{"shape":"ApplicationInfo"}
    },
    "ApplicationsList":{
      "type":"list",
      "member":{"shape":"ApplicationName"}
    },
    "AutoScalingGroup":{
      "type":"structure",
      "members":{
        "name":{"shape":"AutoScalingGroupName"},
        "hook":{"shape":"AutoScalingGroupHook"}
      }
    },
    "AutoScalingGroupHook":{"type":"string"},
    "AutoScalingGroupList":{
      "type":"list",
      "member":{"shape":"AutoScalingGroup"}
    },
    "AutoScalingGroupName":{"type":"string"},
    "AutoScalingGroupNameList":{
      "type":"list",
      "member":{"shape":"AutoScalingGroupName"}
    },
    "BatchGetApplicationsInput":{
      "type":"structure",
      "members":{
        "applicationNames":{"shape":"ApplicationsList"}
      }
    },
    "BatchGetApplicationsOutput":{
      "type":"structure",
      "members":{
        "applicationsInfo":{"shape":"ApplicationsInfoList"}
      }
    },
    "BatchGetDeploymentsInput":{
      "type":"structure",
      "members":{
        "deploymentIds":{"shape":"DeploymentsList"}
      }
    },
    "BatchGetDeploymentsOutput":{
      "type":"structure",
      "members":{
        "deploymentsInfo":{"shape":"DeploymentsInfoList"}
      }
    },
    "Boolean":{"type":"boolean"},
    "BucketNameFilterRequiredException":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "BundleType":{
      "type":"string",
      "enum":[
        "tar",
        "tgz",
        "zip"
      ]
    },
    "CommitId":{"type":"string"},
    "CreateApplicationInput":{
      "type":"structure",
      "required":["applicationName"],
      "members":{
        "applicationName":{"shape":"ApplicationName"}
      }
    },
    "CreateApplicationOutput":{
      "type":"structure",
      "members":{
        "applicationId":{"shape":"ApplicationId"}
      }
    },
    "CreateDeploymentConfigInput":{
      "type":"structure",
      "required":["deploymentConfigName"],
      "members":{
        "deploymentConfigName":{"shape":"DeploymentConfigName"},
        "minimumHealthyHosts":{"shape":"MinimumHealthyHosts"}
      }
    },
    "CreateDeploymentConfigOutput":{
      "type":"structure",
      "members":{
        "deploymentConfigId":{"shape":"DeploymentConfigId"}
      }
    },
    "CreateDeploymentGroupInput":{
      "type":"structure",
      "required":[
        "applicationName",
        "deploymentGroupName"
      ],
      "members":{
        "applicationName":{"shape":"ApplicationName"},
        "deploymentGroupName":{"shape":"DeploymentGroupName"},
        "deploymentConfigName":{"shape":"DeploymentConfigName"},
        "ec2TagFilters":{"shape":"EC2TagFilterList"},
        "autoScalingGroups":{"shape":"AutoScalingGroupNameList"},
        "serviceRoleArn":{"shape":"Role"}
      }
    },
    "CreateDeploymentGroupOutput":{
      "type":"structure",
      "members":{
        "deploymentGroupId":{"shape":"DeploymentGroupId"}
      }
    },
    "CreateDeploymentInput":{
      "type":"structure",
      "required":["applicationName"],
      "members":{
        "applicationName":{"shape":"ApplicationName"},
        "deploymentGroupName":{"shape":"DeploymentGroupName"},
        "revision":{"shape":"RevisionLocation"},
        "deploymentConfigName":{"shape":"DeploymentConfigName"},
        "description":{"shape":"Description"},
        "ignoreApplicationStopFailures":{"shape":"Boolean"}
      }
    },
    "CreateDeploymentOutput":{
      "type":"structure",
      "members":{
        "deploymentId":{"shape":"DeploymentId"}
      }
    },
    "DeleteApplicationInput":{
      "type":"structure",
      "required":["applicationName"],
      "members":{
        "applicationName":{"shape":"ApplicationName"}
      }
    },
    "DeleteDeploymentConfigInput":{
      "type":"structure",
      "required":["deploymentConfigName"],
      "members":{
        "deploymentConfigName":{"shape":"DeploymentConfigName"}
      }
    },
    "DeleteDeploymentGroupInput":{
      "type":"structure",
      "required":[
        "applicationName",
        "deploymentGroupName"
      ],
      "members":{
        "applicationName":{"shape":"ApplicationName"},
        "deploymentGroupName":{"shape":"DeploymentGroupName"}
      }
    },
    "DeleteDeploymentGroupOutput":{
      "type":"structure",
      "members":{
        "hooksNotCleanedUp":{"shape":"AutoScalingGroupList"}
      }
    },
    "DeploymentAlreadyCompletedException":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "DeploymentConfigAlreadyExistsException":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "DeploymentConfigDoesNotExistException":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "DeploymentConfigId":{"type":"string"},
    "DeploymentConfigInUseException":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "DeploymentConfigInfo":{
      "type":"structure",
      "members":{
        "deploymentConfigId":{"shape":"DeploymentConfigId"},
        "deploymentConfigName":{"shape":"DeploymentConfigName"},
        "minimumHealthyHosts":{"shape":"MinimumHealthyHosts"},
        "createTime":{"shape":"Timestamp"}
      }
    },
    "DeploymentConfigLimitExceededException":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "DeploymentConfigName":{
      "type":"string",
      "min":1,
      "max":100
    },
    "DeploymentConfigNameRequiredException":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "DeploymentConfigsList":{
      "type":"list",
      "member":{"shape":"DeploymentConfigName"}
    },
    "DeploymentCreator":{
      "type":"string",
      "enum":[
        "user",
        "autoscaling"
      ]
    },
    "DeploymentDoesNotExistException":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "DeploymentGroupAlreadyExistsException":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "DeploymentGroupDoesNotExistException":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "DeploymentGroupId":{"type":"string"},
    "DeploymentGroupInfo":{
      "type":"structure",
      "members":{
        "applicationName":{"shape":"ApplicationName"},
        "deploymentGroupId":{"shape":"DeploymentGroupId"},
        "deploymentGroupName":{"shape":"DeploymentGroupName"},
        "deploymentConfigName":{"shape":"DeploymentConfigName"},
        "ec2TagFilters":{"shape":"EC2TagFilterList"},
        "autoScalingGroups":{"shape":"AutoScalingGroupList"},
        "serviceRoleArn":{"shape":"Role"},
        "targetRevision":{"shape":"RevisionLocation"}
      }
    },
    "DeploymentGroupLimitExceededException":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "DeploymentGroupName":{
      "type":"string",
      "min":1,
      "max":100
    },
    "DeploymentGroupNameRequiredException":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "DeploymentGroupsList":{
      "type":"list",
      "member":{"shape":"DeploymentGroupName"}
    },
    "DeploymentId":{"type":"string"},
    "DeploymentIdRequiredException":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "DeploymentInfo":{
      "type":"structure",
      "members":{
        "applicationName":{"shape":"ApplicationName"},
        "deploymentGroupName":{"shape":"DeploymentGroupName"},
        "deploymentConfigName":{"shape":"DeploymentConfigName"},
        "deploymentId":{"shape":"DeploymentId"},
        "revision":{"shape":"RevisionLocation"},
        "status":{"shape":"DeploymentStatus"},
        "errorInformation":{"shape":"ErrorInformation"},
        "createTime":{"shape":"Timestamp"},
        "startTime":{"shape":"Timestamp"},
        "completeTime":{"shape":"Timestamp"},
        "deploymentOverview":{"shape":"DeploymentOverview"},
        "description":{"shape":"Description"},
        "creator":{"shape":"DeploymentCreator"},
        "ignoreApplicationStopFailures":{"shape":"Boolean"}
      }
    },
    "DeploymentLimitExceededException":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "DeploymentNotStartedException":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "DeploymentOverview":{
      "type":"structure",
      "members":{
        "Pending":{"shape":"InstanceCount"},
        "InProgress":{"shape":"InstanceCount"},
        "Succeeded":{"shape":"InstanceCount"},
        "Failed":{"shape":"InstanceCount"},
        "Skipped":{"shape":"InstanceCount"}
      }
    },
    "DeploymentStatus":{
      "type":"string",
      "enum":[
        "Created",
        "Queued",
        "InProgress",
        "Succeeded",
        "Failed",
        "Stopped"
      ]
    },
    "DeploymentStatusList":{
      "type":"list",
      "member":{"shape":"DeploymentStatus"}
    },
    "DeploymentsInfoList":{
      "type":"list",
      "member":{"shape":"DeploymentInfo"}
    },
    "DeploymentsList":{
      "type":"list",
      "member":{"shape":"DeploymentId"}
    },
    "Description":{"type":"string"},
    "DescriptionTooLongException":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "Diagnostics":{
      "type":"structure",
      "members":{
        "errorCode":{"shape":"LifecycleErrorCode"},
        "scriptName":{"shape":"ScriptName"},
        "message":{"shape":"LifecycleMessage"},
        "logTail":{"shape":"LogTail"}
      }
    },
    "EC2TagFilter":{
      "type":"structure",
      "members":{
        "Key":{"shape":"Key"},
        "Value":{"shape":"Value"},
        "Type":{"shape":"EC2TagFilterType"}
      }
    },
    "EC2TagFilterList":{
      "type":"list",
      "member":{"shape":"EC2TagFilter"}
    },
    "EC2TagFilterType":{
      "type":"string",
      "enum":[
        "KEY_ONLY",
        "VALUE_ONLY",
        "KEY_AND_VALUE"
      ]
    },
    "ETag":{"type":"string"},
    "ErrorCode":{
      "type":"string",
      "enum":[
        "DEPLOYMENT_GROUP_MISSING",
        "APPLICATION_MISSING",
        "REVISION_MISSING",
        "IAM_ROLE_MISSING",
        "IAM_ROLE_PERMISSIONS",
        "OVER_MAX_INSTANCES",
        "NO_INSTANCES",
        "TIMEOUT",
        "HEALTH_CONSTRAINTS_INVALID",
        "HEALTH_CONSTRAINTS",
        "INTERNAL_ERROR"
      ]
    },
    "ErrorInformation":{
      "type":"structure",
      "members":{
        "code":{"shape":"ErrorCode"},
        "message":{"shape":"ErrorMessage"}
      }
    },
    "ErrorMessage":{"type":"string"},
    "GenericRevisionInfo":{
      "type":"structure",
      "members":{
        "description":{"shape":"Description"},
        "deploymentGroups":{"shape":"DeploymentGroupsList"},
        "firstUsedTime":{"shape":"Timestamp"},
        "lastUsedTime":{"shape":"Timestamp"},
        "registerTime":{"shape":"Timestamp"}
      }
    },
    "GetApplicationInput":{
      "type":"structure",
      "required":["applicationName"],
      "members":{
        "applicationName":{"shape":"ApplicationName"}
      }
    },
    "GetApplicationOutput":{
      "type":"structure",
      "members":{
        "application":{"shape":"ApplicationInfo"}
      }
    },
    "GetApplicationRevisionInput":{
      "type":"structure",
      "required":[
        "applicationName",
        "revision"
      ],
      "members":{
        "applicationName":{"shape":"ApplicationName"},
        "revision":{"shape":"RevisionLocation"}
      }
    },
    "GetApplicationRevisionOutput":{
      "type":"structure",
      "members":{
        "applicationName":{"shape":"ApplicationName"},
        "revision":{"shape":"RevisionLocation"},
        "revisionInfo":{"shape":"GenericRevisionInfo"}
      }
    },
    "GetDeploymentConfigInput":{
      "type":"structure",
      "required":["deploymentConfigName"],
      "members":{
        "deploymentConfigName":{"shape":"DeploymentConfigName"}
      }
    },
    "GetDeploymentConfigOutput":{
      "type":"structure",
      "members":{
        "deploymentConfigInfo":{"shape":"DeploymentConfigInfo"}
      }
    },
    "GetDeploymentGroupInput":{
      "type":"structure",
      "required":[
        "applicationName",
        "deploymentGroupName"
      ],
      "members":{
        "applicationName":{"shape":"ApplicationName"},
        "deploymentGroupName":{"shape":"DeploymentGroupName"}
      }
    },
    "GetDeploymentGroupOutput":{
      "type":"structure",
      "members":{
        "deploymentGroupInfo":{"shape":"DeploymentGroupInfo"}
      }
    },
    "GetDeploymentInput":{
      "type":"structure",
      "required":["deploymentId"],
      "members":{
        "deploymentId":{"shape":"DeploymentId"}
      }
    },
    "GetDeploymentInstanceInput":{
      "type":"structure",
      "required":[
        "deploymentId",
        "instanceId"
      ],
      "members":{
        "deploymentId":{"shape":"DeploymentId"},
        "instanceId":{"shape":"InstanceId"}
      }
    },
    "GetDeploymentInstanceOutput":{
      "type":"structure",
      "members":{
        "instanceSummary":{"shape":"InstanceSummary"}
      }
    },
    "GetDeploymentOutput":{
      "type":"structure",
      "members":{
        "deploymentInfo":{"shape":"DeploymentInfo"}
      }
    },
    "GitHubLocation":{
      "type":"structure",
      "members":{
        "repository":{"shape":"Repository"},
        "commitId":{"shape":"CommitId"}
      }
    },
    "InstanceCount":{"type":"long"},
    "InstanceDoesNotExistException":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "InstanceId":{"type":"string"},
    "InstanceIdRequiredException":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "InstanceStatus":{
      "type":"string",
      "enum":[
        "Pending",
        "InProgress",
        "Succeeded",
        "Failed",
        "Skipped",
        "Unknown"
      ]
    },
    "InstanceStatusList":{
      "type":"list",
      "member":{"shape":"InstanceStatus"}
    },
    "InstanceSummary":{
      "type":"structure",
      "members":{
        "deploymentId":{"shape":"DeploymentId"},
        "instanceId":{"shape":"InstanceId"},
        "status":{"shape":"InstanceStatus"},
        "lastUpdatedAt":{"shape":"Timestamp"},
        "lifecycleEvents":{"shape":"LifecycleEventList"}
      }
    },
    "InstancesList":{
      "type":"list",
      "member":{"shape":"InstanceId"}
    },
    "InvalidApplicationNameException":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "InvalidAutoScalingGroupException":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "InvalidBucketNameFilterException":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "InvalidDeployedStateFilterException":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "InvalidDeploymentConfigNameException":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "InvalidDeploymentGroupNameException":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "InvalidDeploymentIdException":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "InvalidDeploymentStatusException":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "InvalidEC2TagException":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "InvalidInstanceStatusException":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "InvalidKeyPrefixFilterException":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "InvalidMinimumHealthyHostValueException":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "InvalidNextTokenException":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "InvalidOperationException":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "InvalidRevisionException":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "InvalidRoleException":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "InvalidSortByException":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "InvalidSortOrderException":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "InvalidTimeRangeException":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "Key":{"type":"string"},
    "LifecycleErrorCode":{
      "type":"string",
      "enum":[
        "Success",
        "ScriptMissing",
        "ScriptNotExecutable",
        "ScriptTimedOut",
        "ScriptFailed",
        "UnknownError"
      ]
    },
    "LifecycleEvent":{
      "type":"structure",
      "members":{
        "lifecycleEventName":{"shape":"LifecycleEventName"},
        "diagnostics":{"shape":"Diagnostics"},
        "startTime":{"shape":"Timestamp"},
        "endTime":{"shape":"Timestamp"},
        "status":{"shape":"LifecycleEventStatus"}
      }
    },
    "LifecycleEventList":{
      "type":"list",
      "member":{"shape":"LifecycleEvent"}
    },
    "LifecycleEventName":{"type":"string"},
    "LifecycleEventStatus":{
      "type":"string",
      "enum":[
        "Pending",
        "InProgress",
        "Succeeded",
        "Failed",
        "Skipped",
        "Unknown"
      ]
    },
    "LifecycleMessage":{"type":"string"},
    "ListApplicationRevisionsInput":{
      "type":"structure",
      "required":["applicationName"],
      "members":{
        "applicationName":{"shape":"ApplicationName"},
        "sortBy":{"shape":"ApplicationRevisionSortBy"},
        "sortOrder":{"shape":"SortOrder"},
        "s3Bucket":{"shape":"S3Bucket"},
        "s3KeyPrefix":{"shape":"S3Key"},
        "deployed":{"shape":"ListStateFilterAction"},
        "nextToken":{"shape":"NextToken"}
      }
    },
    "ListApplicationRevisionsOutput":{
      "type":"structure",
      "members":{
        "revisions":{"shape":"RevisionLocationList"},
        "nextToken":{"shape":"NextToken"}
      }
    },
    "ListApplicationsInput":{
      "type":"structure",
      "members":{
        "nextToken":{"shape":"NextToken"}
      }
    },
    "ListApplicationsOutput":{
      "type":"structure",
      "members":{
        "applications":{"shape":"ApplicationsList"},
        "nextToken":{"shape":"NextToken"}
      }
    },
    "ListDeploymentConfigsInput":{
      "type":"structure",
      "members":{
        "nextToken":{"shape":"NextToken"}
      }
    },
    "ListDeploymentConfigsOutput":{
      "type":"structure",
      "members":{
        "deploymentConfigsList":{"shape":"DeploymentConfigsList"},
        "nextToken":{"shape":"NextToken"}
      }
    },
    "ListDeploymentGroupsInput":{
      "type":"structure",
      "required":["applicationName"],
      "members":{
        "applicationName":{"shape":"ApplicationName"},
        "nextToken":{"shape":"NextToken"}
      }
    },
    "ListDeploymentGroupsOutput":{
      "type":"structure",
      "members":{
        "applicationName":{"shape":"ApplicationName"},
        "deploymentGroups":{"shape":"DeploymentGroupsList"},
        "nextToken":{"shape":"NextToken"}
      }
    },
    "ListDeploymentInstancesInput":{
      "type":"structure",
      "required":["deploymentId"],
      "members":{
        "deploymentId":{"shape":"DeploymentId"},
        "nextToken":{"shape":"NextToken"},
        "instanceStatusFilter":{"shape":"InstanceStatusList"}
      }
    },
    "ListDeploymentInstancesOutput":{
      "type":"structure",
      "members":{
        "instancesList":{"shape":"InstancesList"},
        "nextToken":{"shape":"NextToken"}
      }
    },
    "ListDeploymentsInput":{
      "type":"structure",
      "members":{
        "applicationName":{"shape":"ApplicationName"},
        "deploymentGroupName":{"shape":"DeploymentGroupName"},
        "includeOnlyStatuses":{"shape":"DeploymentStatusList"},
        "createTimeRange":{"shape":"TimeRange"},
        "nextToken":{"shape":"NextToken"}
      }
    },
    "ListDeploymentsOutput":{
      "type":"structure",
      "members":{
        "deployments":{"shape":"DeploymentsList"},
        "nextToken":{"shape":"NextToken"}
      }
    },
    "ListStateFilterAction":{
      "type":"string",
      "enum":[
        "include",
        "exclude",
        "ignore"
      ]
    },
    "LogTail":{"type":"string"},
    "Message":{"type":"string"},
    "MinimumHealthyHosts":{
      "type":"structure",
      "members":{
        "value":{"shape":"MinimumHealthyHostsValue"},
        "type":{"shape":"MinimumHealthyHostsType"}
      }
    },
    "MinimumHealthyHostsType":{
      "type":"string",
      "enum":[
        "HOST_COUNT",
        "FLEET_PERCENT"
      ]
    },
    "MinimumHealthyHostsValue":{"type":"integer"},
    "NextToken":{"type":"string"},
    "RegisterApplicationRevisionInput":{
      "type":"structure",
      "required":[
        "applicationName",
        "revision"
      ],
      "members":{
        "applicationName":{"shape":"ApplicationName"},
        "description":{"shape":"Description"},
        "revision":{"shape":"RevisionLocation"}
      }
    },
    "Repository":{"type":"string"},
    "RevisionDoesNotExistException":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "RevisionLocation":{
      "type":"structure",
      "members":{
        "revisionType":{"shape":"RevisionLocationType"},
        "s3Location":{"shape":"S3Location"},
        "gitHubLocation":{"shape":"GitHubLocation"}
      }
    },
    "RevisionLocationList":{
      "type":"list",
      "member":{"shape":"RevisionLocation"}
    },
    "RevisionLocationType":{
      "type":"string",
      "enum":[
        "S3",
        "GitHub"
      ]
    },
    "RevisionRequiredException":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "Role":{"type":"string"},
    "RoleRequiredException":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "S3Bucket":{"type":"string"},
    "S3Key":{"type":"string"},
    "S3Location":{
      "type":"structure",
      "members":{
        "bucket":{"shape":"S3Bucket"},
        "key":{"shape":"S3Key"},
        "bundleType":{"shape":"BundleType"},
        "version":{"shape":"VersionId"},
        "eTag":{"shape":"ETag"}
      }
    },
    "ScriptName":{"type":"string"},
    "SortOrder":{
      "type":"string",
      "enum":[
        "ascending",
        "descending"
      ]
    },
    "StopDeploymentInput":{
      "type":"structure",
      "required":["deploymentId"],
      "members":{
        "deploymentId":{"shape":"DeploymentId"}
      }
    },
    "StopDeploymentOutput":{
      "type":"structure",
      "members":{
        "status":{"shape":"StopStatus"},
        "statusMessage":{"shape":"Message"}
      }
    },
    "StopStatus":{
      "type":"string",
      "enum":[
        "Pending",
        "Succeeded"
      ]
    },
    "TimeRange":{
      "type":"structure",
      "members":{
        "start":{"shape":"Timestamp"},
        "end":{"shape":"Timestamp"}
      }
    },
    "Timestamp":{"type":"timestamp"},
    "UpdateApplicationInput":{
      "type":"structure",
      "members":{
        "applicationName":{"shape":"ApplicationName"},
        "newApplicationName":{"shape":"ApplicationName"}
      }
    },
    "UpdateDeploymentGroupInput":{
      "type":"structure",
      "required":[
        "applicationName",
        "currentDeploymentGroupName"
      ],
      "members":{
        "applicationName":{"shape":"ApplicationName"},
        "currentDeploymentGroupName":{"shape":"DeploymentGroupName"},
        "newDeploymentGroupName":{"shape":"DeploymentGroupName"},
        "deploymentConfigName":{"shape":"DeploymentConfigName"},
        "ec2TagFilters":{"shape":"EC2TagFilterList"},
        "autoScalingGroups":{"shape":"AutoScalingGroupNameList"},
        "serviceRoleArn":{"shape":"Role"}
      }
    },
    "UpdateDeploymentGroupOutput":{
      "type":"structure",
      "members":{
        "hooksNotCleanedUp":{"shape":"AutoScalingGroupList"}
      }
    },
    "Value":{"type":"string"},
    "VersionId":{"type":"string"}
  }
}
,
"CognitoIdentity":
{
  "metadata":{
    "apiVersion":"2014-06-30",
    "endpointPrefix":"cognito-identity",
    "jsonVersion":"1.1",
    "serviceFullName":"Amazon Cognito Identity",
    "signatureVersion":"v4",
    "targetPrefix":"AWSCognitoIdentityService",
    "protocol":"json"
  },
  "operations":{
    "CreateIdentityPool":{
      "name":"CreateIdentityPool",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateIdentityPoolInput"},
      "output":{"shape":"IdentityPool"},
      "errors":[
        {
          "shape":"InvalidParameterException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"NotAuthorizedException",
          "error":{"httpStatusCode":403},
          "exception":true
        },
        {
          "shape":"ResourceConflictException",
          "error":{"httpStatusCode":409},
          "exception":true
        },
        {
          "shape":"TooManyRequestsException",
          "error":{"httpStatusCode":429},
          "exception":true
        },
        {
          "shape":"InternalErrorException",
          "exception":true,
          "fault":true
        },
        {
          "shape":"LimitExceededException",
          "error":{"httpStatusCode":400},
          "exception":true
        }
      ]
    },
    "DeleteIdentityPool":{
      "name":"DeleteIdentityPool",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteIdentityPoolInput"},
      "errors":[
        {
          "shape":"InvalidParameterException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "error":{"httpStatusCode":404},
          "exception":true
        },
        {
          "shape":"NotAuthorizedException",
          "error":{"httpStatusCode":403},
          "exception":true
        },
        {
          "shape":"TooManyRequestsException",
          "error":{"httpStatusCode":429},
          "exception":true
        },
        {
          "shape":"InternalErrorException",
          "exception":true,
          "fault":true
        }
      ]
    },
    "DescribeIdentityPool":{
      "name":"DescribeIdentityPool",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeIdentityPoolInput"},
      "output":{"shape":"IdentityPool"},
      "errors":[
        {
          "shape":"InvalidParameterException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "error":{"httpStatusCode":404},
          "exception":true
        },
        {
          "shape":"NotAuthorizedException",
          "error":{"httpStatusCode":403},
          "exception":true
        },
        {
          "shape":"TooManyRequestsException",
          "error":{"httpStatusCode":429},
          "exception":true
        },
        {
          "shape":"InternalErrorException",
          "exception":true,
          "fault":true
        }
      ]
    },
    "GetId":{
      "name":"GetId",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"GetIdInput"},
      "output":{"shape":"GetIdResponse"},
      "errors":[
        {
          "shape":"InvalidParameterException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "error":{"httpStatusCode":404},
          "exception":true
        },
        {
          "shape":"NotAuthorizedException",
          "error":{"httpStatusCode":403},
          "exception":true
        },
        {
          "shape":"ResourceConflictException",
          "error":{"httpStatusCode":409},
          "exception":true
        },
        {
          "shape":"TooManyRequestsException",
          "error":{"httpStatusCode":429},
          "exception":true
        },
        {
          "shape":"InternalErrorException",
          "exception":true,
          "fault":true
        },
        {
          "shape":"LimitExceededException",
          "error":{"httpStatusCode":400},
          "exception":true
        }
      ]
    },
    "GetOpenIdToken":{
      "name":"GetOpenIdToken",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"GetOpenIdTokenInput"},
      "output":{"shape":"GetOpenIdTokenResponse"},
      "errors":[
        {
          "shape":"InvalidParameterException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "error":{"httpStatusCode":404},
          "exception":true
        },
        {
          "shape":"NotAuthorizedException",
          "error":{"httpStatusCode":403},
          "exception":true
        },
        {
          "shape":"ResourceConflictException",
          "error":{"httpStatusCode":409},
          "exception":true
        },
        {
          "shape":"TooManyRequestsException",
          "error":{"httpStatusCode":429},
          "exception":true
        },
        {
          "shape":"InternalErrorException",
          "exception":true,
          "fault":true
        }
      ]
    },
    "GetOpenIdTokenForDeveloperIdentity":{
      "name":"GetOpenIdTokenForDeveloperIdentity",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"GetOpenIdTokenForDeveloperIdentityInput"},
      "output":{"shape":"GetOpenIdTokenForDeveloperIdentityResponse"},
      "errors":[
        {
          "shape":"InvalidParameterException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "error":{"httpStatusCode":404},
          "exception":true
        },
        {
          "shape":"NotAuthorizedException",
          "error":{"httpStatusCode":403},
          "exception":true
        },
        {
          "shape":"ResourceConflictException",
          "error":{"httpStatusCode":409},
          "exception":true
        },
        {
          "shape":"TooManyRequestsException",
          "error":{"httpStatusCode":429},
          "exception":true
        },
        {
          "shape":"InternalErrorException",
          "exception":true,
          "fault":true
        },
        {
          "shape":"DeveloperUserAlreadyRegisteredException",
          "error":{"httpStatusCode":400},
          "exception":true
        }
      ]
    },
    "ListIdentities":{
      "name":"ListIdentities",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ListIdentitiesInput"},
      "output":{"shape":"ListIdentitiesResponse"},
      "errors":[
        {
          "shape":"InvalidParameterException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "error":{"httpStatusCode":404},
          "exception":true
        },
        {
          "shape":"NotAuthorizedException",
          "error":{"httpStatusCode":403},
          "exception":true
        },
        {
          "shape":"TooManyRequestsException",
          "error":{"httpStatusCode":429},
          "exception":true
        },
        {
          "shape":"InternalErrorException",
          "exception":true,
          "fault":true
        }
      ]
    },
    "ListIdentityPools":{
      "name":"ListIdentityPools",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ListIdentityPoolsInput"},
      "output":{"shape":"ListIdentityPoolsResponse"},
      "errors":[
        {
          "shape":"InvalidParameterException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"NotAuthorizedException",
          "error":{"httpStatusCode":403},
          "exception":true
        },
        {
          "shape":"TooManyRequestsException",
          "error":{"httpStatusCode":429},
          "exception":true
        },
        {
          "shape":"InternalErrorException",
          "exception":true,
          "fault":true
        }
      ]
    },
    "LookupDeveloperIdentity":{
      "name":"LookupDeveloperIdentity",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"LookupDeveloperIdentityInput"},
      "output":{"shape":"LookupDeveloperIdentityResponse"},
      "errors":[
        {
          "shape":"InvalidParameterException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "error":{"httpStatusCode":404},
          "exception":true
        },
        {
          "shape":"NotAuthorizedException",
          "error":{"httpStatusCode":403},
          "exception":true
        },
        {
          "shape":"ResourceConflictException",
          "error":{"httpStatusCode":409},
          "exception":true
        },
        {
          "shape":"TooManyRequestsException",
          "error":{"httpStatusCode":429},
          "exception":true
        },
        {
          "shape":"InternalErrorException",
          "exception":true,
          "fault":true
        }
      ]
    },
    "MergeDeveloperIdentities":{
      "name":"MergeDeveloperIdentities",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"MergeDeveloperIdentitiesInput"},
      "output":{"shape":"MergeDeveloperIdentitiesResponse"},
      "errors":[
        {
          "shape":"InvalidParameterException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "error":{"httpStatusCode":404},
          "exception":true
        },
        {
          "shape":"NotAuthorizedException",
          "error":{"httpStatusCode":403},
          "exception":true
        },
        {
          "shape":"ResourceConflictException",
          "error":{"httpStatusCode":409},
          "exception":true
        },
        {
          "shape":"TooManyRequestsException",
          "error":{"httpStatusCode":429},
          "exception":true
        },
        {
          "shape":"InternalErrorException",
          "exception":true,
          "fault":true
        }
      ]
    },
    "UnlinkDeveloperIdentity":{
      "name":"UnlinkDeveloperIdentity",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"UnlinkDeveloperIdentityInput"},
      "errors":[
        {
          "shape":"InvalidParameterException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "error":{"httpStatusCode":404},
          "exception":true
        },
        {
          "shape":"NotAuthorizedException",
          "error":{"httpStatusCode":403},
          "exception":true
        },
        {
          "shape":"ResourceConflictException",
          "error":{"httpStatusCode":409},
          "exception":true
        },
        {
          "shape":"TooManyRequestsException",
          "error":{"httpStatusCode":429},
          "exception":true
        },
        {
          "shape":"InternalErrorException",
          "exception":true,
          "fault":true
        }
      ]
    },
    "UnlinkIdentity":{
      "name":"UnlinkIdentity",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"UnlinkIdentityInput"},
      "errors":[
        {
          "shape":"InvalidParameterException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "error":{"httpStatusCode":404},
          "exception":true
        },
        {
          "shape":"NotAuthorizedException",
          "error":{"httpStatusCode":403},
          "exception":true
        },
        {
          "shape":"ResourceConflictException",
          "error":{"httpStatusCode":409},
          "exception":true
        },
        {
          "shape":"TooManyRequestsException",
          "error":{"httpStatusCode":429},
          "exception":true
        },
        {
          "shape":"InternalErrorException",
          "exception":true,
          "fault":true
        }
      ]
    },
    "UpdateIdentityPool":{
      "name":"UpdateIdentityPool",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"IdentityPool"},
      "output":{"shape":"IdentityPool"},
      "errors":[
        {
          "shape":"InvalidParameterException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "error":{"httpStatusCode":404},
          "exception":true
        },
        {
          "shape":"NotAuthorizedException",
          "error":{"httpStatusCode":403},
          "exception":true
        },
        {
          "shape":"ResourceConflictException",
          "error":{"httpStatusCode":409},
          "exception":true
        },
        {
          "shape":"TooManyRequestsException",
          "error":{"httpStatusCode":429},
          "exception":true
        },
        {
          "shape":"InternalErrorException",
          "exception":true,
          "fault":true
        }
      ]
    }
  },
  "shapes":{
    "AccountId":{
      "type":"string",
      "min":1,
      "max":15,
      "pattern":"\\d+"
    },
    "CreateIdentityPoolInput":{
      "type":"structure",
      "required":[
        "IdentityPoolName",
        "AllowUnauthenticatedIdentities"
      ],
      "members":{
        "IdentityPoolName":{"shape":"IdentityPoolName"},
        "AllowUnauthenticatedIdentities":{"shape":"IdentityPoolUnauthenticated"},
        "SupportedLoginProviders":{"shape":"IdentityProviders"},
        "DeveloperProviderName":{"shape":"DeveloperProviderName"},
        "OpenIdConnectProviderARNs":{"shape":"OIDCProviderList"}
      }
    },
    "DeleteIdentityPoolInput":{
      "type":"structure",
      "required":["IdentityPoolId"],
      "members":{
        "IdentityPoolId":{"shape":"IdentityPoolId"}
      }
    },
    "DescribeIdentityPoolInput":{
      "type":"structure",
      "required":["IdentityPoolId"],
      "members":{
        "IdentityPoolId":{"shape":"IdentityPoolId"}
      }
    },
    "DeveloperProviderName":{
      "type":"string",
      "min":1,
      "max":128,
      "pattern":"[\\w._-]+"
    },
    "DeveloperUserAlreadyRegisteredException":{
      "type":"structure",
      "members":{
        "message":{"shape":"String"}
      },
      "error":{"httpStatusCode":400},
      "exception":true
    },
    "DeveloperUserIdentifier":{"type":"string"},
    "DeveloperUserIdentifierList":{
      "type":"list",
      "member":{"shape":"DeveloperUserIdentifier"}
    },
    "GetIdInput":{
      "type":"structure",
      "required":[
        "AccountId",
        "IdentityPoolId"
      ],
      "members":{
        "AccountId":{"shape":"AccountId"},
        "IdentityPoolId":{"shape":"IdentityPoolId"},
        "Logins":{"shape":"LoginsMap"}
      }
    },
    "GetIdResponse":{
      "type":"structure",
      "members":{
        "IdentityId":{"shape":"IdentityId"}
      }
    },
    "GetOpenIdTokenForDeveloperIdentityInput":{
      "type":"structure",
      "required":[
        "IdentityPoolId",
        "Logins"
      ],
      "members":{
        "IdentityPoolId":{"shape":"IdentityPoolId"},
        "IdentityId":{"shape":"IdentityId"},
        "Logins":{"shape":"LoginsMap"},
        "TokenDuration":{"shape":"TokenDuration"}
      }
    },
    "GetOpenIdTokenForDeveloperIdentityResponse":{
      "type":"structure",
      "members":{
        "IdentityId":{"shape":"IdentityId"},
        "Token":{"shape":"OIDCToken"}
      }
    },
    "GetOpenIdTokenInput":{
      "type":"structure",
      "required":["IdentityId"],
      "members":{
        "IdentityId":{"shape":"IdentityId"},
        "Logins":{"shape":"LoginsMap"}
      }
    },
    "GetOpenIdTokenResponse":{
      "type":"structure",
      "members":{
        "IdentityId":{"shape":"IdentityId"},
        "Token":{"shape":"OIDCToken"}
      }
    },
    "IdentitiesList":{
      "type":"list",
      "member":{"shape":"IdentityDescription"}
    },
    "IdentityDescription":{
      "type":"structure",
      "members":{
        "IdentityId":{"shape":"IdentityId"},
        "Logins":{"shape":"LoginsList"}
      }
    },
    "IdentityId":{
      "type":"string",
      "min":1,
      "max":50,
      "pattern":"[\\w-]+:[0-9a-f-]+"
    },
    "IdentityPool":{
      "type":"structure",
      "required":[
        "IdentityPoolId",
        "IdentityPoolName",
        "AllowUnauthenticatedIdentities"
      ],
      "members":{
        "IdentityPoolId":{"shape":"IdentityPoolId"},
        "IdentityPoolName":{"shape":"IdentityPoolName"},
        "AllowUnauthenticatedIdentities":{"shape":"IdentityPoolUnauthenticated"},
        "SupportedLoginProviders":{"shape":"IdentityProviders"},
        "DeveloperProviderName":{"shape":"DeveloperProviderName"},
        "OpenIdConnectProviderARNs":{"shape":"OIDCProviderList"}
      }
    },
    "IdentityPoolId":{
      "type":"string",
      "min":1,
      "max":50,
      "pattern":"[\\w-]+:[0-9a-f-]+"
    },
    "IdentityPoolName":{
      "type":"string",
      "min":1,
      "max":128,
      "pattern":"[\\w ]+"
    },
    "IdentityPoolShortDescription":{
      "type":"structure",
      "members":{
        "IdentityPoolId":{"shape":"IdentityPoolId"},
        "IdentityPoolName":{"shape":"IdentityPoolName"}
      }
    },
    "IdentityPoolUnauthenticated":{"type":"boolean"},
    "IdentityPoolsList":{
      "type":"list",
      "member":{"shape":"IdentityPoolShortDescription"}
    },
    "IdentityProviderId":{
      "type":"string",
      "min":1,
      "max":128,
      "pattern":"[\\w._-]+"
    },
    "IdentityProviderName":{
      "type":"string",
      "min":1,
      "max":128,
      "pattern":"[\\w._-]+"
    },
    "IdentityProviderToken":{
      "type":"string",
      "min":1,
      "max":2048,
      "pattern":"[\\S]+"
    },
    "IdentityProviders":{
      "type":"map",
      "key":{"shape":"IdentityProviderName"},
      "value":{"shape":"IdentityProviderId"},
      "max":10
    },
    "InternalErrorException":{
      "type":"structure",
      "members":{
        "message":{"shape":"String"}
      },
      "exception":true,
      "fault":true
    },
    "InvalidParameterException":{
      "type":"structure",
      "members":{
        "message":{"shape":"String"}
      },
      "error":{"httpStatusCode":400},
      "exception":true
    },
    "LimitExceededException":{
      "type":"structure",
      "members":{
        "message":{"shape":"String"}
      },
      "error":{"httpStatusCode":400},
      "exception":true
    },
    "ListIdentitiesInput":{
      "type":"structure",
      "required":[
        "IdentityPoolId",
        "MaxResults"
      ],
      "members":{
        "IdentityPoolId":{"shape":"IdentityPoolId"},
        "MaxResults":{"shape":"QueryLimit"},
        "NextToken":{"shape":"PaginationKey"}
      }
    },
    "ListIdentitiesResponse":{
      "type":"structure",
      "members":{
        "IdentityPoolId":{"shape":"IdentityPoolId"},
        "Identities":{"shape":"IdentitiesList"},
        "NextToken":{"shape":"PaginationKey"}
      }
    },
    "ListIdentityPoolsInput":{
      "type":"structure",
      "required":["MaxResults"],
      "members":{
        "MaxResults":{"shape":"QueryLimit"},
        "NextToken":{"shape":"PaginationKey"}
      }
    },
    "ListIdentityPoolsResponse":{
      "type":"structure",
      "members":{
        "IdentityPools":{"shape":"IdentityPoolsList"},
        "NextToken":{"shape":"PaginationKey"}
      }
    },
    "LoginsList":{
      "type":"list",
      "member":{"shape":"IdentityProviderName"}
    },
    "LoginsMap":{
      "type":"map",
      "key":{"shape":"IdentityProviderName"},
      "value":{"shape":"IdentityProviderToken"},
      "max":10
    },
    "LookupDeveloperIdentityInput":{
      "type":"structure",
      "required":["IdentityPoolId"],
      "members":{
        "IdentityPoolId":{"shape":"IdentityPoolId"},
        "IdentityId":{"shape":"IdentityId"},
        "DeveloperUserIdentifier":{"shape":"DeveloperUserIdentifier"},
        "MaxResults":{"shape":"QueryLimit"},
        "NextToken":{"shape":"PaginationKey"}
      }
    },
    "LookupDeveloperIdentityResponse":{
      "type":"structure",
      "members":{
        "IdentityId":{"shape":"IdentityId"},
        "DeveloperUserIdentifierList":{"shape":"DeveloperUserIdentifierList"},
        "NextToken":{"shape":"PaginationKey"}
      }
    },
    "MergeDeveloperIdentitiesInput":{
      "type":"structure",
      "required":[
        "SourceUserIdentifier",
        "DestinationUserIdentifier",
        "DeveloperProviderName",
        "IdentityPoolId"
      ],
      "members":{
        "SourceUserIdentifier":{"shape":"DeveloperUserIdentifier"},
        "DestinationUserIdentifier":{"shape":"DeveloperUserIdentifier"},
        "DeveloperProviderName":{"shape":"DeveloperProviderName"},
        "IdentityPoolId":{"shape":"IdentityPoolId"}
      }
    },
    "MergeDeveloperIdentitiesResponse":{
      "type":"structure",
      "members":{
        "IdentityId":{"shape":"IdentityId"}
      }
    },
    "NotAuthorizedException":{
      "type":"structure",
      "members":{
        "message":{"shape":"String"}
      },
      "error":{"httpStatusCode":403},
      "exception":true
    },
    "OIDCProviderARN":{
      "type":"string",
      "min":20,
      "max":2048
    },
    "OIDCProviderList":{
      "type":"list",
      "member":{"shape":"OIDCProviderARN"}
    },
    "OIDCToken":{"type":"string"},
    "PaginationKey":{
      "type":"string",
      "min":1,
      "pattern":"[\\S]+"
    },
    "QueryLimit":{
      "type":"integer",
      "min":1,
      "max":60
    },
    "ResourceConflictException":{
      "type":"structure",
      "members":{
        "message":{"shape":"String"}
      },
      "error":{"httpStatusCode":409},
      "exception":true
    },
    "ResourceNotFoundException":{
      "type":"structure",
      "members":{
        "message":{"shape":"String"}
      },
      "error":{"httpStatusCode":404},
      "exception":true
    },
    "String":{"type":"string"},
    "TokenDuration":{
      "type":"long",
      "min":1,
      "max":86400
    },
    "TooManyRequestsException":{
      "type":"structure",
      "members":{
        "message":{"shape":"String"}
      },
      "error":{"httpStatusCode":429},
      "exception":true
    },
    "UnlinkDeveloperIdentityInput":{
      "type":"structure",
      "required":[
        "IdentityId",
        "IdentityPoolId",
        "DeveloperProviderName",
        "DeveloperUserIdentifier"
      ],
      "members":{
        "IdentityId":{"shape":"IdentityId"},
        "IdentityPoolId":{"shape":"IdentityPoolId"},
        "DeveloperProviderName":{"shape":"DeveloperProviderName"},
        "DeveloperUserIdentifier":{"shape":"DeveloperUserIdentifier"}
      }
    },
    "UnlinkIdentityInput":{
      "type":"structure",
      "required":[
        "IdentityId",
        "Logins",
        "LoginsToRemove"
      ],
      "members":{
        "IdentityId":{"shape":"IdentityId"},
        "Logins":{"shape":"LoginsMap"},
        "LoginsToRemove":{"shape":"LoginsList"}
      }
    }
  }
}
,
"CognitoSync":
{
  "metadata":{
    "apiVersion":"2014-06-30",
    "endpointPrefix":"cognito-sync",
    "jsonVersion":"1.1",
    "serviceFullName":"Amazon Cognito Sync",
    "signatureVersion":"v4",
    "protocol":"rest-json"
  },
  "operations":{
    "DeleteDataset":{
      "name":"DeleteDataset",
      "http":{
        "method":"DELETE",
        "requestUri":"/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}",
        "responseCode":200
      },
      "input":{"shape":"DeleteDatasetRequest"},
      "output":{"shape":"DeleteDatasetResponse"},
      "errors":[
        {
          "shape":"NotAuthorizedException",
          "error":{
            "code":"NotAuthorizedError",
            "httpStatusCode":403,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidParameterException",
          "error":{
            "code":"InvalidParameter",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "error":{
            "code":"ResourceNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InternalErrorException",
          "error":{
            "code":"InternalError",
            "httpStatusCode":500
          },
          "exception":true,
          "fault":true
        }
      ]
    },
    "DescribeDataset":{
      "name":"DescribeDataset",
      "http":{
        "method":"GET",
        "requestUri":"/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}",
        "responseCode":200
      },
      "input":{"shape":"DescribeDatasetRequest"},
      "output":{"shape":"DescribeDatasetResponse"},
      "errors":[
        {
          "shape":"NotAuthorizedException",
          "error":{
            "code":"NotAuthorizedError",
            "httpStatusCode":403,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidParameterException",
          "error":{
            "code":"InvalidParameter",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "error":{
            "code":"ResourceNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InternalErrorException",
          "error":{
            "code":"InternalError",
            "httpStatusCode":500
          },
          "exception":true,
          "fault":true
        }
      ]
    },
    "DescribeIdentityPoolUsage":{
      "name":"DescribeIdentityPoolUsage",
      "http":{
        "method":"GET",
        "requestUri":"/identitypools/{IdentityPoolId}",
        "responseCode":200
      },
      "input":{"shape":"DescribeIdentityPoolUsageRequest"},
      "output":{"shape":"DescribeIdentityPoolUsageResponse"},
      "errors":[
        {
          "shape":"NotAuthorizedException",
          "error":{
            "code":"NotAuthorizedError",
            "httpStatusCode":403,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidParameterException",
          "error":{
            "code":"InvalidParameter",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "error":{
            "code":"ResourceNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InternalErrorException",
          "error":{
            "code":"InternalError",
            "httpStatusCode":500
          },
          "exception":true,
          "fault":true
        }
      ]
    },
    "DescribeIdentityUsage":{
      "name":"DescribeIdentityUsage",
      "http":{
        "method":"GET",
        "requestUri":"/identitypools/{IdentityPoolId}/identities/{IdentityId}",
        "responseCode":200
      },
      "input":{"shape":"DescribeIdentityUsageRequest"},
      "output":{"shape":"DescribeIdentityUsageResponse"},
      "errors":[
        {
          "shape":"NotAuthorizedException",
          "error":{
            "code":"NotAuthorizedError",
            "httpStatusCode":403,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidParameterException",
          "error":{
            "code":"InvalidParameter",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "error":{
            "code":"ResourceNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InternalErrorException",
          "error":{
            "code":"InternalError",
            "httpStatusCode":500
          },
          "exception":true,
          "fault":true
        }
      ]
    },
    "GetIdentityPoolConfiguration":{
      "name":"GetIdentityPoolConfiguration",
      "http":{
        "method":"GET",
        "requestUri":"/identitypools/{IdentityPoolId}/configuration",
        "responseCode":200
      },
      "input":{"shape":"GetIdentityPoolConfigurationRequest"},
      "output":{"shape":"GetIdentityPoolConfigurationResponse"},
      "errors":[
        {
          "shape":"NotAuthorizedException",
          "error":{
            "code":"NotAuthorizedError",
            "httpStatusCode":403,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidParameterException",
          "error":{
            "code":"InvalidParameter",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "error":{
            "code":"ResourceNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InternalErrorException",
          "error":{
            "code":"InternalError",
            "httpStatusCode":500
          },
          "exception":true,
          "fault":true
        }
      ]
    },
    "ListDatasets":{
      "name":"ListDatasets",
      "http":{
        "method":"GET",
        "requestUri":"/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets",
        "responseCode":200
      },
      "input":{"shape":"ListDatasetsRequest"},
      "output":{"shape":"ListDatasetsResponse"},
      "errors":[
        {
          "shape":"NotAuthorizedException",
          "error":{
            "code":"NotAuthorizedError",
            "httpStatusCode":403,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidParameterException",
          "error":{
            "code":"InvalidParameter",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InternalErrorException",
          "error":{
            "code":"InternalError",
            "httpStatusCode":500
          },
          "exception":true,
          "fault":true
        }
      ]
    },
    "ListIdentityPoolUsage":{
      "name":"ListIdentityPoolUsage",
      "http":{
        "method":"GET",
        "requestUri":"/identitypools",
        "responseCode":200
      },
      "input":{"shape":"ListIdentityPoolUsageRequest"},
      "output":{"shape":"ListIdentityPoolUsageResponse"},
      "errors":[
        {
          "shape":"NotAuthorizedException",
          "error":{
            "code":"NotAuthorizedError",
            "httpStatusCode":403,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidParameterException",
          "error":{
            "code":"InvalidParameter",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InternalErrorException",
          "error":{
            "code":"InternalError",
            "httpStatusCode":500
          },
          "exception":true,
          "fault":true
        }
      ]
    },
    "ListRecords":{
      "name":"ListRecords",
      "http":{
        "method":"GET",
        "requestUri":"/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}/records",
        "responseCode":200
      },
      "input":{"shape":"ListRecordsRequest"},
      "output":{"shape":"ListRecordsResponse"},
      "errors":[
        {
          "shape":"InvalidParameterException",
          "error":{
            "code":"InvalidParameter",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"NotAuthorizedException",
          "error":{
            "code":"NotAuthorizedError",
            "httpStatusCode":403,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"TooManyRequestsException",
          "error":{
            "code":"TooManyRequests",
            "httpStatusCode":429,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InternalErrorException",
          "error":{
            "code":"InternalError",
            "httpStatusCode":500
          },
          "exception":true,
          "fault":true
        }
      ]
    },
    "RegisterDevice":{
      "name":"RegisterDevice",
      "http":{
        "method":"POST",
        "requestUri":"/identitypools/{IdentityPoolId}/identity/{IdentityId}/device",
        "responseCode":200
      },
      "input":{"shape":"RegisterDeviceRequest"},
      "output":{"shape":"RegisterDeviceResponse"},
      "errors":[
        {
          "shape":"NotAuthorizedException",
          "error":{
            "code":"NotAuthorizedError",
            "httpStatusCode":403,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidParameterException",
          "error":{
            "code":"InvalidParameter",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "error":{
            "code":"ResourceNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InternalErrorException",
          "error":{
            "code":"InternalError",
            "httpStatusCode":500
          },
          "exception":true,
          "fault":true
        },
        {
          "shape":"InvalidConfigurationException",
          "error":{
            "code":"InvalidConfiguration",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "SetIdentityPoolConfiguration":{
      "name":"SetIdentityPoolConfiguration",
      "http":{
        "method":"POST",
        "requestUri":"/identitypools/{IdentityPoolId}/configuration",
        "responseCode":200
      },
      "input":{"shape":"SetIdentityPoolConfigurationRequest"},
      "output":{"shape":"SetIdentityPoolConfigurationResponse"},
      "errors":[
        {
          "shape":"NotAuthorizedException",
          "error":{
            "code":"NotAuthorizedError",
            "httpStatusCode":403,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidParameterException",
          "error":{
            "code":"InvalidParameter",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "error":{
            "code":"ResourceNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InternalErrorException",
          "error":{
            "code":"InternalError",
            "httpStatusCode":500
          },
          "exception":true,
          "fault":true
        }
      ]
    },
    "SubscribeToDataset":{
      "name":"SubscribeToDataset",
      "http":{
        "method":"POST",
        "requestUri":"/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}/subscriptions/{DeviceId}",
        "responseCode":200
      },
      "input":{"shape":"SubscribeToDatasetRequest"},
      "output":{"shape":"SubscribeToDatasetResponse"},
      "errors":[
        {
          "shape":"NotAuthorizedException",
          "error":{
            "code":"NotAuthorizedError",
            "httpStatusCode":403,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidParameterException",
          "error":{
            "code":"InvalidParameter",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "error":{
            "code":"ResourceNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InternalErrorException",
          "error":{
            "code":"InternalError",
            "httpStatusCode":500
          },
          "exception":true,
          "fault":true
        },
        {
          "shape":"InvalidConfigurationException",
          "error":{
            "code":"InvalidConfiguration",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "UnsubscribeFromDataset":{
      "name":"UnsubscribeFromDataset",
      "http":{
        "method":"DELETE",
        "requestUri":"/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}/subscriptions/{DeviceId}",
        "responseCode":200
      },
      "input":{"shape":"UnsubscribeFromDatasetRequest"},
      "output":{"shape":"UnsubscribeFromDatasetResponse"},
      "errors":[
        {
          "shape":"NotAuthorizedException",
          "error":{
            "code":"NotAuthorizedError",
            "httpStatusCode":403,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidParameterException",
          "error":{
            "code":"InvalidParameter",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "error":{
            "code":"ResourceNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InternalErrorException",
          "error":{
            "code":"InternalError",
            "httpStatusCode":500
          },
          "exception":true,
          "fault":true
        },
        {
          "shape":"InvalidConfigurationException",
          "error":{
            "code":"InvalidConfiguration",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "UpdateRecords":{
      "name":"UpdateRecords",
      "http":{
        "method":"POST",
        "requestUri":"/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}",
        "responseCode":200
      },
      "input":{"shape":"UpdateRecordsRequest"},
      "output":{"shape":"UpdateRecordsResponse"},
      "errors":[
        {
          "shape":"InvalidParameterException",
          "error":{
            "code":"InvalidParameter",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"LimitExceededException",
          "error":{
            "code":"LimitExceeded",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"NotAuthorizedException",
          "error":{
            "code":"NotAuthorizedError",
            "httpStatusCode":403,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "error":{
            "code":"ResourceNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"ResourceConflictException",
          "error":{
            "code":"ResourceConflict",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"TooManyRequestsException",
          "error":{
            "code":"TooManyRequests",
            "httpStatusCode":429,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InternalErrorException",
          "error":{
            "code":"InternalError",
            "httpStatusCode":500
          },
          "exception":true,
          "fault":true
        }
      ]
    }
  },
  "shapes":{
    "ApplicationArn":{
      "type":"string",
      "pattern":"arn:aws:sns:[-0-9a-z]+:\\d+:app/[A-Z_]+/[a-zA-Z0-9_.-]+"
    },
    "ApplicationArnList":{
      "type":"list",
      "member":{"shape":"ApplicationArn"}
    },
    "AssumeRoleArn":{
      "type":"string",
      "min":20,
      "max":2048,
      "pattern":"arn:aws:iam::\\d+:role/.*"
    },
    "Boolean":{"type":"boolean"},
    "ClientContext":{"type":"string"},
    "Dataset":{
      "type":"structure",
      "members":{
        "IdentityId":{"shape":"IdentityId"},
        "DatasetName":{"shape":"DatasetName"},
        "CreationDate":{"shape":"Date"},
        "LastModifiedDate":{"shape":"Date"},
        "LastModifiedBy":{"shape":"String"},
        "DataStorage":{"shape":"Long"},
        "NumRecords":{"shape":"Long"}
      }
    },
    "DatasetList":{
      "type":"list",
      "member":{"shape":"Dataset"}
    },
    "DatasetName":{
      "type":"string",
      "min":1,
      "max":128,
      "pattern":"[a-zA-Z0-9_.:-]+"
    },
    "Date":{"type":"timestamp"},
    "DeleteDatasetRequest":{
      "type":"structure",
      "required":[
        "IdentityPoolId",
        "IdentityId",
        "DatasetName"
      ],
      "members":{
        "IdentityPoolId":{
          "shape":"IdentityPoolId",
          "location":"uri",
          "locationName":"IdentityPoolId"
        },
        "IdentityId":{
          "shape":"IdentityId",
          "location":"uri",
          "locationName":"IdentityId"
        },
        "DatasetName":{
          "shape":"DatasetName",
          "location":"uri",
          "locationName":"DatasetName"
        }
      }
    },
    "DeleteDatasetResponse":{
      "type":"structure",
      "members":{
        "Dataset":{"shape":"Dataset"}
      }
    },
    "DescribeDatasetRequest":{
      "type":"structure",
      "required":[
        "IdentityPoolId",
        "IdentityId",
        "DatasetName"
      ],
      "members":{
        "IdentityPoolId":{
          "shape":"IdentityPoolId",
          "location":"uri",
          "locationName":"IdentityPoolId"
        },
        "IdentityId":{
          "shape":"IdentityId",
          "location":"uri",
          "locationName":"IdentityId"
        },
        "DatasetName":{
          "shape":"DatasetName",
          "location":"uri",
          "locationName":"DatasetName"
        }
      }
    },
    "DescribeDatasetResponse":{
      "type":"structure",
      "members":{
        "Dataset":{"shape":"Dataset"}
      }
    },
    "DescribeIdentityPoolUsageRequest":{
      "type":"structure",
      "required":["IdentityPoolId"],
      "members":{
        "IdentityPoolId":{
          "shape":"IdentityPoolId",
          "location":"uri",
          "locationName":"IdentityPoolId"
        }
      }
    },
    "DescribeIdentityPoolUsageResponse":{
      "type":"structure",
      "members":{
        "IdentityPoolUsage":{"shape":"IdentityPoolUsage"}
      }
    },
    "DescribeIdentityUsageRequest":{
      "type":"structure",
      "required":[
        "IdentityPoolId",
        "IdentityId"
      ],
      "members":{
        "IdentityPoolId":{
          "shape":"IdentityPoolId",
          "location":"uri",
          "locationName":"IdentityPoolId"
        },
        "IdentityId":{
          "shape":"IdentityId",
          "location":"uri",
          "locationName":"IdentityId"
        }
      }
    },
    "DescribeIdentityUsageResponse":{
      "type":"structure",
      "members":{
        "IdentityUsage":{"shape":"IdentityUsage"}
      }
    },
    "DeviceId":{
      "type":"string",
      "min":1,
      "max":256
    },
    "ExceptionMessage":{"type":"string"},
    "GetIdentityPoolConfigurationRequest":{
      "type":"structure",
      "required":["IdentityPoolId"],
      "members":{
        "IdentityPoolId":{
          "shape":"IdentityPoolId",
          "location":"uri",
          "locationName":"IdentityPoolId"
        }
      }
    },
    "GetIdentityPoolConfigurationResponse":{
      "type":"structure",
      "members":{
        "IdentityPoolId":{"shape":"IdentityPoolId"},
        "PushSync":{"shape":"PushSync"}
      }
    },
    "IdentityId":{
      "type":"string",
      "min":1,
      "max":50,
      "pattern":"[\\w-]+:[0-9a-f-]+"
    },
    "IdentityPoolId":{
      "type":"string",
      "min":1,
      "max":50,
      "pattern":"[\\w-]+:[0-9a-f-]+"
    },
    "IdentityPoolUsage":{
      "type":"structure",
      "members":{
        "IdentityPoolId":{"shape":"IdentityPoolId"},
        "SyncSessionsCount":{"shape":"Long"},
        "DataStorage":{"shape":"Long"},
        "LastModifiedDate":{"shape":"Date"}
      }
    },
    "IdentityPoolUsageList":{
      "type":"list",
      "member":{"shape":"IdentityPoolUsage"}
    },
    "IdentityUsage":{
      "type":"structure",
      "members":{
        "IdentityId":{"shape":"IdentityId"},
        "IdentityPoolId":{"shape":"IdentityPoolId"},
        "LastModifiedDate":{"shape":"Date"},
        "DatasetCount":{"shape":"Integer"},
        "DataStorage":{"shape":"Long"}
      }
    },
    "Integer":{"type":"integer"},
    "IntegerString":{"type":"integer"},
    "InternalErrorException":{
      "type":"structure",
      "required":["message"],
      "members":{
        "message":{"shape":"ExceptionMessage"}
      },
      "error":{
        "code":"InternalError",
        "httpStatusCode":500
      },
      "exception":true,
      "fault":true
    },
    "InvalidConfigurationException":{
      "type":"structure",
      "required":["message"],
      "members":{
        "message":{"shape":"ExceptionMessage"}
      },
      "error":{
        "code":"InvalidConfiguration",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "InvalidParameterException":{
      "type":"structure",
      "required":["message"],
      "members":{
        "message":{"shape":"ExceptionMessage"}
      },
      "error":{
        "code":"InvalidParameter",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "LimitExceededException":{
      "type":"structure",
      "required":["message"],
      "members":{
        "message":{"shape":"ExceptionMessage"}
      },
      "error":{
        "code":"LimitExceeded",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "ListDatasetsRequest":{
      "type":"structure",
      "required":[
        "IdentityId",
        "IdentityPoolId"
      ],
      "members":{
        "IdentityPoolId":{
          "shape":"IdentityPoolId",
          "location":"uri",
          "locationName":"IdentityPoolId"
        },
        "IdentityId":{
          "shape":"IdentityId",
          "location":"uri",
          "locationName":"IdentityId"
        },
        "NextToken":{
          "shape":"String",
          "location":"querystring",
          "locationName":"nextToken"
        },
        "MaxResults":{
          "shape":"IntegerString",
          "location":"querystring",
          "locationName":"maxResults"
        }
      }
    },
    "ListDatasetsResponse":{
      "type":"structure",
      "members":{
        "Datasets":{"shape":"DatasetList"},
        "Count":{"shape":"Integer"},
        "NextToken":{"shape":"String"}
      }
    },
    "ListIdentityPoolUsageRequest":{
      "type":"structure",
      "members":{
        "NextToken":{
          "shape":"String",
          "location":"querystring",
          "locationName":"nextToken"
        },
        "MaxResults":{
          "shape":"IntegerString",
          "location":"querystring",
          "locationName":"maxResults"
        }
      }
    },
    "ListIdentityPoolUsageResponse":{
      "type":"structure",
      "members":{
        "IdentityPoolUsages":{"shape":"IdentityPoolUsageList"},
        "MaxResults":{"shape":"Integer"},
        "Count":{"shape":"Integer"},
        "NextToken":{"shape":"String"}
      }
    },
    "ListRecordsRequest":{
      "type":"structure",
      "required":[
        "IdentityPoolId",
        "IdentityId",
        "DatasetName"
      ],
      "members":{
        "IdentityPoolId":{
          "shape":"IdentityPoolId",
          "location":"uri",
          "locationName":"IdentityPoolId"
        },
        "IdentityId":{
          "shape":"IdentityId",
          "location":"uri",
          "locationName":"IdentityId"
        },
        "DatasetName":{
          "shape":"DatasetName",
          "location":"uri",
          "locationName":"DatasetName"
        },
        "LastSyncCount":{
          "shape":"Long",
          "location":"querystring",
          "locationName":"lastSyncCount"
        },
        "NextToken":{
          "shape":"String",
          "location":"querystring",
          "locationName":"nextToken"
        },
        "MaxResults":{
          "shape":"IntegerString",
          "location":"querystring",
          "locationName":"maxResults"
        },
        "SyncSessionToken":{
          "shape":"SyncSessionToken",
          "location":"querystring",
          "locationName":"syncSessionToken"
        }
      }
    },
    "ListRecordsResponse":{
      "type":"structure",
      "members":{
        "Records":{"shape":"RecordList"},
        "NextToken":{"shape":"String"},
        "Count":{"shape":"Integer"},
        "DatasetSyncCount":{"shape":"Long"},
        "LastModifiedBy":{"shape":"String"},
        "MergedDatasetNames":{"shape":"MergedDatasetNameList"},
        "DatasetExists":{"shape":"Boolean"},
        "DatasetDeletedAfterRequestedSyncCount":{"shape":"Boolean"},
        "SyncSessionToken":{"shape":"String"}
      }
    },
    "Long":{"type":"long"},
    "MergedDatasetNameList":{
      "type":"list",
      "member":{"shape":"String"}
    },
    "NotAuthorizedException":{
      "type":"structure",
      "required":["message"],
      "members":{
        "message":{"shape":"ExceptionMessage"}
      },
      "error":{
        "code":"NotAuthorizedError",
        "httpStatusCode":403,
        "senderFault":true
      },
      "exception":true
    },
    "Operation":{
      "type":"string",
      "enum":[
        "replace",
        "remove"
      ]
    },
    "Platform":{
      "type":"string",
      "enum":[
        "APNS",
        "APNS_SANDBOX",
        "GCM",
        "ADM"
      ]
    },
    "PushSync":{
      "type":"structure",
      "members":{
        "ApplicationArns":{"shape":"ApplicationArnList"},
        "RoleArn":{"shape":"AssumeRoleArn"}
      }
    },
    "PushToken":{"type":"string"},
    "Record":{
      "type":"structure",
      "members":{
        "Key":{"shape":"RecordKey"},
        "Value":{"shape":"RecordValue"},
        "SyncCount":{"shape":"Long"},
        "LastModifiedDate":{"shape":"Date"},
        "LastModifiedBy":{"shape":"String"},
        "DeviceLastModifiedDate":{"shape":"Date"}
      }
    },
    "RecordKey":{
      "type":"string",
      "min":1,
      "max":1024
    },
    "RecordList":{
      "type":"list",
      "member":{"shape":"Record"}
    },
    "RecordPatch":{
      "type":"structure",
      "required":[
        "Op",
        "Key",
        "SyncCount"
      ],
      "members":{
        "Op":{"shape":"Operation"},
        "Key":{"shape":"RecordKey"},
        "Value":{"shape":"RecordValue"},
        "SyncCount":{"shape":"Long"},
        "DeviceLastModifiedDate":{"shape":"Date"}
      }
    },
    "RecordPatchList":{
      "type":"list",
      "member":{"shape":"RecordPatch"}
    },
    "RecordValue":{
      "type":"string",
      "max":1048575
    },
    "RegisterDeviceRequest":{
      "type":"structure",
      "required":[
        "IdentityPoolId",
        "IdentityId",
        "Platform",
        "Token"
      ],
      "members":{
        "IdentityPoolId":{
          "shape":"IdentityPoolId",
          "location":"uri",
          "locationName":"IdentityPoolId"
        },
        "IdentityId":{
          "shape":"IdentityId",
          "location":"uri",
          "locationName":"IdentityId"
        },
        "Platform":{"shape":"Platform"},
        "Token":{"shape":"PushToken"}
      }
    },
    "RegisterDeviceResponse":{
      "type":"structure",
      "members":{
        "DeviceId":{"shape":"DeviceId"}
      }
    },
    "ResourceConflictException":{
      "type":"structure",
      "required":["message"],
      "members":{
        "message":{"shape":"ExceptionMessage"}
      },
      "error":{
        "code":"ResourceConflict",
        "httpStatusCode":409,
        "senderFault":true
      },
      "exception":true
    },
    "ResourceNotFoundException":{
      "type":"structure",
      "required":["message"],
      "members":{
        "message":{"shape":"ExceptionMessage"}
      },
      "error":{
        "code":"ResourceNotFound",
        "httpStatusCode":404,
        "senderFault":true
      },
      "exception":true
    },
    "SetIdentityPoolConfigurationRequest":{
      "type":"structure",
      "required":["IdentityPoolId"],
      "members":{
        "IdentityPoolId":{
          "shape":"IdentityPoolId",
          "location":"uri",
          "locationName":"IdentityPoolId"
        },
        "PushSync":{"shape":"PushSync"}
      }
    },
    "SetIdentityPoolConfigurationResponse":{
      "type":"structure",
      "members":{
        "IdentityPoolId":{"shape":"IdentityPoolId"},
        "PushSync":{"shape":"PushSync"}
      }
    },
    "String":{"type":"string"},
    "SubscribeToDatasetRequest":{
      "type":"structure",
      "required":[
        "IdentityPoolId",
        "IdentityId",
        "DatasetName",
        "DeviceId"
      ],
      "members":{
        "IdentityPoolId":{
          "shape":"IdentityPoolId",
          "location":"uri",
          "locationName":"IdentityPoolId"
        },
        "IdentityId":{
          "shape":"IdentityId",
          "location":"uri",
          "locationName":"IdentityId"
        },
        "DatasetName":{
          "shape":"DatasetName",
          "location":"uri",
          "locationName":"DatasetName"
        },
        "DeviceId":{
          "shape":"DeviceId",
          "location":"uri",
          "locationName":"DeviceId"
        }
      }
    },
    "SubscribeToDatasetResponse":{
      "type":"structure",
      "members":{
      }
    },
    "SyncSessionToken":{"type":"string"},
    "TooManyRequestsException":{
      "type":"structure",
      "required":["message"],
      "members":{
        "message":{"shape":"ExceptionMessage"}
      },
      "error":{
        "code":"TooManyRequests",
        "httpStatusCode":429,
        "senderFault":true
      },
      "exception":true
    },
    "UnsubscribeFromDatasetRequest":{
      "type":"structure",
      "required":[
        "IdentityPoolId",
        "IdentityId",
        "DatasetName",
        "DeviceId"
      ],
      "members":{
        "IdentityPoolId":{
          "shape":"IdentityPoolId",
          "location":"uri",
          "locationName":"IdentityPoolId"
        },
        "IdentityId":{
          "shape":"IdentityId",
          "location":"uri",
          "locationName":"IdentityId"
        },
        "DatasetName":{
          "shape":"DatasetName",
          "location":"uri",
          "locationName":"DatasetName"
        },
        "DeviceId":{
          "shape":"DeviceId",
          "location":"uri",
          "locationName":"DeviceId"
        }
      }
    },
    "UnsubscribeFromDatasetResponse":{
      "type":"structure",
      "members":{
      }
    },
    "UpdateRecordsRequest":{
      "type":"structure",
      "required":[
        "IdentityPoolId",
        "IdentityId",
        "DatasetName",
        "SyncSessionToken"
      ],
      "members":{
        "IdentityPoolId":{
          "shape":"IdentityPoolId",
          "location":"uri",
          "locationName":"IdentityPoolId"
        },
        "IdentityId":{
          "shape":"IdentityId",
          "location":"uri",
          "locationName":"IdentityId"
        },
        "DatasetName":{
          "shape":"DatasetName",
          "location":"uri",
          "locationName":"DatasetName"
        },
        "DeviceId":{"shape":"DeviceId"},
        "RecordPatches":{"shape":"RecordPatchList"},
        "SyncSessionToken":{"shape":"SyncSessionToken"},
        "ClientContext":{
          "shape":"ClientContext",
          "location":"header",
          "locationName":"x-amz-Client-Context"
        }
      }
    },
    "UpdateRecordsResponse":{
      "type":"structure",
      "members":{
        "Records":{"shape":"RecordList"}
      }
    }
  }
}
,
"ConfigService":
{
  "metadata":{
    "apiVersion":"2014-10-17",
    "endpointPrefix":"config",
    "jsonVersion":"1.1",
    "serviceAbbreviation":"Config Service",
    "serviceFullName":"AWS Config",
    "signatureVersion":"v4",
    "targetPrefix":"StarlingDoveService",
    "protocol":"json"
  },
  "operations":{
    "DeleteDeliveryChannel":{
      "name":"DeleteDeliveryChannel",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteDeliveryChannelRequest"},
      "errors":[
        {
          "shape":"NoSuchDeliveryChannelException",
          "exception":true
        },
        {
          "shape":"LastDeliveryChannelDeleteFailedException",
          "exception":true
        }
      ]
    },
    "DeliverConfigSnapshot":{
      "name":"DeliverConfigSnapshot",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeliverConfigSnapshotRequest"},
      "output":{"shape":"DeliverConfigSnapshotResponse"},
      "errors":[
        {
          "shape":"NoSuchDeliveryChannelException",
          "exception":true
        },
        {
          "shape":"NoAvailableConfigurationRecorderException",
          "exception":true
        },
        {
          "shape":"NoRunningConfigurationRecorderException",
          "exception":true
        }
      ]
    },
    "DescribeConfigurationRecorderStatus":{
      "name":"DescribeConfigurationRecorderStatus",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeConfigurationRecorderStatusRequest"},
      "output":{"shape":"DescribeConfigurationRecorderStatusResponse"},
      "errors":[
        {
          "shape":"NoSuchConfigurationRecorderException",
          "exception":true
        }
      ]
    },
    "DescribeConfigurationRecorders":{
      "name":"DescribeConfigurationRecorders",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeConfigurationRecordersRequest"},
      "output":{"shape":"DescribeConfigurationRecordersResponse"},
      "errors":[
        {
          "shape":"NoSuchConfigurationRecorderException",
          "exception":true
        }
      ]
    },
    "DescribeDeliveryChannelStatus":{
      "name":"DescribeDeliveryChannelStatus",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeDeliveryChannelStatusRequest"},
      "output":{"shape":"DescribeDeliveryChannelStatusResponse"},
      "errors":[
        {
          "shape":"NoSuchDeliveryChannelException",
          "exception":true
        }
      ]
    },
    "DescribeDeliveryChannels":{
      "name":"DescribeDeliveryChannels",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeDeliveryChannelsRequest"},
      "output":{"shape":"DescribeDeliveryChannelsResponse"},
      "errors":[
        {
          "shape":"NoSuchDeliveryChannelException",
          "exception":true
        }
      ]
    },
    "GetResourceConfigHistory":{
      "name":"GetResourceConfigHistory",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"GetResourceConfigHistoryRequest"},
      "output":{"shape":"GetResourceConfigHistoryResponse"},
      "errors":[
        {
          "shape":"ValidationException",
          "exception":true
        },
        {
          "shape":"InvalidTimeRangeException",
          "exception":true
        },
        {
          "shape":"InvalidLimitException",
          "exception":true
        },
        {
          "shape":"InvalidNextTokenException",
          "exception":true
        },
        {
          "shape":"NoAvailableConfigurationRecorderException",
          "exception":true
        },
        {
          "shape":"ResourceNotDiscoveredException",
          "exception":true
        }
      ]
    },
    "PutConfigurationRecorder":{
      "name":"PutConfigurationRecorder",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"PutConfigurationRecorderRequest"},
      "errors":[
        {
          "shape":"MaxNumberOfConfigurationRecordersExceededException",
          "exception":true
        },
        {
          "shape":"InvalidConfigurationRecorderNameException",
          "exception":true
        },
        {
          "shape":"InvalidRoleException",
          "exception":true
        }
      ]
    },
    "PutDeliveryChannel":{
      "name":"PutDeliveryChannel",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"PutDeliveryChannelRequest"},
      "errors":[
        {
          "shape":"MaxNumberOfDeliveryChannelsExceededException",
          "exception":true
        },
        {
          "shape":"NoAvailableConfigurationRecorderException",
          "exception":true
        },
        {
          "shape":"InvalidDeliveryChannelNameException",
          "exception":true
        },
        {
          "shape":"NoSuchBucketException",
          "exception":true
        },
        {
          "shape":"InvalidS3KeyPrefixException",
          "exception":true
        },
        {
          "shape":"InvalidSNSTopicARNException",
          "exception":true
        },
        {
          "shape":"InsufficientDeliveryPolicyException",
          "exception":true
        }
      ]
    },
    "StartConfigurationRecorder":{
      "name":"StartConfigurationRecorder",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"StartConfigurationRecorderRequest"},
      "errors":[
        {
          "shape":"NoSuchConfigurationRecorderException",
          "exception":true
        },
        {
          "shape":"NoAvailableDeliveryChannelException",
          "exception":true
        }
      ]
    },
    "StopConfigurationRecorder":{
      "name":"StopConfigurationRecorder",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"StopConfigurationRecorderRequest"},
      "errors":[
        {
          "shape":"NoSuchConfigurationRecorderException",
          "exception":true
        }
      ]
    }
  },
  "shapes":{
    "ARN":{"type":"string"},
    "AccountId":{"type":"string"},
    "AvailabilityZone":{"type":"string"},
    "Boolean":{"type":"boolean"},
    "ChannelName":{
      "type":"string",
      "min":1,
      "max":256
    },
    "ChronologicalOrder":{
      "type":"string",
      "enum":[
        "Reverse",
        "Forward"
      ]
    },
    "ConfigExportDeliveryInfo":{
      "type":"structure",
      "members":{
        "lastStatus":{"shape":"DeliveryStatus"},
        "lastErrorCode":{"shape":"String"},
        "lastErrorMessage":{"shape":"String"},
        "lastAttemptTime":{"shape":"Date"},
        "lastSuccessfulTime":{"shape":"Date"}
      }
    },
    "ConfigStreamDeliveryInfo":{
      "type":"structure",
      "members":{
        "lastStatus":{"shape":"DeliveryStatus"},
        "lastErrorCode":{"shape":"String"},
        "lastErrorMessage":{"shape":"String"},
        "lastStatusChangeTime":{"shape":"Date"}
      }
    },
    "Configuration":{"type":"string"},
    "ConfigurationItem":{
      "type":"structure",
      "members":{
        "version":{"shape":"Version"},
        "accountId":{"shape":"AccountId"},
        "configurationItemCaptureTime":{"shape":"ConfigurationItemCaptureTime"},
        "configurationItemStatus":{"shape":"ConfigurationItemStatus"},
        "configurationStateId":{"shape":"ConfigurationStateId"},
        "configurationItemMD5Hash":{"shape":"ConfigurationItemMD5Hash"},
        "arn":{"shape":"ARN"},
        "resourceType":{"shape":"ResourceType"},
        "resourceId":{"shape":"ResourceId"},
        "availabilityZone":{"shape":"AvailabilityZone"},
        "resourceCreationTime":{"shape":"ResourceCreationTime"},
        "tags":{"shape":"Tags"},
        "relatedEvents":{"shape":"RelatedEventList"},
        "relationships":{"shape":"RelationshipList"},
        "configuration":{"shape":"Configuration"}
      }
    },
    "ConfigurationItemCaptureTime":{"type":"timestamp"},
    "ConfigurationItemList":{
      "type":"list",
      "member":{"shape":"ConfigurationItem"}
    },
    "ConfigurationItemMD5Hash":{"type":"string"},
    "ConfigurationItemStatus":{
      "type":"string",
      "enum":[
        "Ok",
        "Failed",
        "Discovered",
        "Deleted"
      ]
    },
    "ConfigurationRecorder":{
      "type":"structure",
      "members":{
        "name":{"shape":"RecorderName"},
        "roleARN":{"shape":"String"}
      }
    },
    "ConfigurationRecorderList":{
      "type":"list",
      "member":{"shape":"ConfigurationRecorder"}
    },
    "ConfigurationRecorderNameList":{
      "type":"list",
      "member":{"shape":"RecorderName"}
    },
    "ConfigurationRecorderStatus":{
      "type":"structure",
      "members":{
        "name":{"shape":"String"},
        "lastStartTime":{"shape":"Date"},
        "lastStopTime":{"shape":"Date"},
        "recording":{"shape":"Boolean"},
        "lastStatus":{"shape":"RecorderStatus"},
        "lastErrorCode":{"shape":"String"},
        "lastErrorMessage":{"shape":"String"},
        "lastStatusChangeTime":{"shape":"Date"}
      }
    },
    "ConfigurationRecorderStatusList":{
      "type":"list",
      "member":{"shape":"ConfigurationRecorderStatus"}
    },
    "ConfigurationStateId":{"type":"string"},
    "Date":{"type":"timestamp"},
    "DeleteDeliveryChannelRequest":{
      "type":"structure",
      "required":["DeliveryChannelName"],
      "members":{
        "DeliveryChannelName":{"shape":"ChannelName"}
      }
    },
    "DeliverConfigSnapshotRequest":{
      "type":"structure",
      "required":["deliveryChannelName"],
      "members":{
        "deliveryChannelName":{"shape":"ChannelName"}
      }
    },
    "DeliverConfigSnapshotResponse":{
      "type":"structure",
      "members":{
        "configSnapshotId":{"shape":"String"}
      }
    },
    "DeliveryChannel":{
      "type":"structure",
      "members":{
        "name":{"shape":"ChannelName"},
        "s3BucketName":{"shape":"String"},
        "s3KeyPrefix":{"shape":"String"},
        "snsTopicARN":{"shape":"String"}
      }
    },
    "DeliveryChannelList":{
      "type":"list",
      "member":{"shape":"DeliveryChannel"}
    },
    "DeliveryChannelNameList":{
      "type":"list",
      "member":{"shape":"ChannelName"}
    },
    "DeliveryChannelStatus":{
      "type":"structure",
      "members":{
        "name":{"shape":"String"},
        "configSnapshotDeliveryInfo":{"shape":"ConfigExportDeliveryInfo"},
        "configHistoryDeliveryInfo":{"shape":"ConfigExportDeliveryInfo"},
        "configStreamDeliveryInfo":{"shape":"ConfigStreamDeliveryInfo"}
      }
    },
    "DeliveryChannelStatusList":{
      "type":"list",
      "member":{"shape":"DeliveryChannelStatus"}
    },
    "DeliveryStatus":{
      "type":"string",
      "enum":[
        "Success",
        "Failure"
      ]
    },
    "DescribeConfigurationRecorderStatusRequest":{
      "type":"structure",
      "members":{
        "ConfigurationRecorderNames":{"shape":"ConfigurationRecorderNameList"}
      }
    },
    "DescribeConfigurationRecorderStatusResponse":{
      "type":"structure",
      "members":{
        "ConfigurationRecordersStatus":{"shape":"ConfigurationRecorderStatusList"}
      }
    },
    "DescribeConfigurationRecordersRequest":{
      "type":"structure",
      "members":{
        "ConfigurationRecorderNames":{"shape":"ConfigurationRecorderNameList"}
      }
    },
    "DescribeConfigurationRecordersResponse":{
      "type":"structure",
      "members":{
        "ConfigurationRecorders":{"shape":"ConfigurationRecorderList"}
      }
    },
    "DescribeDeliveryChannelStatusRequest":{
      "type":"structure",
      "members":{
        "DeliveryChannelNames":{"shape":"DeliveryChannelNameList"}
      }
    },
    "DescribeDeliveryChannelStatusResponse":{
      "type":"structure",
      "members":{
        "DeliveryChannelsStatus":{"shape":"DeliveryChannelStatusList"}
      }
    },
    "DescribeDeliveryChannelsRequest":{
      "type":"structure",
      "members":{
        "DeliveryChannelNames":{"shape":"DeliveryChannelNameList"}
      }
    },
    "DescribeDeliveryChannelsResponse":{
      "type":"structure",
      "members":{
        "DeliveryChannels":{"shape":"DeliveryChannelList"}
      }
    },
    "EarlierTime":{"type":"timestamp"},
    "GetResourceConfigHistoryRequest":{
      "type":"structure",
      "required":[
        "resourceType",
        "resourceId"
      ],
      "members":{
        "resourceType":{"shape":"ResourceType"},
        "resourceId":{"shape":"ResourceId"},
        "laterTime":{"shape":"LaterTime"},
        "earlierTime":{"shape":"EarlierTime"},
        "chronologicalOrder":{"shape":"ChronologicalOrder"},
        "limit":{"shape":"Limit"},
        "nextToken":{"shape":"NextToken"}
      }
    },
    "GetResourceConfigHistoryResponse":{
      "type":"structure",
      "members":{
        "configurationItems":{"shape":"ConfigurationItemList"},
        "nextToken":{"shape":"NextToken"}
      }
    },
    "InsufficientDeliveryPolicyException":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "InvalidConfigurationRecorderNameException":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "InvalidDeliveryChannelNameException":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "InvalidLimitException":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "InvalidNextTokenException":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "InvalidRoleException":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "InvalidS3KeyPrefixException":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "InvalidSNSTopicARNException":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "InvalidTimeRangeException":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "LastDeliveryChannelDeleteFailedException":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "LaterTime":{"type":"timestamp"},
    "Limit":{
      "type":"integer",
      "min":0,
      "max":100
    },
    "MaxNumberOfConfigurationRecordersExceededException":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "MaxNumberOfDeliveryChannelsExceededException":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "Name":{"type":"string"},
    "NextToken":{"type":"string"},
    "NoAvailableConfigurationRecorderException":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "NoAvailableDeliveryChannelException":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "NoRunningConfigurationRecorderException":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "NoSuchBucketException":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "NoSuchConfigurationRecorderException":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "NoSuchDeliveryChannelException":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "PutConfigurationRecorderRequest":{
      "type":"structure",
      "required":["ConfigurationRecorder"],
      "members":{
        "ConfigurationRecorder":{"shape":"ConfigurationRecorder"}
      }
    },
    "PutDeliveryChannelRequest":{
      "type":"structure",
      "required":["DeliveryChannel"],
      "members":{
        "DeliveryChannel":{"shape":"DeliveryChannel"}
      }
    },
    "RecorderName":{
      "type":"string",
      "min":1,
      "max":256
    },
    "RecorderStatus":{
      "type":"string",
      "enum":[
        "Pending",
        "Success",
        "Failure"
      ]
    },
    "RelatedEvent":{"type":"string"},
    "RelatedEventList":{
      "type":"list",
      "member":{"shape":"RelatedEvent"}
    },
    "Relationship":{
      "type":"structure",
      "members":{
        "resourceType":{"shape":"ResourceType"},
        "resourceId":{"shape":"ResourceId"},
        "relationshipName":{"shape":"RelationshipName"}
      }
    },
    "RelationshipList":{
      "type":"list",
      "member":{"shape":"Relationship"}
    },
    "RelationshipName":{"type":"string"},
    "ResourceCreationTime":{"type":"timestamp"},
    "ResourceId":{"type":"string"},
    "ResourceNotDiscoveredException":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "ResourceType":{
      "type":"string",
      "enum":[
        "AWS::EC2::CustomerGateway",
        "AWS::EC2::EIP",
        "AWS::EC2::Instance",
        "AWS::EC2::InternetGateway",
        "AWS::EC2::NetworkAcl",
        "AWS::EC2::NetworkInterface",
        "AWS::EC2::RouteTable",
        "AWS::EC2::SecurityGroup",
        "AWS::EC2::Subnet",
        "AWS::CloudTrail::Trail",
        "AWS::EC2::Volume",
        "AWS::EC2::VPC",
        "AWS::EC2::VPNConnection",
        "AWS::EC2::VPNGateway"
      ]
    },
    "StartConfigurationRecorderRequest":{
      "type":"structure",
      "required":["ConfigurationRecorderName"],
      "members":{
        "ConfigurationRecorderName":{"shape":"RecorderName"}
      }
    },
    "StopConfigurationRecorderRequest":{
      "type":"structure",
      "required":["ConfigurationRecorderName"],
      "members":{
        "ConfigurationRecorderName":{"shape":"RecorderName"}
      }
    },
    "String":{"type":"string"},
    "Tags":{
      "type":"map",
      "key":{"shape":"Name"},
      "value":{"shape":"Value"}
    },
    "ValidationException":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "Value":{"type":"string"},
    "Version":{"type":"string"}
  }
}
,
"DataPipeline":
{
  "metadata":{
    "apiVersion":"2012-10-29",
    "endpointPrefix":"datapipeline",
    "jsonVersion":"1.1",
    "serviceFullName":"AWS Data Pipeline",
    "signatureVersion":"v4",
    "targetPrefix":"DataPipeline",
    "protocol":"json"
  },
  "operations":{
    "ActivatePipeline":{
      "name":"ActivatePipeline",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ActivatePipelineInput"},
      "output":{"shape":"ActivatePipelineOutput"},
      "errors":[
        {
          "shape":"PipelineNotFoundException",
          "exception":true
        },
        {
          "shape":"PipelineDeletedException",
          "exception":true
        },
        {
          "shape":"InternalServiceError",
          "exception":true,
          "fault":true
        },
        {
          "shape":"InvalidRequestException",
          "exception":true
        }
      ]
    },
    "CreatePipeline":{
      "name":"CreatePipeline",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreatePipelineInput"},
      "output":{"shape":"CreatePipelineOutput"},
      "errors":[
        {
          "shape":"InternalServiceError",
          "exception":true,
          "fault":true
        },
        {
          "shape":"InvalidRequestException",
          "exception":true
        }
      ]
    },
    "DeletePipeline":{
      "name":"DeletePipeline",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeletePipelineInput"},
      "errors":[
        {
          "shape":"PipelineNotFoundException",
          "exception":true
        },
        {
          "shape":"InternalServiceError",
          "exception":true,
          "fault":true
        },
        {
          "shape":"InvalidRequestException",
          "exception":true
        }
      ]
    },
    "DescribeObjects":{
      "name":"DescribeObjects",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeObjectsInput"},
      "output":{"shape":"DescribeObjectsOutput"},
      "errors":[
        {
          "shape":"InternalServiceError",
          "exception":true,
          "fault":true
        },
        {
          "shape":"InvalidRequestException",
          "exception":true
        },
        {
          "shape":"PipelineNotFoundException",
          "exception":true
        },
        {
          "shape":"PipelineDeletedException",
          "exception":true
        }
      ]
    },
    "DescribePipelines":{
      "name":"DescribePipelines",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribePipelinesInput"},
      "output":{"shape":"DescribePipelinesOutput"},
      "errors":[
        {
          "shape":"PipelineNotFoundException",
          "exception":true
        },
        {
          "shape":"PipelineDeletedException",
          "exception":true
        },
        {
          "shape":"InternalServiceError",
          "exception":true,
          "fault":true
        },
        {
          "shape":"InvalidRequestException",
          "exception":true
        }
      ]
    },
    "EvaluateExpression":{
      "name":"EvaluateExpression",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"EvaluateExpressionInput"},
      "output":{"shape":"EvaluateExpressionOutput"},
      "errors":[
        {
          "shape":"InternalServiceError",
          "exception":true,
          "fault":true
        },
        {
          "shape":"TaskNotFoundException",
          "exception":true
        },
        {
          "shape":"InvalidRequestException",
          "exception":true
        },
        {
          "shape":"PipelineNotFoundException",
          "exception":true
        },
        {
          "shape":"PipelineDeletedException",
          "exception":true
        }
      ]
    },
    "GetPipelineDefinition":{
      "name":"GetPipelineDefinition",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"GetPipelineDefinitionInput"},
      "output":{"shape":"GetPipelineDefinitionOutput"},
      "errors":[
        {
          "shape":"InternalServiceError",
          "exception":true,
          "fault":true
        },
        {
          "shape":"InvalidRequestException",
          "exception":true
        },
        {
          "shape":"PipelineNotFoundException",
          "exception":true
        },
        {
          "shape":"PipelineDeletedException",
          "exception":true
        }
      ]
    },
    "ListPipelines":{
      "name":"ListPipelines",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ListPipelinesInput"},
      "output":{"shape":"ListPipelinesOutput"},
      "errors":[
        {
          "shape":"InternalServiceError",
          "exception":true,
          "fault":true
        },
        {
          "shape":"InvalidRequestException",
          "exception":true
        }
      ]
    },
    "PollForTask":{
      "name":"PollForTask",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"PollForTaskInput"},
      "output":{"shape":"PollForTaskOutput"},
      "errors":[
        {
          "shape":"InternalServiceError",
          "exception":true,
          "fault":true
        },
        {
          "shape":"InvalidRequestException",
          "exception":true
        },
        {
          "shape":"TaskNotFoundException",
          "exception":true
        }
      ]
    },
    "PutPipelineDefinition":{
      "name":"PutPipelineDefinition",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"PutPipelineDefinitionInput"},
      "output":{"shape":"PutPipelineDefinitionOutput"},
      "errors":[
        {
          "shape":"InternalServiceError",
          "exception":true,
          "fault":true
        },
        {
          "shape":"InvalidRequestException",
          "exception":true
        },
        {
          "shape":"PipelineNotFoundException",
          "exception":true
        },
        {
          "shape":"PipelineDeletedException",
          "exception":true
        }
      ]
    },
    "QueryObjects":{
      "name":"QueryObjects",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"QueryObjectsInput"},
      "output":{"shape":"QueryObjectsOutput"},
      "errors":[
        {
          "shape":"PipelineNotFoundException",
          "exception":true
        },
        {
          "shape":"PipelineDeletedException",
          "exception":true
        },
        {
          "shape":"InternalServiceError",
          "exception":true,
          "fault":true
        },
        {
          "shape":"InvalidRequestException",
          "exception":true
        }
      ]
    },
    "ReportTaskProgress":{
      "name":"ReportTaskProgress",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ReportTaskProgressInput"},
      "output":{"shape":"ReportTaskProgressOutput"},
      "errors":[
        {
          "shape":"InternalServiceError",
          "exception":true,
          "fault":true
        },
        {
          "shape":"InvalidRequestException",
          "exception":true
        },
        {
          "shape":"TaskNotFoundException",
          "exception":true
        },
        {
          "shape":"PipelineNotFoundException",
          "exception":true
        },
        {
          "shape":"PipelineDeletedException",
          "exception":true
        }
      ]
    },
    "ReportTaskRunnerHeartbeat":{
      "name":"ReportTaskRunnerHeartbeat",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ReportTaskRunnerHeartbeatInput"},
      "output":{"shape":"ReportTaskRunnerHeartbeatOutput"},
      "errors":[
        {
          "shape":"InternalServiceError",
          "exception":true,
          "fault":true
        },
        {
          "shape":"InvalidRequestException",
          "exception":true
        }
      ]
    },
    "SetStatus":{
      "name":"SetStatus",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"SetStatusInput"},
      "errors":[
        {
          "shape":"PipelineNotFoundException",
          "exception":true
        },
        {
          "shape":"PipelineDeletedException",
          "exception":true
        },
        {
          "shape":"InternalServiceError",
          "exception":true,
          "fault":true
        },
        {
          "shape":"InvalidRequestException",
          "exception":true
        }
      ]
    },
    "SetTaskStatus":{
      "name":"SetTaskStatus",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"SetTaskStatusInput"},
      "output":{"shape":"SetTaskStatusOutput"},
      "errors":[
        {
          "shape":"InternalServiceError",
          "exception":true,
          "fault":true
        },
        {
          "shape":"TaskNotFoundException",
          "exception":true
        },
        {
          "shape":"InvalidRequestException",
          "exception":true
        },
        {
          "shape":"PipelineNotFoundException",
          "exception":true
        },
        {
          "shape":"PipelineDeletedException",
          "exception":true
        }
      ]
    },
    "ValidatePipelineDefinition":{
      "name":"ValidatePipelineDefinition",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ValidatePipelineDefinitionInput"},
      "output":{"shape":"ValidatePipelineDefinitionOutput"},
      "errors":[
        {
          "shape":"InternalServiceError",
          "exception":true,
          "fault":true
        },
        {
          "shape":"InvalidRequestException",
          "exception":true
        },
        {
          "shape":"PipelineNotFoundException",
          "exception":true
        },
        {
          "shape":"PipelineDeletedException",
          "exception":true
        }
      ]
    }
  },
  "shapes":{
    "ActivatePipelineInput":{
      "type":"structure",
      "required":["pipelineId"],
      "members":{
        "pipelineId":{"shape":"id"},
        "parameterValues":{"shape":"ParameterValueList"}
      }
    },
    "ActivatePipelineOutput":{
      "type":"structure",
      "members":{
      }
    },
    "CreatePipelineInput":{
      "type":"structure",
      "required":[
        "name",
        "uniqueId"
      ],
      "members":{
        "name":{"shape":"id"},
        "uniqueId":{"shape":"id"},
        "description":{"shape":"string"}
      }
    },
    "CreatePipelineOutput":{
      "type":"structure",
      "required":["pipelineId"],
      "members":{
        "pipelineId":{"shape":"id"}
      }
    },
    "DeletePipelineInput":{
      "type":"structure",
      "required":["pipelineId"],
      "members":{
        "pipelineId":{"shape":"id"}
      }
    },
    "DescribeObjectsInput":{
      "type":"structure",
      "required":[
        "pipelineId",
        "objectIds"
      ],
      "members":{
        "pipelineId":{"shape":"id"},
        "objectIds":{"shape":"idList"},
        "evaluateExpressions":{"shape":"boolean"},
        "marker":{"shape":"string"}
      }
    },
    "DescribeObjectsOutput":{
      "type":"structure",
      "required":["pipelineObjects"],
      "members":{
        "pipelineObjects":{"shape":"PipelineObjectList"},
        "marker":{"shape":"string"},
        "hasMoreResults":{"shape":"boolean"}
      }
    },
    "DescribePipelinesInput":{
      "type":"structure",
      "required":["pipelineIds"],
      "members":{
        "pipelineIds":{"shape":"idList"}
      }
    },
    "DescribePipelinesOutput":{
      "type":"structure",
      "required":["pipelineDescriptionList"],
      "members":{
        "pipelineDescriptionList":{"shape":"PipelineDescriptionList"}
      }
    },
    "EvaluateExpressionInput":{
      "type":"structure",
      "required":[
        "pipelineId",
        "objectId",
        "expression"
      ],
      "members":{
        "pipelineId":{"shape":"id"},
        "objectId":{"shape":"id"},
        "expression":{"shape":"longString"}
      }
    },
    "EvaluateExpressionOutput":{
      "type":"structure",
      "required":["evaluatedExpression"],
      "members":{
        "evaluatedExpression":{"shape":"longString"}
      }
    },
    "Field":{
      "type":"structure",
      "required":["key"],
      "members":{
        "key":{"shape":"fieldNameString"},
        "stringValue":{"shape":"fieldStringValue"},
        "refValue":{"shape":"fieldNameString"}
      }
    },
    "GetPipelineDefinitionInput":{
      "type":"structure",
      "required":["pipelineId"],
      "members":{
        "pipelineId":{"shape":"id"},
        "version":{"shape":"string"}
      }
    },
    "GetPipelineDefinitionOutput":{
      "type":"structure",
      "members":{
        "pipelineObjects":{"shape":"PipelineObjectList"},
        "parameterObjects":{"shape":"ParameterObjectList"},
        "parameterValues":{"shape":"ParameterValueList"}
      }
    },
    "InstanceIdentity":{
      "type":"structure",
      "members":{
        "document":{"shape":"string"},
        "signature":{"shape":"string"}
      }
    },
    "InternalServiceError":{
      "type":"structure",
      "members":{
        "message":{"shape":"errorMessage"}
      },
      "exception":true,
      "fault":true
    },
    "InvalidRequestException":{
      "type":"structure",
      "members":{
        "message":{"shape":"errorMessage"}
      },
      "exception":true
    },
    "ListPipelinesInput":{
      "type":"structure",
      "members":{
        "marker":{"shape":"string"}
      }
    },
    "ListPipelinesOutput":{
      "type":"structure",
      "required":["pipelineIdList"],
      "members":{
        "pipelineIdList":{"shape":"pipelineList"},
        "marker":{"shape":"string"},
        "hasMoreResults":{"shape":"boolean"}
      }
    },
    "Operator":{
      "type":"structure",
      "members":{
        "type":{"shape":"OperatorType"},
        "values":{"shape":"stringList"}
      }
    },
    "OperatorType":{
      "type":"string",
      "enum":[
        "EQ",
        "REF_EQ",
        "LE",
        "GE",
        "BETWEEN"
      ]
    },
    "ParameterAttribute":{
      "type":"structure",
      "required":[
        "key",
        "stringValue"
      ],
      "members":{
        "key":{"shape":"attributeNameString"},
        "stringValue":{"shape":"attributeValueString"}
      }
    },
    "ParameterAttributeList":{
      "type":"list",
      "member":{"shape":"ParameterAttribute"}
    },
    "ParameterObject":{
      "type":"structure",
      "required":[
        "id",
        "attributes"
      ],
      "members":{
        "id":{"shape":"fieldNameString"},
        "attributes":{"shape":"ParameterAttributeList"}
      }
    },
    "ParameterObjectList":{
      "type":"list",
      "member":{"shape":"ParameterObject"}
    },
    "ParameterValue":{
      "type":"structure",
      "required":[
        "id",
        "stringValue"
      ],
      "members":{
        "id":{"shape":"fieldNameString"},
        "stringValue":{"shape":"fieldStringValue"}
      }
    },
    "ParameterValueList":{
      "type":"list",
      "member":{"shape":"ParameterValue"}
    },
    "PipelineDeletedException":{
      "type":"structure",
      "members":{
        "message":{"shape":"errorMessage"}
      },
      "exception":true
    },
    "PipelineDescription":{
      "type":"structure",
      "required":[
        "pipelineId",
        "name",
        "fields"
      ],
      "members":{
        "pipelineId":{"shape":"id"},
        "name":{"shape":"id"},
        "fields":{"shape":"fieldList"},
        "description":{"shape":"string"}
      }
    },
    "PipelineDescriptionList":{
      "type":"list",
      "member":{"shape":"PipelineDescription"}
    },
    "PipelineIdName":{
      "type":"structure",
      "members":{
        "id":{"shape":"id"},
        "name":{"shape":"id"}
      }
    },
    "PipelineNotFoundException":{
      "type":"structure",
      "members":{
        "message":{"shape":"errorMessage"}
      },
      "exception":true
    },
    "PipelineObject":{
      "type":"structure",
      "required":[
        "id",
        "name",
        "fields"
      ],
      "members":{
        "id":{"shape":"id"},
        "name":{"shape":"id"},
        "fields":{"shape":"fieldList"}
      }
    },
    "PipelineObjectList":{
      "type":"list",
      "member":{"shape":"PipelineObject"}
    },
    "PipelineObjectMap":{
      "type":"map",
      "key":{"shape":"id"},
      "value":{"shape":"PipelineObject"}
    },
    "PollForTaskInput":{
      "type":"structure",
      "required":["workerGroup"],
      "members":{
        "workerGroup":{"shape":"string"},
        "hostname":{"shape":"id"},
        "instanceIdentity":{"shape":"InstanceIdentity"}
      }
    },
    "PollForTaskOutput":{
      "type":"structure",
      "members":{
        "taskObject":{"shape":"TaskObject"}
      }
    },
    "PutPipelineDefinitionInput":{
      "type":"structure",
      "required":[
        "pipelineId",
        "pipelineObjects"
      ],
      "members":{
        "pipelineId":{"shape":"id"},
        "pipelineObjects":{"shape":"PipelineObjectList"},
        "parameterObjects":{"shape":"ParameterObjectList"},
        "parameterValues":{"shape":"ParameterValueList"}
      }
    },
    "PutPipelineDefinitionOutput":{
      "type":"structure",
      "required":["errored"],
      "members":{
        "validationErrors":{"shape":"ValidationErrors"},
        "validationWarnings":{"shape":"ValidationWarnings"},
        "errored":{"shape":"boolean"}
      }
    },
    "Query":{
      "type":"structure",
      "members":{
        "selectors":{"shape":"SelectorList"}
      }
    },
    "QueryObjectsInput":{
      "type":"structure",
      "required":[
        "pipelineId",
        "sphere"
      ],
      "members":{
        "pipelineId":{"shape":"id"},
        "query":{"shape":"Query"},
        "sphere":{"shape":"string"},
        "marker":{"shape":"string"},
        "limit":{"shape":"int"}
      }
    },
    "QueryObjectsOutput":{
      "type":"structure",
      "members":{
        "ids":{"shape":"idList"},
        "marker":{"shape":"string"},
        "hasMoreResults":{"shape":"boolean"}
      }
    },
    "ReportTaskProgressInput":{
      "type":"structure",
      "required":["taskId"],
      "members":{
        "taskId":{"shape":"taskId"},
        "fields":{"shape":"fieldList"}
      }
    },
    "ReportTaskProgressOutput":{
      "type":"structure",
      "required":["canceled"],
      "members":{
        "canceled":{"shape":"boolean"}
      }
    },
    "ReportTaskRunnerHeartbeatInput":{
      "type":"structure",
      "required":["taskrunnerId"],
      "members":{
        "taskrunnerId":{"shape":"id"},
        "workerGroup":{"shape":"string"},
        "hostname":{"shape":"id"}
      }
    },
    "ReportTaskRunnerHeartbeatOutput":{
      "type":"structure",
      "required":["terminate"],
      "members":{
        "terminate":{"shape":"boolean"}
      }
    },
    "Selector":{
      "type":"structure",
      "members":{
        "fieldName":{"shape":"string"},
        "operator":{"shape":"Operator"}
      }
    },
    "SelectorList":{
      "type":"list",
      "member":{"shape":"Selector"}
    },
    "SetStatusInput":{
      "type":"structure",
      "required":[
        "pipelineId",
        "objectIds",
        "status"
      ],
      "members":{
        "pipelineId":{"shape":"id"},
        "objectIds":{"shape":"idList"},
        "status":{"shape":"string"}
      }
    },
    "SetTaskStatusInput":{
      "type":"structure",
      "required":[
        "taskId",
        "taskStatus"
      ],
      "members":{
        "taskId":{"shape":"taskId"},
        "taskStatus":{"shape":"TaskStatus"},
        "errorId":{"shape":"string"},
        "errorMessage":{"shape":"errorMessage"},
        "errorStackTrace":{"shape":"string"}
      }
    },
    "SetTaskStatusOutput":{
      "type":"structure",
      "members":{
      }
    },
    "TaskNotFoundException":{
      "type":"structure",
      "members":{
        "message":{"shape":"errorMessage"}
      },
      "exception":true
    },
    "TaskObject":{
      "type":"structure",
      "members":{
        "taskId":{"shape":"taskId"},
        "pipelineId":{"shape":"id"},
        "attemptId":{"shape":"id"},
        "objects":{"shape":"PipelineObjectMap"}
      }
    },
    "TaskStatus":{
      "type":"string",
      "enum":[
        "FINISHED",
        "FAILED",
        "FALSE"
      ]
    },
    "ValidatePipelineDefinitionInput":{
      "type":"structure",
      "required":[
        "pipelineId",
        "pipelineObjects"
      ],
      "members":{
        "pipelineId":{"shape":"id"},
        "pipelineObjects":{"shape":"PipelineObjectList"},
        "parameterObjects":{"shape":"ParameterObjectList"},
        "parameterValues":{"shape":"ParameterValueList"}
      }
    },
    "ValidatePipelineDefinitionOutput":{
      "type":"structure",
      "required":["errored"],
      "members":{
        "validationErrors":{"shape":"ValidationErrors"},
        "validationWarnings":{"shape":"ValidationWarnings"},
        "errored":{"shape":"boolean"}
      }
    },
    "ValidationError":{
      "type":"structure",
      "members":{
        "id":{"shape":"id"},
        "errors":{"shape":"validationMessages"}
      }
    },
    "ValidationErrors":{
      "type":"list",
      "member":{"shape":"ValidationError"}
    },
    "ValidationWarning":{
      "type":"structure",
      "members":{
        "id":{"shape":"id"},
        "warnings":{"shape":"validationMessages"}
      }
    },
    "ValidationWarnings":{
      "type":"list",
      "member":{"shape":"ValidationWarning"}
    },
    "attributeNameString":{
      "type":"string",
      "min":1,
      "max":256,
      "pattern":"[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*"
    },
    "attributeValueString":{
      "type":"string",
      "min":0,
      "max":10240,
      "pattern":"[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*"
    },
    "boolean":{"type":"boolean"},
    "errorMessage":{"type":"string"},
    "fieldList":{
      "type":"list",
      "member":{"shape":"Field"}
    },
    "fieldNameString":{
      "type":"string",
      "min":1,
      "max":256,
      "pattern":"[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*"
    },
    "fieldStringValue":{
      "type":"string",
      "min":0,
      "max":10240,
      "pattern":"[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*"
    },
    "id":{
      "type":"string",
      "min":1,
      "max":1024,
      "pattern":"[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*"
    },
    "idList":{
      "type":"list",
      "member":{"shape":"id"}
    },
    "int":{"type":"integer"},
    "longString":{
      "type":"string",
      "min":0,
      "max":20971520,
      "pattern":"[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*"
    },
    "pipelineList":{
      "type":"list",
      "member":{"shape":"PipelineIdName"}
    },
    "string":{
      "type":"string",
      "min":0,
      "max":1024,
      "pattern":"[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*"
    },
    "stringList":{
      "type":"list",
      "member":{"shape":"string"}
    },
    "taskId":{
      "type":"string",
      "min":1,
      "max":2048,
      "pattern":"[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*"
    },
    "validationMessage":{
      "type":"string",
      "min":0,
      "max":10000,
      "pattern":"[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*"
    },
    "validationMessages":{
      "type":"list",
      "member":{"shape":"validationMessage"}
    }
  }
}
,
"DirectConnect":
{
  "metadata":{
    "apiVersion":"2012-10-25",
    "endpointPrefix":"directconnect",
    "jsonVersion":"1.1",
    "serviceFullName":"AWS Direct Connect",
    "signatureVersion":"v4",
    "targetPrefix":"OvertureService",
    "protocol":"json"
  },
  "operations":{
    "AllocateConnectionOnInterconnect":{
      "name":"AllocateConnectionOnInterconnect",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"AllocateConnectionOnInterconnectRequest"},
      "output":{"shape":"Connection"},
      "errors":[
        {
          "shape":"DirectConnectServerException",
          "exception":true
        },
        {
          "shape":"DirectConnectClientException",
          "exception":true
        }
      ]
    },
    "AllocatePrivateVirtualInterface":{
      "name":"AllocatePrivateVirtualInterface",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"AllocatePrivateVirtualInterfaceRequest"},
      "output":{"shape":"VirtualInterface"},
      "errors":[
        {
          "shape":"DirectConnectServerException",
          "exception":true
        },
        {
          "shape":"DirectConnectClientException",
          "exception":true
        }
      ]
    },
    "AllocatePublicVirtualInterface":{
      "name":"AllocatePublicVirtualInterface",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"AllocatePublicVirtualInterfaceRequest"},
      "output":{"shape":"VirtualInterface"},
      "errors":[
        {
          "shape":"DirectConnectServerException",
          "exception":true
        },
        {
          "shape":"DirectConnectClientException",
          "exception":true
        }
      ]
    },
    "ConfirmConnection":{
      "name":"ConfirmConnection",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ConfirmConnectionRequest"},
      "output":{"shape":"ConfirmConnectionResponse"},
      "errors":[
        {
          "shape":"DirectConnectServerException",
          "exception":true
        },
        {
          "shape":"DirectConnectClientException",
          "exception":true
        }
      ]
    },
    "ConfirmPrivateVirtualInterface":{
      "name":"ConfirmPrivateVirtualInterface",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ConfirmPrivateVirtualInterfaceRequest"},
      "output":{"shape":"ConfirmPrivateVirtualInterfaceResponse"},
      "errors":[
        {
          "shape":"DirectConnectServerException",
          "exception":true
        },
        {
          "shape":"DirectConnectClientException",
          "exception":true
        }
      ]
    },
    "ConfirmPublicVirtualInterface":{
      "name":"ConfirmPublicVirtualInterface",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ConfirmPublicVirtualInterfaceRequest"},
      "output":{"shape":"ConfirmPublicVirtualInterfaceResponse"},
      "errors":[
        {
          "shape":"DirectConnectServerException",
          "exception":true
        },
        {
          "shape":"DirectConnectClientException",
          "exception":true
        }
      ]
    },
    "CreateConnection":{
      "name":"CreateConnection",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateConnectionRequest"},
      "output":{"shape":"Connection"},
      "errors":[
        {
          "shape":"DirectConnectServerException",
          "exception":true
        },
        {
          "shape":"DirectConnectClientException",
          "exception":true
        }
      ]
    },
    "CreateInterconnect":{
      "name":"CreateInterconnect",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateInterconnectRequest"},
      "output":{"shape":"Interconnect"},
      "errors":[
        {
          "shape":"DirectConnectServerException",
          "exception":true
        },
        {
          "shape":"DirectConnectClientException",
          "exception":true
        }
      ]
    },
    "CreatePrivateVirtualInterface":{
      "name":"CreatePrivateVirtualInterface",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreatePrivateVirtualInterfaceRequest"},
      "output":{"shape":"VirtualInterface"},
      "errors":[
        {
          "shape":"DirectConnectServerException",
          "exception":true
        },
        {
          "shape":"DirectConnectClientException",
          "exception":true
        }
      ]
    },
    "CreatePublicVirtualInterface":{
      "name":"CreatePublicVirtualInterface",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreatePublicVirtualInterfaceRequest"},
      "output":{"shape":"VirtualInterface"},
      "errors":[
        {
          "shape":"DirectConnectServerException",
          "exception":true
        },
        {
          "shape":"DirectConnectClientException",
          "exception":true
        }
      ]
    },
    "DeleteConnection":{
      "name":"DeleteConnection",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteConnectionRequest"},
      "output":{"shape":"Connection"},
      "errors":[
        {
          "shape":"DirectConnectServerException",
          "exception":true
        },
        {
          "shape":"DirectConnectClientException",
          "exception":true
        }
      ]
    },
    "DeleteInterconnect":{
      "name":"DeleteInterconnect",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteInterconnectRequest"},
      "output":{"shape":"DeleteInterconnectResponse"},
      "errors":[
        {
          "shape":"DirectConnectServerException",
          "exception":true
        },
        {
          "shape":"DirectConnectClientException",
          "exception":true
        }
      ]
    },
    "DeleteVirtualInterface":{
      "name":"DeleteVirtualInterface",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteVirtualInterfaceRequest"},
      "output":{"shape":"DeleteVirtualInterfaceResponse"},
      "errors":[
        {
          "shape":"DirectConnectServerException",
          "exception":true
        },
        {
          "shape":"DirectConnectClientException",
          "exception":true
        }
      ]
    },
    "DescribeConnections":{
      "name":"DescribeConnections",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeConnectionsRequest"},
      "output":{"shape":"Connections"},
      "errors":[
        {
          "shape":"DirectConnectServerException",
          "exception":true
        },
        {
          "shape":"DirectConnectClientException",
          "exception":true
        }
      ]
    },
    "DescribeConnectionsOnInterconnect":{
      "name":"DescribeConnectionsOnInterconnect",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeConnectionsOnInterconnectRequest"},
      "output":{"shape":"Connections"},
      "errors":[
        {
          "shape":"DirectConnectServerException",
          "exception":true
        },
        {
          "shape":"DirectConnectClientException",
          "exception":true
        }
      ]
    },
    "DescribeInterconnects":{
      "name":"DescribeInterconnects",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeInterconnectsRequest"},
      "output":{"shape":"Interconnects"},
      "errors":[
        {
          "shape":"DirectConnectServerException",
          "exception":true
        },
        {
          "shape":"DirectConnectClientException",
          "exception":true
        }
      ]
    },
    "DescribeLocations":{
      "name":"DescribeLocations",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "output":{"shape":"Locations"},
      "errors":[
        {
          "shape":"DirectConnectServerException",
          "exception":true
        },
        {
          "shape":"DirectConnectClientException",
          "exception":true
        }
      ]
    },
    "DescribeVirtualGateways":{
      "name":"DescribeVirtualGateways",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "output":{"shape":"VirtualGateways"},
      "errors":[
        {
          "shape":"DirectConnectServerException",
          "exception":true
        },
        {
          "shape":"DirectConnectClientException",
          "exception":true
        }
      ]
    },
    "DescribeVirtualInterfaces":{
      "name":"DescribeVirtualInterfaces",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeVirtualInterfacesRequest"},
      "output":{"shape":"VirtualInterfaces"},
      "errors":[
        {
          "shape":"DirectConnectServerException",
          "exception":true
        },
        {
          "shape":"DirectConnectClientException",
          "exception":true
        }
      ]
    }
  },
  "shapes":{
    "ASN":{"type":"integer"},
    "AllocateConnectionOnInterconnectRequest":{
      "type":"structure",
      "required":[
        "bandwidth",
        "connectionName",
        "ownerAccount",
        "interconnectId",
        "vlan"
      ],
      "members":{
        "bandwidth":{"shape":"Bandwidth"},
        "connectionName":{"shape":"ConnectionName"},
        "ownerAccount":{"shape":"OwnerAccount"},
        "interconnectId":{"shape":"InterconnectId"},
        "vlan":{"shape":"VLAN"}
      }
    },
    "AllocatePrivateVirtualInterfaceRequest":{
      "type":"structure",
      "required":[
        "connectionId",
        "ownerAccount",
        "newPrivateVirtualInterfaceAllocation"
      ],
      "members":{
        "connectionId":{"shape":"ConnectionId"},
        "ownerAccount":{"shape":"OwnerAccount"},
        "newPrivateVirtualInterfaceAllocation":{"shape":"NewPrivateVirtualInterfaceAllocation"}
      }
    },
    "AllocatePublicVirtualInterfaceRequest":{
      "type":"structure",
      "required":[
        "connectionId",
        "ownerAccount",
        "newPublicVirtualInterfaceAllocation"
      ],
      "members":{
        "connectionId":{"shape":"ConnectionId"},
        "ownerAccount":{"shape":"OwnerAccount"},
        "newPublicVirtualInterfaceAllocation":{"shape":"NewPublicVirtualInterfaceAllocation"}
      }
    },
    "AmazonAddress":{"type":"string"},
    "BGPAuthKey":{"type":"string"},
    "Bandwidth":{"type":"string"},
    "CIDR":{"type":"string"},
    "ConfirmConnectionRequest":{
      "type":"structure",
      "required":["connectionId"],
      "members":{
        "connectionId":{"shape":"ConnectionId"}
      }
    },
    "ConfirmConnectionResponse":{
      "type":"structure",
      "members":{
        "connectionState":{"shape":"ConnectionState"}
      }
    },
    "ConfirmPrivateVirtualInterfaceRequest":{
      "type":"structure",
      "required":[
        "virtualInterfaceId",
        "virtualGatewayId"
      ],
      "members":{
        "virtualInterfaceId":{"shape":"VirtualInterfaceId"},
        "virtualGatewayId":{"shape":"VirtualGatewayId"}
      }
    },
    "ConfirmPrivateVirtualInterfaceResponse":{
      "type":"structure",
      "members":{
        "virtualInterfaceState":{"shape":"VirtualInterfaceState"}
      }
    },
    "ConfirmPublicVirtualInterfaceRequest":{
      "type":"structure",
      "required":["virtualInterfaceId"],
      "members":{
        "virtualInterfaceId":{"shape":"VirtualInterfaceId"}
      }
    },
    "ConfirmPublicVirtualInterfaceResponse":{
      "type":"structure",
      "members":{
        "virtualInterfaceState":{"shape":"VirtualInterfaceState"}
      }
    },
    "Connection":{
      "type":"structure",
      "members":{
        "ownerAccount":{"shape":"OwnerAccount"},
        "connectionId":{"shape":"ConnectionId"},
        "connectionName":{"shape":"ConnectionName"},
        "connectionState":{"shape":"ConnectionState"},
        "region":{"shape":"Region"},
        "location":{"shape":"LocationCode"},
        "bandwidth":{"shape":"Bandwidth"},
        "vlan":{"shape":"VLAN"},
        "partnerName":{"shape":"PartnerName"}
      }
    },
    "ConnectionId":{"type":"string"},
    "ConnectionList":{
      "type":"list",
      "member":{"shape":"Connection"}
    },
    "ConnectionName":{"type":"string"},
    "ConnectionState":{
      "type":"string",
      "enum":[
        "ordering",
        "requested",
        "pending",
        "available",
        "down",
        "deleting",
        "deleted",
        "rejected"
      ]
    },
    "Connections":{
      "type":"structure",
      "members":{
        "connections":{"shape":"ConnectionList"}
      }
    },
    "CreateConnectionRequest":{
      "type":"structure",
      "required":[
        "location",
        "bandwidth",
        "connectionName"
      ],
      "members":{
        "location":{"shape":"LocationCode"},
        "bandwidth":{"shape":"Bandwidth"},
        "connectionName":{"shape":"ConnectionName"}
      }
    },
    "CreateInterconnectRequest":{
      "type":"structure",
      "required":[
        "interconnectName",
        "bandwidth",
        "location"
      ],
      "members":{
        "interconnectName":{"shape":"InterconnectName"},
        "bandwidth":{"shape":"Bandwidth"},
        "location":{"shape":"LocationCode"}
      }
    },
    "CreatePrivateVirtualInterfaceRequest":{
      "type":"structure",
      "required":[
        "connectionId",
        "newPrivateVirtualInterface"
      ],
      "members":{
        "connectionId":{"shape":"ConnectionId"},
        "newPrivateVirtualInterface":{"shape":"NewPrivateVirtualInterface"}
      }
    },
    "CreatePublicVirtualInterfaceRequest":{
      "type":"structure",
      "required":[
        "connectionId",
        "newPublicVirtualInterface"
      ],
      "members":{
        "connectionId":{"shape":"ConnectionId"},
        "newPublicVirtualInterface":{"shape":"NewPublicVirtualInterface"}
      }
    },
    "CustomerAddress":{"type":"string"},
    "DeleteConnectionRequest":{
      "type":"structure",
      "required":["connectionId"],
      "members":{
        "connectionId":{"shape":"ConnectionId"}
      }
    },
    "DeleteInterconnectRequest":{
      "type":"structure",
      "required":["interconnectId"],
      "members":{
        "interconnectId":{"shape":"InterconnectId"}
      }
    },
    "DeleteInterconnectResponse":{
      "type":"structure",
      "members":{
        "interconnectState":{"shape":"InterconnectState"}
      }
    },
    "DeleteVirtualInterfaceRequest":{
      "type":"structure",
      "required":["virtualInterfaceId"],
      "members":{
        "virtualInterfaceId":{"shape":"VirtualInterfaceId"}
      }
    },
    "DeleteVirtualInterfaceResponse":{
      "type":"structure",
      "members":{
        "virtualInterfaceState":{"shape":"VirtualInterfaceState"}
      }
    },
    "DescribeConnectionsOnInterconnectRequest":{
      "type":"structure",
      "required":["interconnectId"],
      "members":{
        "interconnectId":{"shape":"InterconnectId"}
      }
    },
    "DescribeConnectionsRequest":{
      "type":"structure",
      "members":{
        "connectionId":{"shape":"ConnectionId"}
      }
    },
    "DescribeInterconnectsRequest":{
      "type":"structure",
      "members":{
        "interconnectId":{"shape":"InterconnectId"}
      }
    },
    "DescribeVirtualInterfacesRequest":{
      "type":"structure",
      "members":{
        "connectionId":{"shape":"ConnectionId"},
        "virtualInterfaceId":{"shape":"VirtualInterfaceId"}
      }
    },
    "DirectConnectClientException":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "exception":true
    },
    "DirectConnectServerException":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "exception":true
    },
    "ErrorMessage":{"type":"string"},
    "Interconnect":{
      "type":"structure",
      "members":{
        "interconnectId":{"shape":"InterconnectId"},
        "interconnectName":{"shape":"InterconnectName"},
        "interconnectState":{"shape":"InterconnectState"},
        "region":{"shape":"Region"},
        "location":{"shape":"LocationCode"},
        "bandwidth":{"shape":"Bandwidth"}
      }
    },
    "InterconnectId":{"type":"string"},
    "InterconnectList":{
      "type":"list",
      "member":{"shape":"Interconnect"}
    },
    "InterconnectName":{"type":"string"},
    "InterconnectState":{
      "type":"string",
      "enum":[
        "requested",
        "pending",
        "available",
        "down",
        "deleting",
        "deleted"
      ]
    },
    "Interconnects":{
      "type":"structure",
      "members":{
        "interconnects":{"shape":"InterconnectList"}
      }
    },
    "Location":{
      "type":"structure",
      "members":{
        "locationCode":{"shape":"LocationCode"},
        "locationName":{"shape":"LocationName"}
      }
    },
    "LocationCode":{"type":"string"},
    "LocationList":{
      "type":"list",
      "member":{"shape":"Location"}
    },
    "LocationName":{"type":"string"},
    "Locations":{
      "type":"structure",
      "members":{
        "locations":{"shape":"LocationList"}
      }
    },
    "NewPrivateVirtualInterface":{
      "type":"structure",
      "required":[
        "virtualInterfaceName",
        "vlan",
        "asn",
        "virtualGatewayId"
      ],
      "members":{
        "virtualInterfaceName":{"shape":"VirtualInterfaceName"},
        "vlan":{"shape":"VLAN"},
        "asn":{"shape":"ASN"},
        "authKey":{"shape":"BGPAuthKey"},
        "amazonAddress":{"shape":"AmazonAddress"},
        "customerAddress":{"shape":"CustomerAddress"},
        "virtualGatewayId":{"shape":"VirtualGatewayId"}
      }
    },
    "NewPrivateVirtualInterfaceAllocation":{
      "type":"structure",
      "required":[
        "virtualInterfaceName",
        "vlan",
        "asn"
      ],
      "members":{
        "virtualInterfaceName":{"shape":"VirtualInterfaceName"},
        "vlan":{"shape":"VLAN"},
        "asn":{"shape":"ASN"},
        "authKey":{"shape":"BGPAuthKey"},
        "amazonAddress":{"shape":"AmazonAddress"},
        "customerAddress":{"shape":"CustomerAddress"}
      }
    },
    "NewPublicVirtualInterface":{
      "type":"structure",
      "required":[
        "virtualInterfaceName",
        "vlan",
        "asn",
        "amazonAddress",
        "customerAddress",
        "routeFilterPrefixes"
      ],
      "members":{
        "virtualInterfaceName":{"shape":"VirtualInterfaceName"},
        "vlan":{"shape":"VLAN"},
        "asn":{"shape":"ASN"},
        "authKey":{"shape":"BGPAuthKey"},
        "amazonAddress":{"shape":"AmazonAddress"},
        "customerAddress":{"shape":"CustomerAddress"},
        "routeFilterPrefixes":{"shape":"RouteFilterPrefixList"}
      }
    },
    "NewPublicVirtualInterfaceAllocation":{
      "type":"structure",
      "required":[
        "virtualInterfaceName",
        "vlan",
        "asn",
        "amazonAddress",
        "customerAddress",
        "routeFilterPrefixes"
      ],
      "members":{
        "virtualInterfaceName":{"shape":"VirtualInterfaceName"},
        "vlan":{"shape":"VLAN"},
        "asn":{"shape":"ASN"},
        "authKey":{"shape":"BGPAuthKey"},
        "amazonAddress":{"shape":"AmazonAddress"},
        "customerAddress":{"shape":"CustomerAddress"},
        "routeFilterPrefixes":{"shape":"RouteFilterPrefixList"}
      }
    },
    "OwnerAccount":{"type":"string"},
    "PartnerName":{"type":"string"},
    "Region":{"type":"string"},
    "RouteFilterPrefix":{
      "type":"structure",
      "members":{
        "cidr":{"shape":"CIDR"}
      }
    },
    "RouteFilterPrefixList":{
      "type":"list",
      "member":{"shape":"RouteFilterPrefix"}
    },
    "RouterConfig":{"type":"string"},
    "VLAN":{"type":"integer"},
    "VirtualGateway":{
      "type":"structure",
      "members":{
        "virtualGatewayId":{"shape":"VirtualGatewayId"},
        "virtualGatewayState":{"shape":"VirtualGatewayState"}
      }
    },
    "VirtualGatewayId":{"type":"string"},
    "VirtualGatewayList":{
      "type":"list",
      "member":{"shape":"VirtualGateway"}
    },
    "VirtualGatewayState":{"type":"string"},
    "VirtualGateways":{
      "type":"structure",
      "members":{
        "virtualGateways":{"shape":"VirtualGatewayList"}
      }
    },
    "VirtualInterface":{
      "type":"structure",
      "members":{
        "ownerAccount":{"shape":"OwnerAccount"},
        "virtualInterfaceId":{"shape":"VirtualInterfaceId"},
        "location":{"shape":"LocationCode"},
        "connectionId":{"shape":"ConnectionId"},
        "virtualInterfaceType":{"shape":"VirtualInterfaceType"},
        "virtualInterfaceName":{"shape":"VirtualInterfaceName"},
        "vlan":{"shape":"VLAN"},
        "asn":{"shape":"ASN"},
        "authKey":{"shape":"BGPAuthKey"},
        "amazonAddress":{"shape":"AmazonAddress"},
        "customerAddress":{"shape":"CustomerAddress"},
        "virtualInterfaceState":{"shape":"VirtualInterfaceState"},
        "customerRouterConfig":{"shape":"RouterConfig"},
        "virtualGatewayId":{"shape":"VirtualGatewayId"},
        "routeFilterPrefixes":{"shape":"RouteFilterPrefixList"}
      }
    },
    "VirtualInterfaceId":{"type":"string"},
    "VirtualInterfaceList":{
      "type":"list",
      "member":{"shape":"VirtualInterface"}
    },
    "VirtualInterfaceName":{"type":"string"},
    "VirtualInterfaceState":{
      "type":"string",
      "enum":[
        "confirming",
        "verifying",
        "pending",
        "available",
        "deleting",
        "deleted",
        "rejected"
      ]
    },
    "VirtualInterfaceType":{"type":"string"},
    "VirtualInterfaces":{
      "type":"structure",
      "members":{
        "virtualInterfaces":{"shape":"VirtualInterfaceList"}
      }
    }
  }
}
,
"DynamoDB":
{
  "metadata":{
    "apiVersion":"2012-08-10",
    "endpointPrefix":"dynamodb",
    "jsonVersion":"1.0",
    "serviceAbbreviation":"DynamoDB",
    "serviceFullName":"Amazon DynamoDB",
    "signatureVersion":"v4",
    "targetPrefix":"DynamoDB_20120810",
    "protocol":"json"
  },
  "operations":{
    "BatchGetItem":{
      "name":"BatchGetItem",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"BatchGetItemInput"},
      "output":{"shape":"BatchGetItemOutput"},
      "errors":[
        {
          "shape":"ProvisionedThroughputExceededException",
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        },
        {
          "shape":"InternalServerError",
          "exception":true,
          "fault":true
        }
      ]
    },
    "BatchWriteItem":{
      "name":"BatchWriteItem",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"BatchWriteItemInput"},
      "output":{"shape":"BatchWriteItemOutput"},
      "errors":[
        {
          "shape":"ProvisionedThroughputExceededException",
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        },
        {
          "shape":"ItemCollectionSizeLimitExceededException",
          "exception":true
        },
        {
          "shape":"InternalServerError",
          "exception":true,
          "fault":true
        }
      ]
    },
    "CreateTable":{
      "name":"CreateTable",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateTableInput"},
      "output":{"shape":"CreateTableOutput"},
      "errors":[
        {
          "shape":"ResourceInUseException",
          "exception":true
        },
        {
          "shape":"LimitExceededException",
          "exception":true
        },
        {
          "shape":"InternalServerError",
          "exception":true,
          "fault":true
        }
      ]
    },
    "DeleteItem":{
      "name":"DeleteItem",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteItemInput"},
      "output":{"shape":"DeleteItemOutput"},
      "errors":[
        {
          "shape":"ConditionalCheckFailedException",
          "exception":true
        },
        {
          "shape":"ProvisionedThroughputExceededException",
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        },
        {
          "shape":"ItemCollectionSizeLimitExceededException",
          "exception":true
        },
        {
          "shape":"InternalServerError",
          "exception":true,
          "fault":true
        }
      ]
    },
    "DeleteTable":{
      "name":"DeleteTable",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteTableInput"},
      "output":{"shape":"DeleteTableOutput"},
      "errors":[
        {
          "shape":"ResourceInUseException",
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        },
        {
          "shape":"LimitExceededException",
          "exception":true
        },
        {
          "shape":"InternalServerError",
          "exception":true,
          "fault":true
        }
      ]
    },
    "DescribeTable":{
      "name":"DescribeTable",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeTableInput"},
      "output":{"shape":"DescribeTableOutput"},
      "errors":[
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        },
        {
          "shape":"InternalServerError",
          "exception":true,
          "fault":true
        }
      ]
    },
    "GetItem":{
      "name":"GetItem",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"GetItemInput"},
      "output":{"shape":"GetItemOutput"},
      "errors":[
        {
          "shape":"ProvisionedThroughputExceededException",
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        },
        {
          "shape":"InternalServerError",
          "exception":true,
          "fault":true
        }
      ]
    },
    "ListTables":{
      "name":"ListTables",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ListTablesInput"},
      "output":{"shape":"ListTablesOutput"},
      "errors":[
        {
          "shape":"InternalServerError",
          "exception":true,
          "fault":true
        }
      ]
    },
    "PutItem":{
      "name":"PutItem",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"PutItemInput"},
      "output":{"shape":"PutItemOutput"},
      "errors":[
        {
          "shape":"ConditionalCheckFailedException",
          "exception":true
        },
        {
          "shape":"ProvisionedThroughputExceededException",
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        },
        {
          "shape":"ItemCollectionSizeLimitExceededException",
          "exception":true
        },
        {
          "shape":"InternalServerError",
          "exception":true,
          "fault":true
        }
      ]
    },
    "Query":{
      "name":"Query",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"QueryInput"},
      "output":{"shape":"QueryOutput"},
      "errors":[
        {
          "shape":"ProvisionedThroughputExceededException",
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        },
        {
          "shape":"InternalServerError",
          "exception":true,
          "fault":true
        }
      ]
    },
    "Scan":{
      "name":"Scan",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ScanInput"},
      "output":{"shape":"ScanOutput"},
      "errors":[
        {
          "shape":"ProvisionedThroughputExceededException",
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        },
        {
          "shape":"InternalServerError",
          "exception":true,
          "fault":true
        }
      ]
    },
    "UpdateItem":{
      "name":"UpdateItem",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"UpdateItemInput"},
      "output":{"shape":"UpdateItemOutput"},
      "errors":[
        {
          "shape":"ConditionalCheckFailedException",
          "exception":true
        },
        {
          "shape":"ProvisionedThroughputExceededException",
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        },
        {
          "shape":"ItemCollectionSizeLimitExceededException",
          "exception":true
        },
        {
          "shape":"InternalServerError",
          "exception":true,
          "fault":true
        }
      ]
    },
    "UpdateTable":{
      "name":"UpdateTable",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"UpdateTableInput"},
      "output":{"shape":"UpdateTableOutput"},
      "errors":[
        {
          "shape":"ResourceInUseException",
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        },
        {
          "shape":"LimitExceededException",
          "exception":true
        },
        {
          "shape":"InternalServerError",
          "exception":true,
          "fault":true
        }
      ]
    }
  },
  "shapes":{
    "AttributeAction":{
      "type":"string",
      "enum":[
        "ADD",
        "PUT",
        "DELETE"
      ]
    },
    "AttributeDefinition":{
      "type":"structure",
      "required":[
        "AttributeName",
        "AttributeType"
      ],
      "members":{
        "AttributeName":{"shape":"KeySchemaAttributeName"},
        "AttributeType":{"shape":"ScalarAttributeType"}
      }
    },
    "AttributeDefinitions":{
      "type":"list",
      "member":{"shape":"AttributeDefinition"}
    },
    "AttributeMap":{
      "type":"map",
      "key":{"shape":"AttributeName"},
      "value":{"shape":"AttributeValue"}
    },
    "AttributeName":{
      "type":"string",
      "max":65535
    },
    "AttributeNameList":{
      "type":"list",
      "member":{"shape":"AttributeName"},
      "min":1
    },
    "AttributeUpdates":{
      "type":"map",
      "key":{"shape":"AttributeName"},
      "value":{"shape":"AttributeValueUpdate"}
    },
    "AttributeValue":{
      "type":"structure",
      "members":{
        "S":{"shape":"StringAttributeValue"},
        "N":{"shape":"NumberAttributeValue"},
        "B":{"shape":"BinaryAttributeValue"},
        "SS":{"shape":"StringSetAttributeValue"},
        "NS":{"shape":"NumberSetAttributeValue"},
        "BS":{"shape":"BinarySetAttributeValue"},
        "M":{"shape":"MapAttributeValue"},
        "L":{"shape":"ListAttributeValue"},
        "NULL":{"shape":"NullAttributeValue"},
        "BOOL":{"shape":"BooleanAttributeValue"}
      }
    },
    "AttributeValueList":{
      "type":"list",
      "member":{"shape":"AttributeValue"}
    },
    "AttributeValueUpdate":{
      "type":"structure",
      "members":{
        "Value":{"shape":"AttributeValue"},
        "Action":{"shape":"AttributeAction"}
      }
    },
    "BatchGetItemInput":{
      "type":"structure",
      "required":["RequestItems"],
      "members":{
        "RequestItems":{"shape":"BatchGetRequestMap"},
        "ReturnConsumedCapacity":{"shape":"ReturnConsumedCapacity"}
      }
    },
    "BatchGetItemOutput":{
      "type":"structure",
      "members":{
        "Responses":{"shape":"BatchGetResponseMap"},
        "UnprocessedKeys":{"shape":"BatchGetRequestMap"},
        "ConsumedCapacity":{"shape":"ConsumedCapacityMultiple"}
      }
    },
    "BatchGetRequestMap":{
      "type":"map",
      "key":{"shape":"TableName"},
      "value":{"shape":"KeysAndAttributes"},
      "min":1,
      "max":100
    },
    "BatchGetResponseMap":{
      "type":"map",
      "key":{"shape":"TableName"},
      "value":{"shape":"ItemList"}
    },
    "BatchWriteItemInput":{
      "type":"structure",
      "required":["RequestItems"],
      "members":{
        "RequestItems":{"shape":"BatchWriteItemRequestMap"},
        "ReturnConsumedCapacity":{"shape":"ReturnConsumedCapacity"},
        "ReturnItemCollectionMetrics":{"shape":"ReturnItemCollectionMetrics"}
      }
    },
    "BatchWriteItemOutput":{
      "type":"structure",
      "members":{
        "UnprocessedItems":{"shape":"BatchWriteItemRequestMap"},
        "ItemCollectionMetrics":{"shape":"ItemCollectionMetricsPerTable"},
        "ConsumedCapacity":{"shape":"ConsumedCapacityMultiple"}
      }
    },
    "BatchWriteItemRequestMap":{
      "type":"map",
      "key":{"shape":"TableName"},
      "value":{"shape":"WriteRequests"},
      "min":1,
      "max":25
    },
    "BinaryAttributeValue":{"type":"blob"},
    "BinarySetAttributeValue":{
      "type":"list",
      "member":{"shape":"BinaryAttributeValue"}
    },
    "BooleanAttributeValue":{"type":"boolean"},
    "BooleanObject":{"type":"boolean"},
    "Capacity":{
      "type":"structure",
      "members":{
        "CapacityUnits":{"shape":"ConsumedCapacityUnits"}
      }
    },
    "ComparisonOperator":{
      "type":"string",
      "enum":[
        "EQ",
        "NE",
        "IN",
        "LE",
        "LT",
        "GE",
        "GT",
        "BETWEEN",
        "NOT_NULL",
        "NULL",
        "CONTAINS",
        "NOT_CONTAINS",
        "BEGINS_WITH"
      ]
    },
    "Condition":{
      "type":"structure",
      "required":["ComparisonOperator"],
      "members":{
        "AttributeValueList":{"shape":"AttributeValueList"},
        "ComparisonOperator":{"shape":"ComparisonOperator"}
      }
    },
    "ConditionExpression":{"type":"string"},
    "ConditionalCheckFailedException":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "exception":true
    },
    "ConditionalOperator":{
      "type":"string",
      "enum":[
        "AND",
        "OR"
      ]
    },
    "ConsistentRead":{"type":"boolean"},
    "ConsumedCapacity":{
      "type":"structure",
      "members":{
        "TableName":{"shape":"TableName"},
        "CapacityUnits":{"shape":"ConsumedCapacityUnits"},
        "Table":{"shape":"Capacity"},
        "LocalSecondaryIndexes":{"shape":"SecondaryIndexesCapacityMap"},
        "GlobalSecondaryIndexes":{"shape":"SecondaryIndexesCapacityMap"}
      }
    },
    "ConsumedCapacityMultiple":{
      "type":"list",
      "member":{"shape":"ConsumedCapacity"}
    },
    "ConsumedCapacityUnits":{"type":"double"},
    "CreateTableInput":{
      "type":"structure",
      "required":[
        "AttributeDefinitions",
        "TableName",
        "KeySchema",
        "ProvisionedThroughput"
      ],
      "members":{
        "AttributeDefinitions":{"shape":"AttributeDefinitions"},
        "TableName":{"shape":"TableName"},
        "KeySchema":{"shape":"KeySchema"},
        "LocalSecondaryIndexes":{"shape":"LocalSecondaryIndexList"},
        "GlobalSecondaryIndexes":{"shape":"GlobalSecondaryIndexList"},
        "ProvisionedThroughput":{"shape":"ProvisionedThroughput"}
      }
    },
    "CreateTableOutput":{
      "type":"structure",
      "members":{
        "TableDescription":{"shape":"TableDescription"}
      }
    },
    "Date":{"type":"timestamp"},
    "DeleteItemInput":{
      "type":"structure",
      "required":[
        "TableName",
        "Key"
      ],
      "members":{
        "TableName":{"shape":"TableName"},
        "Key":{"shape":"Key"},
        "Expected":{"shape":"ExpectedAttributeMap"},
        "ConditionalOperator":{"shape":"ConditionalOperator"},
        "ReturnValues":{"shape":"ReturnValue"},
        "ReturnConsumedCapacity":{"shape":"ReturnConsumedCapacity"},
        "ReturnItemCollectionMetrics":{"shape":"ReturnItemCollectionMetrics"},
        "ConditionExpression":{"shape":"ConditionExpression"},
        "ExpressionAttributeNames":{"shape":"ExpressionAttributeNameMap"},
        "ExpressionAttributeValues":{"shape":"ExpressionAttributeValueMap"}
      }
    },
    "DeleteItemOutput":{
      "type":"structure",
      "members":{
        "Attributes":{"shape":"AttributeMap"},
        "ConsumedCapacity":{"shape":"ConsumedCapacity"},
        "ItemCollectionMetrics":{"shape":"ItemCollectionMetrics"}
      }
    },
    "DeleteRequest":{
      "type":"structure",
      "required":["Key"],
      "members":{
        "Key":{"shape":"Key"}
      }
    },
    "DeleteTableInput":{
      "type":"structure",
      "required":["TableName"],
      "members":{
        "TableName":{"shape":"TableName"}
      }
    },
    "DeleteTableOutput":{
      "type":"structure",
      "members":{
        "TableDescription":{"shape":"TableDescription"}
      }
    },
    "DescribeTableInput":{
      "type":"structure",
      "required":["TableName"],
      "members":{
        "TableName":{"shape":"TableName"}
      }
    },
    "DescribeTableOutput":{
      "type":"structure",
      "members":{
        "Table":{"shape":"TableDescription"}
      }
    },
    "ErrorMessage":{"type":"string"},
    "ExpectedAttributeMap":{
      "type":"map",
      "key":{"shape":"AttributeName"},
      "value":{"shape":"ExpectedAttributeValue"}
    },
    "ExpectedAttributeValue":{
      "type":"structure",
      "members":{
        "Value":{"shape":"AttributeValue"},
        "Exists":{"shape":"BooleanObject"},
        "ComparisonOperator":{"shape":"ComparisonOperator"},
        "AttributeValueList":{"shape":"AttributeValueList"}
      }
    },
    "ExpressionAttributeNameMap":{
      "type":"map",
      "key":{"shape":"ExpressionAttributeNameVariable"},
      "value":{"shape":"AttributeName"}
    },
    "ExpressionAttributeNameVariable":{"type":"string"},
    "ExpressionAttributeValueMap":{
      "type":"map",
      "key":{"shape":"ExpressionAttributeValueVariable"},
      "value":{"shape":"AttributeValue"}
    },
    "ExpressionAttributeValueVariable":{"type":"string"},
    "FilterConditionMap":{
      "type":"map",
      "key":{"shape":"AttributeName"},
      "value":{"shape":"Condition"}
    },
    "GetItemInput":{
      "type":"structure",
      "required":[
        "TableName",
        "Key"
      ],
      "members":{
        "TableName":{"shape":"TableName"},
        "Key":{"shape":"Key"},
        "AttributesToGet":{"shape":"AttributeNameList"},
        "ConsistentRead":{"shape":"ConsistentRead"},
        "ReturnConsumedCapacity":{"shape":"ReturnConsumedCapacity"},
        "ProjectionExpression":{"shape":"ProjectionExpression"},
        "ExpressionAttributeNames":{"shape":"ExpressionAttributeNameMap"}
      }
    },
    "GetItemOutput":{
      "type":"structure",
      "members":{
        "Item":{"shape":"AttributeMap"},
        "ConsumedCapacity":{"shape":"ConsumedCapacity"}
      }
    },
    "GlobalSecondaryIndex":{
      "type":"structure",
      "required":[
        "IndexName",
        "KeySchema",
        "Projection",
        "ProvisionedThroughput"
      ],
      "members":{
        "IndexName":{"shape":"IndexName"},
        "KeySchema":{"shape":"KeySchema"},
        "Projection":{"shape":"Projection"},
        "ProvisionedThroughput":{"shape":"ProvisionedThroughput"}
      }
    },
    "GlobalSecondaryIndexDescription":{
      "type":"structure",
      "members":{
        "IndexName":{"shape":"IndexName"},
        "KeySchema":{"shape":"KeySchema"},
        "Projection":{"shape":"Projection"},
        "IndexStatus":{"shape":"IndexStatus"},
        "ProvisionedThroughput":{"shape":"ProvisionedThroughputDescription"},
        "IndexSizeBytes":{"shape":"Long"},
        "ItemCount":{"shape":"Long"}
      }
    },
    "GlobalSecondaryIndexDescriptionList":{
      "type":"list",
      "member":{"shape":"GlobalSecondaryIndexDescription"}
    },
    "GlobalSecondaryIndexList":{
      "type":"list",
      "member":{"shape":"GlobalSecondaryIndex"}
    },
    "GlobalSecondaryIndexUpdate":{
      "type":"structure",
      "members":{
        "Update":{"shape":"UpdateGlobalSecondaryIndexAction"}
      }
    },
    "GlobalSecondaryIndexUpdateList":{
      "type":"list",
      "member":{"shape":"GlobalSecondaryIndexUpdate"}
    },
    "IndexName":{
      "type":"string",
      "min":3,
      "max":255,
      "pattern":"[a-zA-Z0-9_.-]+"
    },
    "IndexStatus":{
      "type":"string",
      "enum":[
        "CREATING",
        "UPDATING",
        "DELETING",
        "ACTIVE"
      ]
    },
    "Integer":{"type":"integer"},
    "InternalServerError":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "exception":true,
      "fault":true
    },
    "ItemCollectionKeyAttributeMap":{
      "type":"map",
      "key":{"shape":"AttributeName"},
      "value":{"shape":"AttributeValue"}
    },
    "ItemCollectionMetrics":{
      "type":"structure",
      "members":{
        "ItemCollectionKey":{"shape":"ItemCollectionKeyAttributeMap"},
        "SizeEstimateRangeGB":{"shape":"ItemCollectionSizeEstimateRange"}
      }
    },
    "ItemCollectionMetricsMultiple":{
      "type":"list",
      "member":{"shape":"ItemCollectionMetrics"}
    },
    "ItemCollectionMetricsPerTable":{
      "type":"map",
      "key":{"shape":"TableName"},
      "value":{"shape":"ItemCollectionMetricsMultiple"}
    },
    "ItemCollectionSizeEstimateBound":{"type":"double"},
    "ItemCollectionSizeEstimateRange":{
      "type":"list",
      "member":{"shape":"ItemCollectionSizeEstimateBound"}
    },
    "ItemCollectionSizeLimitExceededException":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "exception":true
    },
    "ItemList":{
      "type":"list",
      "member":{"shape":"AttributeMap"}
    },
    "Key":{
      "type":"map",
      "key":{"shape":"AttributeName"},
      "value":{"shape":"AttributeValue"}
    },
    "KeyConditions":{
      "type":"map",
      "key":{"shape":"AttributeName"},
      "value":{"shape":"Condition"}
    },
    "KeyList":{
      "type":"list",
      "member":{"shape":"Key"},
      "min":1,
      "max":100
    },
    "KeySchema":{
      "type":"list",
      "member":{"shape":"KeySchemaElement"},
      "min":1,
      "max":2
    },
    "KeySchemaAttributeName":{
      "type":"string",
      "min":1,
      "max":255
    },
    "KeySchemaElement":{
      "type":"structure",
      "required":[
        "AttributeName",
        "KeyType"
      ],
      "members":{
        "AttributeName":{"shape":"KeySchemaAttributeName"},
        "KeyType":{"shape":"KeyType"}
      }
    },
    "KeyType":{
      "type":"string",
      "enum":[
        "HASH",
        "RANGE"
      ]
    },
    "KeysAndAttributes":{
      "type":"structure",
      "required":["Keys"],
      "members":{
        "Keys":{"shape":"KeyList"},
        "AttributesToGet":{"shape":"AttributeNameList"},
        "ConsistentRead":{"shape":"ConsistentRead"},
        "ProjectionExpression":{"shape":"ProjectionExpression"},
        "ExpressionAttributeNames":{"shape":"ExpressionAttributeNameMap"}
      }
    },
    "LimitExceededException":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "exception":true
    },
    "ListAttributeValue":{
      "type":"list",
      "member":{"shape":"AttributeValue"}
    },
    "ListTablesInput":{
      "type":"structure",
      "members":{
        "ExclusiveStartTableName":{"shape":"TableName"},
        "Limit":{"shape":"ListTablesInputLimit"}
      }
    },
    "ListTablesInputLimit":{
      "type":"integer",
      "min":1,
      "max":100
    },
    "ListTablesOutput":{
      "type":"structure",
      "members":{
        "TableNames":{"shape":"TableNameList"},
        "LastEvaluatedTableName":{"shape":"TableName"}
      }
    },
    "LocalSecondaryIndex":{
      "type":"structure",
      "required":[
        "IndexName",
        "KeySchema",
        "Projection"
      ],
      "members":{
        "IndexName":{"shape":"IndexName"},
        "KeySchema":{"shape":"KeySchema"},
        "Projection":{"shape":"Projection"}
      }
    },
    "LocalSecondaryIndexDescription":{
      "type":"structure",
      "members":{
        "IndexName":{"shape":"IndexName"},
        "KeySchema":{"shape":"KeySchema"},
        "Projection":{"shape":"Projection"},
        "IndexSizeBytes":{"shape":"Long"},
        "ItemCount":{"shape":"Long"}
      }
    },
    "LocalSecondaryIndexDescriptionList":{
      "type":"list",
      "member":{"shape":"LocalSecondaryIndexDescription"}
    },
    "LocalSecondaryIndexList":{
      "type":"list",
      "member":{"shape":"LocalSecondaryIndex"}
    },
    "Long":{"type":"long"},
    "MapAttributeValue":{
      "type":"map",
      "key":{"shape":"AttributeName"},
      "value":{"shape":"AttributeValue"}
    },
    "NonKeyAttributeName":{
      "type":"string",
      "min":1,
      "max":255
    },
    "NonKeyAttributeNameList":{
      "type":"list",
      "member":{"shape":"NonKeyAttributeName"},
      "min":1,
      "max":20
    },
    "NullAttributeValue":{"type":"boolean"},
    "NumberAttributeValue":{"type":"string"},
    "NumberSetAttributeValue":{
      "type":"list",
      "member":{"shape":"NumberAttributeValue"}
    },
    "PositiveIntegerObject":{
      "type":"integer",
      "min":1
    },
    "PositiveLongObject":{
      "type":"long",
      "min":1
    },
    "Projection":{
      "type":"structure",
      "members":{
        "ProjectionType":{"shape":"ProjectionType"},
        "NonKeyAttributes":{"shape":"NonKeyAttributeNameList"}
      }
    },
    "ProjectionExpression":{"type":"string"},
    "ProjectionType":{
      "type":"string",
      "enum":[
        "ALL",
        "KEYS_ONLY",
        "INCLUDE"
      ]
    },
    "ProvisionedThroughput":{
      "type":"structure",
      "required":[
        "ReadCapacityUnits",
        "WriteCapacityUnits"
      ],
      "members":{
        "ReadCapacityUnits":{"shape":"PositiveLongObject"},
        "WriteCapacityUnits":{"shape":"PositiveLongObject"}
      }
    },
    "ProvisionedThroughputDescription":{
      "type":"structure",
      "members":{
        "LastIncreaseDateTime":{"shape":"Date"},
        "LastDecreaseDateTime":{"shape":"Date"},
        "NumberOfDecreasesToday":{"shape":"PositiveLongObject"},
        "ReadCapacityUnits":{"shape":"PositiveLongObject"},
        "WriteCapacityUnits":{"shape":"PositiveLongObject"}
      }
    },
    "ProvisionedThroughputExceededException":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "exception":true
    },
    "PutItemInput":{
      "type":"structure",
      "required":[
        "TableName",
        "Item"
      ],
      "members":{
        "TableName":{"shape":"TableName"},
        "Item":{"shape":"PutItemInputAttributeMap"},
        "Expected":{"shape":"ExpectedAttributeMap"},
        "ReturnValues":{"shape":"ReturnValue"},
        "ReturnConsumedCapacity":{"shape":"ReturnConsumedCapacity"},
        "ReturnItemCollectionMetrics":{"shape":"ReturnItemCollectionMetrics"},
        "ConditionalOperator":{"shape":"ConditionalOperator"},
        "ConditionExpression":{"shape":"ConditionExpression"},
        "ExpressionAttributeNames":{"shape":"ExpressionAttributeNameMap"},
        "ExpressionAttributeValues":{"shape":"ExpressionAttributeValueMap"}
      }
    },
    "PutItemInputAttributeMap":{
      "type":"map",
      "key":{"shape":"AttributeName"},
      "value":{"shape":"AttributeValue"}
    },
    "PutItemOutput":{
      "type":"structure",
      "members":{
        "Attributes":{"shape":"AttributeMap"},
        "ConsumedCapacity":{"shape":"ConsumedCapacity"},
        "ItemCollectionMetrics":{"shape":"ItemCollectionMetrics"}
      }
    },
    "PutRequest":{
      "type":"structure",
      "required":["Item"],
      "members":{
        "Item":{"shape":"PutItemInputAttributeMap"}
      }
    },
    "QueryInput":{
      "type":"structure",
      "required":[
        "TableName",
        "KeyConditions"
      ],
      "members":{
        "TableName":{"shape":"TableName"},
        "IndexName":{"shape":"IndexName"},
        "Select":{"shape":"Select"},
        "AttributesToGet":{"shape":"AttributeNameList"},
        "Limit":{"shape":"PositiveIntegerObject"},
        "ConsistentRead":{"shape":"ConsistentRead"},
        "KeyConditions":{"shape":"KeyConditions"},
        "QueryFilter":{"shape":"FilterConditionMap"},
        "ConditionalOperator":{"shape":"ConditionalOperator"},
        "ScanIndexForward":{"shape":"BooleanObject"},
        "ExclusiveStartKey":{"shape":"Key"},
        "ReturnConsumedCapacity":{"shape":"ReturnConsumedCapacity"},
        "ProjectionExpression":{"shape":"ProjectionExpression"},
        "FilterExpression":{"shape":"ConditionExpression"},
        "ExpressionAttributeNames":{"shape":"ExpressionAttributeNameMap"},
        "ExpressionAttributeValues":{"shape":"ExpressionAttributeValueMap"}
      }
    },
    "QueryOutput":{
      "type":"structure",
      "members":{
        "Items":{"shape":"ItemList"},
        "Count":{"shape":"Integer"},
        "ScannedCount":{"shape":"Integer"},
        "LastEvaluatedKey":{"shape":"Key"},
        "ConsumedCapacity":{"shape":"ConsumedCapacity"}
      }
    },
    "ResourceInUseException":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "exception":true
    },
    "ResourceNotFoundException":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "exception":true
    },
    "ReturnConsumedCapacity":{
      "type":"string",
      "enum":[
        "INDEXES",
        "TOTAL",
        "NONE"
      ]
    },
    "ReturnItemCollectionMetrics":{
      "type":"string",
      "enum":[
        "SIZE",
        "NONE"
      ]
    },
    "ReturnValue":{
      "type":"string",
      "enum":[
        "NONE",
        "ALL_OLD",
        "UPDATED_OLD",
        "ALL_NEW",
        "UPDATED_NEW"
      ]
    },
    "ScalarAttributeType":{
      "type":"string",
      "enum":[
        "S",
        "N",
        "B"
      ]
    },
    "ScanInput":{
      "type":"structure",
      "required":["TableName"],
      "members":{
        "TableName":{"shape":"TableName"},
        "AttributesToGet":{"shape":"AttributeNameList"},
        "Limit":{"shape":"PositiveIntegerObject"},
        "Select":{"shape":"Select"},
        "ScanFilter":{"shape":"FilterConditionMap"},
        "ConditionalOperator":{"shape":"ConditionalOperator"},
        "ExclusiveStartKey":{"shape":"Key"},
        "ReturnConsumedCapacity":{"shape":"ReturnConsumedCapacity"},
        "TotalSegments":{"shape":"ScanTotalSegments"},
        "Segment":{"shape":"ScanSegment"},
        "ProjectionExpression":{"shape":"ProjectionExpression"},
        "FilterExpression":{"shape":"ConditionExpression"},
        "ExpressionAttributeNames":{"shape":"ExpressionAttributeNameMap"},
        "ExpressionAttributeValues":{"shape":"ExpressionAttributeValueMap"}
      }
    },
    "ScanOutput":{
      "type":"structure",
      "members":{
        "Items":{"shape":"ItemList"},
        "Count":{"shape":"Integer"},
        "ScannedCount":{"shape":"Integer"},
        "LastEvaluatedKey":{"shape":"Key"},
        "ConsumedCapacity":{"shape":"ConsumedCapacity"}
      }
    },
    "ScanSegment":{
      "type":"integer",
      "min":0,
      "max":999999
    },
    "ScanTotalSegments":{
      "type":"integer",
      "min":1,
      "max":1000000
    },
    "SecondaryIndexesCapacityMap":{
      "type":"map",
      "key":{"shape":"IndexName"},
      "value":{"shape":"Capacity"}
    },
    "Select":{
      "type":"string",
      "enum":[
        "ALL_ATTRIBUTES",
        "ALL_PROJECTED_ATTRIBUTES",
        "SPECIFIC_ATTRIBUTES",
        "COUNT"
      ]
    },
    "StringAttributeValue":{"type":"string"},
    "StringSetAttributeValue":{
      "type":"list",
      "member":{"shape":"StringAttributeValue"}
    },
    "TableDescription":{
      "type":"structure",
      "members":{
        "AttributeDefinitions":{"shape":"AttributeDefinitions"},
        "TableName":{"shape":"TableName"},
        "KeySchema":{"shape":"KeySchema"},
        "TableStatus":{"shape":"TableStatus"},
        "CreationDateTime":{"shape":"Date"},
        "ProvisionedThroughput":{"shape":"ProvisionedThroughputDescription"},
        "TableSizeBytes":{"shape":"Long"},
        "ItemCount":{"shape":"Long"},
        "LocalSecondaryIndexes":{"shape":"LocalSecondaryIndexDescriptionList"},
        "GlobalSecondaryIndexes":{"shape":"GlobalSecondaryIndexDescriptionList"}
      }
    },
    "TableName":{
      "type":"string",
      "min":3,
      "max":255,
      "pattern":"[a-zA-Z0-9_.-]+"
    },
    "TableNameList":{
      "type":"list",
      "member":{"shape":"TableName"}
    },
    "TableStatus":{
      "type":"string",
      "enum":[
        "CREATING",
        "UPDATING",
        "DELETING",
        "ACTIVE"
      ]
    },
    "UpdateExpression":{"type":"string"},
    "UpdateGlobalSecondaryIndexAction":{
      "type":"structure",
      "required":[
        "IndexName",
        "ProvisionedThroughput"
      ],
      "members":{
        "IndexName":{"shape":"IndexName"},
        "ProvisionedThroughput":{"shape":"ProvisionedThroughput"}
      }
    },
    "UpdateItemInput":{
      "type":"structure",
      "required":[
        "TableName",
        "Key"
      ],
      "members":{
        "TableName":{"shape":"TableName"},
        "Key":{"shape":"Key"},
        "AttributeUpdates":{"shape":"AttributeUpdates"},
        "Expected":{"shape":"ExpectedAttributeMap"},
        "ConditionalOperator":{"shape":"ConditionalOperator"},
        "ReturnValues":{"shape":"ReturnValue"},
        "ReturnConsumedCapacity":{"shape":"ReturnConsumedCapacity"},
        "ReturnItemCollectionMetrics":{"shape":"ReturnItemCollectionMetrics"},
        "UpdateExpression":{"shape":"UpdateExpression"},
        "ConditionExpression":{"shape":"ConditionExpression"},
        "ExpressionAttributeNames":{"shape":"ExpressionAttributeNameMap"},
        "ExpressionAttributeValues":{"shape":"ExpressionAttributeValueMap"}
      }
    },
    "UpdateItemOutput":{
      "type":"structure",
      "members":{
        "Attributes":{"shape":"AttributeMap"},
        "ConsumedCapacity":{"shape":"ConsumedCapacity"},
        "ItemCollectionMetrics":{"shape":"ItemCollectionMetrics"}
      }
    },
    "UpdateTableInput":{
      "type":"structure",
      "required":["TableName"],
      "members":{
        "TableName":{"shape":"TableName"},
        "ProvisionedThroughput":{"shape":"ProvisionedThroughput"},
        "GlobalSecondaryIndexUpdates":{"shape":"GlobalSecondaryIndexUpdateList"}
      }
    },
    "UpdateTableOutput":{
      "type":"structure",
      "members":{
        "TableDescription":{"shape":"TableDescription"}
      }
    },
    "WriteRequest":{
      "type":"structure",
      "members":{
        "PutRequest":{"shape":"PutRequest"},
        "DeleteRequest":{"shape":"DeleteRequest"}
      }
    },
    "WriteRequests":{
      "type":"list",
      "member":{"shape":"WriteRequest"},
      "min":1,
      "max":25
    }
  }
}
,
"EC2":
{
  "metadata":{
    "apiVersion":"2014-10-01",
    "endpointPrefix":"ec2",
    "serviceAbbreviation":"Amazon EC2",
    "serviceFullName":"Amazon Elastic Compute Cloud",
    "signatureVersion":"v4",
    "xmlNamespace":"http://ec2.amazonaws.com/doc/2014-10-01",
    "protocol":"ec2"
  },
  "operations":{
    "AcceptVpcPeeringConnection":{
      "name":"AcceptVpcPeeringConnection",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"AcceptVpcPeeringConnectionRequest"},
      "output":{"shape":"AcceptVpcPeeringConnectionResult"}
    },
    "AllocateAddress":{
      "name":"AllocateAddress",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"AllocateAddressRequest"},
      "output":{"shape":"AllocateAddressResult"}
    },
    "AssignPrivateIpAddresses":{
      "name":"AssignPrivateIpAddresses",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"AssignPrivateIpAddressesRequest"}
    },
    "AssociateAddress":{
      "name":"AssociateAddress",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"AssociateAddressRequest"},
      "output":{"shape":"AssociateAddressResult"}
    },
    "AssociateDhcpOptions":{
      "name":"AssociateDhcpOptions",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"AssociateDhcpOptionsRequest"}
    },
    "AssociateRouteTable":{
      "name":"AssociateRouteTable",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"AssociateRouteTableRequest"},
      "output":{"shape":"AssociateRouteTableResult"}
    },
    "AttachInternetGateway":{
      "name":"AttachInternetGateway",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"AttachInternetGatewayRequest"}
    },
    "AttachNetworkInterface":{
      "name":"AttachNetworkInterface",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"AttachNetworkInterfaceRequest"},
      "output":{"shape":"AttachNetworkInterfaceResult"}
    },
    "AttachVolume":{
      "name":"AttachVolume",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"AttachVolumeRequest"},
      "output":{
        "shape":"VolumeAttachment",
        "locationName":"attachment"
      }
    },
    "AttachVpnGateway":{
      "name":"AttachVpnGateway",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"AttachVpnGatewayRequest"},
      "output":{"shape":"AttachVpnGatewayResult"}
    },
    "AuthorizeSecurityGroupEgress":{
      "name":"AuthorizeSecurityGroupEgress",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"AuthorizeSecurityGroupEgressRequest"}
    },
    "AuthorizeSecurityGroupIngress":{
      "name":"AuthorizeSecurityGroupIngress",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"AuthorizeSecurityGroupIngressRequest"}
    },
    "BundleInstance":{
      "name":"BundleInstance",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"BundleInstanceRequest"},
      "output":{"shape":"BundleInstanceResult"}
    },
    "CancelBundleTask":{
      "name":"CancelBundleTask",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CancelBundleTaskRequest"},
      "output":{"shape":"CancelBundleTaskResult"}
    },
    "CancelConversionTask":{
      "name":"CancelConversionTask",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CancelConversionRequest"}
    },
    "CancelExportTask":{
      "name":"CancelExportTask",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CancelExportTaskRequest"}
    },
    "CancelReservedInstancesListing":{
      "name":"CancelReservedInstancesListing",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CancelReservedInstancesListingRequest"},
      "output":{"shape":"CancelReservedInstancesListingResult"}
    },
    "CancelSpotInstanceRequests":{
      "name":"CancelSpotInstanceRequests",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CancelSpotInstanceRequestsRequest"},
      "output":{"shape":"CancelSpotInstanceRequestsResult"}
    },
    "ConfirmProductInstance":{
      "name":"ConfirmProductInstance",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ConfirmProductInstanceRequest"},
      "output":{"shape":"ConfirmProductInstanceResult"}
    },
    "CopyImage":{
      "name":"CopyImage",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CopyImageRequest"},
      "output":{"shape":"CopyImageResult"}
    },
    "CopySnapshot":{
      "name":"CopySnapshot",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CopySnapshotRequest"},
      "output":{"shape":"CopySnapshotResult"}
    },
    "CreateCustomerGateway":{
      "name":"CreateCustomerGateway",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateCustomerGatewayRequest"},
      "output":{"shape":"CreateCustomerGatewayResult"}
    },
    "CreateDhcpOptions":{
      "name":"CreateDhcpOptions",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateDhcpOptionsRequest"},
      "output":{"shape":"CreateDhcpOptionsResult"}
    },
    "CreateImage":{
      "name":"CreateImage",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateImageRequest"},
      "output":{"shape":"CreateImageResult"}
    },
    "CreateInstanceExportTask":{
      "name":"CreateInstanceExportTask",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateInstanceExportTaskRequest"},
      "output":{"shape":"CreateInstanceExportTaskResult"}
    },
    "CreateInternetGateway":{
      "name":"CreateInternetGateway",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateInternetGatewayRequest"},
      "output":{"shape":"CreateInternetGatewayResult"}
    },
    "CreateKeyPair":{
      "name":"CreateKeyPair",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateKeyPairRequest"},
      "output":{
        "shape":"KeyPair",
        "locationName":"keyPair"
      }
    },
    "CreateNetworkAcl":{
      "name":"CreateNetworkAcl",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateNetworkAclRequest"},
      "output":{"shape":"CreateNetworkAclResult"}
    },
    "CreateNetworkAclEntry":{
      "name":"CreateNetworkAclEntry",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateNetworkAclEntryRequest"}
    },
    "CreateNetworkInterface":{
      "name":"CreateNetworkInterface",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateNetworkInterfaceRequest"},
      "output":{"shape":"CreateNetworkInterfaceResult"}
    },
    "CreatePlacementGroup":{
      "name":"CreatePlacementGroup",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreatePlacementGroupRequest"}
    },
    "CreateReservedInstancesListing":{
      "name":"CreateReservedInstancesListing",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateReservedInstancesListingRequest"},
      "output":{"shape":"CreateReservedInstancesListingResult"}
    },
    "CreateRoute":{
      "name":"CreateRoute",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateRouteRequest"}
    },
    "CreateRouteTable":{
      "name":"CreateRouteTable",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateRouteTableRequest"},
      "output":{"shape":"CreateRouteTableResult"}
    },
    "CreateSecurityGroup":{
      "name":"CreateSecurityGroup",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateSecurityGroupRequest"},
      "output":{"shape":"CreateSecurityGroupResult"}
    },
    "CreateSnapshot":{
      "name":"CreateSnapshot",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateSnapshotRequest"},
      "output":{
        "shape":"Snapshot",
        "locationName":"snapshot"
      }
    },
    "CreateSpotDatafeedSubscription":{
      "name":"CreateSpotDatafeedSubscription",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateSpotDatafeedSubscriptionRequest"},
      "output":{"shape":"CreateSpotDatafeedSubscriptionResult"}
    },
    "CreateSubnet":{
      "name":"CreateSubnet",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateSubnetRequest"},
      "output":{"shape":"CreateSubnetResult"}
    },
    "CreateTags":{
      "name":"CreateTags",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateTagsRequest"}
    },
    "CreateVolume":{
      "name":"CreateVolume",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateVolumeRequest"},
      "output":{
        "shape":"Volume",
        "locationName":"volume"
      }
    },
    "CreateVpc":{
      "name":"CreateVpc",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateVpcRequest"},
      "output":{"shape":"CreateVpcResult"}
    },
    "CreateVpcPeeringConnection":{
      "name":"CreateVpcPeeringConnection",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateVpcPeeringConnectionRequest"},
      "output":{"shape":"CreateVpcPeeringConnectionResult"}
    },
    "CreateVpnConnection":{
      "name":"CreateVpnConnection",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateVpnConnectionRequest"},
      "output":{"shape":"CreateVpnConnectionResult"}
    },
    "CreateVpnConnectionRoute":{
      "name":"CreateVpnConnectionRoute",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateVpnConnectionRouteRequest"}
    },
    "CreateVpnGateway":{
      "name":"CreateVpnGateway",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateVpnGatewayRequest"},
      "output":{"shape":"CreateVpnGatewayResult"}
    },
    "DeleteCustomerGateway":{
      "name":"DeleteCustomerGateway",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteCustomerGatewayRequest"}
    },
    "DeleteDhcpOptions":{
      "name":"DeleteDhcpOptions",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteDhcpOptionsRequest"}
    },
    "DeleteInternetGateway":{
      "name":"DeleteInternetGateway",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteInternetGatewayRequest"}
    },
    "DeleteKeyPair":{
      "name":"DeleteKeyPair",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteKeyPairRequest"}
    },
    "DeleteNetworkAcl":{
      "name":"DeleteNetworkAcl",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteNetworkAclRequest"}
    },
    "DeleteNetworkAclEntry":{
      "name":"DeleteNetworkAclEntry",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteNetworkAclEntryRequest"}
    },
    "DeleteNetworkInterface":{
      "name":"DeleteNetworkInterface",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteNetworkInterfaceRequest"}
    },
    "DeletePlacementGroup":{
      "name":"DeletePlacementGroup",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeletePlacementGroupRequest"}
    },
    "DeleteRoute":{
      "name":"DeleteRoute",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteRouteRequest"}
    },
    "DeleteRouteTable":{
      "name":"DeleteRouteTable",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteRouteTableRequest"}
    },
    "DeleteSecurityGroup":{
      "name":"DeleteSecurityGroup",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteSecurityGroupRequest"}
    },
    "DeleteSnapshot":{
      "name":"DeleteSnapshot",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteSnapshotRequest"}
    },
    "DeleteSpotDatafeedSubscription":{
      "name":"DeleteSpotDatafeedSubscription",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteSpotDatafeedSubscriptionRequest"}
    },
    "DeleteSubnet":{
      "name":"DeleteSubnet",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteSubnetRequest"}
    },
    "DeleteTags":{
      "name":"DeleteTags",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteTagsRequest"}
    },
    "DeleteVolume":{
      "name":"DeleteVolume",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteVolumeRequest"}
    },
    "DeleteVpc":{
      "name":"DeleteVpc",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteVpcRequest"}
    },
    "DeleteVpcPeeringConnection":{
      "name":"DeleteVpcPeeringConnection",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteVpcPeeringConnectionRequest"},
      "output":{"shape":"DeleteVpcPeeringConnectionResult"}
    },
    "DeleteVpnConnection":{
      "name":"DeleteVpnConnection",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteVpnConnectionRequest"}
    },
    "DeleteVpnConnectionRoute":{
      "name":"DeleteVpnConnectionRoute",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteVpnConnectionRouteRequest"}
    },
    "DeleteVpnGateway":{
      "name":"DeleteVpnGateway",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteVpnGatewayRequest"}
    },
    "DeregisterImage":{
      "name":"DeregisterImage",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeregisterImageRequest"}
    },
    "DescribeAccountAttributes":{
      "name":"DescribeAccountAttributes",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeAccountAttributesRequest"},
      "output":{"shape":"DescribeAccountAttributesResult"}
    },
    "DescribeAddresses":{
      "name":"DescribeAddresses",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeAddressesRequest"},
      "output":{"shape":"DescribeAddressesResult"}
    },
    "DescribeAvailabilityZones":{
      "name":"DescribeAvailabilityZones",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeAvailabilityZonesRequest"},
      "output":{"shape":"DescribeAvailabilityZonesResult"}
    },
    "DescribeBundleTasks":{
      "name":"DescribeBundleTasks",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeBundleTasksRequest"},
      "output":{"shape":"DescribeBundleTasksResult"}
    },
    "DescribeConversionTasks":{
      "name":"DescribeConversionTasks",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeConversionTasksRequest"},
      "output":{"shape":"DescribeConversionTasksResult"}
    },
    "DescribeCustomerGateways":{
      "name":"DescribeCustomerGateways",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeCustomerGatewaysRequest"},
      "output":{"shape":"DescribeCustomerGatewaysResult"}
    },
    "DescribeDhcpOptions":{
      "name":"DescribeDhcpOptions",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeDhcpOptionsRequest"},
      "output":{"shape":"DescribeDhcpOptionsResult"}
    },
    "DescribeExportTasks":{
      "name":"DescribeExportTasks",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeExportTasksRequest"},
      "output":{"shape":"DescribeExportTasksResult"}
    },
    "DescribeImageAttribute":{
      "name":"DescribeImageAttribute",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeImageAttributeRequest"},
      "output":{
        "shape":"ImageAttribute",
        "locationName":"imageAttribute"
      }
    },
    "DescribeImages":{
      "name":"DescribeImages",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeImagesRequest"},
      "output":{"shape":"DescribeImagesResult"}
    },
    "DescribeInstanceAttribute":{
      "name":"DescribeInstanceAttribute",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeInstanceAttributeRequest"},
      "output":{"shape":"InstanceAttribute"}
    },
    "DescribeInstanceStatus":{
      "name":"DescribeInstanceStatus",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeInstanceStatusRequest"},
      "output":{"shape":"DescribeInstanceStatusResult"}
    },
    "DescribeInstances":{
      "name":"DescribeInstances",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeInstancesRequest"},
      "output":{"shape":"DescribeInstancesResult"}
    },
    "DescribeInternetGateways":{
      "name":"DescribeInternetGateways",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeInternetGatewaysRequest"},
      "output":{"shape":"DescribeInternetGatewaysResult"}
    },
    "DescribeKeyPairs":{
      "name":"DescribeKeyPairs",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeKeyPairsRequest"},
      "output":{"shape":"DescribeKeyPairsResult"}
    },
    "DescribeNetworkAcls":{
      "name":"DescribeNetworkAcls",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeNetworkAclsRequest"},
      "output":{"shape":"DescribeNetworkAclsResult"}
    },
    "DescribeNetworkInterfaceAttribute":{
      "name":"DescribeNetworkInterfaceAttribute",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeNetworkInterfaceAttributeRequest"},
      "output":{"shape":"DescribeNetworkInterfaceAttributeResult"}
    },
    "DescribeNetworkInterfaces":{
      "name":"DescribeNetworkInterfaces",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeNetworkInterfacesRequest"},
      "output":{"shape":"DescribeNetworkInterfacesResult"}
    },
    "DescribePlacementGroups":{
      "name":"DescribePlacementGroups",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribePlacementGroupsRequest"},
      "output":{"shape":"DescribePlacementGroupsResult"}
    },
    "DescribeRegions":{
      "name":"DescribeRegions",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeRegionsRequest"},
      "output":{"shape":"DescribeRegionsResult"}
    },
    "DescribeReservedInstances":{
      "name":"DescribeReservedInstances",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeReservedInstancesRequest"},
      "output":{"shape":"DescribeReservedInstancesResult"}
    },
    "DescribeReservedInstancesListings":{
      "name":"DescribeReservedInstancesListings",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeReservedInstancesListingsRequest"},
      "output":{"shape":"DescribeReservedInstancesListingsResult"}
    },
    "DescribeReservedInstancesModifications":{
      "name":"DescribeReservedInstancesModifications",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeReservedInstancesModificationsRequest"},
      "output":{"shape":"DescribeReservedInstancesModificationsResult"}
    },
    "DescribeReservedInstancesOfferings":{
      "name":"DescribeReservedInstancesOfferings",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeReservedInstancesOfferingsRequest"},
      "output":{"shape":"DescribeReservedInstancesOfferingsResult"}
    },
    "DescribeRouteTables":{
      "name":"DescribeRouteTables",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeRouteTablesRequest"},
      "output":{"shape":"DescribeRouteTablesResult"}
    },
    "DescribeSecurityGroups":{
      "name":"DescribeSecurityGroups",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeSecurityGroupsRequest"},
      "output":{"shape":"DescribeSecurityGroupsResult"}
    },
    "DescribeSnapshotAttribute":{
      "name":"DescribeSnapshotAttribute",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeSnapshotAttributeRequest"},
      "output":{"shape":"DescribeSnapshotAttributeResult"}
    },
    "DescribeSnapshots":{
      "name":"DescribeSnapshots",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeSnapshotsRequest"},
      "output":{"shape":"DescribeSnapshotsResult"}
    },
    "DescribeSpotDatafeedSubscription":{
      "name":"DescribeSpotDatafeedSubscription",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeSpotDatafeedSubscriptionRequest"},
      "output":{"shape":"DescribeSpotDatafeedSubscriptionResult"}
    },
    "DescribeSpotInstanceRequests":{
      "name":"DescribeSpotInstanceRequests",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeSpotInstanceRequestsRequest"},
      "output":{"shape":"DescribeSpotInstanceRequestsResult"}
    },
    "DescribeSpotPriceHistory":{
      "name":"DescribeSpotPriceHistory",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeSpotPriceHistoryRequest"},
      "output":{"shape":"DescribeSpotPriceHistoryResult"}
    },
    "DescribeSubnets":{
      "name":"DescribeSubnets",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeSubnetsRequest"},
      "output":{"shape":"DescribeSubnetsResult"}
    },
    "DescribeTags":{
      "name":"DescribeTags",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeTagsRequest"},
      "output":{"shape":"DescribeTagsResult"}
    },
    "DescribeVolumeAttribute":{
      "name":"DescribeVolumeAttribute",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeVolumeAttributeRequest"},
      "output":{"shape":"DescribeVolumeAttributeResult"}
    },
    "DescribeVolumeStatus":{
      "name":"DescribeVolumeStatus",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeVolumeStatusRequest"},
      "output":{"shape":"DescribeVolumeStatusResult"}
    },
    "DescribeVolumes":{
      "name":"DescribeVolumes",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeVolumesRequest"},
      "output":{"shape":"DescribeVolumesResult"}
    },
    "DescribeVpcAttribute":{
      "name":"DescribeVpcAttribute",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeVpcAttributeRequest"},
      "output":{"shape":"DescribeVpcAttributeResult"}
    },
    "DescribeVpcPeeringConnections":{
      "name":"DescribeVpcPeeringConnections",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeVpcPeeringConnectionsRequest"},
      "output":{"shape":"DescribeVpcPeeringConnectionsResult"}
    },
    "DescribeVpcs":{
      "name":"DescribeVpcs",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeVpcsRequest"},
      "output":{"shape":"DescribeVpcsResult"}
    },
    "DescribeVpnConnections":{
      "name":"DescribeVpnConnections",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeVpnConnectionsRequest"},
      "output":{"shape":"DescribeVpnConnectionsResult"}
    },
    "DescribeVpnGateways":{
      "name":"DescribeVpnGateways",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeVpnGatewaysRequest"},
      "output":{"shape":"DescribeVpnGatewaysResult"}
    },
    "DetachInternetGateway":{
      "name":"DetachInternetGateway",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DetachInternetGatewayRequest"}
    },
    "DetachNetworkInterface":{
      "name":"DetachNetworkInterface",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DetachNetworkInterfaceRequest"}
    },
    "DetachVolume":{
      "name":"DetachVolume",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DetachVolumeRequest"},
      "output":{
        "shape":"VolumeAttachment",
        "locationName":"attachment"
      }
    },
    "DetachVpnGateway":{
      "name":"DetachVpnGateway",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DetachVpnGatewayRequest"}
    },
    "DisableVgwRoutePropagation":{
      "name":"DisableVgwRoutePropagation",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DisableVgwRoutePropagationRequest"}
    },
    "DisassociateAddress":{
      "name":"DisassociateAddress",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DisassociateAddressRequest"}
    },
    "DisassociateRouteTable":{
      "name":"DisassociateRouteTable",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DisassociateRouteTableRequest"}
    },
    "EnableVgwRoutePropagation":{
      "name":"EnableVgwRoutePropagation",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"EnableVgwRoutePropagationRequest"}
    },
    "EnableVolumeIO":{
      "name":"EnableVolumeIO",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"EnableVolumeIORequest"}
    },
    "GetConsoleOutput":{
      "name":"GetConsoleOutput",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"GetConsoleOutputRequest"},
      "output":{"shape":"GetConsoleOutputResult"}
    },
    "GetPasswordData":{
      "name":"GetPasswordData",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"GetPasswordDataRequest"},
      "output":{"shape":"GetPasswordDataResult"}
    },
    "ImportInstance":{
      "name":"ImportInstance",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ImportInstanceRequest"},
      "output":{"shape":"ImportInstanceResult"}
    },
    "ImportKeyPair":{
      "name":"ImportKeyPair",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ImportKeyPairRequest"},
      "output":{"shape":"ImportKeyPairResult"}
    },
    "ImportVolume":{
      "name":"ImportVolume",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ImportVolumeRequest"},
      "output":{"shape":"ImportVolumeResult"}
    },
    "ModifyImageAttribute":{
      "name":"ModifyImageAttribute",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ModifyImageAttributeRequest"}
    },
    "ModifyInstanceAttribute":{
      "name":"ModifyInstanceAttribute",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ModifyInstanceAttributeRequest"}
    },
    "ModifyNetworkInterfaceAttribute":{
      "name":"ModifyNetworkInterfaceAttribute",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ModifyNetworkInterfaceAttributeRequest"}
    },
    "ModifyReservedInstances":{
      "name":"ModifyReservedInstances",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ModifyReservedInstancesRequest"},
      "output":{"shape":"ModifyReservedInstancesResult"}
    },
    "ModifySnapshotAttribute":{
      "name":"ModifySnapshotAttribute",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ModifySnapshotAttributeRequest"}
    },
    "ModifySubnetAttribute":{
      "name":"ModifySubnetAttribute",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ModifySubnetAttributeRequest"}
    },
    "ModifyVolumeAttribute":{
      "name":"ModifyVolumeAttribute",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ModifyVolumeAttributeRequest"}
    },
    "ModifyVpcAttribute":{
      "name":"ModifyVpcAttribute",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ModifyVpcAttributeRequest"}
    },
    "MonitorInstances":{
      "name":"MonitorInstances",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"MonitorInstancesRequest"},
      "output":{"shape":"MonitorInstancesResult"}
    },
    "PurchaseReservedInstancesOffering":{
      "name":"PurchaseReservedInstancesOffering",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"PurchaseReservedInstancesOfferingRequest"},
      "output":{"shape":"PurchaseReservedInstancesOfferingResult"}
    },
    "RebootInstances":{
      "name":"RebootInstances",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"RebootInstancesRequest"}
    },
    "RegisterImage":{
      "name":"RegisterImage",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"RegisterImageRequest"},
      "output":{"shape":"RegisterImageResult"}
    },
    "RejectVpcPeeringConnection":{
      "name":"RejectVpcPeeringConnection",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"RejectVpcPeeringConnectionRequest"},
      "output":{"shape":"RejectVpcPeeringConnectionResult"}
    },
    "ReleaseAddress":{
      "name":"ReleaseAddress",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ReleaseAddressRequest"}
    },
    "ReplaceNetworkAclAssociation":{
      "name":"ReplaceNetworkAclAssociation",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ReplaceNetworkAclAssociationRequest"},
      "output":{"shape":"ReplaceNetworkAclAssociationResult"}
    },
    "ReplaceNetworkAclEntry":{
      "name":"ReplaceNetworkAclEntry",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ReplaceNetworkAclEntryRequest"}
    },
    "ReplaceRoute":{
      "name":"ReplaceRoute",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ReplaceRouteRequest"}
    },
    "ReplaceRouteTableAssociation":{
      "name":"ReplaceRouteTableAssociation",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ReplaceRouteTableAssociationRequest"},
      "output":{"shape":"ReplaceRouteTableAssociationResult"}
    },
    "ReportInstanceStatus":{
      "name":"ReportInstanceStatus",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ReportInstanceStatusRequest"}
    },
    "RequestSpotInstances":{
      "name":"RequestSpotInstances",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"RequestSpotInstancesRequest"},
      "output":{"shape":"RequestSpotInstancesResult"}
    },
    "ResetImageAttribute":{
      "name":"ResetImageAttribute",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ResetImageAttributeRequest"}
    },
    "ResetInstanceAttribute":{
      "name":"ResetInstanceAttribute",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ResetInstanceAttributeRequest"}
    },
    "ResetNetworkInterfaceAttribute":{
      "name":"ResetNetworkInterfaceAttribute",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ResetNetworkInterfaceAttributeRequest"}
    },
    "ResetSnapshotAttribute":{
      "name":"ResetSnapshotAttribute",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ResetSnapshotAttributeRequest"}
    },
    "RevokeSecurityGroupEgress":{
      "name":"RevokeSecurityGroupEgress",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"RevokeSecurityGroupEgressRequest"}
    },
    "RevokeSecurityGroupIngress":{
      "name":"RevokeSecurityGroupIngress",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"RevokeSecurityGroupIngressRequest"}
    },
    "RunInstances":{
      "name":"RunInstances",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"RunInstancesRequest"},
      "output":{
        "shape":"Reservation",
        "locationName":"reservation"
      }
    },
    "StartInstances":{
      "name":"StartInstances",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"StartInstancesRequest"},
      "output":{"shape":"StartInstancesResult"}
    },
    "StopInstances":{
      "name":"StopInstances",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"StopInstancesRequest"},
      "output":{"shape":"StopInstancesResult"}
    },
    "TerminateInstances":{
      "name":"TerminateInstances",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"TerminateInstancesRequest"},
      "output":{"shape":"TerminateInstancesResult"}
    },
    "UnassignPrivateIpAddresses":{
      "name":"UnassignPrivateIpAddresses",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"UnassignPrivateIpAddressesRequest"}
    },
    "UnmonitorInstances":{
      "name":"UnmonitorInstances",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"UnmonitorInstancesRequest"},
      "output":{"shape":"UnmonitorInstancesResult"}
    }
  },
  "shapes":{
    "AcceptVpcPeeringConnectionRequest":{
      "type":"structure",
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "VpcPeeringConnectionId":{
          "shape":"String",
          "locationName":"vpcPeeringConnectionId"
        }
      }
    },
    "AcceptVpcPeeringConnectionResult":{
      "type":"structure",
      "members":{
        "VpcPeeringConnection":{
          "shape":"VpcPeeringConnection",
          "locationName":"vpcPeeringConnection"
        }
      }
    },
    "AccountAttribute":{
      "type":"structure",
      "members":{
        "AttributeName":{
          "shape":"String",
          "locationName":"attributeName"
        },
        "AttributeValues":{
          "shape":"AccountAttributeValueList",
          "locationName":"attributeValueSet"
        }
      }
    },
    "AccountAttributeList":{
      "type":"list",
      "member":{
        "shape":"AccountAttribute",
        "locationName":"item"
      }
    },
    "AccountAttributeName":{
      "type":"string",
      "enum":[
        "supported-platforms",
        "default-vpc"
      ]
    },
    "AccountAttributeNameStringList":{
      "type":"list",
      "member":{
        "shape":"AccountAttributeName",
        "locationName":"attributeName"
      }
    },
    "AccountAttributeValue":{
      "type":"structure",
      "members":{
        "AttributeValue":{
          "shape":"String",
          "locationName":"attributeValue"
        }
      }
    },
    "AccountAttributeValueList":{
      "type":"list",
      "member":{
        "shape":"AccountAttributeValue",
        "locationName":"item"
      }
    },
    "Address":{
      "type":"structure",
      "members":{
        "InstanceId":{
          "shape":"String",
          "locationName":"instanceId"
        },
        "PublicIp":{
          "shape":"String",
          "locationName":"publicIp"
        },
        "AllocationId":{
          "shape":"String",
          "locationName":"allocationId"
        },
        "AssociationId":{
          "shape":"String",
          "locationName":"associationId"
        },
        "Domain":{
          "shape":"DomainType",
          "locationName":"domain"
        },
        "NetworkInterfaceId":{
          "shape":"String",
          "locationName":"networkInterfaceId"
        },
        "NetworkInterfaceOwnerId":{
          "shape":"String",
          "locationName":"networkInterfaceOwnerId"
        },
        "PrivateIpAddress":{
          "shape":"String",
          "locationName":"privateIpAddress"
        }
      }
    },
    "AddressList":{
      "type":"list",
      "member":{
        "shape":"Address",
        "locationName":"item"
      }
    },
    "AllocateAddressRequest":{
      "type":"structure",
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "Domain":{"shape":"DomainType"}
      }
    },
    "AllocateAddressResult":{
      "type":"structure",
      "members":{
        "PublicIp":{
          "shape":"String",
          "locationName":"publicIp"
        },
        "Domain":{
          "shape":"DomainType",
          "locationName":"domain"
        },
        "AllocationId":{
          "shape":"String",
          "locationName":"allocationId"
        }
      }
    },
    "AllocationIdList":{
      "type":"list",
      "member":{
        "shape":"String",
        "locationName":"AllocationId"
      }
    },
    "ArchitectureValues":{
      "type":"string",
      "enum":[
        "i386",
        "x86_64"
      ]
    },
    "AssignPrivateIpAddressesRequest":{
      "type":"structure",
      "required":["NetworkInterfaceId"],
      "members":{
        "NetworkInterfaceId":{
          "shape":"String",
          "locationName":"networkInterfaceId"
        },
        "PrivateIpAddresses":{
          "shape":"PrivateIpAddressStringList",
          "locationName":"privateIpAddress"
        },
        "SecondaryPrivateIpAddressCount":{
          "shape":"Integer",
          "locationName":"secondaryPrivateIpAddressCount"
        },
        "AllowReassignment":{
          "shape":"Boolean",
          "locationName":"allowReassignment"
        }
      }
    },
    "AssociateAddressRequest":{
      "type":"structure",
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "InstanceId":{"shape":"String"},
        "PublicIp":{"shape":"String"},
        "AllocationId":{"shape":"String"},
        "NetworkInterfaceId":{
          "shape":"String",
          "locationName":"networkInterfaceId"
        },
        "PrivateIpAddress":{
          "shape":"String",
          "locationName":"privateIpAddress"
        },
        "AllowReassociation":{
          "shape":"Boolean",
          "locationName":"allowReassociation"
        }
      }
    },
    "AssociateAddressResult":{
      "type":"structure",
      "members":{
        "AssociationId":{
          "shape":"String",
          "locationName":"associationId"
        }
      }
    },
    "AssociateDhcpOptionsRequest":{
      "type":"structure",
      "required":[
        "DhcpOptionsId",
        "VpcId"
      ],
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "DhcpOptionsId":{"shape":"String"},
        "VpcId":{"shape":"String"}
      }
    },
    "AssociateRouteTableRequest":{
      "type":"structure",
      "required":[
        "SubnetId",
        "RouteTableId"
      ],
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "SubnetId":{
          "shape":"String",
          "locationName":"subnetId"
        },
        "RouteTableId":{
          "shape":"String",
          "locationName":"routeTableId"
        }
      }
    },
    "AssociateRouteTableResult":{
      "type":"structure",
      "members":{
        "AssociationId":{
          "shape":"String",
          "locationName":"associationId"
        }
      }
    },
    "AttachInternetGatewayRequest":{
      "type":"structure",
      "required":[
        "InternetGatewayId",
        "VpcId"
      ],
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "InternetGatewayId":{
          "shape":"String",
          "locationName":"internetGatewayId"
        },
        "VpcId":{
          "shape":"String",
          "locationName":"vpcId"
        }
      }
    },
    "AttachNetworkInterfaceRequest":{
      "type":"structure",
      "required":[
        "NetworkInterfaceId",
        "InstanceId",
        "DeviceIndex"
      ],
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "NetworkInterfaceId":{
          "shape":"String",
          "locationName":"networkInterfaceId"
        },
        "InstanceId":{
          "shape":"String",
          "locationName":"instanceId"
        },
        "DeviceIndex":{
          "shape":"Integer",
          "locationName":"deviceIndex"
        }
      }
    },
    "AttachNetworkInterfaceResult":{
      "type":"structure",
      "members":{
        "AttachmentId":{
          "shape":"String",
          "locationName":"attachmentId"
        }
      }
    },
    "AttachVolumeRequest":{
      "type":"structure",
      "required":[
        "VolumeId",
        "InstanceId",
        "Device"
      ],
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "VolumeId":{"shape":"String"},
        "InstanceId":{"shape":"String"},
        "Device":{"shape":"String"}
      }
    },
    "AttachVpnGatewayRequest":{
      "type":"structure",
      "required":[
        "VpnGatewayId",
        "VpcId"
      ],
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "VpnGatewayId":{"shape":"String"},
        "VpcId":{"shape":"String"}
      }
    },
    "AttachVpnGatewayResult":{
      "type":"structure",
      "members":{
        "VpcAttachment":{
          "shape":"VpcAttachment",
          "locationName":"attachment"
        }
      }
    },
    "AttachmentStatus":{
      "type":"string",
      "enum":[
        "attaching",
        "attached",
        "detaching",
        "detached"
      ]
    },
    "AttributeBooleanValue":{
      "type":"structure",
      "members":{
        "Value":{
          "shape":"Boolean",
          "locationName":"value"
        }
      }
    },
    "AttributeValue":{
      "type":"structure",
      "members":{
        "Value":{
          "shape":"String",
          "locationName":"value"
        }
      }
    },
    "AuthorizeSecurityGroupEgressRequest":{
      "type":"structure",
      "required":["GroupId"],
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "GroupId":{
          "shape":"String",
          "locationName":"groupId"
        },
        "SourceSecurityGroupName":{
          "shape":"String",
          "locationName":"sourceSecurityGroupName"
        },
        "SourceSecurityGroupOwnerId":{
          "shape":"String",
          "locationName":"sourceSecurityGroupOwnerId"
        },
        "IpProtocol":{
          "shape":"String",
          "locationName":"ipProtocol"
        },
        "FromPort":{
          "shape":"Integer",
          "locationName":"fromPort"
        },
        "ToPort":{
          "shape":"Integer",
          "locationName":"toPort"
        },
        "CidrIp":{
          "shape":"String",
          "locationName":"cidrIp"
        },
        "IpPermissions":{
          "shape":"IpPermissionList",
          "locationName":"ipPermissions"
        }
      }
    },
    "AuthorizeSecurityGroupIngressRequest":{
      "type":"structure",
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "GroupName":{"shape":"String"},
        "GroupId":{"shape":"String"},
        "SourceSecurityGroupName":{"shape":"String"},
        "SourceSecurityGroupOwnerId":{"shape":"String"},
        "IpProtocol":{"shape":"String"},
        "FromPort":{"shape":"Integer"},
        "ToPort":{"shape":"Integer"},
        "CidrIp":{"shape":"String"},
        "IpPermissions":{"shape":"IpPermissionList"}
      }
    },
    "AvailabilityZone":{
      "type":"structure",
      "members":{
        "ZoneName":{
          "shape":"String",
          "locationName":"zoneName"
        },
        "State":{
          "shape":"AvailabilityZoneState",
          "locationName":"zoneState"
        },
        "RegionName":{
          "shape":"String",
          "locationName":"regionName"
        },
        "Messages":{
          "shape":"AvailabilityZoneMessageList",
          "locationName":"messageSet"
        }
      }
    },
    "AvailabilityZoneList":{
      "type":"list",
      "member":{
        "shape":"AvailabilityZone",
        "locationName":"item"
      }
    },
    "AvailabilityZoneMessage":{
      "type":"structure",
      "members":{
        "Message":{
          "shape":"String",
          "locationName":"message"
        }
      }
    },
    "AvailabilityZoneMessageList":{
      "type":"list",
      "member":{
        "shape":"AvailabilityZoneMessage",
        "locationName":"item"
      }
    },
    "AvailabilityZoneState":{
      "type":"string",
      "enum":["available"]
    },
    "BlockDeviceMapping":{
      "type":"structure",
      "members":{
        "VirtualName":{
          "shape":"String",
          "locationName":"virtualName"
        },
        "DeviceName":{
          "shape":"String",
          "locationName":"deviceName"
        },
        "Ebs":{
          "shape":"EbsBlockDevice",
          "locationName":"ebs"
        },
        "NoDevice":{
          "shape":"String",
          "locationName":"noDevice"
        }
      }
    },
    "BlockDeviceMappingList":{
      "type":"list",
      "member":{
        "shape":"BlockDeviceMapping",
        "locationName":"item"
      }
    },
    "BlockDeviceMappingRequestList":{
      "type":"list",
      "member":{
        "shape":"BlockDeviceMapping",
        "locationName":"BlockDeviceMapping"
      }
    },
    "Boolean":{"type":"boolean"},
    "BundleIdStringList":{
      "type":"list",
      "member":{
        "shape":"String",
        "locationName":"BundleId"
      }
    },
    "BundleInstanceRequest":{
      "type":"structure",
      "required":[
        "InstanceId",
        "Storage"
      ],
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "InstanceId":{"shape":"String"},
        "Storage":{"shape":"Storage"}
      }
    },
    "BundleInstanceResult":{
      "type":"structure",
      "members":{
        "BundleTask":{
          "shape":"BundleTask",
          "locationName":"bundleInstanceTask"
        }
      }
    },
    "BundleTask":{
      "type":"structure",
      "members":{
        "InstanceId":{
          "shape":"String",
          "locationName":"instanceId"
        },
        "BundleId":{
          "shape":"String",
          "locationName":"bundleId"
        },
        "State":{
          "shape":"BundleTaskState",
          "locationName":"state"
        },
        "StartTime":{
          "shape":"DateTime",
          "locationName":"startTime"
        },
        "UpdateTime":{
          "shape":"DateTime",
          "locationName":"updateTime"
        },
        "Storage":{
          "shape":"Storage",
          "locationName":"storage"
        },
        "Progress":{
          "shape":"String",
          "locationName":"progress"
        },
        "BundleTaskError":{
          "shape":"BundleTaskError",
          "locationName":"error"
        }
      }
    },
    "BundleTaskError":{
      "type":"structure",
      "members":{
        "Code":{
          "shape":"String",
          "locationName":"code"
        },
        "Message":{
          "shape":"String",
          "locationName":"message"
        }
      }
    },
    "BundleTaskList":{
      "type":"list",
      "member":{
        "shape":"BundleTask",
        "locationName":"item"
      }
    },
    "BundleTaskState":{
      "type":"string",
      "enum":[
        "pending",
        "waiting-for-shutdown",
        "bundling",
        "storing",
        "cancelling",
        "complete",
        "failed"
      ]
    },
    "CancelBundleTaskRequest":{
      "type":"structure",
      "required":["BundleId"],
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "BundleId":{"shape":"String"}
      }
    },
    "CancelBundleTaskResult":{
      "type":"structure",
      "members":{
        "BundleTask":{
          "shape":"BundleTask",
          "locationName":"bundleInstanceTask"
        }
      }
    },
    "CancelConversionRequest":{
      "type":"structure",
      "required":["ConversionTaskId"],
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "ConversionTaskId":{
          "shape":"String",
          "locationName":"conversionTaskId"
        },
        "ReasonMessage":{
          "shape":"String",
          "locationName":"reasonMessage"
        }
      }
    },
    "CancelExportTaskRequest":{
      "type":"structure",
      "required":["ExportTaskId"],
      "members":{
        "ExportTaskId":{
          "shape":"String",
          "locationName":"exportTaskId"
        }
      }
    },
    "CancelReservedInstancesListingRequest":{
      "type":"structure",
      "required":["ReservedInstancesListingId"],
      "members":{
        "ReservedInstancesListingId":{
          "shape":"String",
          "locationName":"reservedInstancesListingId"
        }
      }
    },
    "CancelReservedInstancesListingResult":{
      "type":"structure",
      "members":{
        "ReservedInstancesListings":{
          "shape":"ReservedInstancesListingList",
          "locationName":"reservedInstancesListingsSet"
        }
      }
    },
    "CancelSpotInstanceRequestState":{
      "type":"string",
      "enum":[
        "active",
        "open",
        "closed",
        "cancelled",
        "completed"
      ]
    },
    "CancelSpotInstanceRequestsRequest":{
      "type":"structure",
      "required":["SpotInstanceRequestIds"],
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "SpotInstanceRequestIds":{
          "shape":"SpotInstanceRequestIdList",
          "locationName":"SpotInstanceRequestId"
        }
      }
    },
    "CancelSpotInstanceRequestsResult":{
      "type":"structure",
      "members":{
        "CancelledSpotInstanceRequests":{
          "shape":"CancelledSpotInstanceRequestList",
          "locationName":"spotInstanceRequestSet"
        }
      }
    },
    "CancelledSpotInstanceRequest":{
      "type":"structure",
      "members":{
        "SpotInstanceRequestId":{
          "shape":"String",
          "locationName":"spotInstanceRequestId"
        },
        "State":{
          "shape":"CancelSpotInstanceRequestState",
          "locationName":"state"
        }
      }
    },
    "CancelledSpotInstanceRequestList":{
      "type":"list",
      "member":{
        "shape":"CancelledSpotInstanceRequest",
        "locationName":"item"
      }
    },
    "ConfirmProductInstanceRequest":{
      "type":"structure",
      "required":[
        "ProductCode",
        "InstanceId"
      ],
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "ProductCode":{"shape":"String"},
        "InstanceId":{"shape":"String"}
      }
    },
    "ConfirmProductInstanceResult":{
      "type":"structure",
      "members":{
        "OwnerId":{
          "shape":"String",
          "locationName":"ownerId"
        }
      }
    },
    "ContainerFormat":{
      "type":"string",
      "enum":["ova"]
    },
    "ConversionIdStringList":{
      "type":"list",
      "member":{
        "shape":"String",
        "locationName":"item"
      }
    },
    "ConversionTask":{
      "type":"structure",
      "required":[
        "ConversionTaskId",
        "State"
      ],
      "members":{
        "ConversionTaskId":{
          "shape":"String",
          "locationName":"conversionTaskId"
        },
        "ExpirationTime":{
          "shape":"String",
          "locationName":"expirationTime"
        },
        "ImportInstance":{
          "shape":"ImportInstanceTaskDetails",
          "locationName":"importInstance"
        },
        "ImportVolume":{
          "shape":"ImportVolumeTaskDetails",
          "locationName":"importVolume"
        },
        "State":{
          "shape":"ConversionTaskState",
          "locationName":"state"
        },
        "StatusMessage":{
          "shape":"String",
          "locationName":"statusMessage"
        },
        "Tags":{
          "shape":"TagList",
          "locationName":"tagSet"
        }
      }
    },
    "ConversionTaskState":{
      "type":"string",
      "enum":[
        "active",
        "cancelling",
        "cancelled",
        "completed"
      ]
    },
    "CopyImageRequest":{
      "type":"structure",
      "required":[
        "SourceRegion",
        "SourceImageId",
        "Name"
      ],
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "SourceRegion":{"shape":"String"},
        "SourceImageId":{"shape":"String"},
        "Name":{"shape":"String"},
        "Description":{"shape":"String"},
        "ClientToken":{"shape":"String"}
      }
    },
    "CopyImageResult":{
      "type":"structure",
      "members":{
        "ImageId":{
          "shape":"String",
          "locationName":"imageId"
        }
      }
    },
    "CopySnapshotRequest":{
      "type":"structure",
      "required":[
        "SourceRegion",
        "SourceSnapshotId"
      ],
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "SourceRegion":{"shape":"String"},
        "SourceSnapshotId":{"shape":"String"},
        "Description":{"shape":"String"},
        "DestinationRegion":{
          "shape":"String",
          "locationName":"destinationRegion"
        },
        "PresignedUrl":{
          "shape":"String",
          "locationName":"presignedUrl"
        }
      }
    },
    "CopySnapshotResult":{
      "type":"structure",
      "members":{
        "SnapshotId":{
          "shape":"String",
          "locationName":"snapshotId"
        }
      }
    },
    "CreateCustomerGatewayRequest":{
      "type":"structure",
      "required":[
        "Type",
        "PublicIp",
        "BgpAsn"
      ],
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "Type":{"shape":"GatewayType"},
        "PublicIp":{
          "shape":"String",
          "locationName":"IpAddress"
        },
        "BgpAsn":{"shape":"Integer"}
      }
    },
    "CreateCustomerGatewayResult":{
      "type":"structure",
      "members":{
        "CustomerGateway":{
          "shape":"CustomerGateway",
          "locationName":"customerGateway"
        }
      }
    },
    "CreateDhcpOptionsRequest":{
      "type":"structure",
      "required":["DhcpConfigurations"],
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "DhcpConfigurations":{
          "shape":"NewDhcpConfigurationList",
          "locationName":"dhcpConfiguration"
        }
      }
    },
    "CreateDhcpOptionsResult":{
      "type":"structure",
      "members":{
        "DhcpOptions":{
          "shape":"DhcpOptions",
          "locationName":"dhcpOptions"
        }
      }
    },
    "CreateImageRequest":{
      "type":"structure",
      "required":[
        "InstanceId",
        "Name"
      ],
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "InstanceId":{
          "shape":"String",
          "locationName":"instanceId"
        },
        "Name":{
          "shape":"String",
          "locationName":"name"
        },
        "Description":{
          "shape":"String",
          "locationName":"description"
        },
        "NoReboot":{
          "shape":"Boolean",
          "locationName":"noReboot"
        },
        "BlockDeviceMappings":{
          "shape":"BlockDeviceMappingRequestList",
          "locationName":"blockDeviceMapping"
        }
      }
    },
    "CreateImageResult":{
      "type":"structure",
      "members":{
        "ImageId":{
          "shape":"String",
          "locationName":"imageId"
        }
      }
    },
    "CreateInstanceExportTaskRequest":{
      "type":"structure",
      "required":["InstanceId"],
      "members":{
        "Description":{
          "shape":"String",
          "locationName":"description"
        },
        "InstanceId":{
          "shape":"String",
          "locationName":"instanceId"
        },
        "TargetEnvironment":{
          "shape":"ExportEnvironment",
          "locationName":"targetEnvironment"
        },
        "ExportToS3Task":{
          "shape":"ExportToS3TaskSpecification",
          "locationName":"exportToS3"
        }
      }
    },
    "CreateInstanceExportTaskResult":{
      "type":"structure",
      "members":{
        "ExportTask":{
          "shape":"ExportTask",
          "locationName":"exportTask"
        }
      }
    },
    "CreateInternetGatewayRequest":{
      "type":"structure",
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        }
      }
    },
    "CreateInternetGatewayResult":{
      "type":"structure",
      "members":{
        "InternetGateway":{
          "shape":"InternetGateway",
          "locationName":"internetGateway"
        }
      }
    },
    "CreateKeyPairRequest":{
      "type":"structure",
      "required":["KeyName"],
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "KeyName":{"shape":"String"}
      }
    },
    "CreateNetworkAclEntryRequest":{
      "type":"structure",
      "required":[
        "NetworkAclId",
        "RuleNumber",
        "Protocol",
        "RuleAction",
        "Egress",
        "CidrBlock"
      ],
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "NetworkAclId":{
          "shape":"String",
          "locationName":"networkAclId"
        },
        "RuleNumber":{
          "shape":"Integer",
          "locationName":"ruleNumber"
        },
        "Protocol":{
          "shape":"String",
          "locationName":"protocol"
        },
        "RuleAction":{
          "shape":"RuleAction",
          "locationName":"ruleAction"
        },
        "Egress":{
          "shape":"Boolean",
          "locationName":"egress"
        },
        "CidrBlock":{
          "shape":"String",
          "locationName":"cidrBlock"
        },
        "IcmpTypeCode":{
          "shape":"IcmpTypeCode",
          "locationName":"Icmp"
        },
        "PortRange":{
          "shape":"PortRange",
          "locationName":"portRange"
        }
      }
    },
    "CreateNetworkAclRequest":{
      "type":"structure",
      "required":["VpcId"],
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "VpcId":{
          "shape":"String",
          "locationName":"vpcId"
        }
      }
    },
    "CreateNetworkAclResult":{
      "type":"structure",
      "members":{
        "NetworkAcl":{
          "shape":"NetworkAcl",
          "locationName":"networkAcl"
        }
      }
    },
    "CreateNetworkInterfaceRequest":{
      "type":"structure",
      "required":["SubnetId"],
      "members":{
        "SubnetId":{
          "shape":"String",
          "locationName":"subnetId"
        },
        "Description":{
          "shape":"String",
          "locationName":"description"
        },
        "PrivateIpAddress":{
          "shape":"String",
          "locationName":"privateIpAddress"
        },
        "Groups":{
          "shape":"SecurityGroupIdStringList",
          "locationName":"SecurityGroupId"
        },
        "PrivateIpAddresses":{
          "shape":"PrivateIpAddressSpecificationList",
          "locationName":"privateIpAddresses"
        },
        "SecondaryPrivateIpAddressCount":{
          "shape":"Integer",
          "locationName":"secondaryPrivateIpAddressCount"
        },
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        }
      }
    },
    "CreateNetworkInterfaceResult":{
      "type":"structure",
      "members":{
        "NetworkInterface":{
          "shape":"NetworkInterface",
          "locationName":"networkInterface"
        }
      }
    },
    "CreatePlacementGroupRequest":{
      "type":"structure",
      "required":[
        "GroupName",
        "Strategy"
      ],
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "GroupName":{
          "shape":"String",
          "locationName":"groupName"
        },
        "Strategy":{
          "shape":"PlacementStrategy",
          "locationName":"strategy"
        }
      }
    },
    "CreateReservedInstancesListingRequest":{
      "type":"structure",
      "required":[
        "ReservedInstancesId",
        "InstanceCount",
        "PriceSchedules",
        "ClientToken"
      ],
      "members":{
        "ReservedInstancesId":{
          "shape":"String",
          "locationName":"reservedInstancesId"
        },
        "InstanceCount":{
          "shape":"Integer",
          "locationName":"instanceCount"
        },
        "PriceSchedules":{
          "shape":"PriceScheduleSpecificationList",
          "locationName":"priceSchedules"
        },
        "ClientToken":{
          "shape":"String",
          "locationName":"clientToken"
        }
      }
    },
    "CreateReservedInstancesListingResult":{
      "type":"structure",
      "members":{
        "ReservedInstancesListings":{
          "shape":"ReservedInstancesListingList",
          "locationName":"reservedInstancesListingsSet"
        }
      }
    },
    "CreateRouteRequest":{
      "type":"structure",
      "required":[
        "RouteTableId",
        "DestinationCidrBlock"
      ],
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "RouteTableId":{
          "shape":"String",
          "locationName":"routeTableId"
        },
        "DestinationCidrBlock":{
          "shape":"String",
          "locationName":"destinationCidrBlock"
        },
        "GatewayId":{
          "shape":"String",
          "locationName":"gatewayId"
        },
        "InstanceId":{
          "shape":"String",
          "locationName":"instanceId"
        },
        "NetworkInterfaceId":{
          "shape":"String",
          "locationName":"networkInterfaceId"
        },
        "VpcPeeringConnectionId":{
          "shape":"String",
          "locationName":"vpcPeeringConnectionId"
        }
      }
    },
    "CreateRouteTableRequest":{
      "type":"structure",
      "required":["VpcId"],
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "VpcId":{
          "shape":"String",
          "locationName":"vpcId"
        }
      }
    },
    "CreateRouteTableResult":{
      "type":"structure",
      "members":{
        "RouteTable":{
          "shape":"RouteTable",
          "locationName":"routeTable"
        }
      }
    },
    "CreateSecurityGroupRequest":{
      "type":"structure",
      "required":[
        "GroupName",
        "Description"
      ],
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "GroupName":{"shape":"String"},
        "Description":{
          "shape":"String",
          "locationName":"GroupDescription"
        },
        "VpcId":{"shape":"String"}
      }
    },
    "CreateSecurityGroupResult":{
      "type":"structure",
      "members":{
        "GroupId":{
          "shape":"String",
          "locationName":"groupId"
        }
      }
    },
    "CreateSnapshotRequest":{
      "type":"structure",
      "required":["VolumeId"],
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "VolumeId":{"shape":"String"},
        "Description":{"shape":"String"}
      }
    },
    "CreateSpotDatafeedSubscriptionRequest":{
      "type":"structure",
      "required":["Bucket"],
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "Bucket":{
          "shape":"String",
          "locationName":"bucket"
        },
        "Prefix":{
          "shape":"String",
          "locationName":"prefix"
        }
      }
    },
    "CreateSpotDatafeedSubscriptionResult":{
      "type":"structure",
      "members":{
        "SpotDatafeedSubscription":{
          "shape":"SpotDatafeedSubscription",
          "locationName":"spotDatafeedSubscription"
        }
      }
    },
    "CreateSubnetRequest":{
      "type":"structure",
      "required":[
        "VpcId",
        "CidrBlock"
      ],
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "VpcId":{"shape":"String"},
        "CidrBlock":{"shape":"String"},
        "AvailabilityZone":{"shape":"String"}
      }
    },
    "CreateSubnetResult":{
      "type":"structure",
      "members":{
        "Subnet":{
          "shape":"Subnet",
          "locationName":"subnet"
        }
      }
    },
    "CreateTagsRequest":{
      "type":"structure",
      "required":[
        "Resources",
        "Tags"
      ],
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "Resources":{
          "shape":"ResourceIdList",
          "locationName":"ResourceId"
        },
        "Tags":{
          "shape":"TagList",
          "locationName":"Tag"
        }
      }
    },
    "CreateVolumePermission":{
      "type":"structure",
      "members":{
        "UserId":{
          "shape":"String",
          "locationName":"userId"
        },
        "Group":{
          "shape":"PermissionGroup",
          "locationName":"group"
        }
      }
    },
    "CreateVolumePermissionList":{
      "type":"list",
      "member":{
        "shape":"CreateVolumePermission",
        "locationName":"item"
      }
    },
    "CreateVolumePermissionModifications":{
      "type":"structure",
      "members":{
        "Add":{"shape":"CreateVolumePermissionList"},
        "Remove":{"shape":"CreateVolumePermissionList"}
      }
    },
    "CreateVolumeRequest":{
      "type":"structure",
      "required":["AvailabilityZone"],
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "Size":{"shape":"Integer"},
        "SnapshotId":{"shape":"String"},
        "AvailabilityZone":{"shape":"String"},
        "VolumeType":{"shape":"VolumeType"},
        "Iops":{"shape":"Integer"},
        "Encrypted":{
          "shape":"Boolean",
          "locationName":"encrypted"
        },
        "KmsKeyId":{"shape":"String"}
      }
    },
    "CreateVpcPeeringConnectionRequest":{
      "type":"structure",
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "VpcId":{
          "shape":"String",
          "locationName":"vpcId"
        },
        "PeerVpcId":{
          "shape":"String",
          "locationName":"peerVpcId"
        },
        "PeerOwnerId":{
          "shape":"String",
          "locationName":"peerOwnerId"
        }
      }
    },
    "CreateVpcPeeringConnectionResult":{
      "type":"structure",
      "members":{
        "VpcPeeringConnection":{
          "shape":"VpcPeeringConnection",
          "locationName":"vpcPeeringConnection"
        }
      }
    },
    "CreateVpcRequest":{
      "type":"structure",
      "required":["CidrBlock"],
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "CidrBlock":{"shape":"String"},
        "InstanceTenancy":{
          "shape":"Tenancy",
          "locationName":"instanceTenancy"
        }
      }
    },
    "CreateVpcResult":{
      "type":"structure",
      "members":{
        "Vpc":{
          "shape":"Vpc",
          "locationName":"vpc"
        }
      }
    },
    "CreateVpnConnectionRequest":{
      "type":"structure",
      "required":[
        "Type",
        "CustomerGatewayId",
        "VpnGatewayId"
      ],
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "Type":{"shape":"String"},
        "CustomerGatewayId":{"shape":"String"},
        "VpnGatewayId":{"shape":"String"},
        "Options":{
          "shape":"VpnConnectionOptionsSpecification",
          "locationName":"options"
        }
      }
    },
    "CreateVpnConnectionResult":{
      "type":"structure",
      "members":{
        "VpnConnection":{
          "shape":"VpnConnection",
          "locationName":"vpnConnection"
        }
      }
    },
    "CreateVpnConnectionRouteRequest":{
      "type":"structure",
      "required":[
        "VpnConnectionId",
        "DestinationCidrBlock"
      ],
      "members":{
        "VpnConnectionId":{"shape":"String"},
        "DestinationCidrBlock":{"shape":"String"}
      }
    },
    "CreateVpnGatewayRequest":{
      "type":"structure",
      "required":["Type"],
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "Type":{"shape":"GatewayType"},
        "AvailabilityZone":{"shape":"String"}
      }
    },
    "CreateVpnGatewayResult":{
      "type":"structure",
      "members":{
        "VpnGateway":{
          "shape":"VpnGateway",
          "locationName":"vpnGateway"
        }
      }
    },
    "CurrencyCodeValues":{
      "type":"string",
      "enum":["USD"]
    },
    "CustomerGateway":{
      "type":"structure",
      "members":{
        "CustomerGatewayId":{
          "shape":"String",
          "locationName":"customerGatewayId"
        },
        "State":{
          "shape":"String",
          "locationName":"state"
        },
        "Type":{
          "shape":"String",
          "locationName":"type"
        },
        "IpAddress":{
          "shape":"String",
          "locationName":"ipAddress"
        },
        "BgpAsn":{
          "shape":"String",
          "locationName":"bgpAsn"
        },
        "Tags":{
          "shape":"TagList",
          "locationName":"tagSet"
        }
      }
    },
    "CustomerGatewayIdStringList":{
      "type":"list",
      "member":{
        "shape":"String",
        "locationName":"CustomerGatewayId"
      }
    },
    "CustomerGatewayList":{
      "type":"list",
      "member":{
        "shape":"CustomerGateway",
        "locationName":"item"
      }
    },
    "DatafeedSubscriptionState":{
      "type":"string",
      "enum":[
        "Active",
        "Inactive"
      ]
    },
    "DateTime":{"type":"timestamp"},
    "DeleteCustomerGatewayRequest":{
      "type":"structure",
      "required":["CustomerGatewayId"],
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "CustomerGatewayId":{"shape":"String"}
      }
    },
    "DeleteDhcpOptionsRequest":{
      "type":"structure",
      "required":["DhcpOptionsId"],
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "DhcpOptionsId":{"shape":"String"}
      }
    },
    "DeleteInternetGatewayRequest":{
      "type":"structure",
      "required":["InternetGatewayId"],
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "InternetGatewayId":{
          "shape":"String",
          "locationName":"internetGatewayId"
        }
      }
    },
    "DeleteKeyPairRequest":{
      "type":"structure",
      "required":["KeyName"],
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "KeyName":{"shape":"String"}
      }
    },
    "DeleteNetworkAclEntryRequest":{
      "type":"structure",
      "required":[
        "NetworkAclId",
        "RuleNumber",
        "Egress"
      ],
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "NetworkAclId":{
          "shape":"String",
          "locationName":"networkAclId"
        },
        "RuleNumber":{
          "shape":"Integer",
          "locationName":"ruleNumber"
        },
        "Egress":{
          "shape":"Boolean",
          "locationName":"egress"
        }
      }
    },
    "DeleteNetworkAclRequest":{
      "type":"structure",
      "required":["NetworkAclId"],
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "NetworkAclId":{
          "shape":"String",
          "locationName":"networkAclId"
        }
      }
    },
    "DeleteNetworkInterfaceRequest":{
      "type":"structure",
      "required":["NetworkInterfaceId"],
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "NetworkInterfaceId":{
          "shape":"String",
          "locationName":"networkInterfaceId"
        }
      }
    },
    "DeletePlacementGroupRequest":{
      "type":"structure",
      "required":["GroupName"],
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "GroupName":{
          "shape":"String",
          "locationName":"groupName"
        }
      }
    },
    "DeleteRouteRequest":{
      "type":"structure",
      "required":[
        "RouteTableId",
        "DestinationCidrBlock"
      ],
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "RouteTableId":{
          "shape":"String",
          "locationName":"routeTableId"
        },
        "DestinationCidrBlock":{
          "shape":"String",
          "locationName":"destinationCidrBlock"
        }
      }
    },
    "DeleteRouteTableRequest":{
      "type":"structure",
      "required":["RouteTableId"],
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "RouteTableId":{
          "shape":"String",
          "locationName":"routeTableId"
        }
      }
    },
    "DeleteSecurityGroupRequest":{
      "type":"structure",
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "GroupName":{"shape":"String"},
        "GroupId":{"shape":"String"}
      }
    },
    "DeleteSnapshotRequest":{
      "type":"structure",
      "required":["SnapshotId"],
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "SnapshotId":{"shape":"String"}
      }
    },
    "DeleteSpotDatafeedSubscriptionRequest":{
      "type":"structure",
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        }
      }
    },
    "DeleteSubnetRequest":{
      "type":"structure",
      "required":["SubnetId"],
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "SubnetId":{"shape":"String"}
      }
    },
    "DeleteTagsRequest":{
      "type":"structure",
      "required":["Resources"],
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "Resources":{
          "shape":"ResourceIdList",
          "locationName":"resourceId"
        },
        "Tags":{
          "shape":"TagList",
          "locationName":"tag"
        }
      }
    },
    "DeleteVolumeRequest":{
      "type":"structure",
      "required":["VolumeId"],
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "VolumeId":{"shape":"String"}
      }
    },
    "DeleteVpcPeeringConnectionRequest":{
      "type":"structure",
      "required":["VpcPeeringConnectionId"],
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "VpcPeeringConnectionId":{
          "shape":"String",
          "locationName":"vpcPeeringConnectionId"
        }
      }
    },
    "DeleteVpcPeeringConnectionResult":{
      "type":"structure",
      "members":{
        "Return":{
          "shape":"Boolean",
          "locationName":"return"
        }
      }
    },
    "DeleteVpcRequest":{
      "type":"structure",
      "required":["VpcId"],
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "VpcId":{"shape":"String"}
      }
    },
    "DeleteVpnConnectionRequest":{
      "type":"structure",
      "required":["VpnConnectionId"],
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "VpnConnectionId":{"shape":"String"}
      }
    },
    "DeleteVpnConnectionRouteRequest":{
      "type":"structure",
      "required":[
        "VpnConnectionId",
        "DestinationCidrBlock"
      ],
      "members":{
        "VpnConnectionId":{"shape":"String"},
        "DestinationCidrBlock":{"shape":"String"}
      }
    },
    "DeleteVpnGatewayRequest":{
      "type":"structure",
      "required":["VpnGatewayId"],
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "VpnGatewayId":{"shape":"String"}
      }
    },
    "DeregisterImageRequest":{
      "type":"structure",
      "required":["ImageId"],
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "ImageId":{"shape":"String"}
      }
    },
    "DescribeAccountAttributesRequest":{
      "type":"structure",
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "AttributeNames":{
          "shape":"AccountAttributeNameStringList",
          "locationName":"attributeName"
        }
      }
    },
    "DescribeAccountAttributesResult":{
      "type":"structure",
      "members":{
        "AccountAttributes":{
          "shape":"AccountAttributeList",
          "locationName":"accountAttributeSet"
        }
      }
    },
    "DescribeAddressesRequest":{
      "type":"structure",
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "PublicIps":{
          "shape":"PublicIpStringList",
          "locationName":"PublicIp"
        },
        "Filters":{
          "shape":"FilterList",
          "locationName":"Filter"
        },
        "AllocationIds":{
          "shape":"AllocationIdList",
          "locationName":"AllocationId"
        }
      }
    },
    "DescribeAddressesResult":{
      "type":"structure",
      "members":{
        "Addresses":{
          "shape":"AddressList",
          "locationName":"addressesSet"
        }
      }
    },
    "DescribeAvailabilityZonesRequest":{
      "type":"structure",
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "ZoneNames":{
          "shape":"ZoneNameStringList",
          "locationName":"ZoneName"
        },
        "Filters":{
          "shape":"FilterList",
          "locationName":"Filter"
        }
      }
    },
    "DescribeAvailabilityZonesResult":{
      "type":"structure",
      "members":{
        "AvailabilityZones":{
          "shape":"AvailabilityZoneList",
          "locationName":"availabilityZoneInfo"
        }
      }
    },
    "DescribeBundleTasksRequest":{
      "type":"structure",
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "BundleIds":{
          "shape":"BundleIdStringList",
          "locationName":"BundleId"
        },
        "Filters":{
          "shape":"FilterList",
          "locationName":"Filter"
        }
      }
    },
    "DescribeBundleTasksResult":{
      "type":"structure",
      "members":{
        "BundleTasks":{
          "shape":"BundleTaskList",
          "locationName":"bundleInstanceTasksSet"
        }
      }
    },
    "DescribeConversionTaskList":{
      "type":"list",
      "member":{
        "shape":"ConversionTask",
        "locationName":"item"
      }
    },
    "DescribeConversionTasksRequest":{
      "type":"structure",
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "Filters":{
          "shape":"FilterList",
          "locationName":"filter"
        },
        "ConversionTaskIds":{
          "shape":"ConversionIdStringList",
          "locationName":"conversionTaskId"
        }
      }
    },
    "DescribeConversionTasksResult":{
      "type":"structure",
      "members":{
        "ConversionTasks":{
          "shape":"DescribeConversionTaskList",
          "locationName":"conversionTasks"
        }
      }
    },
    "DescribeCustomerGatewaysRequest":{
      "type":"structure",
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "CustomerGatewayIds":{
          "shape":"CustomerGatewayIdStringList",
          "locationName":"CustomerGatewayId"
        },
        "Filters":{
          "shape":"FilterList",
          "locationName":"Filter"
        }
      }
    },
    "DescribeCustomerGatewaysResult":{
      "type":"structure",
      "members":{
        "CustomerGateways":{
          "shape":"CustomerGatewayList",
          "locationName":"customerGatewaySet"
        }
      }
    },
    "DescribeDhcpOptionsRequest":{
      "type":"structure",
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "DhcpOptionsIds":{
          "shape":"DhcpOptionsIdStringList",
          "locationName":"DhcpOptionsId"
        },
        "Filters":{
          "shape":"FilterList",
          "locationName":"Filter"
        }
      }
    },
    "DescribeDhcpOptionsResult":{
      "type":"structure",
      "members":{
        "DhcpOptions":{
          "shape":"DhcpOptionsList",
          "locationName":"dhcpOptionsSet"
        }
      }
    },
    "DescribeExportTasksRequest":{
      "type":"structure",
      "members":{
        "ExportTaskIds":{
          "shape":"ExportTaskIdStringList",
          "locationName":"exportTaskId"
        }
      }
    },
    "DescribeExportTasksResult":{
      "type":"structure",
      "members":{
        "ExportTasks":{
          "shape":"ExportTaskList",
          "locationName":"exportTaskSet"
        }
      }
    },
    "DescribeImageAttributeRequest":{
      "type":"structure",
      "required":[
        "ImageId",
        "Attribute"
      ],
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "ImageId":{"shape":"String"},
        "Attribute":{"shape":"ImageAttributeName"}
      }
    },
    "DescribeImagesRequest":{
      "type":"structure",
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "ImageIds":{
          "shape":"ImageIdStringList",
          "locationName":"ImageId"
        },
        "Owners":{
          "shape":"OwnerStringList",
          "locationName":"Owner"
        },
        "ExecutableUsers":{
          "shape":"ExecutableByStringList",
          "locationName":"ExecutableBy"
        },
        "Filters":{
          "shape":"FilterList",
          "locationName":"Filter"
        }
      }
    },
    "DescribeImagesResult":{
      "type":"structure",
      "members":{
        "Images":{
          "shape":"ImageList",
          "locationName":"imagesSet"
        }
      }
    },
    "DescribeInstanceAttributeRequest":{
      "type":"structure",
      "required":[
        "InstanceId",
        "Attribute"
      ],
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "InstanceId":{
          "shape":"String",
          "locationName":"instanceId"
        },
        "Attribute":{
          "shape":"InstanceAttributeName",
          "locationName":"attribute"
        }
      }
    },
    "DescribeInstanceStatusRequest":{
      "type":"structure",
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "InstanceIds":{
          "shape":"InstanceIdStringList",
          "locationName":"InstanceId"
        },
        "Filters":{
          "shape":"FilterList",
          "locationName":"Filter"
        },
        "NextToken":{"shape":"String"},
        "MaxResults":{"shape":"Integer"},
        "IncludeAllInstances":{
          "shape":"Boolean",
          "locationName":"includeAllInstances"
        }
      }
    },
    "DescribeInstanceStatusResult":{
      "type":"structure",
      "members":{
        "InstanceStatuses":{
          "shape":"InstanceStatusList",
          "locationName":"instanceStatusSet"
        },
        "NextToken":{
          "shape":"String",
          "locationName":"nextToken"
        }
      }
    },
    "DescribeInstancesRequest":{
      "type":"structure",
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "InstanceIds":{
          "shape":"InstanceIdStringList",
          "locationName":"InstanceId"
        },
        "Filters":{
          "shape":"FilterList",
          "locationName":"Filter"
        },
        "NextToken":{
          "shape":"String",
          "locationName":"nextToken"
        },
        "MaxResults":{
          "shape":"Integer",
          "locationName":"maxResults"
        }
      }
    },
    "DescribeInstancesResult":{
      "type":"structure",
      "members":{
        "Reservations":{
          "shape":"ReservationList",
          "locationName":"reservationSet"
        },
        "NextToken":{
          "shape":"String",
          "locationName":"nextToken"
        }
      }
    },
    "DescribeInternetGatewaysRequest":{
      "type":"structure",
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "InternetGatewayIds":{
          "shape":"ValueStringList",
          "locationName":"internetGatewayId"
        },
        "Filters":{
          "shape":"FilterList",
          "locationName":"Filter"
        }
      }
    },
    "DescribeInternetGatewaysResult":{
      "type":"structure",
      "members":{
        "InternetGateways":{
          "shape":"InternetGatewayList",
          "locationName":"internetGatewaySet"
        }
      }
    },
    "DescribeKeyPairsRequest":{
      "type":"structure",
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "KeyNames":{
          "shape":"KeyNameStringList",
          "locationName":"KeyName"
        },
        "Filters":{
          "shape":"FilterList",
          "locationName":"Filter"
        }
      }
    },
    "DescribeKeyPairsResult":{
      "type":"structure",
      "members":{
        "KeyPairs":{
          "shape":"KeyPairList",
          "locationName":"keySet"
        }
      }
    },
    "DescribeNetworkAclsRequest":{
      "type":"structure",
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "NetworkAclIds":{
          "shape":"ValueStringList",
          "locationName":"NetworkAclId"
        },
        "Filters":{
          "shape":"FilterList",
          "locationName":"Filter"
        }
      }
    },
    "DescribeNetworkAclsResult":{
      "type":"structure",
      "members":{
        "NetworkAcls":{
          "shape":"NetworkAclList",
          "locationName":"networkAclSet"
        }
      }
    },
    "DescribeNetworkInterfaceAttributeRequest":{
      "type":"structure",
      "required":["NetworkInterfaceId"],
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "NetworkInterfaceId":{
          "shape":"String",
          "locationName":"networkInterfaceId"
        },
        "Attribute":{
          "shape":"NetworkInterfaceAttribute",
          "locationName":"attribute"
        }
      }
    },
    "DescribeNetworkInterfaceAttributeResult":{
      "type":"structure",
      "members":{
        "NetworkInterfaceId":{
          "shape":"String",
          "locationName":"networkInterfaceId"
        },
        "Description":{
          "shape":"AttributeValue",
          "locationName":"description"
        },
        "SourceDestCheck":{
          "shape":"AttributeBooleanValue",
          "locationName":"sourceDestCheck"
        },
        "Groups":{
          "shape":"GroupIdentifierList",
          "locationName":"groupSet"
        },
        "Attachment":{
          "shape":"NetworkInterfaceAttachment",
          "locationName":"attachment"
        }
      }
    },
    "DescribeNetworkInterfacesRequest":{
      "type":"structure",
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "NetworkInterfaceIds":{
          "shape":"NetworkInterfaceIdList",
          "locationName":"NetworkInterfaceId"
        },
        "Filters":{
          "shape":"FilterList",
          "locationName":"filter"
        }
      }
    },
    "DescribeNetworkInterfacesResult":{
      "type":"structure",
      "members":{
        "NetworkInterfaces":{
          "shape":"NetworkInterfaceList",
          "locationName":"networkInterfaceSet"
        }
      }
    },
    "DescribePlacementGroupsRequest":{
      "type":"structure",
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "GroupNames":{
          "shape":"PlacementGroupStringList",
          "locationName":"groupName"
        },
        "Filters":{
          "shape":"FilterList",
          "locationName":"Filter"
        }
      }
    },
    "DescribePlacementGroupsResult":{
      "type":"structure",
      "members":{
        "PlacementGroups":{
          "shape":"PlacementGroupList",
          "locationName":"placementGroupSet"
        }
      }
    },
    "DescribeRegionsRequest":{
      "type":"structure",
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "RegionNames":{
          "shape":"RegionNameStringList",
          "locationName":"RegionName"
        },
        "Filters":{
          "shape":"FilterList",
          "locationName":"Filter"
        }
      }
    },
    "DescribeRegionsResult":{
      "type":"structure",
      "members":{
        "Regions":{
          "shape":"RegionList",
          "locationName":"regionInfo"
        }
      }
    },
    "DescribeReservedInstancesListingsRequest":{
      "type":"structure",
      "members":{
        "ReservedInstancesId":{
          "shape":"String",
          "locationName":"reservedInstancesId"
        },
        "ReservedInstancesListingId":{
          "shape":"String",
          "locationName":"reservedInstancesListingId"
        },
        "Filters":{
          "shape":"FilterList",
          "locationName":"filters"
        }
      }
    },
    "DescribeReservedInstancesListingsResult":{
      "type":"structure",
      "members":{
        "ReservedInstancesListings":{
          "shape":"ReservedInstancesListingList",
          "locationName":"reservedInstancesListingsSet"
        }
      }
    },
    "DescribeReservedInstancesModificationsRequest":{
      "type":"structure",
      "members":{
        "ReservedInstancesModificationIds":{
          "shape":"ReservedInstancesModificationIdStringList",
          "locationName":"ReservedInstancesModificationId"
        },
        "NextToken":{
          "shape":"String",
          "locationName":"nextToken"
        },
        "Filters":{
          "shape":"FilterList",
          "locationName":"Filter"
        }
      }
    },
    "DescribeReservedInstancesModificationsResult":{
      "type":"structure",
      "members":{
        "ReservedInstancesModifications":{
          "shape":"ReservedInstancesModificationList",
          "locationName":"reservedInstancesModificationsSet"
        },
        "NextToken":{
          "shape":"String",
          "locationName":"nextToken"
        }
      }
    },
    "DescribeReservedInstancesOfferingsRequest":{
      "type":"structure",
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "ReservedInstancesOfferingIds":{
          "shape":"ReservedInstancesOfferingIdStringList",
          "locationName":"ReservedInstancesOfferingId"
        },
        "InstanceType":{"shape":"InstanceType"},
        "AvailabilityZone":{"shape":"String"},
        "ProductDescription":{"shape":"RIProductDescription"},
        "Filters":{
          "shape":"FilterList",
          "locationName":"Filter"
        },
        "InstanceTenancy":{
          "shape":"Tenancy",
          "locationName":"instanceTenancy"
        },
        "OfferingType":{
          "shape":"OfferingTypeValues",
          "locationName":"offeringType"
        },
        "NextToken":{
          "shape":"String",
          "locationName":"nextToken"
        },
        "MaxResults":{
          "shape":"Integer",
          "locationName":"maxResults"
        },
        "IncludeMarketplace":{"shape":"Boolean"},
        "MinDuration":{"shape":"Long"},
        "MaxDuration":{"shape":"Long"},
        "MaxInstanceCount":{"shape":"Integer"}
      }
    },
    "DescribeReservedInstancesOfferingsResult":{
      "type":"structure",
      "members":{
        "ReservedInstancesOfferings":{
          "shape":"ReservedInstancesOfferingList",
          "locationName":"reservedInstancesOfferingsSet"
        },
        "NextToken":{
          "shape":"String",
          "locationName":"nextToken"
        }
      }
    },
    "DescribeReservedInstancesRequest":{
      "type":"structure",
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "ReservedInstancesIds":{
          "shape":"ReservedInstancesIdStringList",
          "locationName":"ReservedInstancesId"
        },
        "Filters":{
          "shape":"FilterList",
          "locationName":"Filter"
        },
        "OfferingType":{
          "shape":"OfferingTypeValues",
          "locationName":"offeringType"
        }
      }
    },
    "DescribeReservedInstancesResult":{
      "type":"structure",
      "members":{
        "ReservedInstances":{
          "shape":"ReservedInstancesList",
          "locationName":"reservedInstancesSet"
        }
      }
    },
    "DescribeRouteTablesRequest":{
      "type":"structure",
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "RouteTableIds":{
          "shape":"ValueStringList",
          "locationName":"RouteTableId"
        },
        "Filters":{
          "shape":"FilterList",
          "locationName":"Filter"
        }
      }
    },
    "DescribeRouteTablesResult":{
      "type":"structure",
      "members":{
        "RouteTables":{
          "shape":"RouteTableList",
          "locationName":"routeTableSet"
        }
      }
    },
    "DescribeSecurityGroupsRequest":{
      "type":"structure",
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "GroupNames":{
          "shape":"GroupNameStringList",
          "locationName":"GroupName"
        },
        "GroupIds":{
          "shape":"GroupIdStringList",
          "locationName":"GroupId"
        },
        "Filters":{
          "shape":"FilterList",
          "locationName":"Filter"
        }
      }
    },
    "DescribeSecurityGroupsResult":{
      "type":"structure",
      "members":{
        "SecurityGroups":{
          "shape":"SecurityGroupList",
          "locationName":"securityGroupInfo"
        }
      }
    },
    "DescribeSnapshotAttributeRequest":{
      "type":"structure",
      "required":[
        "SnapshotId",
        "Attribute"
      ],
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "SnapshotId":{"shape":"String"},
        "Attribute":{"shape":"SnapshotAttributeName"}
      }
    },
    "DescribeSnapshotAttributeResult":{
      "type":"structure",
      "members":{
        "SnapshotId":{
          "shape":"String",
          "locationName":"snapshotId"
        },
        "CreateVolumePermissions":{
          "shape":"CreateVolumePermissionList",
          "locationName":"createVolumePermission"
        },
        "ProductCodes":{
          "shape":"ProductCodeList",
          "locationName":"productCodes"
        }
      }
    },
    "DescribeSnapshotsRequest":{
      "type":"structure",
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "SnapshotIds":{
          "shape":"SnapshotIdStringList",
          "locationName":"SnapshotId"
        },
        "OwnerIds":{
          "shape":"OwnerStringList",
          "locationName":"Owner"
        },
        "RestorableByUserIds":{
          "shape":"RestorableByStringList",
          "locationName":"RestorableBy"
        },
        "Filters":{
          "shape":"FilterList",
          "locationName":"Filter"
        }
      }
    },
    "DescribeSnapshotsResult":{
      "type":"structure",
      "members":{
        "Snapshots":{
          "shape":"SnapshotList",
          "locationName":"snapshotSet"
        }
      }
    },
    "DescribeSpotDatafeedSubscriptionRequest":{
      "type":"structure",
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        }
      }
    },
    "DescribeSpotDatafeedSubscriptionResult":{
      "type":"structure",
      "members":{
        "SpotDatafeedSubscription":{
          "shape":"SpotDatafeedSubscription",
          "locationName":"spotDatafeedSubscription"
        }
      }
    },
    "DescribeSpotInstanceRequestsRequest":{
      "type":"structure",
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "SpotInstanceRequestIds":{
          "shape":"SpotInstanceRequestIdList",
          "locationName":"SpotInstanceRequestId"
        },
        "Filters":{
          "shape":"FilterList",
          "locationName":"Filter"
        }
      }
    },
    "DescribeSpotInstanceRequestsResult":{
      "type":"structure",
      "members":{
        "SpotInstanceRequests":{
          "shape":"SpotInstanceRequestList",
          "locationName":"spotInstanceRequestSet"
        }
      }
    },
    "DescribeSpotPriceHistoryRequest":{
      "type":"structure",
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "StartTime":{
          "shape":"DateTime",
          "locationName":"startTime"
        },
        "EndTime":{
          "shape":"DateTime",
          "locationName":"endTime"
        },
        "InstanceTypes":{
          "shape":"InstanceTypeList",
          "locationName":"InstanceType"
        },
        "ProductDescriptions":{
          "shape":"ProductDescriptionList",
          "locationName":"ProductDescription"
        },
        "Filters":{
          "shape":"FilterList",
          "locationName":"Filter"
        },
        "AvailabilityZone":{
          "shape":"String",
          "locationName":"availabilityZone"
        },
        "MaxResults":{
          "shape":"Integer",
          "locationName":"maxResults"
        },
        "NextToken":{
          "shape":"String",
          "locationName":"nextToken"
        }
      }
    },
    "DescribeSpotPriceHistoryResult":{
      "type":"structure",
      "members":{
        "SpotPriceHistory":{
          "shape":"SpotPriceHistoryList",
          "locationName":"spotPriceHistorySet"
        },
        "NextToken":{
          "shape":"String",
          "locationName":"nextToken"
        }
      }
    },
    "DescribeSubnetsRequest":{
      "type":"structure",
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "SubnetIds":{
          "shape":"SubnetIdStringList",
          "locationName":"SubnetId"
        },
        "Filters":{
          "shape":"FilterList",
          "locationName":"Filter"
        }
      }
    },
    "DescribeSubnetsResult":{
      "type":"structure",
      "members":{
        "Subnets":{
          "shape":"SubnetList",
          "locationName":"subnetSet"
        }
      }
    },
    "DescribeTagsRequest":{
      "type":"structure",
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "Filters":{
          "shape":"FilterList",
          "locationName":"Filter"
        },
        "MaxResults":{
          "shape":"Integer",
          "locationName":"maxResults"
        },
        "NextToken":{
          "shape":"String",
          "locationName":"nextToken"
        }
      }
    },
    "DescribeTagsResult":{
      "type":"structure",
      "members":{
        "Tags":{
          "shape":"TagDescriptionList",
          "locationName":"tagSet"
        },
        "NextToken":{
          "shape":"String",
          "locationName":"nextToken"
        }
      }
    },
    "DescribeVolumeAttributeRequest":{
      "type":"structure",
      "required":["VolumeId"],
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "VolumeId":{"shape":"String"},
        "Attribute":{"shape":"VolumeAttributeName"}
      }
    },
    "DescribeVolumeAttributeResult":{
      "type":"structure",
      "members":{
        "VolumeId":{
          "shape":"String",
          "locationName":"volumeId"
        },
        "AutoEnableIO":{
          "shape":"AttributeBooleanValue",
          "locationName":"autoEnableIO"
        },
        "ProductCodes":{
          "shape":"ProductCodeList",
          "locationName":"productCodes"
        }
      }
    },
    "DescribeVolumeStatusRequest":{
      "type":"structure",
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "VolumeIds":{
          "shape":"VolumeIdStringList",
          "locationName":"VolumeId"
        },
        "Filters":{
          "shape":"FilterList",
          "locationName":"Filter"
        },
        "NextToken":{"shape":"String"},
        "MaxResults":{"shape":"Integer"}
      }
    },
    "DescribeVolumeStatusResult":{
      "type":"structure",
      "members":{
        "VolumeStatuses":{
          "shape":"VolumeStatusList",
          "locationName":"volumeStatusSet"
        },
        "NextToken":{
          "shape":"String",
          "locationName":"nextToken"
        }
      }
    },
    "DescribeVolumesRequest":{
      "type":"structure",
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "VolumeIds":{
          "shape":"VolumeIdStringList",
          "locationName":"VolumeId"
        },
        "Filters":{
          "shape":"FilterList",
          "locationName":"Filter"
        },
        "NextToken":{
          "shape":"String",
          "locationName":"nextToken"
        },
        "MaxResults":{
          "shape":"Integer",
          "locationName":"maxResults"
        }
      }
    },
    "DescribeVolumesResult":{
      "type":"structure",
      "members":{
        "Volumes":{
          "shape":"VolumeList",
          "locationName":"volumeSet"
        },
        "NextToken":{
          "shape":"String",
          "locationName":"nextToken"
        }
      }
    },
    "DescribeVpcAttributeRequest":{
      "type":"structure",
      "required":["VpcId"],
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "VpcId":{"shape":"String"},
        "Attribute":{"shape":"VpcAttributeName"}
      }
    },
    "DescribeVpcAttributeResult":{
      "type":"structure",
      "members":{
        "VpcId":{
          "shape":"String",
          "locationName":"vpcId"
        },
        "EnableDnsSupport":{
          "shape":"AttributeBooleanValue",
          "locationName":"enableDnsSupport"
        },
        "EnableDnsHostnames":{
          "shape":"AttributeBooleanValue",
          "locationName":"enableDnsHostnames"
        }
      }
    },
    "DescribeVpcPeeringConnectionsRequest":{
      "type":"structure",
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "VpcPeeringConnectionIds":{
          "shape":"ValueStringList",
          "locationName":"VpcPeeringConnectionId"
        },
        "Filters":{
          "shape":"FilterList",
          "locationName":"Filter"
        }
      }
    },
    "DescribeVpcPeeringConnectionsResult":{
      "type":"structure",
      "members":{
        "VpcPeeringConnections":{
          "shape":"VpcPeeringConnectionList",
          "locationName":"vpcPeeringConnectionSet"
        }
      }
    },
    "DescribeVpcsRequest":{
      "type":"structure",
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "VpcIds":{
          "shape":"VpcIdStringList",
          "locationName":"VpcId"
        },
        "Filters":{
          "shape":"FilterList",
          "locationName":"Filter"
        }
      }
    },
    "DescribeVpcsResult":{
      "type":"structure",
      "members":{
        "Vpcs":{
          "shape":"VpcList",
          "locationName":"vpcSet"
        }
      }
    },
    "DescribeVpnConnectionsRequest":{
      "type":"structure",
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "VpnConnectionIds":{
          "shape":"VpnConnectionIdStringList",
          "locationName":"VpnConnectionId"
        },
        "Filters":{
          "shape":"FilterList",
          "locationName":"Filter"
        }
      }
    },
    "DescribeVpnConnectionsResult":{
      "type":"structure",
      "members":{
        "VpnConnections":{
          "shape":"VpnConnectionList",
          "locationName":"vpnConnectionSet"
        }
      }
    },
    "DescribeVpnGatewaysRequest":{
      "type":"structure",
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "VpnGatewayIds":{
          "shape":"VpnGatewayIdStringList",
          "locationName":"VpnGatewayId"
        },
        "Filters":{
          "shape":"FilterList",
          "locationName":"Filter"
        }
      }
    },
    "DescribeVpnGatewaysResult":{
      "type":"structure",
      "members":{
        "VpnGateways":{
          "shape":"VpnGatewayList",
          "locationName":"vpnGatewaySet"
        }
      }
    },
    "DetachInternetGatewayRequest":{
      "type":"structure",
      "required":[
        "InternetGatewayId",
        "VpcId"
      ],
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "InternetGatewayId":{
          "shape":"String",
          "locationName":"internetGatewayId"
        },
        "VpcId":{
          "shape":"String",
          "locationName":"vpcId"
        }
      }
    },
    "DetachNetworkInterfaceRequest":{
      "type":"structure",
      "required":["AttachmentId"],
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "AttachmentId":{
          "shape":"String",
          "locationName":"attachmentId"
        },
        "Force":{
          "shape":"Boolean",
          "locationName":"force"
        }
      }
    },
    "DetachVolumeRequest":{
      "type":"structure",
      "required":["VolumeId"],
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "VolumeId":{"shape":"String"},
        "InstanceId":{"shape":"String"},
        "Device":{"shape":"String"},
        "Force":{"shape":"Boolean"}
      }
    },
    "DetachVpnGatewayRequest":{
      "type":"structure",
      "required":[
        "VpnGatewayId",
        "VpcId"
      ],
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "VpnGatewayId":{"shape":"String"},
        "VpcId":{"shape":"String"}
      }
    },
    "DeviceType":{
      "type":"string",
      "enum":[
        "ebs",
        "instance-store"
      ]
    },
    "DhcpConfiguration":{
      "type":"structure",
      "members":{
        "Key":{
          "shape":"String",
          "locationName":"key"
        },
        "Values":{
          "shape":"DhcpConfigurationValueList",
          "locationName":"valueSet"
        }
      }
    },
    "DhcpConfigurationList":{
      "type":"list",
      "member":{
        "shape":"DhcpConfiguration",
        "locationName":"item"
      }
    },
    "DhcpOptions":{
      "type":"structure",
      "members":{
        "DhcpOptionsId":{
          "shape":"String",
          "locationName":"dhcpOptionsId"
        },
        "DhcpConfigurations":{
          "shape":"DhcpConfigurationList",
          "locationName":"dhcpConfigurationSet"
        },
        "Tags":{
          "shape":"TagList",
          "locationName":"tagSet"
        }
      }
    },
    "DhcpOptionsIdStringList":{
      "type":"list",
      "member":{
        "shape":"String",
        "locationName":"DhcpOptionsId"
      }
    },
    "DhcpOptionsList":{
      "type":"list",
      "member":{
        "shape":"DhcpOptions",
        "locationName":"item"
      }
    },
    "DisableVgwRoutePropagationRequest":{
      "type":"structure",
      "required":[
        "RouteTableId",
        "GatewayId"
      ],
      "members":{
        "RouteTableId":{"shape":"String"},
        "GatewayId":{"shape":"String"}
      }
    },
    "DisassociateAddressRequest":{
      "type":"structure",
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "PublicIp":{"shape":"String"},
        "AssociationId":{"shape":"String"}
      }
    },
    "DisassociateRouteTableRequest":{
      "type":"structure",
      "required":["AssociationId"],
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "AssociationId":{
          "shape":"String",
          "locationName":"associationId"
        }
      }
    },
    "DiskImage":{
      "type":"structure",
      "members":{
        "Image":{"shape":"DiskImageDetail"},
        "Description":{"shape":"String"},
        "Volume":{"shape":"VolumeDetail"}
      }
    },
    "DiskImageDescription":{
      "type":"structure",
      "required":[
        "Format",
        "Size",
        "ImportManifestUrl"
      ],
      "members":{
        "Format":{
          "shape":"DiskImageFormat",
          "locationName":"format"
        },
        "Size":{
          "shape":"Long",
          "locationName":"size"
        },
        "ImportManifestUrl":{
          "shape":"String",
          "locationName":"importManifestUrl"
        },
        "Checksum":{
          "shape":"String",
          "locationName":"checksum"
        }
      }
    },
    "DiskImageDetail":{
      "type":"structure",
      "required":[
        "Format",
        "Bytes",
        "ImportManifestUrl"
      ],
      "members":{
        "Format":{
          "shape":"DiskImageFormat",
          "locationName":"format"
        },
        "Bytes":{
          "shape":"Long",
          "locationName":"bytes"
        },
        "ImportManifestUrl":{
          "shape":"String",
          "locationName":"importManifestUrl"
        }
      }
    },
    "DiskImageFormat":{
      "type":"string",
      "enum":[
        "VMDK",
        "RAW",
        "VHD"
      ]
    },
    "DiskImageList":{
      "type":"list",
      "member":{"shape":"DiskImage"}
    },
    "DiskImageVolumeDescription":{
      "type":"structure",
      "required":["Id"],
      "members":{
        "Size":{
          "shape":"Long",
          "locationName":"size"
        },
        "Id":{
          "shape":"String",
          "locationName":"id"
        }
      }
    },
    "DomainType":{
      "type":"string",
      "enum":[
        "vpc",
        "standard"
      ]
    },
    "Double":{"type":"double"},
    "EbsBlockDevice":{
      "type":"structure",
      "members":{
        "SnapshotId":{
          "shape":"String",
          "locationName":"snapshotId"
        },
        "VolumeSize":{
          "shape":"Integer",
          "locationName":"volumeSize"
        },
        "DeleteOnTermination":{
          "shape":"Boolean",
          "locationName":"deleteOnTermination"
        },
        "VolumeType":{
          "shape":"VolumeType",
          "locationName":"volumeType"
        },
        "Iops":{
          "shape":"Integer",
          "locationName":"iops"
        },
        "Encrypted":{
          "shape":"Boolean",
          "locationName":"encrypted"
        }
      }
    },
    "EbsInstanceBlockDevice":{
      "type":"structure",
      "members":{
        "VolumeId":{
          "shape":"String",
          "locationName":"volumeId"
        },
        "Status":{
          "shape":"AttachmentStatus",
          "locationName":"status"
        },
        "AttachTime":{
          "shape":"DateTime",
          "locationName":"attachTime"
        },
        "DeleteOnTermination":{
          "shape":"Boolean",
          "locationName":"deleteOnTermination"
        }
      }
    },
    "EbsInstanceBlockDeviceSpecification":{
      "type":"structure",
      "members":{
        "VolumeId":{
          "shape":"String",
          "locationName":"volumeId"
        },
        "DeleteOnTermination":{
          "shape":"Boolean",
          "locationName":"deleteOnTermination"
        }
      }
    },
    "EnableVgwRoutePropagationRequest":{
      "type":"structure",
      "required":[
        "RouteTableId",
        "GatewayId"
      ],
      "members":{
        "RouteTableId":{"shape":"String"},
        "GatewayId":{"shape":"String"}
      }
    },
    "EnableVolumeIORequest":{
      "type":"structure",
      "required":["VolumeId"],
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "VolumeId":{
          "shape":"String",
          "locationName":"volumeId"
        }
      }
    },
    "EventCode":{
      "type":"string",
      "enum":[
        "instance-reboot",
        "system-reboot",
        "system-maintenance",
        "instance-retirement",
        "instance-stop"
      ]
    },
    "ExecutableByStringList":{
      "type":"list",
      "member":{
        "shape":"String",
        "locationName":"ExecutableBy"
      }
    },
    "ExportEnvironment":{
      "type":"string",
      "enum":[
        "citrix",
        "vmware",
        "microsoft"
      ]
    },
    "ExportTask":{
      "type":"structure",
      "members":{
        "ExportTaskId":{
          "shape":"String",
          "locationName":"exportTaskId"
        },
        "Description":{
          "shape":"String",
          "locationName":"description"
        },
        "State":{
          "shape":"ExportTaskState",
          "locationName":"state"
        },
        "StatusMessage":{
          "shape":"String",
          "locationName":"statusMessage"
        },
        "InstanceExportDetails":{
          "shape":"InstanceExportDetails",
          "locationName":"instanceExport"
        },
        "ExportToS3Task":{
          "shape":"ExportToS3Task",
          "locationName":"exportToS3"
        }
      }
    },
    "ExportTaskIdStringList":{
      "type":"list",
      "member":{
        "shape":"String",
        "locationName":"ExportTaskId"
      }
    },
    "ExportTaskList":{
      "type":"list",
      "member":{
        "shape":"ExportTask",
        "locationName":"item"
      }
    },
    "ExportTaskState":{
      "type":"string",
      "enum":[
        "active",
        "cancelling",
        "cancelled",
        "completed"
      ]
    },
    "ExportToS3Task":{
      "type":"structure",
      "members":{
        "DiskImageFormat":{
          "shape":"DiskImageFormat",
          "locationName":"diskImageFormat"
        },
        "ContainerFormat":{
          "shape":"ContainerFormat",
          "locationName":"containerFormat"
        },
        "S3Bucket":{
          "shape":"String",
          "locationName":"s3Bucket"
        },
        "S3Key":{
          "shape":"String",
          "locationName":"s3Key"
        }
      }
    },
    "ExportToS3TaskSpecification":{
      "type":"structure",
      "members":{
        "DiskImageFormat":{
          "shape":"DiskImageFormat",
          "locationName":"diskImageFormat"
        },
        "ContainerFormat":{
          "shape":"ContainerFormat",
          "locationName":"containerFormat"
        },
        "S3Bucket":{
          "shape":"String",
          "locationName":"s3Bucket"
        },
        "S3Prefix":{
          "shape":"String",
          "locationName":"s3Prefix"
        }
      }
    },
    "Filter":{
      "type":"structure",
      "members":{
        "Name":{"shape":"String"},
        "Values":{
          "shape":"ValueStringList",
          "locationName":"Value"
        }
      }
    },
    "FilterList":{
      "type":"list",
      "member":{
        "shape":"Filter",
        "locationName":"Filter"
      }
    },
    "Float":{"type":"float"},
    "GatewayType":{
      "type":"string",
      "enum":["ipsec.1"]
    },
    "GetConsoleOutputRequest":{
      "type":"structure",
      "required":["InstanceId"],
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "InstanceId":{"shape":"String"}
      }
    },
    "GetConsoleOutputResult":{
      "type":"structure",
      "members":{
        "InstanceId":{
          "shape":"String",
          "locationName":"instanceId"
        },
        "Timestamp":{
          "shape":"DateTime",
          "locationName":"timestamp"
        },
        "Output":{
          "shape":"String",
          "locationName":"output"
        }
      }
    },
    "GetPasswordDataRequest":{
      "type":"structure",
      "required":["InstanceId"],
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "InstanceId":{"shape":"String"}
      }
    },
    "GetPasswordDataResult":{
      "type":"structure",
      "members":{
        "InstanceId":{
          "shape":"String",
          "locationName":"instanceId"
        },
        "Timestamp":{
          "shape":"DateTime",
          "locationName":"timestamp"
        },
        "PasswordData":{
          "shape":"String",
          "locationName":"passwordData"
        }
      }
    },
    "GroupIdStringList":{
      "type":"list",
      "member":{
        "shape":"String",
        "locationName":"groupId"
      }
    },
    "GroupIdentifier":{
      "type":"structure",
      "members":{
        "GroupName":{
          "shape":"String",
          "locationName":"groupName"
        },
        "GroupId":{
          "shape":"String",
          "locationName":"groupId"
        }
      }
    },
    "GroupIdentifierList":{
      "type":"list",
      "member":{
        "shape":"GroupIdentifier",
        "locationName":"item"
      }
    },
    "GroupNameStringList":{
      "type":"list",
      "member":{
        "shape":"String",
        "locationName":"GroupName"
      }
    },
    "HypervisorType":{
      "type":"string",
      "enum":[
        "ovm",
        "xen"
      ]
    },
    "IamInstanceProfile":{
      "type":"structure",
      "members":{
        "Arn":{
          "shape":"String",
          "locationName":"arn"
        },
        "Id":{
          "shape":"String",
          "locationName":"id"
        }
      }
    },
    "IamInstanceProfileSpecification":{
      "type":"structure",
      "members":{
        "Arn":{
          "shape":"String",
          "locationName":"arn"
        },
        "Name":{
          "shape":"String",
          "locationName":"name"
        }
      }
    },
    "IcmpTypeCode":{
      "type":"structure",
      "members":{
        "Type":{
          "shape":"Integer",
          "locationName":"type"
        },
        "Code":{
          "shape":"Integer",
          "locationName":"code"
        }
      }
    },
    "Image":{
      "type":"structure",
      "members":{
        "ImageId":{
          "shape":"String",
          "locationName":"imageId"
        },
        "ImageLocation":{
          "shape":"String",
          "locationName":"imageLocation"
        },
        "State":{
          "shape":"ImageState",
          "locationName":"imageState"
        },
        "OwnerId":{
          "shape":"String",
          "locationName":"imageOwnerId"
        },
        "Public":{
          "shape":"Boolean",
          "locationName":"isPublic"
        },
        "ProductCodes":{
          "shape":"ProductCodeList",
          "locationName":"productCodes"
        },
        "Architecture":{
          "shape":"ArchitectureValues",
          "locationName":"architecture"
        },
        "ImageType":{
          "shape":"ImageTypeValues",
          "locationName":"imageType"
        },
        "KernelId":{
          "shape":"String",
          "locationName":"kernelId"
        },
        "RamdiskId":{
          "shape":"String",
          "locationName":"ramdiskId"
        },
        "Platform":{
          "shape":"PlatformValues",
          "locationName":"platform"
        },
        "SriovNetSupport":{
          "shape":"String",
          "locationName":"sriovNetSupport"
        },
        "StateReason":{
          "shape":"StateReason",
          "locationName":"stateReason"
        },
        "ImageOwnerAlias":{
          "shape":"String",
          "locationName":"imageOwnerAlias"
        },
        "Name":{
          "shape":"String",
          "locationName":"name"
        },
        "Description":{
          "shape":"String",
          "locationName":"description"
        },
        "RootDeviceType":{
          "shape":"DeviceType",
          "locationName":"rootDeviceType"
        },
        "RootDeviceName":{
          "shape":"String",
          "locationName":"rootDeviceName"
        },
        "BlockDeviceMappings":{
          "shape":"BlockDeviceMappingList",
          "locationName":"blockDeviceMapping"
        },
        "VirtualizationType":{
          "shape":"VirtualizationType",
          "locationName":"virtualizationType"
        },
        "Tags":{
          "shape":"TagList",
          "locationName":"tagSet"
        },
        "Hypervisor":{
          "shape":"HypervisorType",
          "locationName":"hypervisor"
        }
      }
    },
    "ImageAttribute":{
      "type":"structure",
      "members":{
        "ImageId":{
          "shape":"String",
          "locationName":"imageId"
        },
        "LaunchPermissions":{
          "shape":"LaunchPermissionList",
          "locationName":"launchPermission"
        },
        "ProductCodes":{
          "shape":"ProductCodeList",
          "locationName":"productCodes"
        },
        "KernelId":{
          "shape":"AttributeValue",
          "locationName":"kernel"
        },
        "RamdiskId":{
          "shape":"AttributeValue",
          "locationName":"ramdisk"
        },
        "Description":{
          "shape":"AttributeValue",
          "locationName":"description"
        },
        "SriovNetSupport":{
          "shape":"AttributeValue",
          "locationName":"sriovNetSupport"
        },
        "BlockDeviceMappings":{
          "shape":"BlockDeviceMappingList",
          "locationName":"blockDeviceMapping"
        }
      }
    },
    "ImageAttributeName":{
      "type":"string",
      "enum":[
        "description",
        "kernel",
        "ramdisk",
        "launchPermission",
        "productCodes",
        "blockDeviceMapping"
      ]
    },
    "ImageIdStringList":{
      "type":"list",
      "member":{
        "shape":"String",
        "locationName":"ImageId"
      }
    },
    "ImageList":{
      "type":"list",
      "member":{
        "shape":"Image",
        "locationName":"item"
      }
    },
    "ImageState":{
      "type":"string",
      "enum":[
        "available",
        "deregistered"
      ]
    },
    "ImageTypeValues":{
      "type":"string",
      "enum":[
        "machine",
        "kernel",
        "ramdisk"
      ]
    },
    "ImportInstanceLaunchSpecification":{
      "type":"structure",
      "members":{
        "Architecture":{
          "shape":"ArchitectureValues",
          "locationName":"architecture"
        },
        "GroupNames":{
          "shape":"SecurityGroupStringList",
          "locationName":"GroupName"
        },
        "GroupIds":{
          "shape":"SecurityGroupIdStringList",
          "locationName":"GroupId"
        },
        "AdditionalInfo":{
          "shape":"String",
          "locationName":"additionalInfo"
        },
        "UserData":{
          "shape":"String",
          "locationName":"userData"
        },
        "InstanceType":{
          "shape":"InstanceType",
          "locationName":"instanceType"
        },
        "Placement":{
          "shape":"Placement",
          "locationName":"placement"
        },
        "Monitoring":{
          "shape":"Boolean",
          "locationName":"monitoring"
        },
        "SubnetId":{
          "shape":"String",
          "locationName":"subnetId"
        },
        "InstanceInitiatedShutdownBehavior":{
          "shape":"ShutdownBehavior",
          "locationName":"instanceInitiatedShutdownBehavior"
        },
        "PrivateIpAddress":{
          "shape":"String",
          "locationName":"privateIpAddress"
        }
      }
    },
    "ImportInstanceRequest":{
      "type":"structure",
      "required":["Platform"],
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "Description":{
          "shape":"String",
          "locationName":"description"
        },
        "LaunchSpecification":{
          "shape":"ImportInstanceLaunchSpecification",
          "locationName":"launchSpecification"
        },
        "DiskImages":{
          "shape":"DiskImageList",
          "locationName":"diskImage"
        },
        "Platform":{
          "shape":"PlatformValues",
          "locationName":"platform"
        }
      }
    },
    "ImportInstanceResult":{
      "type":"structure",
      "members":{
        "ConversionTask":{
          "shape":"ConversionTask",
          "locationName":"conversionTask"
        }
      }
    },
    "ImportInstanceTaskDetails":{
      "type":"structure",
      "required":["Volumes"],
      "members":{
        "Volumes":{
          "shape":"ImportInstanceVolumeDetailSet",
          "locationName":"volumes"
        },
        "InstanceId":{
          "shape":"String",
          "locationName":"instanceId"
        },
        "Platform":{
          "shape":"PlatformValues",
          "locationName":"platform"
        },
        "Description":{
          "shape":"String",
          "locationName":"description"
        }
      }
    },
    "ImportInstanceVolumeDetailItem":{
      "type":"structure",
      "required":[
        "BytesConverted",
        "AvailabilityZone",
        "Image",
        "Volume",
        "Status"
      ],
      "members":{
        "BytesConverted":{
          "shape":"Long",
          "locationName":"bytesConverted"
        },
        "AvailabilityZone":{
          "shape":"String",
          "locationName":"availabilityZone"
        },
        "Image":{
          "shape":"DiskImageDescription",
          "locationName":"image"
        },
        "Volume":{
          "shape":"DiskImageVolumeDescription",
          "locationName":"volume"
        },
        "Status":{
          "shape":"String",
          "locationName":"status"
        },
        "StatusMessage":{
          "shape":"String",
          "locationName":"statusMessage"
        },
        "Description":{
          "shape":"String",
          "locationName":"description"
        }
      }
    },
    "ImportInstanceVolumeDetailSet":{
      "type":"list",
      "member":{
        "shape":"ImportInstanceVolumeDetailItem",
        "locationName":"item"
      }
    },
    "ImportKeyPairRequest":{
      "type":"structure",
      "required":[
        "KeyName",
        "PublicKeyMaterial"
      ],
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "KeyName":{
          "shape":"String",
          "locationName":"keyName"
        },
        "PublicKeyMaterial":{
          "shape":"Blob",
          "locationName":"publicKeyMaterial"
        }
      }
    },
    "ImportKeyPairResult":{
      "type":"structure",
      "members":{
        "KeyName":{
          "shape":"String",
          "locationName":"keyName"
        },
        "KeyFingerprint":{
          "shape":"String",
          "locationName":"keyFingerprint"
        }
      }
    },
    "ImportVolumeRequest":{
      "type":"structure",
      "required":[
        "AvailabilityZone",
        "Image",
        "Volume"
      ],
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "AvailabilityZone":{
          "shape":"String",
          "locationName":"availabilityZone"
        },
        "Image":{
          "shape":"DiskImageDetail",
          "locationName":"image"
        },
        "Description":{
          "shape":"String",
          "locationName":"description"
        },
        "Volume":{
          "shape":"VolumeDetail",
          "locationName":"volume"
        }
      }
    },
    "ImportVolumeResult":{
      "type":"structure",
      "members":{
        "ConversionTask":{
          "shape":"ConversionTask",
          "locationName":"conversionTask"
        }
      }
    },
    "ImportVolumeTaskDetails":{
      "type":"structure",
      "required":[
        "BytesConverted",
        "AvailabilityZone",
        "Image",
        "Volume"
      ],
      "members":{
        "BytesConverted":{
          "shape":"Long",
          "locationName":"bytesConverted"
        },
        "AvailabilityZone":{
          "shape":"String",
          "locationName":"availabilityZone"
        },
        "Description":{
          "shape":"String",
          "locationName":"description"
        },
        "Image":{
          "shape":"DiskImageDescription",
          "locationName":"image"
        },
        "Volume":{
          "shape":"DiskImageVolumeDescription",
          "locationName":"volume"
        }
      }
    },
    "Instance":{
      "type":"structure",
      "members":{
        "InstanceId":{
          "shape":"String",
          "locationName":"instanceId"
        },
        "ImageId":{
          "shape":"String",
          "locationName":"imageId"
        },
        "State":{
          "shape":"InstanceState",
          "locationName":"instanceState"
        },
        "PrivateDnsName":{
          "shape":"String",
          "locationName":"privateDnsName"
        },
        "PublicDnsName":{
          "shape":"String",
          "locationName":"dnsName"
        },
        "StateTransitionReason":{
          "shape":"String",
          "locationName":"reason"
        },
        "KeyName":{
          "shape":"String",
          "locationName":"keyName"
        },
        "AmiLaunchIndex":{
          "shape":"Integer",
          "locationName":"amiLaunchIndex"
        },
        "ProductCodes":{
          "shape":"ProductCodeList",
          "locationName":"productCodes"
        },
        "InstanceType":{
          "shape":"InstanceType",
          "locationName":"instanceType"
        },
        "LaunchTime":{
          "shape":"DateTime",
          "locationName":"launchTime"
        },
        "Placement":{
          "shape":"Placement",
          "locationName":"placement"
        },
        "KernelId":{
          "shape":"String",
          "locationName":"kernelId"
        },
        "RamdiskId":{
          "shape":"String",
          "locationName":"ramdiskId"
        },
        "Platform":{
          "shape":"PlatformValues",
          "locationName":"platform"
        },
        "Monitoring":{
          "shape":"Monitoring",
          "locationName":"monitoring"
        },
        "SubnetId":{
          "shape":"String",
          "locationName":"subnetId"
        },
        "VpcId":{
          "shape":"String",
          "locationName":"vpcId"
        },
        "PrivateIpAddress":{
          "shape":"String",
          "locationName":"privateIpAddress"
        },
        "PublicIpAddress":{
          "shape":"String",
          "locationName":"ipAddress"
        },
        "StateReason":{
          "shape":"StateReason",
          "locationName":"stateReason"
        },
        "Architecture":{
          "shape":"ArchitectureValues",
          "locationName":"architecture"
        },
        "RootDeviceType":{
          "shape":"DeviceType",
          "locationName":"rootDeviceType"
        },
        "RootDeviceName":{
          "shape":"String",
          "locationName":"rootDeviceName"
        },
        "BlockDeviceMappings":{
          "shape":"InstanceBlockDeviceMappingList",
          "locationName":"blockDeviceMapping"
        },
        "VirtualizationType":{
          "shape":"VirtualizationType",
          "locationName":"virtualizationType"
        },
        "InstanceLifecycle":{
          "shape":"InstanceLifecycleType",
          "locationName":"instanceLifecycle"
        },
        "SpotInstanceRequestId":{
          "shape":"String",
          "locationName":"spotInstanceRequestId"
        },
        "ClientToken":{
          "shape":"String",
          "locationName":"clientToken"
        },
        "Tags":{
          "shape":"TagList",
          "locationName":"tagSet"
        },
        "SecurityGroups":{
          "shape":"GroupIdentifierList",
          "locationName":"groupSet"
        },
        "SourceDestCheck":{
          "shape":"Boolean",
          "locationName":"sourceDestCheck"
        },
        "Hypervisor":{
          "shape":"HypervisorType",
          "locationName":"hypervisor"
        },
        "NetworkInterfaces":{
          "shape":"InstanceNetworkInterfaceList",
          "locationName":"networkInterfaceSet"
        },
        "IamInstanceProfile":{
          "shape":"IamInstanceProfile",
          "locationName":"iamInstanceProfile"
        },
        "EbsOptimized":{
          "shape":"Boolean",
          "locationName":"ebsOptimized"
        },
        "SriovNetSupport":{
          "shape":"String",
          "locationName":"sriovNetSupport"
        }
      }
    },
    "InstanceAttribute":{
      "type":"structure",
      "members":{
        "InstanceId":{
          "shape":"String",
          "locationName":"instanceId"
        },
        "InstanceType":{
          "shape":"AttributeValue",
          "locationName":"instanceType"
        },
        "KernelId":{
          "shape":"AttributeValue",
          "locationName":"kernel"
        },
        "RamdiskId":{
          "shape":"AttributeValue",
          "locationName":"ramdisk"
        },
        "UserData":{
          "shape":"AttributeValue",
          "locationName":"userData"
        },
        "DisableApiTermination":{
          "shape":"AttributeBooleanValue",
          "locationName":"disableApiTermination"
        },
        "InstanceInitiatedShutdownBehavior":{
          "shape":"AttributeValue",
          "locationName":"instanceInitiatedShutdownBehavior"
        },
        "RootDeviceName":{
          "shape":"AttributeValue",
          "locationName":"rootDeviceName"
        },
        "BlockDeviceMappings":{
          "shape":"InstanceBlockDeviceMappingList",
          "locationName":"blockDeviceMapping"
        },
        "ProductCodes":{
          "shape":"ProductCodeList",
          "locationName":"productCodes"
        },
        "EbsOptimized":{
          "shape":"AttributeBooleanValue",
          "locationName":"ebsOptimized"
        },
        "SriovNetSupport":{
          "shape":"AttributeValue",
          "locationName":"sriovNetSupport"
        },
        "SourceDestCheck":{
          "shape":"AttributeBooleanValue",
          "locationName":"sourceDestCheck"
        },
        "Groups":{
          "shape":"GroupIdentifierList",
          "locationName":"groupSet"
        }
      }
    },
    "InstanceAttributeName":{
      "type":"string",
      "enum":[
        "instanceType",
        "kernel",
        "ramdisk",
        "userData",
        "disableApiTermination",
        "instanceInitiatedShutdownBehavior",
        "rootDeviceName",
        "blockDeviceMapping",
        "productCodes",
        "sourceDestCheck",
        "groupSet",
        "ebsOptimized",
        "sriovNetSupport"
      ]
    },
    "InstanceBlockDeviceMapping":{
      "type":"structure",
      "members":{
        "DeviceName":{
          "shape":"String",
          "locationName":"deviceName"
        },
        "Ebs":{
          "shape":"EbsInstanceBlockDevice",
          "locationName":"ebs"
        }
      }
    },
    "InstanceBlockDeviceMappingList":{
      "type":"list",
      "member":{
        "shape":"InstanceBlockDeviceMapping",
        "locationName":"item"
      }
    },
    "InstanceBlockDeviceMappingSpecification":{
      "type":"structure",
      "members":{
        "DeviceName":{
          "shape":"String",
          "locationName":"deviceName"
        },
        "Ebs":{
          "shape":"EbsInstanceBlockDeviceSpecification",
          "locationName":"ebs"
        },
        "VirtualName":{
          "shape":"String",
          "locationName":"virtualName"
        },
        "NoDevice":{
          "shape":"String",
          "locationName":"noDevice"
        }
      }
    },
    "InstanceBlockDeviceMappingSpecificationList":{
      "type":"list",
      "member":{
        "shape":"InstanceBlockDeviceMappingSpecification",
        "locationName":"item"
      }
    },
    "InstanceCount":{
      "type":"structure",
      "members":{
        "State":{
          "shape":"ListingState",
          "locationName":"state"
        },
        "InstanceCount":{
          "shape":"Integer",
          "locationName":"instanceCount"
        }
      }
    },
    "InstanceCountList":{
      "type":"list",
      "member":{
        "shape":"InstanceCount",
        "locationName":"item"
      }
    },
    "InstanceExportDetails":{
      "type":"structure",
      "members":{
        "InstanceId":{
          "shape":"String",
          "locationName":"instanceId"
        },
        "TargetEnvironment":{
          "shape":"ExportEnvironment",
          "locationName":"targetEnvironment"
        }
      }
    },
    "InstanceIdStringList":{
      "type":"list",
      "member":{
        "shape":"String",
        "locationName":"InstanceId"
      }
    },
    "InstanceLifecycleType":{
      "type":"string",
      "enum":["spot"]
    },
    "InstanceList":{
      "type":"list",
      "member":{
        "shape":"Instance",
        "locationName":"item"
      }
    },
    "InstanceMonitoring":{
      "type":"structure",
      "members":{
        "InstanceId":{
          "shape":"String",
          "locationName":"instanceId"
        },
        "Monitoring":{
          "shape":"Monitoring",
          "locationName":"monitoring"
        }
      }
    },
    "InstanceMonitoringList":{
      "type":"list",
      "member":{
        "shape":"InstanceMonitoring",
        "locationName":"item"
      }
    },
    "InstanceNetworkInterface":{
      "type":"structure",
      "members":{
        "NetworkInterfaceId":{
          "shape":"String",
          "locationName":"networkInterfaceId"
        },
        "SubnetId":{
          "shape":"String",
          "locationName":"subnetId"
        },
        "VpcId":{
          "shape":"String",
          "locationName":"vpcId"
        },
        "Description":{
          "shape":"String",
          "locationName":"description"
        },
        "OwnerId":{
          "shape":"String",
          "locationName":"ownerId"
        },
        "Status":{
          "shape":"NetworkInterfaceStatus",
          "locationName":"status"
        },
        "MacAddress":{
          "shape":"String",
          "locationName":"macAddress"
        },
        "PrivateIpAddress":{
          "shape":"String",
          "locationName":"privateIpAddress"
        },
        "PrivateDnsName":{
          "shape":"String",
          "locationName":"privateDnsName"
        },
        "SourceDestCheck":{
          "shape":"Boolean",
          "locationName":"sourceDestCheck"
        },
        "Groups":{
          "shape":"GroupIdentifierList",
          "locationName":"groupSet"
        },
        "Attachment":{
          "shape":"InstanceNetworkInterfaceAttachment",
          "locationName":"attachment"
        },
        "Association":{
          "shape":"InstanceNetworkInterfaceAssociation",
          "locationName":"association"
        },
        "PrivateIpAddresses":{
          "shape":"InstancePrivateIpAddressList",
          "locationName":"privateIpAddressesSet"
        }
      }
    },
    "InstanceNetworkInterfaceAssociation":{
      "type":"structure",
      "members":{
        "PublicIp":{
          "shape":"String",
          "locationName":"publicIp"
        },
        "PublicDnsName":{
          "shape":"String",
          "locationName":"publicDnsName"
        },
        "IpOwnerId":{
          "shape":"String",
          "locationName":"ipOwnerId"
        }
      }
    },
    "InstanceNetworkInterfaceAttachment":{
      "type":"structure",
      "members":{
        "AttachmentId":{
          "shape":"String",
          "locationName":"attachmentId"
        },
        "DeviceIndex":{
          "shape":"Integer",
          "locationName":"deviceIndex"
        },
        "Status":{
          "shape":"AttachmentStatus",
          "locationName":"status"
        },
        "AttachTime":{
          "shape":"DateTime",
          "locationName":"attachTime"
        },
        "DeleteOnTermination":{
          "shape":"Boolean",
          "locationName":"deleteOnTermination"
        }
      }
    },
    "InstanceNetworkInterfaceList":{
      "type":"list",
      "member":{
        "shape":"InstanceNetworkInterface",
        "locationName":"item"
      }
    },
    "InstanceNetworkInterfaceSpecification":{
      "type":"structure",
      "members":{
        "NetworkInterfaceId":{
          "shape":"String",
          "locationName":"networkInterfaceId"
        },
        "DeviceIndex":{
          "shape":"Integer",
          "locationName":"deviceIndex"
        },
        "SubnetId":{
          "shape":"String",
          "locationName":"subnetId"
        },
        "Description":{
          "shape":"String",
          "locationName":"description"
        },
        "PrivateIpAddress":{
          "shape":"String",
          "locationName":"privateIpAddress"
        },
        "Groups":{
          "shape":"SecurityGroupIdStringList",
          "locationName":"SecurityGroupId"
        },
        "DeleteOnTermination":{
          "shape":"Boolean",
          "locationName":"deleteOnTermination"
        },
        "PrivateIpAddresses":{
          "shape":"PrivateIpAddressSpecificationList",
          "locationName":"privateIpAddressesSet",
          "queryName":"PrivateIpAddresses"
        },
        "SecondaryPrivateIpAddressCount":{
          "shape":"Integer",
          "locationName":"secondaryPrivateIpAddressCount"
        },
        "AssociatePublicIpAddress":{
          "shape":"Boolean",
          "locationName":"associatePublicIpAddress"
        }
      }
    },
    "InstanceNetworkInterfaceSpecificationList":{
      "type":"list",
      "member":{
        "shape":"InstanceNetworkInterfaceSpecification",
        "locationName":"item"
      }
    },
    "InstancePrivateIpAddress":{
      "type":"structure",
      "members":{
        "PrivateIpAddress":{
          "shape":"String",
          "locationName":"privateIpAddress"
        },
        "PrivateDnsName":{
          "shape":"String",
          "locationName":"privateDnsName"
        },
        "Primary":{
          "shape":"Boolean",
          "locationName":"primary"
        },
        "Association":{
          "shape":"InstanceNetworkInterfaceAssociation",
          "locationName":"association"
        }
      }
    },
    "InstancePrivateIpAddressList":{
      "type":"list",
      "member":{
        "shape":"InstancePrivateIpAddress",
        "locationName":"item"
      }
    },
    "InstanceState":{
      "type":"structure",
      "members":{
        "Code":{
          "shape":"Integer",
          "locationName":"code"
        },
        "Name":{
          "shape":"InstanceStateName",
          "locationName":"name"
        }
      }
    },
    "InstanceStateChange":{
      "type":"structure",
      "members":{
        "InstanceId":{
          "shape":"String",
          "locationName":"instanceId"
        },
        "CurrentState":{
          "shape":"InstanceState",
          "locationName":"currentState"
        },
        "PreviousState":{
          "shape":"InstanceState",
          "locationName":"previousState"
        }
      }
    },
    "InstanceStateChangeList":{
      "type":"list",
      "member":{
        "shape":"InstanceStateChange",
        "locationName":"item"
      }
    },
    "InstanceStateName":{
      "type":"string",
      "enum":[
        "pending",
        "running",
        "shutting-down",
        "terminated",
        "stopping",
        "stopped"
      ]
    },
    "InstanceStatus":{
      "type":"structure",
      "members":{
        "InstanceId":{
          "shape":"String",
          "locationName":"instanceId"
        },
        "AvailabilityZone":{
          "shape":"String",
          "locationName":"availabilityZone"
        },
        "Events":{
          "shape":"InstanceStatusEventList",
          "locationName":"eventsSet"
        },
        "InstanceState":{
          "shape":"InstanceState",
          "locationName":"instanceState"
        },
        "SystemStatus":{
          "shape":"InstanceStatusSummary",
          "locationName":"systemStatus"
        },
        "InstanceStatus":{
          "shape":"InstanceStatusSummary",
          "locationName":"instanceStatus"
        }
      }
    },
    "InstanceStatusDetails":{
      "type":"structure",
      "members":{
        "Name":{
          "shape":"StatusName",
          "locationName":"name"
        },
        "Status":{
          "shape":"StatusType",
          "locationName":"status"
        },
        "ImpairedSince":{
          "shape":"DateTime",
          "locationName":"impairedSince"
        }
      }
    },
    "InstanceStatusDetailsList":{
      "type":"list",
      "member":{
        "shape":"InstanceStatusDetails",
        "locationName":"item"
      }
    },
    "InstanceStatusEvent":{
      "type":"structure",
      "members":{
        "Code":{
          "shape":"EventCode",
          "locationName":"code"
        },
        "Description":{
          "shape":"String",
          "locationName":"description"
        },
        "NotBefore":{
          "shape":"DateTime",
          "locationName":"notBefore"
        },
        "NotAfter":{
          "shape":"DateTime",
          "locationName":"notAfter"
        }
      }
    },
    "InstanceStatusEventList":{
      "type":"list",
      "member":{
        "shape":"InstanceStatusEvent",
        "locationName":"item"
      }
    },
    "InstanceStatusList":{
      "type":"list",
      "member":{
        "shape":"InstanceStatus",
        "locationName":"item"
      }
    },
    "InstanceStatusSummary":{
      "type":"structure",
      "members":{
        "Status":{
          "shape":"SummaryStatus",
          "locationName":"status"
        },
        "Details":{
          "shape":"InstanceStatusDetailsList",
          "locationName":"details"
        }
      }
    },
    "InstanceType":{
      "type":"string",
      "enum":[
        "t1.micro",
        "m1.small",
        "m1.medium",
        "m1.large",
        "m1.xlarge",
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "t2.micro",
        "t2.small",
        "t2.medium",
        "m2.xlarge",
        "m2.2xlarge",
        "m2.4xlarge",
        "cr1.8xlarge",
        "i2.xlarge",
        "i2.2xlarge",
        "i2.4xlarge",
        "i2.8xlarge",
        "hi1.4xlarge",
        "hs1.8xlarge",
        "c1.medium",
        "c1.xlarge",
        "c3.large",
        "c3.xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge",
        "cc1.4xlarge",
        "cc2.8xlarge",
        "g2.2xlarge",
        "cg1.4xlarge",
        "r3.large",
        "r3.xlarge",
        "r3.2xlarge",
        "r3.4xlarge",
        "r3.8xlarge"
      ]
    },
    "InstanceTypeList":{
      "type":"list",
      "member":{"shape":"InstanceType"}
    },
    "Integer":{"type":"integer"},
    "InternetGateway":{
      "type":"structure",
      "members":{
        "InternetGatewayId":{
          "shape":"String",
          "locationName":"internetGatewayId"
        },
        "Attachments":{
          "shape":"InternetGatewayAttachmentList",
          "locationName":"attachmentSet"
        },
        "Tags":{
          "shape":"TagList",
          "locationName":"tagSet"
        }
      }
    },
    "InternetGatewayAttachment":{
      "type":"structure",
      "members":{
        "VpcId":{
          "shape":"String",
          "locationName":"vpcId"
        },
        "State":{
          "shape":"AttachmentStatus",
          "locationName":"state"
        }
      }
    },
    "InternetGatewayAttachmentList":{
      "type":"list",
      "member":{
        "shape":"InternetGatewayAttachment",
        "locationName":"item"
      }
    },
    "InternetGatewayList":{
      "type":"list",
      "member":{
        "shape":"InternetGateway",
        "locationName":"item"
      }
    },
    "IpPermission":{
      "type":"structure",
      "members":{
        "IpProtocol":{
          "shape":"String",
          "locationName":"ipProtocol"
        },
        "FromPort":{
          "shape":"Integer",
          "locationName":"fromPort"
        },
        "ToPort":{
          "shape":"Integer",
          "locationName":"toPort"
        },
        "UserIdGroupPairs":{
          "shape":"UserIdGroupPairList",
          "locationName":"groups"
        },
        "IpRanges":{
          "shape":"IpRangeList",
          "locationName":"ipRanges"
        }
      }
    },
    "IpPermissionList":{
      "type":"list",
      "member":{
        "shape":"IpPermission",
        "locationName":"item"
      }
    },
    "IpRange":{
      "type":"structure",
      "members":{
        "CidrIp":{
          "shape":"String",
          "locationName":"cidrIp"
        }
      }
    },
    "IpRangeList":{
      "type":"list",
      "member":{
        "shape":"IpRange",
        "locationName":"item"
      }
    },
    "KeyNameStringList":{
      "type":"list",
      "member":{
        "shape":"String",
        "locationName":"KeyName"
      }
    },
    "KeyPair":{
      "type":"structure",
      "members":{
        "KeyName":{
          "shape":"String",
          "locationName":"keyName"
        },
        "KeyFingerprint":{
          "shape":"String",
          "locationName":"keyFingerprint"
        },
        "KeyMaterial":{
          "shape":"String",
          "locationName":"keyMaterial"
        }
      }
    },
    "KeyPairInfo":{
      "type":"structure",
      "members":{
        "KeyName":{
          "shape":"String",
          "locationName":"keyName"
        },
        "KeyFingerprint":{
          "shape":"String",
          "locationName":"keyFingerprint"
        }
      }
    },
    "KeyPairList":{
      "type":"list",
      "member":{
        "shape":"KeyPairInfo",
        "locationName":"item"
      }
    },
    "LaunchPermission":{
      "type":"structure",
      "members":{
        "UserId":{
          "shape":"String",
          "locationName":"userId"
        },
        "Group":{
          "shape":"PermissionGroup",
          "locationName":"group"
        }
      }
    },
    "LaunchPermissionList":{
      "type":"list",
      "member":{
        "shape":"LaunchPermission",
        "locationName":"item"
      }
    },
    "LaunchPermissionModifications":{
      "type":"structure",
      "members":{
        "Add":{"shape":"LaunchPermissionList"},
        "Remove":{"shape":"LaunchPermissionList"}
      }
    },
    "LaunchSpecification":{
      "type":"structure",
      "members":{
        "ImageId":{
          "shape":"String",
          "locationName":"imageId"
        },
        "KeyName":{
          "shape":"String",
          "locationName":"keyName"
        },
        "SecurityGroups":{
          "shape":"GroupIdentifierList",
          "locationName":"groupSet"
        },
        "UserData":{
          "shape":"String",
          "locationName":"userData"
        },
        "AddressingType":{
          "shape":"String",
          "locationName":"addressingType"
        },
        "InstanceType":{
          "shape":"InstanceType",
          "locationName":"instanceType"
        },
        "Placement":{
          "shape":"SpotPlacement",
          "locationName":"placement"
        },
        "KernelId":{
          "shape":"String",
          "locationName":"kernelId"
        },
        "RamdiskId":{
          "shape":"String",
          "locationName":"ramdiskId"
        },
        "BlockDeviceMappings":{
          "shape":"BlockDeviceMappingList",
          "locationName":"blockDeviceMapping"
        },
        "SubnetId":{
          "shape":"String",
          "locationName":"subnetId"
        },
        "NetworkInterfaces":{
          "shape":"InstanceNetworkInterfaceSpecificationList",
          "locationName":"networkInterfaceSet"
        },
        "IamInstanceProfile":{
          "shape":"IamInstanceProfileSpecification",
          "locationName":"iamInstanceProfile"
        },
        "EbsOptimized":{
          "shape":"Boolean",
          "locationName":"ebsOptimized"
        },
        "Monitoring":{
          "shape":"RunInstancesMonitoringEnabled",
          "locationName":"monitoring"
        }
      }
    },
    "ListingState":{
      "type":"string",
      "enum":[
        "available",
        "sold",
        "cancelled",
        "pending"
      ]
    },
    "ListingStatus":{
      "type":"string",
      "enum":[
        "active",
        "pending",
        "cancelled",
        "closed"
      ]
    },
    "Long":{"type":"long"},
    "ModifyImageAttributeRequest":{
      "type":"structure",
      "required":["ImageId"],
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "ImageId":{"shape":"String"},
        "Attribute":{"shape":"String"},
        "OperationType":{"shape":"String"},
        "UserIds":{
          "shape":"UserIdStringList",
          "locationName":"UserId"
        },
        "UserGroups":{
          "shape":"UserGroupStringList",
          "locationName":"UserGroup"
        },
        "ProductCodes":{
          "shape":"ProductCodeStringList",
          "locationName":"ProductCode"
        },
        "Value":{"shape":"String"},
        "LaunchPermission":{"shape":"LaunchPermissionModifications"},
        "Description":{"shape":"AttributeValue"}
      }
    },
    "ModifyInstanceAttributeRequest":{
      "type":"structure",
      "required":["InstanceId"],
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "InstanceId":{
          "shape":"String",
          "locationName":"instanceId"
        },
        "Attribute":{
          "shape":"InstanceAttributeName",
          "locationName":"attribute"
        },
        "Value":{
          "shape":"String",
          "locationName":"value"
        },
        "BlockDeviceMappings":{
          "shape":"InstanceBlockDeviceMappingSpecificationList",
          "locationName":"blockDeviceMapping"
        },
        "SourceDestCheck":{"shape":"AttributeBooleanValue"},
        "DisableApiTermination":{
          "shape":"AttributeBooleanValue",
          "locationName":"disableApiTermination"
        },
        "InstanceType":{
          "shape":"AttributeValue",
          "locationName":"instanceType"
        },
        "Kernel":{
          "shape":"AttributeValue",
          "locationName":"kernel"
        },
        "Ramdisk":{
          "shape":"AttributeValue",
          "locationName":"ramdisk"
        },
        "UserData":{
          "shape":"BlobAttributeValue",
          "locationName":"userData"
        },
        "InstanceInitiatedShutdownBehavior":{
          "shape":"AttributeValue",
          "locationName":"instanceInitiatedShutdownBehavior"
        },
        "Groups":{
          "shape":"GroupIdStringList",
          "locationName":"GroupId"
        },
        "EbsOptimized":{
          "shape":"AttributeBooleanValue",
          "locationName":"ebsOptimized"
        },
        "SriovNetSupport":{
          "shape":"AttributeValue",
          "locationName":"sriovNetSupport"
        }
      }
    },
    "ModifyNetworkInterfaceAttributeRequest":{
      "type":"structure",
      "required":["NetworkInterfaceId"],
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "NetworkInterfaceId":{
          "shape":"String",
          "locationName":"networkInterfaceId"
        },
        "Description":{
          "shape":"AttributeValue",
          "locationName":"description"
        },
        "SourceDestCheck":{
          "shape":"AttributeBooleanValue",
          "locationName":"sourceDestCheck"
        },
        "Groups":{
          "shape":"SecurityGroupIdStringList",
          "locationName":"SecurityGroupId"
        },
        "Attachment":{
          "shape":"NetworkInterfaceAttachmentChanges",
          "locationName":"attachment"
        }
      }
    },
    "ModifyReservedInstancesRequest":{
      "type":"structure",
      "required":[
        "ReservedInstancesIds",
        "TargetConfigurations"
      ],
      "members":{
        "ClientToken":{
          "shape":"String",
          "locationName":"clientToken"
        },
        "ReservedInstancesIds":{
          "shape":"ReservedInstancesIdStringList",
          "locationName":"ReservedInstancesId"
        },
        "TargetConfigurations":{
          "shape":"ReservedInstancesConfigurationList",
          "locationName":"ReservedInstancesConfigurationSetItemType"
        }
      }
    },
    "ModifyReservedInstancesResult":{
      "type":"structure",
      "members":{
        "ReservedInstancesModificationId":{
          "shape":"String",
          "locationName":"reservedInstancesModificationId"
        }
      }
    },
    "ModifySnapshotAttributeRequest":{
      "type":"structure",
      "required":["SnapshotId"],
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "SnapshotId":{"shape":"String"},
        "Attribute":{"shape":"SnapshotAttributeName"},
        "OperationType":{"shape":"String"},
        "UserIds":{
          "shape":"UserIdStringList",
          "locationName":"UserId"
        },
        "GroupNames":{
          "shape":"GroupNameStringList",
          "locationName":"UserGroup"
        },
        "CreateVolumePermission":{"shape":"CreateVolumePermissionModifications"}
      }
    },
    "ModifySubnetAttributeRequest":{
      "type":"structure",
      "required":["SubnetId"],
      "members":{
        "SubnetId":{
          "shape":"String",
          "locationName":"subnetId"
        },
        "MapPublicIpOnLaunch":{"shape":"AttributeBooleanValue"}
      }
    },
    "ModifyVolumeAttributeRequest":{
      "type":"structure",
      "required":["VolumeId"],
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "VolumeId":{"shape":"String"},
        "AutoEnableIO":{"shape":"AttributeBooleanValue"}
      }
    },
    "ModifyVpcAttributeRequest":{
      "type":"structure",
      "required":["VpcId"],
      "members":{
        "VpcId":{
          "shape":"String",
          "locationName":"vpcId"
        },
        "EnableDnsSupport":{"shape":"AttributeBooleanValue"},
        "EnableDnsHostnames":{"shape":"AttributeBooleanValue"}
      }
    },
    "MonitorInstancesRequest":{
      "type":"structure",
      "required":["InstanceIds"],
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "InstanceIds":{
          "shape":"InstanceIdStringList",
          "locationName":"InstanceId"
        }
      }
    },
    "MonitorInstancesResult":{
      "type":"structure",
      "members":{
        "InstanceMonitorings":{
          "shape":"InstanceMonitoringList",
          "locationName":"instancesSet"
        }
      }
    },
    "Monitoring":{
      "type":"structure",
      "members":{
        "State":{
          "shape":"MonitoringState",
          "locationName":"state"
        }
      }
    },
    "MonitoringState":{
      "type":"string",
      "enum":[
        "disabled",
        "enabled",
        "pending"
      ]
    },
    "NetworkAcl":{
      "type":"structure",
      "members":{
        "NetworkAclId":{
          "shape":"String",
          "locationName":"networkAclId"
        },
        "VpcId":{
          "shape":"String",
          "locationName":"vpcId"
        },
        "IsDefault":{
          "shape":"Boolean",
          "locationName":"default"
        },
        "Entries":{
          "shape":"NetworkAclEntryList",
          "locationName":"entrySet"
        },
        "Associations":{
          "shape":"NetworkAclAssociationList",
          "locationName":"associationSet"
        },
        "Tags":{
          "shape":"TagList",
          "locationName":"tagSet"
        }
      }
    },
    "NetworkAclAssociation":{
      "type":"structure",
      "members":{
        "NetworkAclAssociationId":{
          "shape":"String",
          "locationName":"networkAclAssociationId"
        },
        "NetworkAclId":{
          "shape":"String",
          "locationName":"networkAclId"
        },
        "SubnetId":{
          "shape":"String",
          "locationName":"subnetId"
        }
      }
    },
    "NetworkAclAssociationList":{
      "type":"list",
      "member":{
        "shape":"NetworkAclAssociation",
        "locationName":"item"
      }
    },
    "NetworkAclEntry":{
      "type":"structure",
      "members":{
        "RuleNumber":{
          "shape":"Integer",
          "locationName":"ruleNumber"
        },
        "Protocol":{
          "shape":"String",
          "locationName":"protocol"
        },
        "RuleAction":{
          "shape":"RuleAction",
          "locationName":"ruleAction"
        },
        "Egress":{
          "shape":"Boolean",
          "locationName":"egress"
        },
        "CidrBlock":{
          "shape":"String",
          "locationName":"cidrBlock"
        },
        "IcmpTypeCode":{
          "shape":"IcmpTypeCode",
          "locationName":"icmpTypeCode"
        },
        "PortRange":{
          "shape":"PortRange",
          "locationName":"portRange"
        }
      }
    },
    "NetworkAclEntryList":{
      "type":"list",
      "member":{
        "shape":"NetworkAclEntry",
        "locationName":"item"
      }
    },
    "NetworkAclList":{
      "type":"list",
      "member":{
        "shape":"NetworkAcl",
        "locationName":"item"
      }
    },
    "NetworkInterface":{
      "type":"structure",
      "members":{
        "NetworkInterfaceId":{
          "shape":"String",
          "locationName":"networkInterfaceId"
        },
        "SubnetId":{
          "shape":"String",
          "locationName":"subnetId"
        },
        "VpcId":{
          "shape":"String",
          "locationName":"vpcId"
        },
        "AvailabilityZone":{
          "shape":"String",
          "locationName":"availabilityZone"
        },
        "Description":{
          "shape":"String",
          "locationName":"description"
        },
        "OwnerId":{
          "shape":"String",
          "locationName":"ownerId"
        },
        "RequesterId":{
          "shape":"String",
          "locationName":"requesterId"
        },
        "RequesterManaged":{
          "shape":"Boolean",
          "locationName":"requesterManaged"
        },
        "Status":{
          "shape":"NetworkInterfaceStatus",
          "locationName":"status"
        },
        "MacAddress":{
          "shape":"String",
          "locationName":"macAddress"
        },
        "PrivateIpAddress":{
          "shape":"String",
          "locationName":"privateIpAddress"
        },
        "PrivateDnsName":{
          "shape":"String",
          "locationName":"privateDnsName"
        },
        "SourceDestCheck":{
          "shape":"Boolean",
          "locationName":"sourceDestCheck"
        },
        "Groups":{
          "shape":"GroupIdentifierList",
          "locationName":"groupSet"
        },
        "Attachment":{
          "shape":"NetworkInterfaceAttachment",
          "locationName":"attachment"
        },
        "Association":{
          "shape":"NetworkInterfaceAssociation",
          "locationName":"association"
        },
        "TagSet":{
          "shape":"TagList",
          "locationName":"tagSet"
        },
        "PrivateIpAddresses":{
          "shape":"NetworkInterfacePrivateIpAddressList",
          "locationName":"privateIpAddressesSet"
        }
      }
    },
    "NetworkInterfaceAssociation":{
      "type":"structure",
      "members":{
        "PublicIp":{
          "shape":"String",
          "locationName":"publicIp"
        },
        "PublicDnsName":{
          "shape":"String",
          "locationName":"publicDnsName"
        },
        "IpOwnerId":{
          "shape":"String",
          "locationName":"ipOwnerId"
        },
        "AllocationId":{
          "shape":"String",
          "locationName":"allocationId"
        },
        "AssociationId":{
          "shape":"String",
          "locationName":"associationId"
        }
      }
    },
    "NetworkInterfaceAttachment":{
      "type":"structure",
      "members":{
        "AttachmentId":{
          "shape":"String",
          "locationName":"attachmentId"
        },
        "InstanceId":{
          "shape":"String",
          "locationName":"instanceId"
        },
        "InstanceOwnerId":{
          "shape":"String",
          "locationName":"instanceOwnerId"
        },
        "DeviceIndex":{
          "shape":"Integer",
          "locationName":"deviceIndex"
        },
        "Status":{
          "shape":"AttachmentStatus",
          "locationName":"status"
        },
        "AttachTime":{
          "shape":"DateTime",
          "locationName":"attachTime"
        },
        "DeleteOnTermination":{
          "shape":"Boolean",
          "locationName":"deleteOnTermination"
        }
      }
    },
    "NetworkInterfaceAttachmentChanges":{
      "type":"structure",
      "members":{
        "AttachmentId":{
          "shape":"String",
          "locationName":"attachmentId"
        },
        "DeleteOnTermination":{
          "shape":"Boolean",
          "locationName":"deleteOnTermination"
        }
      }
    },
    "NetworkInterfaceAttribute":{
      "type":"string",
      "enum":[
        "description",
        "groupSet",
        "sourceDestCheck",
        "attachment"
      ]
    },
    "NetworkInterfaceIdList":{
      "type":"list",
      "member":{
        "shape":"String",
        "locationName":"item"
      }
    },
    "NetworkInterfaceList":{
      "type":"list",
      "member":{
        "shape":"NetworkInterface",
        "locationName":"item"
      }
    },
    "NetworkInterfacePrivateIpAddress":{
      "type":"structure",
      "members":{
        "PrivateIpAddress":{
          "shape":"String",
          "locationName":"privateIpAddress"
        },
        "PrivateDnsName":{
          "shape":"String",
          "locationName":"privateDnsName"
        },
        "Primary":{
          "shape":"Boolean",
          "locationName":"primary"
        },
        "Association":{
          "shape":"NetworkInterfaceAssociation",
          "locationName":"association"
        }
      }
    },
    "NetworkInterfacePrivateIpAddressList":{
      "type":"list",
      "member":{
        "shape":"NetworkInterfacePrivateIpAddress",
        "locationName":"item"
      }
    },
    "NetworkInterfaceStatus":{
      "type":"string",
      "enum":[
        "available",
        "attaching",
        "in-use",
        "detaching"
      ]
    },
    "OfferingTypeValues":{
      "type":"string",
      "enum":[
        "Heavy Utilization",
        "Medium Utilization",
        "Light Utilization"
      ]
    },
    "OwnerStringList":{
      "type":"list",
      "member":{
        "shape":"String",
        "locationName":"Owner"
      }
    },
    "PermissionGroup":{
      "type":"string",
      "enum":["all"]
    },
    "Placement":{
      "type":"structure",
      "members":{
        "AvailabilityZone":{
          "shape":"String",
          "locationName":"availabilityZone"
        },
        "GroupName":{
          "shape":"String",
          "locationName":"groupName"
        },
        "Tenancy":{
          "shape":"Tenancy",
          "locationName":"tenancy"
        }
      }
    },
    "PlacementGroup":{
      "type":"structure",
      "members":{
        "GroupName":{
          "shape":"String",
          "locationName":"groupName"
        },
        "Strategy":{
          "shape":"PlacementStrategy",
          "locationName":"strategy"
        },
        "State":{
          "shape":"PlacementGroupState",
          "locationName":"state"
        }
      }
    },
    "PlacementGroupList":{
      "type":"list",
      "member":{
        "shape":"PlacementGroup",
        "locationName":"item"
      }
    },
    "PlacementGroupState":{
      "type":"string",
      "enum":[
        "pending",
        "available",
        "deleting",
        "deleted"
      ]
    },
    "PlacementGroupStringList":{
      "type":"list",
      "member":{"shape":"String"}
    },
    "PlacementStrategy":{
      "type":"string",
      "enum":["cluster"]
    },
    "PlatformValues":{
      "type":"string",
      "enum":["Windows"]
    },
    "PortRange":{
      "type":"structure",
      "members":{
        "From":{
          "shape":"Integer",
          "locationName":"from"
        },
        "To":{
          "shape":"Integer",
          "locationName":"to"
        }
      }
    },
    "PriceSchedule":{
      "type":"structure",
      "members":{
        "Term":{
          "shape":"Long",
          "locationName":"term"
        },
        "Price":{
          "shape":"Double",
          "locationName":"price"
        },
        "CurrencyCode":{
          "shape":"CurrencyCodeValues",
          "locationName":"currencyCode"
        },
        "Active":{
          "shape":"Boolean",
          "locationName":"active"
        }
      }
    },
    "PriceScheduleList":{
      "type":"list",
      "member":{
        "shape":"PriceSchedule",
        "locationName":"item"
      }
    },
    "PriceScheduleSpecification":{
      "type":"structure",
      "members":{
        "Term":{
          "shape":"Long",
          "locationName":"term"
        },
        "Price":{
          "shape":"Double",
          "locationName":"price"
        },
        "CurrencyCode":{
          "shape":"CurrencyCodeValues",
          "locationName":"currencyCode"
        }
      }
    },
    "PriceScheduleSpecificationList":{
      "type":"list",
      "member":{
        "shape":"PriceScheduleSpecification",
        "locationName":"item"
      }
    },
    "PricingDetail":{
      "type":"structure",
      "members":{
        "Price":{
          "shape":"Double",
          "locationName":"price"
        },
        "Count":{
          "shape":"Integer",
          "locationName":"count"
        }
      }
    },
    "PricingDetailsList":{
      "type":"list",
      "member":{
        "shape":"PricingDetail",
        "locationName":"item"
      }
    },
    "PrivateIpAddressSpecification":{
      "type":"structure",
      "required":["PrivateIpAddress"],
      "members":{
        "PrivateIpAddress":{
          "shape":"String",
          "locationName":"privateIpAddress"
        },
        "Primary":{
          "shape":"Boolean",
          "locationName":"primary"
        }
      }
    },
    "PrivateIpAddressSpecificationList":{
      "type":"list",
      "member":{
        "shape":"PrivateIpAddressSpecification",
        "locationName":"item"
      }
    },
    "PrivateIpAddressStringList":{
      "type":"list",
      "member":{
        "shape":"String",
        "locationName":"PrivateIpAddress"
      }
    },
    "ProductCode":{
      "type":"structure",
      "members":{
        "ProductCodeId":{
          "shape":"String",
          "locationName":"productCode"
        },
        "ProductCodeType":{
          "shape":"ProductCodeValues",
          "locationName":"type"
        }
      }
    },
    "ProductCodeList":{
      "type":"list",
      "member":{
        "shape":"ProductCode",
        "locationName":"item"
      }
    },
    "ProductCodeStringList":{
      "type":"list",
      "member":{
        "shape":"String",
        "locationName":"ProductCode"
      }
    },
    "ProductCodeValues":{
      "type":"string",
      "enum":[
        "devpay",
        "marketplace"
      ]
    },
    "ProductDescriptionList":{
      "type":"list",
      "member":{"shape":"String"}
    },
    "PropagatingVgw":{
      "type":"structure",
      "members":{
        "GatewayId":{
          "shape":"String",
          "locationName":"gatewayId"
        }
      }
    },
    "PropagatingVgwList":{
      "type":"list",
      "member":{
        "shape":"PropagatingVgw",
        "locationName":"item"
      }
    },
    "PublicIpStringList":{
      "type":"list",
      "member":{
        "shape":"String",
        "locationName":"PublicIp"
      }
    },
    "PurchaseReservedInstancesOfferingRequest":{
      "type":"structure",
      "required":[
        "ReservedInstancesOfferingId",
        "InstanceCount"
      ],
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "ReservedInstancesOfferingId":{"shape":"String"},
        "InstanceCount":{"shape":"Integer"},
        "LimitPrice":{
          "shape":"ReservedInstanceLimitPrice",
          "locationName":"limitPrice"
        }
      }
    },
    "PurchaseReservedInstancesOfferingResult":{
      "type":"structure",
      "members":{
        "ReservedInstancesId":{
          "shape":"String",
          "locationName":"reservedInstancesId"
        }
      }
    },
    "RIProductDescription":{
      "type":"string",
      "enum":[
        "Linux/UNIX",
        "Linux/UNIX (Amazon VPC)",
        "Windows",
        "Windows (Amazon VPC)"
      ]
    },
    "ReasonCodesList":{
      "type":"list",
      "member":{
        "shape":"ReportInstanceReasonCodes",
        "locationName":"item"
      }
    },
    "RebootInstancesRequest":{
      "type":"structure",
      "required":["InstanceIds"],
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "InstanceIds":{
          "shape":"InstanceIdStringList",
          "locationName":"InstanceId"
        }
      }
    },
    "RecurringCharge":{
      "type":"structure",
      "members":{
        "Frequency":{
          "shape":"RecurringChargeFrequency",
          "locationName":"frequency"
        },
        "Amount":{
          "shape":"Double",
          "locationName":"amount"
        }
      }
    },
    "RecurringChargeFrequency":{
      "type":"string",
      "enum":["Hourly"]
    },
    "RecurringChargesList":{
      "type":"list",
      "member":{
        "shape":"RecurringCharge",
        "locationName":"item"
      }
    },
    "Region":{
      "type":"structure",
      "members":{
        "RegionName":{
          "shape":"String",
          "locationName":"regionName"
        },
        "Endpoint":{
          "shape":"String",
          "locationName":"regionEndpoint"
        }
      }
    },
    "RegionList":{
      "type":"list",
      "member":{
        "shape":"Region",
        "locationName":"item"
      }
    },
    "RegionNameStringList":{
      "type":"list",
      "member":{
        "shape":"String",
        "locationName":"RegionName"
      }
    },
    "RegisterImageRequest":{
      "type":"structure",
      "required":["Name"],
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "ImageLocation":{"shape":"String"},
        "Name":{
          "shape":"String",
          "locationName":"name"
        },
        "Description":{
          "shape":"String",
          "locationName":"description"
        },
        "Architecture":{
          "shape":"ArchitectureValues",
          "locationName":"architecture"
        },
        "KernelId":{
          "shape":"String",
          "locationName":"kernelId"
        },
        "RamdiskId":{
          "shape":"String",
          "locationName":"ramdiskId"
        },
        "RootDeviceName":{
          "shape":"String",
          "locationName":"rootDeviceName"
        },
        "BlockDeviceMappings":{
          "shape":"BlockDeviceMappingRequestList",
          "locationName":"BlockDeviceMapping"
        },
        "VirtualizationType":{
          "shape":"String",
          "locationName":"virtualizationType"
        },
        "SriovNetSupport":{
          "shape":"String",
          "locationName":"sriovNetSupport"
        }
      }
    },
    "RegisterImageResult":{
      "type":"structure",
      "members":{
        "ImageId":{
          "shape":"String",
          "locationName":"imageId"
        }
      }
    },
    "RejectVpcPeeringConnectionRequest":{
      "type":"structure",
      "required":["VpcPeeringConnectionId"],
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "VpcPeeringConnectionId":{
          "shape":"String",
          "locationName":"vpcPeeringConnectionId"
        }
      }
    },
    "RejectVpcPeeringConnectionResult":{
      "type":"structure",
      "members":{
        "Return":{
          "shape":"Boolean",
          "locationName":"return"
        }
      }
    },
    "ReleaseAddressRequest":{
      "type":"structure",
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "PublicIp":{"shape":"String"},
        "AllocationId":{"shape":"String"}
      }
    },
    "ReplaceNetworkAclAssociationRequest":{
      "type":"structure",
      "required":[
        "AssociationId",
        "NetworkAclId"
      ],
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "AssociationId":{
          "shape":"String",
          "locationName":"associationId"
        },
        "NetworkAclId":{
          "shape":"String",
          "locationName":"networkAclId"
        }
      }
    },
    "ReplaceNetworkAclAssociationResult":{
      "type":"structure",
      "members":{
        "NewAssociationId":{
          "shape":"String",
          "locationName":"newAssociationId"
        }
      }
    },
    "ReplaceNetworkAclEntryRequest":{
      "type":"structure",
      "required":[
        "NetworkAclId",
        "RuleNumber",
        "Protocol",
        "RuleAction",
        "Egress",
        "CidrBlock"
      ],
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "NetworkAclId":{
          "shape":"String",
          "locationName":"networkAclId"
        },
        "RuleNumber":{
          "shape":"Integer",
          "locationName":"ruleNumber"
        },
        "Protocol":{
          "shape":"String",
          "locationName":"protocol"
        },
        "RuleAction":{
          "shape":"RuleAction",
          "locationName":"ruleAction"
        },
        "Egress":{
          "shape":"Boolean",
          "locationName":"egress"
        },
        "CidrBlock":{
          "shape":"String",
          "locationName":"cidrBlock"
        },
        "IcmpTypeCode":{
          "shape":"IcmpTypeCode",
          "locationName":"Icmp"
        },
        "PortRange":{
          "shape":"PortRange",
          "locationName":"portRange"
        }
      }
    },
    "ReplaceRouteRequest":{
      "type":"structure",
      "required":[
        "RouteTableId",
        "DestinationCidrBlock"
      ],
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "RouteTableId":{
          "shape":"String",
          "locationName":"routeTableId"
        },
        "DestinationCidrBlock":{
          "shape":"String",
          "locationName":"destinationCidrBlock"
        },
        "GatewayId":{
          "shape":"String",
          "locationName":"gatewayId"
        },
        "InstanceId":{
          "shape":"String",
          "locationName":"instanceId"
        },
        "NetworkInterfaceId":{
          "shape":"String",
          "locationName":"networkInterfaceId"
        },
        "VpcPeeringConnectionId":{
          "shape":"String",
          "locationName":"vpcPeeringConnectionId"
        }
      }
    },
    "ReplaceRouteTableAssociationRequest":{
      "type":"structure",
      "required":[
        "AssociationId",
        "RouteTableId"
      ],
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "AssociationId":{
          "shape":"String",
          "locationName":"associationId"
        },
        "RouteTableId":{
          "shape":"String",
          "locationName":"routeTableId"
        }
      }
    },
    "ReplaceRouteTableAssociationResult":{
      "type":"structure",
      "members":{
        "NewAssociationId":{
          "shape":"String",
          "locationName":"newAssociationId"
        }
      }
    },
    "ReportInstanceReasonCodes":{
      "type":"string",
      "enum":[
        "instance-stuck-in-state",
        "unresponsive",
        "not-accepting-credentials",
        "password-not-available",
        "performance-network",
        "performance-instance-store",
        "performance-ebs-volume",
        "performance-other",
        "other"
      ]
    },
    "ReportInstanceStatusRequest":{
      "type":"structure",
      "required":[
        "Instances",
        "Status",
        "ReasonCodes"
      ],
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "Instances":{
          "shape":"InstanceIdStringList",
          "locationName":"instanceId"
        },
        "Status":{
          "shape":"ReportStatusType",
          "locationName":"status"
        },
        "StartTime":{
          "shape":"DateTime",
          "locationName":"startTime"
        },
        "EndTime":{
          "shape":"DateTime",
          "locationName":"endTime"
        },
        "ReasonCodes":{
          "shape":"ReasonCodesList",
          "locationName":"reasonCode"
        },
        "Description":{
          "shape":"String",
          "locationName":"description"
        }
      }
    },
    "ReportStatusType":{
      "type":"string",
      "enum":[
        "ok",
        "impaired"
      ]
    },
    "RequestSpotInstancesRequest":{
      "type":"structure",
      "required":["SpotPrice"],
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "SpotPrice":{
          "shape":"String",
          "locationName":"spotPrice"
        },
        "InstanceCount":{
          "shape":"Integer",
          "locationName":"instanceCount"
        },
        "Type":{
          "shape":"SpotInstanceType",
          "locationName":"type"
        },
        "ValidFrom":{
          "shape":"DateTime",
          "locationName":"validFrom"
        },
        "ValidUntil":{
          "shape":"DateTime",
          "locationName":"validUntil"
        },
        "LaunchGroup":{
          "shape":"String",
          "locationName":"launchGroup"
        },
        "AvailabilityZoneGroup":{
          "shape":"String",
          "locationName":"availabilityZoneGroup"
        },
        "LaunchSpecification":{"shape":"RequestSpotLaunchSpecification"}
      }
    },
    "RequestSpotInstancesResult":{
      "type":"structure",
      "members":{
        "SpotInstanceRequests":{
          "shape":"SpotInstanceRequestList",
          "locationName":"spotInstanceRequestSet"
        }
      }
    },
    "Reservation":{
      "type":"structure",
      "members":{
        "ReservationId":{
          "shape":"String",
          "locationName":"reservationId"
        },
        "OwnerId":{
          "shape":"String",
          "locationName":"ownerId"
        },
        "RequesterId":{
          "shape":"String",
          "locationName":"requesterId"
        },
        "Groups":{
          "shape":"GroupIdentifierList",
          "locationName":"groupSet"
        },
        "Instances":{
          "shape":"InstanceList",
          "locationName":"instancesSet"
        }
      }
    },
    "ReservationList":{
      "type":"list",
      "member":{
        "shape":"Reservation",
        "locationName":"item"
      }
    },
    "ReservedInstanceLimitPrice":{
      "type":"structure",
      "members":{
        "Amount":{
          "shape":"Double",
          "locationName":"amount"
        },
        "CurrencyCode":{
          "shape":"CurrencyCodeValues",
          "locationName":"currencyCode"
        }
      }
    },
    "ReservedInstanceState":{
      "type":"string",
      "enum":[
        "payment-pending",
        "active",
        "payment-failed",
        "retired"
      ]
    },
    "ReservedInstances":{
      "type":"structure",
      "members":{
        "ReservedInstancesId":{
          "shape":"String",
          "locationName":"reservedInstancesId"
        },
        "InstanceType":{
          "shape":"InstanceType",
          "locationName":"instanceType"
        },
        "AvailabilityZone":{
          "shape":"String",
          "locationName":"availabilityZone"
        },
        "Start":{
          "shape":"DateTime",
          "locationName":"start"
        },
        "End":{
          "shape":"DateTime",
          "locationName":"end"
        },
        "Duration":{
          "shape":"Long",
          "locationName":"duration"
        },
        "UsagePrice":{
          "shape":"Float",
          "locationName":"usagePrice"
        },
        "FixedPrice":{
          "shape":"Float",
          "locationName":"fixedPrice"
        },
        "InstanceCount":{
          "shape":"Integer",
          "locationName":"instanceCount"
        },
        "ProductDescription":{
          "shape":"RIProductDescription",
          "locationName":"productDescription"
        },
        "State":{
          "shape":"ReservedInstanceState",
          "locationName":"state"
        },
        "Tags":{
          "shape":"TagList",
          "locationName":"tagSet"
        },
        "InstanceTenancy":{
          "shape":"Tenancy",
          "locationName":"instanceTenancy"
        },
        "CurrencyCode":{
          "shape":"CurrencyCodeValues",
          "locationName":"currencyCode"
        },
        "OfferingType":{
          "shape":"OfferingTypeValues",
          "locationName":"offeringType"
        },
        "RecurringCharges":{
          "shape":"RecurringChargesList",
          "locationName":"recurringCharges"
        }
      }
    },
    "ReservedInstancesConfiguration":{
      "type":"structure",
      "members":{
        "AvailabilityZone":{
          "shape":"String",
          "locationName":"availabilityZone"
        },
        "Platform":{
          "shape":"String",
          "locationName":"platform"
        },
        "InstanceCount":{
          "shape":"Integer",
          "locationName":"instanceCount"
        },
        "InstanceType":{
          "shape":"InstanceType",
          "locationName":"instanceType"
        }
      }
    },
    "ReservedInstancesConfigurationList":{
      "type":"list",
      "member":{
        "shape":"ReservedInstancesConfiguration",
        "locationName":"item"
      }
    },
    "ReservedInstancesId":{
      "type":"structure",
      "members":{
        "ReservedInstancesId":{
          "shape":"String",
          "locationName":"reservedInstancesId"
        }
      }
    },
    "ReservedInstancesIdStringList":{
      "type":"list",
      "member":{
        "shape":"String",
        "locationName":"ReservedInstancesId"
      }
    },
    "ReservedInstancesList":{
      "type":"list",
      "member":{
        "shape":"ReservedInstances",
        "locationName":"item"
      }
    },
    "ReservedInstancesListing":{
      "type":"structure",
      "members":{
        "ReservedInstancesListingId":{
          "shape":"String",
          "locationName":"reservedInstancesListingId"
        },
        "ReservedInstancesId":{
          "shape":"String",
          "locationName":"reservedInstancesId"
        },
        "CreateDate":{
          "shape":"DateTime",
          "locationName":"createDate"
        },
        "UpdateDate":{
          "shape":"DateTime",
          "locationName":"updateDate"
        },
        "Status":{
          "shape":"ListingStatus",
          "locationName":"status"
        },
        "StatusMessage":{
          "shape":"String",
          "locationName":"statusMessage"
        },
        "InstanceCounts":{
          "shape":"InstanceCountList",
          "locationName":"instanceCounts"
        },
        "PriceSchedules":{
          "shape":"PriceScheduleList",
          "locationName":"priceSchedules"
        },
        "Tags":{
          "shape":"TagList",
          "locationName":"tagSet"
        },
        "ClientToken":{
          "shape":"String",
          "locationName":"clientToken"
        }
      }
    },
    "ReservedInstancesListingList":{
      "type":"list",
      "member":{
        "shape":"ReservedInstancesListing",
        "locationName":"item"
      }
    },
    "ReservedInstancesModification":{
      "type":"structure",
      "members":{
        "ReservedInstancesModificationId":{
          "shape":"String",
          "locationName":"reservedInstancesModificationId"
        },
        "ReservedInstancesIds":{
          "shape":"ReservedIntancesIds",
          "locationName":"reservedInstancesSet"
        },
        "ModificationResults":{
          "shape":"ReservedInstancesModificationResultList",
          "locationName":"modificationResultSet"
        },
        "CreateDate":{
          "shape":"DateTime",
          "locationName":"createDate"
        },
        "UpdateDate":{
          "shape":"DateTime",
          "locationName":"updateDate"
        },
        "EffectiveDate":{
          "shape":"DateTime",
          "locationName":"effectiveDate"
        },
        "Status":{
          "shape":"String",
          "locationName":"status"
        },
        "StatusMessage":{
          "shape":"String",
          "locationName":"statusMessage"
        },
        "ClientToken":{
          "shape":"String",
          "locationName":"clientToken"
        }
      }
    },
    "ReservedInstancesModificationIdStringList":{
      "type":"list",
      "member":{
        "shape":"String",
        "locationName":"ReservedInstancesModificationId"
      }
    },
    "ReservedInstancesModificationList":{
      "type":"list",
      "member":{
        "shape":"ReservedInstancesModification",
        "locationName":"item"
      }
    },
    "ReservedInstancesModificationResult":{
      "type":"structure",
      "members":{
        "ReservedInstancesId":{
          "shape":"String",
          "locationName":"reservedInstancesId"
        },
        "TargetConfiguration":{
          "shape":"ReservedInstancesConfiguration",
          "locationName":"targetConfiguration"
        }
      }
    },
    "ReservedInstancesModificationResultList":{
      "type":"list",
      "member":{
        "shape":"ReservedInstancesModificationResult",
        "locationName":"item"
      }
    },
    "ReservedInstancesOffering":{
      "type":"structure",
      "members":{
        "ReservedInstancesOfferingId":{
          "shape":"String",
          "locationName":"reservedInstancesOfferingId"
        },
        "InstanceType":{
          "shape":"InstanceType",
          "locationName":"instanceType"
        },
        "AvailabilityZone":{
          "shape":"String",
          "locationName":"availabilityZone"
        },
        "Duration":{
          "shape":"Long",
          "locationName":"duration"
        },
        "UsagePrice":{
          "shape":"Float",
          "locationName":"usagePrice"
        },
        "FixedPrice":{
          "shape":"Float",
          "locationName":"fixedPrice"
        },
        "ProductDescription":{
          "shape":"RIProductDescription",
          "locationName":"productDescription"
        },
        "InstanceTenancy":{
          "shape":"Tenancy",
          "locationName":"instanceTenancy"
        },
        "CurrencyCode":{
          "shape":"CurrencyCodeValues",
          "locationName":"currencyCode"
        },
        "OfferingType":{
          "shape":"OfferingTypeValues",
          "locationName":"offeringType"
        },
        "RecurringCharges":{
          "shape":"RecurringChargesList",
          "locationName":"recurringCharges"
        },
        "Marketplace":{
          "shape":"Boolean",
          "locationName":"marketplace"
        },
        "PricingDetails":{
          "shape":"PricingDetailsList",
          "locationName":"pricingDetailsSet"
        }
      }
    },
    "ReservedInstancesOfferingIdStringList":{
      "type":"list",
      "member":{"shape":"String"}
    },
    "ReservedInstancesOfferingList":{
      "type":"list",
      "member":{
        "shape":"ReservedInstancesOffering",
        "locationName":"item"
      }
    },
    "ReservedIntancesIds":{
      "type":"list",
      "member":{
        "shape":"ReservedInstancesId",
        "locationName":"item"
      }
    },
    "ResetImageAttributeName":{
      "type":"string",
      "enum":["launchPermission"]
    },
    "ResetImageAttributeRequest":{
      "type":"structure",
      "required":[
        "ImageId",
        "Attribute"
      ],
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "ImageId":{"shape":"String"},
        "Attribute":{"shape":"ResetImageAttributeName"}
      }
    },
    "ResetInstanceAttributeRequest":{
      "type":"structure",
      "required":[
        "InstanceId",
        "Attribute"
      ],
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "InstanceId":{
          "shape":"String",
          "locationName":"instanceId"
        },
        "Attribute":{
          "shape":"InstanceAttributeName",
          "locationName":"attribute"
        }
      }
    },
    "ResetNetworkInterfaceAttributeRequest":{
      "type":"structure",
      "required":["NetworkInterfaceId"],
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "NetworkInterfaceId":{
          "shape":"String",
          "locationName":"networkInterfaceId"
        },
        "SourceDestCheck":{
          "shape":"String",
          "locationName":"sourceDestCheck"
        }
      }
    },
    "ResetSnapshotAttributeRequest":{
      "type":"structure",
      "required":[
        "SnapshotId",
        "Attribute"
      ],
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "SnapshotId":{"shape":"String"},
        "Attribute":{"shape":"SnapshotAttributeName"}
      }
    },
    "ResourceIdList":{
      "type":"list",
      "member":{"shape":"String"}
    },
    "ResourceType":{
      "type":"string",
      "enum":[
        "customer-gateway",
        "dhcp-options",
        "image",
        "instance",
        "internet-gateway",
        "network-acl",
        "network-interface",
        "reserved-instances",
        "route-table",
        "snapshot",
        "spot-instances-request",
        "subnet",
        "security-group",
        "volume",
        "vpc",
        "vpn-connection",
        "vpn-gateway"
      ]
    },
    "RestorableByStringList":{
      "type":"list",
      "member":{"shape":"String"}
    },
    "RevokeSecurityGroupEgressRequest":{
      "type":"structure",
      "required":["GroupId"],
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "GroupId":{
          "shape":"String",
          "locationName":"groupId"
        },
        "SourceSecurityGroupName":{
          "shape":"String",
          "locationName":"sourceSecurityGroupName"
        },
        "SourceSecurityGroupOwnerId":{
          "shape":"String",
          "locationName":"sourceSecurityGroupOwnerId"
        },
        "IpProtocol":{
          "shape":"String",
          "locationName":"ipProtocol"
        },
        "FromPort":{
          "shape":"Integer",
          "locationName":"fromPort"
        },
        "ToPort":{
          "shape":"Integer",
          "locationName":"toPort"
        },
        "CidrIp":{
          "shape":"String",
          "locationName":"cidrIp"
        },
        "IpPermissions":{
          "shape":"IpPermissionList",
          "locationName":"ipPermissions"
        }
      }
    },
    "RevokeSecurityGroupIngressRequest":{
      "type":"structure",
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "GroupName":{"shape":"String"},
        "GroupId":{"shape":"String"},
        "SourceSecurityGroupName":{"shape":"String"},
        "SourceSecurityGroupOwnerId":{"shape":"String"},
        "IpProtocol":{"shape":"String"},
        "FromPort":{"shape":"Integer"},
        "ToPort":{"shape":"Integer"},
        "CidrIp":{"shape":"String"},
        "IpPermissions":{"shape":"IpPermissionList"}
      }
    },
    "Route":{
      "type":"structure",
      "members":{
        "DestinationCidrBlock":{
          "shape":"String",
          "locationName":"destinationCidrBlock"
        },
        "GatewayId":{
          "shape":"String",
          "locationName":"gatewayId"
        },
        "InstanceId":{
          "shape":"String",
          "locationName":"instanceId"
        },
        "InstanceOwnerId":{
          "shape":"String",
          "locationName":"instanceOwnerId"
        },
        "NetworkInterfaceId":{
          "shape":"String",
          "locationName":"networkInterfaceId"
        },
        "VpcPeeringConnectionId":{
          "shape":"String",
          "locationName":"vpcPeeringConnectionId"
        },
        "State":{
          "shape":"RouteState",
          "locationName":"state"
        },
        "Origin":{
          "shape":"RouteOrigin",
          "locationName":"origin"
        }
      }
    },
    "RouteList":{
      "type":"list",
      "member":{
        "shape":"Route",
        "locationName":"item"
      }
    },
    "RouteOrigin":{
      "type":"string",
      "enum":[
        "CreateRouteTable",
        "CreateRoute",
        "EnableVgwRoutePropagation"
      ]
    },
    "RouteState":{
      "type":"string",
      "enum":[
        "active",
        "blackhole"
      ]
    },
    "RouteTable":{
      "type":"structure",
      "members":{
        "RouteTableId":{
          "shape":"String",
          "locationName":"routeTableId"
        },
        "VpcId":{
          "shape":"String",
          "locationName":"vpcId"
        },
        "Routes":{
          "shape":"RouteList",
          "locationName":"routeSet"
        },
        "Associations":{
          "shape":"RouteTableAssociationList",
          "locationName":"associationSet"
        },
        "Tags":{
          "shape":"TagList",
          "locationName":"tagSet"
        },
        "PropagatingVgws":{
          "shape":"PropagatingVgwList",
          "locationName":"propagatingVgwSet"
        }
      }
    },
    "RouteTableAssociation":{
      "type":"structure",
      "members":{
        "RouteTableAssociationId":{
          "shape":"String",
          "locationName":"routeTableAssociationId"
        },
        "RouteTableId":{
          "shape":"String",
          "locationName":"routeTableId"
        },
        "SubnetId":{
          "shape":"String",
          "locationName":"subnetId"
        },
        "Main":{
          "shape":"Boolean",
          "locationName":"main"
        }
      }
    },
    "RouteTableAssociationList":{
      "type":"list",
      "member":{
        "shape":"RouteTableAssociation",
        "locationName":"item"
      }
    },
    "RouteTableList":{
      "type":"list",
      "member":{
        "shape":"RouteTable",
        "locationName":"item"
      }
    },
    "RuleAction":{
      "type":"string",
      "enum":[
        "allow",
        "deny"
      ]
    },
    "RunInstancesMonitoringEnabled":{
      "type":"structure",
      "required":["Enabled"],
      "members":{
        "Enabled":{
          "shape":"Boolean",
          "locationName":"enabled"
        }
      }
    },
    "RunInstancesRequest":{
      "type":"structure",
      "required":[
        "ImageId",
        "MinCount",
        "MaxCount"
      ],
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "ImageId":{"shape":"String"},
        "MinCount":{"shape":"Integer"},
        "MaxCount":{"shape":"Integer"},
        "KeyName":{"shape":"String"},
        "SecurityGroups":{
          "shape":"SecurityGroupStringList",
          "locationName":"SecurityGroup"
        },
        "SecurityGroupIds":{
          "shape":"SecurityGroupIdStringList",
          "locationName":"SecurityGroupId"
        },
        "UserData":{"shape":"String"},
        "InstanceType":{"shape":"InstanceType"},
        "Placement":{"shape":"Placement"},
        "KernelId":{"shape":"String"},
        "RamdiskId":{"shape":"String"},
        "BlockDeviceMappings":{
          "shape":"BlockDeviceMappingRequestList",
          "locationName":"BlockDeviceMapping"
        },
        "Monitoring":{"shape":"RunInstancesMonitoringEnabled"},
        "SubnetId":{"shape":"String"},
        "DisableApiTermination":{
          "shape":"Boolean",
          "locationName":"disableApiTermination"
        },
        "InstanceInitiatedShutdownBehavior":{
          "shape":"ShutdownBehavior",
          "locationName":"instanceInitiatedShutdownBehavior"
        },
        "PrivateIpAddress":{
          "shape":"String",
          "locationName":"privateIpAddress"
        },
        "ClientToken":{
          "shape":"String",
          "locationName":"clientToken"
        },
        "AdditionalInfo":{
          "shape":"String",
          "locationName":"additionalInfo"
        },
        "NetworkInterfaces":{
          "shape":"InstanceNetworkInterfaceSpecificationList",
          "locationName":"networkInterface"
        },
        "IamInstanceProfile":{
          "shape":"IamInstanceProfileSpecification",
          "locationName":"iamInstanceProfile"
        },
        "EbsOptimized":{
          "shape":"Boolean",
          "locationName":"ebsOptimized"
        }
      }
    },
    "S3Storage":{
      "type":"structure",
      "members":{
        "Bucket":{
          "shape":"String",
          "locationName":"bucket"
        },
        "Prefix":{
          "shape":"String",
          "locationName":"prefix"
        },
        "AWSAccessKeyId":{"shape":"String"},
        "UploadPolicy":{
          "shape":"Blob",
          "locationName":"uploadPolicy"
        },
        "UploadPolicySignature":{
          "shape":"String",
          "locationName":"uploadPolicySignature"
        }
      }
    },
    "SecurityGroup":{
      "type":"structure",
      "members":{
        "OwnerId":{
          "shape":"String",
          "locationName":"ownerId"
        },
        "GroupName":{
          "shape":"String",
          "locationName":"groupName"
        },
        "GroupId":{
          "shape":"String",
          "locationName":"groupId"
        },
        "Description":{
          "shape":"String",
          "locationName":"groupDescription"
        },
        "IpPermissions":{
          "shape":"IpPermissionList",
          "locationName":"ipPermissions"
        },
        "IpPermissionsEgress":{
          "shape":"IpPermissionList",
          "locationName":"ipPermissionsEgress"
        },
        "VpcId":{
          "shape":"String",
          "locationName":"vpcId"
        },
        "Tags":{
          "shape":"TagList",
          "locationName":"tagSet"
        }
      }
    },
    "SecurityGroupIdStringList":{
      "type":"list",
      "member":{
        "shape":"String",
        "locationName":"SecurityGroupId"
      }
    },
    "SecurityGroupList":{
      "type":"list",
      "member":{
        "shape":"SecurityGroup",
        "locationName":"item"
      }
    },
    "SecurityGroupStringList":{
      "type":"list",
      "member":{
        "shape":"String",
        "locationName":"SecurityGroup"
      }
    },
    "ShutdownBehavior":{
      "type":"string",
      "enum":[
        "stop",
        "terminate"
      ]
    },
    "Snapshot":{
      "type":"structure",
      "members":{
        "SnapshotId":{
          "shape":"String",
          "locationName":"snapshotId"
        },
        "VolumeId":{
          "shape":"String",
          "locationName":"volumeId"
        },
        "State":{
          "shape":"SnapshotState",
          "locationName":"status"
        },
        "StartTime":{
          "shape":"DateTime",
          "locationName":"startTime"
        },
        "Progress":{
          "shape":"String",
          "locationName":"progress"
        },
        "OwnerId":{
          "shape":"String",
          "locationName":"ownerId"
        },
        "Description":{
          "shape":"String",
          "locationName":"description"
        },
        "VolumeSize":{
          "shape":"Integer",
          "locationName":"volumeSize"
        },
        "OwnerAlias":{
          "shape":"String",
          "locationName":"ownerAlias"
        },
        "Tags":{
          "shape":"TagList",
          "locationName":"tagSet"
        },
        "Encrypted":{
          "shape":"Boolean",
          "locationName":"encrypted"
        },
        "KmsKeyId":{
          "shape":"String",
          "locationName":"kmsKeyId"
        }
      }
    },
    "SnapshotAttributeName":{
      "type":"string",
      "enum":[
        "productCodes",
        "createVolumePermission"
      ]
    },
    "SnapshotIdStringList":{
      "type":"list",
      "member":{
        "shape":"String",
        "locationName":"SnapshotId"
      }
    },
    "SnapshotList":{
      "type":"list",
      "member":{
        "shape":"Snapshot",
        "locationName":"item"
      }
    },
    "SnapshotState":{
      "type":"string",
      "enum":[
        "pending",
        "completed",
        "error"
      ]
    },
    "SpotDatafeedSubscription":{
      "type":"structure",
      "members":{
        "OwnerId":{
          "shape":"String",
          "locationName":"ownerId"
        },
        "Bucket":{
          "shape":"String",
          "locationName":"bucket"
        },
        "Prefix":{
          "shape":"String",
          "locationName":"prefix"
        },
        "State":{
          "shape":"DatafeedSubscriptionState",
          "locationName":"state"
        },
        "Fault":{
          "shape":"SpotInstanceStateFault",
          "locationName":"fault"
        }
      }
    },
    "SpotInstanceRequest":{
      "type":"structure",
      "members":{
        "SpotInstanceRequestId":{
          "shape":"String",
          "locationName":"spotInstanceRequestId"
        },
        "SpotPrice":{
          "shape":"String",
          "locationName":"spotPrice"
        },
        "Type":{
          "shape":"SpotInstanceType",
          "locationName":"type"
        },
        "State":{
          "shape":"SpotInstanceState",
          "locationName":"state"
        },
        "Fault":{
          "shape":"SpotInstanceStateFault",
          "locationName":"fault"
        },
        "Status":{
          "shape":"SpotInstanceStatus",
          "locationName":"status"
        },
        "ValidFrom":{
          "shape":"DateTime",
          "locationName":"validFrom"
        },
        "ValidUntil":{
          "shape":"DateTime",
          "locationName":"validUntil"
        },
        "LaunchGroup":{
          "shape":"String",
          "locationName":"launchGroup"
        },
        "AvailabilityZoneGroup":{
          "shape":"String",
          "locationName":"availabilityZoneGroup"
        },
        "LaunchSpecification":{
          "shape":"LaunchSpecification",
          "locationName":"launchSpecification"
        },
        "InstanceId":{
          "shape":"String",
          "locationName":"instanceId"
        },
        "CreateTime":{
          "shape":"DateTime",
          "locationName":"createTime"
        },
        "ProductDescription":{
          "shape":"RIProductDescription",
          "locationName":"productDescription"
        },
        "Tags":{
          "shape":"TagList",
          "locationName":"tagSet"
        },
        "LaunchedAvailabilityZone":{
          "shape":"String",
          "locationName":"launchedAvailabilityZone"
        }
      }
    },
    "SpotInstanceRequestIdList":{
      "type":"list",
      "member":{
        "shape":"String",
        "locationName":"SpotInstanceRequestId"
      }
    },
    "SpotInstanceRequestList":{
      "type":"list",
      "member":{
        "shape":"SpotInstanceRequest",
        "locationName":"item"
      }
    },
    "SpotInstanceState":{
      "type":"string",
      "enum":[
        "open",
        "active",
        "closed",
        "cancelled",
        "failed"
      ]
    },
    "SpotInstanceStateFault":{
      "type":"structure",
      "members":{
        "Code":{
          "shape":"String",
          "locationName":"code"
        },
        "Message":{
          "shape":"String",
          "locationName":"message"
        }
      }
    },
    "SpotInstanceStatus":{
      "type":"structure",
      "members":{
        "Code":{
          "shape":"String",
          "locationName":"code"
        },
        "UpdateTime":{
          "shape":"DateTime",
          "locationName":"updateTime"
        },
        "Message":{
          "shape":"String",
          "locationName":"message"
        }
      }
    },
    "SpotInstanceType":{
      "type":"string",
      "enum":[
        "one-time",
        "persistent"
      ]
    },
    "SpotPlacement":{
      "type":"structure",
      "members":{
        "AvailabilityZone":{
          "shape":"String",
          "locationName":"availabilityZone"
        },
        "GroupName":{
          "shape":"String",
          "locationName":"groupName"
        }
      }
    },
    "SpotPrice":{
      "type":"structure",
      "members":{
        "InstanceType":{
          "shape":"InstanceType",
          "locationName":"instanceType"
        },
        "ProductDescription":{
          "shape":"RIProductDescription",
          "locationName":"productDescription"
        },
        "SpotPrice":{
          "shape":"String",
          "locationName":"spotPrice"
        },
        "Timestamp":{
          "shape":"DateTime",
          "locationName":"timestamp"
        },
        "AvailabilityZone":{
          "shape":"String",
          "locationName":"availabilityZone"
        }
      }
    },
    "SpotPriceHistoryList":{
      "type":"list",
      "member":{
        "shape":"SpotPrice",
        "locationName":"item"
      }
    },
    "StartInstancesRequest":{
      "type":"structure",
      "required":["InstanceIds"],
      "members":{
        "InstanceIds":{
          "shape":"InstanceIdStringList",
          "locationName":"InstanceId"
        },
        "AdditionalInfo":{
          "shape":"String",
          "locationName":"additionalInfo"
        },
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        }
      }
    },
    "StartInstancesResult":{
      "type":"structure",
      "members":{
        "StartingInstances":{
          "shape":"InstanceStateChangeList",
          "locationName":"instancesSet"
        }
      }
    },
    "StateReason":{
      "type":"structure",
      "members":{
        "Code":{
          "shape":"String",
          "locationName":"code"
        },
        "Message":{
          "shape":"String",
          "locationName":"message"
        }
      }
    },
    "StatusName":{
      "type":"string",
      "enum":["reachability"]
    },
    "StatusType":{
      "type":"string",
      "enum":[
        "passed",
        "failed",
        "insufficient-data"
      ]
    },
    "StopInstancesRequest":{
      "type":"structure",
      "required":["InstanceIds"],
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "InstanceIds":{
          "shape":"InstanceIdStringList",
          "locationName":"InstanceId"
        },
        "Force":{
          "shape":"Boolean",
          "locationName":"force"
        }
      }
    },
    "StopInstancesResult":{
      "type":"structure",
      "members":{
        "StoppingInstances":{
          "shape":"InstanceStateChangeList",
          "locationName":"instancesSet"
        }
      }
    },
    "Storage":{
      "type":"structure",
      "members":{
        "S3":{"shape":"S3Storage"}
      }
    },
    "String":{"type":"string"},
    "Subnet":{
      "type":"structure",
      "members":{
        "SubnetId":{
          "shape":"String",
          "locationName":"subnetId"
        },
        "State":{
          "shape":"SubnetState",
          "locationName":"state"
        },
        "VpcId":{
          "shape":"String",
          "locationName":"vpcId"
        },
        "CidrBlock":{
          "shape":"String",
          "locationName":"cidrBlock"
        },
        "AvailableIpAddressCount":{
          "shape":"Integer",
          "locationName":"availableIpAddressCount"
        },
        "AvailabilityZone":{
          "shape":"String",
          "locationName":"availabilityZone"
        },
        "DefaultForAz":{
          "shape":"Boolean",
          "locationName":"defaultForAz"
        },
        "MapPublicIpOnLaunch":{
          "shape":"Boolean",
          "locationName":"mapPublicIpOnLaunch"
        },
        "Tags":{
          "shape":"TagList",
          "locationName":"tagSet"
        }
      }
    },
    "SubnetIdStringList":{
      "type":"list",
      "member":{
        "shape":"String",
        "locationName":"SubnetId"
      }
    },
    "SubnetList":{
      "type":"list",
      "member":{
        "shape":"Subnet",
        "locationName":"item"
      }
    },
    "SubnetState":{
      "type":"string",
      "enum":[
        "pending",
        "available"
      ]
    },
    "SummaryStatus":{
      "type":"string",
      "enum":[
        "ok",
        "impaired",
        "insufficient-data",
        "not-applicable"
      ]
    },
    "Tag":{
      "type":"structure",
      "members":{
        "Key":{
          "shape":"String",
          "locationName":"key"
        },
        "Value":{
          "shape":"String",
          "locationName":"value"
        }
      }
    },
    "TagDescription":{
      "type":"structure",
      "members":{
        "ResourceId":{
          "shape":"String",
          "locationName":"resourceId"
        },
        "ResourceType":{
          "shape":"ResourceType",
          "locationName":"resourceType"
        },
        "Key":{
          "shape":"String",
          "locationName":"key"
        },
        "Value":{
          "shape":"String",
          "locationName":"value"
        }
      }
    },
    "TagDescriptionList":{
      "type":"list",
      "member":{
        "shape":"TagDescription",
        "locationName":"item"
      }
    },
    "TagList":{
      "type":"list",
      "member":{
        "shape":"Tag",
        "locationName":"item"
      }
    },
    "TelemetryStatus":{
      "type":"string",
      "enum":[
        "UP",
        "DOWN"
      ]
    },
    "Tenancy":{
      "type":"string",
      "enum":[
        "default",
        "dedicated"
      ]
    },
    "TerminateInstancesRequest":{
      "type":"structure",
      "required":["InstanceIds"],
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "InstanceIds":{
          "shape":"InstanceIdStringList",
          "locationName":"InstanceId"
        }
      }
    },
    "TerminateInstancesResult":{
      "type":"structure",
      "members":{
        "TerminatingInstances":{
          "shape":"InstanceStateChangeList",
          "locationName":"instancesSet"
        }
      }
    },
    "UnassignPrivateIpAddressesRequest":{
      "type":"structure",
      "required":[
        "NetworkInterfaceId",
        "PrivateIpAddresses"
      ],
      "members":{
        "NetworkInterfaceId":{
          "shape":"String",
          "locationName":"networkInterfaceId"
        },
        "PrivateIpAddresses":{
          "shape":"PrivateIpAddressStringList",
          "locationName":"privateIpAddress"
        }
      }
    },
    "UnmonitorInstancesRequest":{
      "type":"structure",
      "required":["InstanceIds"],
      "members":{
        "DryRun":{
          "shape":"Boolean",
          "locationName":"dryRun"
        },
        "InstanceIds":{
          "shape":"InstanceIdStringList",
          "locationName":"InstanceId"
        }
      }
    },
    "UnmonitorInstancesResult":{
      "type":"structure",
      "members":{
        "InstanceMonitorings":{
          "shape":"InstanceMonitoringList",
          "locationName":"instancesSet"
        }
      }
    },
    "UserGroupStringList":{
      "type":"list",
      "member":{
        "shape":"String",
        "locationName":"UserGroup"
      }
    },
    "UserIdGroupPair":{
      "type":"structure",
      "members":{
        "UserId":{
          "shape":"String",
          "locationName":"userId"
        },
        "GroupName":{
          "shape":"String",
          "locationName":"groupName"
        },
        "GroupId":{
          "shape":"String",
          "locationName":"groupId"
        }
      }
    },
    "UserIdGroupPairList":{
      "type":"list",
      "member":{
        "shape":"UserIdGroupPair",
        "locationName":"item"
      }
    },
    "UserIdStringList":{
      "type":"list",
      "member":{
        "shape":"String",
        "locationName":"UserId"
      }
    },
    "ValueStringList":{
      "type":"list",
      "member":{
        "shape":"String",
        "locationName":"item"
      }
    },
    "VgwTelemetry":{
      "type":"structure",
      "members":{
        "OutsideIpAddress":{
          "shape":"String",
          "locationName":"outsideIpAddress"
        },
        "Status":{
          "shape":"TelemetryStatus",
          "locationName":"status"
        },
        "LastStatusChange":{
          "shape":"DateTime",
          "locationName":"lastStatusChange"
        },
        "StatusMessage":{
          "shape":"String",
          "locationName":"statusMessage"
        },
        "AcceptedRouteCount":{
          "shape":"Integer",
          "locationName":"acceptedRouteCount"
        }
      }
    },
    "VgwTelemetryList":{
      "type":"list",
      "member":{
        "shape":"VgwTelemetry",
        "locationName":"item"
      }
    },
    "VirtualizationType":{
      "type":"string",
      "enum":[
        "hvm",
        "paravirtual"
      ]
    },
    "Volume":{
      "type":"structure",
      "members":{
        "VolumeId":{
          "shape":"String",
          "locationName":"volumeId"
        },
        "Size":{
          "shape":"Integer",
          "locationName":"size"
        },
        "SnapshotId":{
          "shape":"String",
          "locationName":"snapshotId"
        },
        "AvailabilityZone":{
          "shape":"String",
          "locationName":"availabilityZone"
        },
        "State":{
          "shape":"VolumeState",
          "locationName":"status"
        },
        "CreateTime":{
          "shape":"DateTime",
          "locationName":"createTime"
        },
        "Attachments":{
          "shape":"VolumeAttachmentList",
          "locationName":"attachmentSet"
        },
        "Tags":{
          "shape":"TagList",
          "locationName":"tagSet"
        },
        "VolumeType":{
          "shape":"VolumeType",
          "locationName":"volumeType"
        },
        "Iops":{
          "shape":"Integer",
          "locationName":"iops"
        },
        "Encrypted":{
          "shape":"Boolean",
          "locationName":"encrypted"
        },
        "KmsKeyId":{
          "shape":"String",
          "locationName":"kmsKeyId"
        }
      }
    },
    "VolumeAttachment":{
      "type":"structure",
      "members":{
        "VolumeId":{
          "shape":"String",
          "locationName":"volumeId"
        },
        "InstanceId":{
          "shape":"String",
          "locationName":"instanceId"
        },
        "Device":{
          "shape":"String",
          "locationName":"device"
        },
        "State":{
          "shape":"VolumeAttachmentState",
          "locationName":"status"
        },
        "AttachTime":{
          "shape":"DateTime",
          "locationName":"attachTime"
        },
        "DeleteOnTermination":{
          "shape":"Boolean",
          "locationName":"deleteOnTermination"
        }
      }
    },
    "VolumeAttachmentList":{
      "type":"list",
      "member":{
        "shape":"VolumeAttachment",
        "locationName":"item"
      }
    },
    "VolumeAttachmentState":{
      "type":"string",
      "enum":[
        "attaching",
        "attached",
        "detaching",
        "detached"
      ]
    },
    "VolumeAttributeName":{
      "type":"string",
      "enum":[
        "autoEnableIO",
        "productCodes"
      ]
    },
    "VolumeDetail":{
      "type":"structure",
      "required":["Size"],
      "members":{
        "Size":{
          "shape":"Long",
          "locationName":"size"
        }
      }
    },
    "VolumeIdStringList":{
      "type":"list",
      "member":{
        "shape":"String",
        "locationName":"VolumeId"
      }
    },
    "VolumeList":{
      "type":"list",
      "member":{
        "shape":"Volume",
        "locationName":"item"
      }
    },
    "VolumeState":{
      "type":"string",
      "enum":[
        "creating",
        "available",
        "in-use",
        "deleting",
        "deleted",
        "error"
      ]
    },
    "VolumeStatusAction":{
      "type":"structure",
      "members":{
        "Code":{
          "shape":"String",
          "locationName":"code"
        },
        "Description":{
          "shape":"String",
          "locationName":"description"
        },
        "EventType":{
          "shape":"String",
          "locationName":"eventType"
        },
        "EventId":{
          "shape":"String",
          "locationName":"eventId"
        }
      }
    },
    "VolumeStatusActionsList":{
      "type":"list",
      "member":{
        "shape":"VolumeStatusAction",
        "locationName":"item"
      }
    },
    "VolumeStatusDetails":{
      "type":"structure",
      "members":{
        "Name":{
          "shape":"VolumeStatusName",
          "locationName":"name"
        },
        "Status":{
          "shape":"String",
          "locationName":"status"
        }
      }
    },
    "VolumeStatusDetailsList":{
      "type":"list",
      "member":{
        "shape":"VolumeStatusDetails",
        "locationName":"item"
      }
    },
    "VolumeStatusEvent":{
      "type":"structure",
      "members":{
        "EventType":{
          "shape":"String",
          "locationName":"eventType"
        },
        "Description":{
          "shape":"String",
          "locationName":"description"
        },
        "NotBefore":{
          "shape":"DateTime",
          "locationName":"notBefore"
        },
        "NotAfter":{
          "shape":"DateTime",
          "locationName":"notAfter"
        },
        "EventId":{
          "shape":"String",
          "locationName":"eventId"
        }
      }
    },
    "VolumeStatusEventsList":{
      "type":"list",
      "member":{
        "shape":"VolumeStatusEvent",
        "locationName":"item"
      }
    },
    "VolumeStatusInfo":{
      "type":"structure",
      "members":{
        "Status":{
          "shape":"VolumeStatusInfoStatus",
          "locationName":"status"
        },
        "Details":{
          "shape":"VolumeStatusDetailsList",
          "locationName":"details"
        }
      }
    },
    "VolumeStatusInfoStatus":{
      "type":"string",
      "enum":[
        "ok",
        "impaired",
        "insufficient-data"
      ]
    },
    "VolumeStatusItem":{
      "type":"structure",
      "members":{
        "VolumeId":{
          "shape":"String",
          "locationName":"volumeId"
        },
        "AvailabilityZone":{
          "shape":"String",
          "locationName":"availabilityZone"
        },
        "VolumeStatus":{
          "shape":"VolumeStatusInfo",
          "locationName":"volumeStatus"
        },
        "Events":{
          "shape":"VolumeStatusEventsList",
          "locationName":"eventsSet"
        },
        "Actions":{
          "shape":"VolumeStatusActionsList",
          "locationName":"actionsSet"
        }
      }
    },
    "VolumeStatusList":{
      "type":"list",
      "member":{
        "shape":"VolumeStatusItem",
        "locationName":"item"
      }
    },
    "VolumeStatusName":{
      "type":"string",
      "enum":[
        "io-enabled",
        "io-performance"
      ]
    },
    "VolumeType":{
      "type":"string",
      "enum":[
        "standard",
        "io1",
        "gp2"
      ]
    },
    "Vpc":{
      "type":"structure",
      "members":{
        "VpcId":{
          "shape":"String",
          "locationName":"vpcId"
        },
        "State":{
          "shape":"VpcState",
          "locationName":"state"
        },
        "CidrBlock":{
          "shape":"String",
          "locationName":"cidrBlock"
        },
        "DhcpOptionsId":{
          "shape":"String",
          "locationName":"dhcpOptionsId"
        },
        "Tags":{
          "shape":"TagList",
          "locationName":"tagSet"
        },
        "InstanceTenancy":{
          "shape":"Tenancy",
          "locationName":"instanceTenancy"
        },
        "IsDefault":{
          "shape":"Boolean",
          "locationName":"isDefault"
        }
      }
    },
    "VpcAttachment":{
      "type":"structure",
      "members":{
        "VpcId":{
          "shape":"String",
          "locationName":"vpcId"
        },
        "State":{
          "shape":"AttachmentStatus",
          "locationName":"state"
        }
      }
    },
    "VpcAttachmentList":{
      "type":"list",
      "member":{
        "shape":"VpcAttachment",
        "locationName":"item"
      }
    },
    "VpcAttributeName":{
      "type":"string",
      "enum":[
        "enableDnsSupport",
        "enableDnsHostnames"
      ]
    },
    "VpcIdStringList":{
      "type":"list",
      "member":{
        "shape":"String",
        "locationName":"VpcId"
      }
    },
    "VpcList":{
      "type":"list",
      "member":{
        "shape":"Vpc",
        "locationName":"item"
      }
    },
    "VpcPeeringConnection":{
      "type":"structure",
      "members":{
        "AccepterVpcInfo":{
          "shape":"VpcPeeringConnectionVpcInfo",
          "locationName":"accepterVpcInfo"
        },
        "ExpirationTime":{
          "shape":"DateTime",
          "locationName":"expirationTime"
        },
        "RequesterVpcInfo":{
          "shape":"VpcPeeringConnectionVpcInfo",
          "locationName":"requesterVpcInfo"
        },
        "Status":{
          "shape":"VpcPeeringConnectionStateReason",
          "locationName":"status"
        },
        "Tags":{
          "shape":"TagList",
          "locationName":"tagSet"
        },
        "VpcPeeringConnectionId":{
          "shape":"String",
          "locationName":"vpcPeeringConnectionId"
        }
      }
    },
    "VpcPeeringConnectionList":{
      "type":"list",
      "member":{
        "shape":"VpcPeeringConnection",
        "locationName":"item"
      }
    },
    "VpcPeeringConnectionStateReason":{
      "type":"structure",
      "members":{
        "Code":{
          "shape":"String",
          "locationName":"code"
        },
        "Message":{
          "shape":"String",
          "locationName":"message"
        }
      }
    },
    "VpcPeeringConnectionVpcInfo":{
      "type":"structure",
      "members":{
        "CidrBlock":{
          "shape":"String",
          "locationName":"cidrBlock"
        },
        "OwnerId":{
          "shape":"String",
          "locationName":"ownerId"
        },
        "VpcId":{
          "shape":"String",
          "locationName":"vpcId"
        }
      }
    },
    "VpcState":{
      "type":"string",
      "enum":[
        "pending",
        "available"
      ]
    },
    "VpnConnection":{
      "type":"structure",
      "members":{
        "VpnConnectionId":{
          "shape":"String",
          "locationName":"vpnConnectionId"
        },
        "State":{
          "shape":"VpnState",
          "locationName":"state"
        },
        "CustomerGatewayConfiguration":{
          "shape":"String",
          "locationName":"customerGatewayConfiguration"
        },
        "Type":{
          "shape":"GatewayType",
          "locationName":"type"
        },
        "CustomerGatewayId":{
          "shape":"String",
          "locationName":"customerGatewayId"
        },
        "VpnGatewayId":{
          "shape":"String",
          "locationName":"vpnGatewayId"
        },
        "Tags":{
          "shape":"TagList",
          "locationName":"tagSet"
        },
        "VgwTelemetry":{
          "shape":"VgwTelemetryList",
          "locationName":"vgwTelemetry"
        },
        "Options":{
          "shape":"VpnConnectionOptions",
          "locationName":"options"
        },
        "Routes":{
          "shape":"VpnStaticRouteList",
          "locationName":"routes"
        }
      }
    },
    "VpnConnectionIdStringList":{
      "type":"list",
      "member":{
        "shape":"String",
        "locationName":"VpnConnectionId"
      }
    },
    "VpnConnectionList":{
      "type":"list",
      "member":{
        "shape":"VpnConnection",
        "locationName":"item"
      }
    },
    "VpnConnectionOptions":{
      "type":"structure",
      "members":{
        "StaticRoutesOnly":{
          "shape":"Boolean",
          "locationName":"staticRoutesOnly"
        }
      }
    },
    "VpnConnectionOptionsSpecification":{
      "type":"structure",
      "members":{
        "StaticRoutesOnly":{
          "shape":"Boolean",
          "locationName":"staticRoutesOnly"
        }
      }
    },
    "VpnGateway":{
      "type":"structure",
      "members":{
        "VpnGatewayId":{
          "shape":"String",
          "locationName":"vpnGatewayId"
        },
        "State":{
          "shape":"VpnState",
          "locationName":"state"
        },
        "Type":{
          "shape":"GatewayType",
          "locationName":"type"
        },
        "AvailabilityZone":{
          "shape":"String",
          "locationName":"availabilityZone"
        },
        "VpcAttachments":{
          "shape":"VpcAttachmentList",
          "locationName":"attachments"
        },
        "Tags":{
          "shape":"TagList",
          "locationName":"tagSet"
        }
      }
    },
    "VpnGatewayIdStringList":{
      "type":"list",
      "member":{
        "shape":"String",
        "locationName":"VpnGatewayId"
      }
    },
    "VpnGatewayList":{
      "type":"list",
      "member":{
        "shape":"VpnGateway",
        "locationName":"item"
      }
    },
    "VpnState":{
      "type":"string",
      "enum":[
        "pending",
        "available",
        "deleting",
        "deleted"
      ]
    },
    "VpnStaticRoute":{
      "type":"structure",
      "members":{
        "DestinationCidrBlock":{
          "shape":"String",
          "locationName":"destinationCidrBlock"
        },
        "Source":{
          "shape":"VpnStaticRouteSource",
          "locationName":"source"
        },
        "State":{
          "shape":"VpnState",
          "locationName":"state"
        }
      }
    },
    "VpnStaticRouteList":{
      "type":"list",
      "member":{
        "shape":"VpnStaticRoute",
        "locationName":"item"
      }
    },
    "VpnStaticRouteSource":{
      "type":"string",
      "enum":["Static"]
    },
    "ZoneNameStringList":{
      "type":"list",
      "member":{
        "shape":"String",
        "locationName":"ZoneName"
      }
    },
    "NewDhcpConfigurationList":{
      "type":"list",
      "member":{
        "shape":"NewDhcpConfiguration",
        "locationName":"item"
      }
    },
    "NewDhcpConfiguration":{
      "type":"structure",
      "members":{
        "Key":{
          "shape":"String",
          "locationName":"key"
        },
        "Values":{
          "shape":"ValueStringList",
          "locationName":"Value"
        }
      }
    },
    "DhcpConfigurationValueList":{
      "type":"list",
      "member":{
        "shape":"AttributeValue",
        "locationName":"item"
      }
    },
    "Blob":{"type":"blob"},
    "BlobAttributeValue":{
      "type":"structure",
      "members":{
        "Value":{
          "shape":"Blob",
          "locationName":"value"
        }
      }
    },
    "RequestSpotLaunchSpecification":{
      "type":"structure",
      "members":{
        "ImageId":{
          "shape":"String",
          "locationName":"imageId"
        },
        "KeyName":{
          "shape":"String",
          "locationName":"keyName"
        },
        "SecurityGroups":{
          "shape":"ValueStringList",
          "locationName":"SecurityGroup"
        },
        "UserData":{
          "shape":"String",
          "locationName":"userData"
        },
        "AddressingType":{
          "shape":"String",
          "locationName":"addressingType"
        },
        "InstanceType":{
          "shape":"InstanceType",
          "locationName":"instanceType"
        },
        "Placement":{
          "shape":"SpotPlacement",
          "locationName":"placement"
        },
        "KernelId":{
          "shape":"String",
          "locationName":"kernelId"
        },
        "RamdiskId":{
          "shape":"String",
          "locationName":"ramdiskId"
        },
        "BlockDeviceMappings":{
          "shape":"BlockDeviceMappingList",
          "locationName":"blockDeviceMapping"
        },
        "SubnetId":{
          "shape":"String",
          "locationName":"subnetId"
        },
        "NetworkInterfaces":{
          "shape":"InstanceNetworkInterfaceSpecificationList",
          "locationName":"NetworkInterface"
        },
        "IamInstanceProfile":{
          "shape":"IamInstanceProfileSpecification",
          "locationName":"iamInstanceProfile"
        },
        "EbsOptimized":{
          "shape":"Boolean",
          "locationName":"ebsOptimized"
        },
        "Monitoring":{
          "shape":"RunInstancesMonitoringEnabled",
          "locationName":"monitoring"
        },
        "SecurityGroupIds":{
          "shape":"ValueStringList",
          "locationName":"SecurityGroupId"
        }
      }
    }
  }
}
,
"ElastiCache":
{
  "metadata":{
    "apiVersion":"2014-09-30",
    "endpointPrefix":"elasticache",
    "serviceFullName":"Amazon ElastiCache",
    "signatureVersion":"v4",
    "xmlNamespace":"http://elasticache.amazonaws.com/doc/2014-09-30/",
    "protocol":"query"
  },
  "operations":{
    "AuthorizeCacheSecurityGroupIngress":{
      "name":"AuthorizeCacheSecurityGroupIngress",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"AuthorizeCacheSecurityGroupIngressMessage"},
      "output":{
        "shape":"AuthorizeCacheSecurityGroupIngressResult",
        "wrapper":true,
        "resultWrapper":"AuthorizeCacheSecurityGroupIngressResult"
      },
      "errors":[
        {
          "shape":"CacheSecurityGroupNotFoundFault",
          "error":{
            "code":"CacheSecurityGroupNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidCacheSecurityGroupStateFault",
          "error":{
            "code":"InvalidCacheSecurityGroupState",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"AuthorizationAlreadyExistsFault",
          "error":{
            "code":"AuthorizationAlreadyExists",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidParameterValueException",
          "error":{
            "code":"InvalidParameterValue",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidParameterCombinationException",
          "error":{
            "code":"InvalidParameterCombination",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "CopySnapshot":{
      "name":"CopySnapshot",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CopySnapshotMessage"},
      "output":{
        "shape":"CopySnapshotResult",
        "wrapper":true,
        "resultWrapper":"CopySnapshotResult"
      },
      "errors":[
        {
          "shape":"SnapshotAlreadyExistsFault",
          "error":{
            "code":"SnapshotAlreadyExistsFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"SnapshotNotFoundFault",
          "error":{
            "code":"SnapshotNotFoundFault",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"SnapshotQuotaExceededFault",
          "error":{
            "code":"SnapshotQuotaExceededFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidSnapshotStateFault",
          "error":{
            "code":"InvalidSnapshotState",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidParameterValueException",
          "error":{
            "code":"InvalidParameterValue",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidParameterCombinationException",
          "error":{
            "code":"InvalidParameterCombination",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "CreateCacheCluster":{
      "name":"CreateCacheCluster",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateCacheClusterMessage"},
      "output":{
        "shape":"CreateCacheClusterResult",
        "wrapper":true,
        "resultWrapper":"CreateCacheClusterResult"
      },
      "errors":[
        {
          "shape":"ReplicationGroupNotFoundFault",
          "error":{
            "code":"ReplicationGroupNotFoundFault",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidReplicationGroupStateFault",
          "error":{
            "code":"InvalidReplicationGroupState",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"CacheClusterAlreadyExistsFault",
          "error":{
            "code":"CacheClusterAlreadyExists",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InsufficientCacheClusterCapacityFault",
          "error":{
            "code":"InsufficientCacheClusterCapacity",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"CacheSecurityGroupNotFoundFault",
          "error":{
            "code":"CacheSecurityGroupNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"CacheSubnetGroupNotFoundFault",
          "error":{
            "code":"CacheSubnetGroupNotFoundFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"ClusterQuotaForCustomerExceededFault",
          "error":{
            "code":"ClusterQuotaForCustomerExceeded",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"NodeQuotaForClusterExceededFault",
          "error":{
            "code":"NodeQuotaForClusterExceeded",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"NodeQuotaForCustomerExceededFault",
          "error":{
            "code":"NodeQuotaForCustomerExceeded",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"CacheParameterGroupNotFoundFault",
          "error":{
            "code":"CacheParameterGroupNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidVPCNetworkStateFault",
          "error":{
            "code":"InvalidVPCNetworkStateFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidParameterValueException",
          "error":{
            "code":"InvalidParameterValue",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidParameterCombinationException",
          "error":{
            "code":"InvalidParameterCombination",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "CreateCacheParameterGroup":{
      "name":"CreateCacheParameterGroup",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateCacheParameterGroupMessage"},
      "output":{
        "shape":"CreateCacheParameterGroupResult",
        "wrapper":true,
        "resultWrapper":"CreateCacheParameterGroupResult"
      },
      "errors":[
        {
          "shape":"CacheParameterGroupQuotaExceededFault",
          "error":{
            "code":"CacheParameterGroupQuotaExceeded",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"CacheParameterGroupAlreadyExistsFault",
          "error":{
            "code":"CacheParameterGroupAlreadyExists",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidCacheParameterGroupStateFault",
          "error":{
            "code":"InvalidCacheParameterGroupState",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidParameterValueException",
          "error":{
            "code":"InvalidParameterValue",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidParameterCombinationException",
          "error":{
            "code":"InvalidParameterCombination",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "CreateCacheSecurityGroup":{
      "name":"CreateCacheSecurityGroup",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateCacheSecurityGroupMessage"},
      "output":{
        "shape":"CreateCacheSecurityGroupResult",
        "wrapper":true,
        "resultWrapper":"CreateCacheSecurityGroupResult"
      },
      "errors":[
        {
          "shape":"CacheSecurityGroupAlreadyExistsFault",
          "error":{
            "code":"CacheSecurityGroupAlreadyExists",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"CacheSecurityGroupQuotaExceededFault",
          "error":{
            "code":"QuotaExceeded.CacheSecurityGroup",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidParameterValueException",
          "error":{
            "code":"InvalidParameterValue",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidParameterCombinationException",
          "error":{
            "code":"InvalidParameterCombination",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "CreateCacheSubnetGroup":{
      "name":"CreateCacheSubnetGroup",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateCacheSubnetGroupMessage"},
      "output":{
        "shape":"CreateCacheSubnetGroupResult",
        "wrapper":true,
        "resultWrapper":"CreateCacheSubnetGroupResult"
      },
      "errors":[
        {
          "shape":"CacheSubnetGroupAlreadyExistsFault",
          "error":{
            "code":"CacheSubnetGroupAlreadyExists",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"CacheSubnetGroupQuotaExceededFault",
          "error":{
            "code":"CacheSubnetGroupQuotaExceeded",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"CacheSubnetQuotaExceededFault",
          "error":{
            "code":"CacheSubnetQuotaExceededFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidSubnet",
          "error":{
            "code":"InvalidSubnet",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "CreateReplicationGroup":{
      "name":"CreateReplicationGroup",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateReplicationGroupMessage"},
      "output":{
        "shape":"CreateReplicationGroupResult",
        "wrapper":true,
        "resultWrapper":"CreateReplicationGroupResult"
      },
      "errors":[
        {
          "shape":"CacheClusterNotFoundFault",
          "error":{
            "code":"CacheClusterNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidCacheClusterStateFault",
          "error":{
            "code":"InvalidCacheClusterState",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"ReplicationGroupAlreadyExistsFault",
          "error":{
            "code":"ReplicationGroupAlreadyExists",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InsufficientCacheClusterCapacityFault",
          "error":{
            "code":"InsufficientCacheClusterCapacity",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"CacheSecurityGroupNotFoundFault",
          "error":{
            "code":"CacheSecurityGroupNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"CacheSubnetGroupNotFoundFault",
          "error":{
            "code":"CacheSubnetGroupNotFoundFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"ClusterQuotaForCustomerExceededFault",
          "error":{
            "code":"ClusterQuotaForCustomerExceeded",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"NodeQuotaForClusterExceededFault",
          "error":{
            "code":"NodeQuotaForClusterExceeded",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"NodeQuotaForCustomerExceededFault",
          "error":{
            "code":"NodeQuotaForCustomerExceeded",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"CacheParameterGroupNotFoundFault",
          "error":{
            "code":"CacheParameterGroupNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidVPCNetworkStateFault",
          "error":{
            "code":"InvalidVPCNetworkStateFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidParameterValueException",
          "error":{
            "code":"InvalidParameterValue",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidParameterCombinationException",
          "error":{
            "code":"InvalidParameterCombination",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "CreateSnapshot":{
      "name":"CreateSnapshot",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateSnapshotMessage"},
      "output":{
        "shape":"CreateSnapshotResult",
        "wrapper":true,
        "resultWrapper":"CreateSnapshotResult"
      },
      "errors":[
        {
          "shape":"SnapshotAlreadyExistsFault",
          "error":{
            "code":"SnapshotAlreadyExistsFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"CacheClusterNotFoundFault",
          "error":{
            "code":"CacheClusterNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidCacheClusterStateFault",
          "error":{
            "code":"InvalidCacheClusterState",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"SnapshotQuotaExceededFault",
          "error":{
            "code":"SnapshotQuotaExceededFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"SnapshotFeatureNotSupportedFault",
          "error":{
            "code":"SnapshotFeatureNotSupportedFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidParameterCombinationException",
          "error":{
            "code":"InvalidParameterCombination",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidParameterValueException",
          "error":{
            "code":"InvalidParameterValue",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DeleteCacheCluster":{
      "name":"DeleteCacheCluster",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteCacheClusterMessage"},
      "output":{
        "shape":"DeleteCacheClusterResult",
        "wrapper":true,
        "resultWrapper":"DeleteCacheClusterResult"
      },
      "errors":[
        {
          "shape":"CacheClusterNotFoundFault",
          "error":{
            "code":"CacheClusterNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidCacheClusterStateFault",
          "error":{
            "code":"InvalidCacheClusterState",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"SnapshotAlreadyExistsFault",
          "error":{
            "code":"SnapshotAlreadyExistsFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"SnapshotFeatureNotSupportedFault",
          "error":{
            "code":"SnapshotFeatureNotSupportedFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"SnapshotQuotaExceededFault",
          "error":{
            "code":"SnapshotQuotaExceededFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidParameterValueException",
          "error":{
            "code":"InvalidParameterValue",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidParameterCombinationException",
          "error":{
            "code":"InvalidParameterCombination",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DeleteCacheParameterGroup":{
      "name":"DeleteCacheParameterGroup",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteCacheParameterGroupMessage"},
      "errors":[
        {
          "shape":"InvalidCacheParameterGroupStateFault",
          "error":{
            "code":"InvalidCacheParameterGroupState",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"CacheParameterGroupNotFoundFault",
          "error":{
            "code":"CacheParameterGroupNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidParameterValueException",
          "error":{
            "code":"InvalidParameterValue",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidParameterCombinationException",
          "error":{
            "code":"InvalidParameterCombination",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DeleteCacheSecurityGroup":{
      "name":"DeleteCacheSecurityGroup",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteCacheSecurityGroupMessage"},
      "errors":[
        {
          "shape":"InvalidCacheSecurityGroupStateFault",
          "error":{
            "code":"InvalidCacheSecurityGroupState",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"CacheSecurityGroupNotFoundFault",
          "error":{
            "code":"CacheSecurityGroupNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidParameterValueException",
          "error":{
            "code":"InvalidParameterValue",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidParameterCombinationException",
          "error":{
            "code":"InvalidParameterCombination",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DeleteCacheSubnetGroup":{
      "name":"DeleteCacheSubnetGroup",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteCacheSubnetGroupMessage"},
      "errors":[
        {
          "shape":"CacheSubnetGroupInUse",
          "error":{
            "code":"CacheSubnetGroupInUse",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"CacheSubnetGroupNotFoundFault",
          "error":{
            "code":"CacheSubnetGroupNotFoundFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DeleteReplicationGroup":{
      "name":"DeleteReplicationGroup",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteReplicationGroupMessage"},
      "output":{
        "shape":"DeleteReplicationGroupResult",
        "wrapper":true,
        "resultWrapper":"DeleteReplicationGroupResult"
      },
      "errors":[
        {
          "shape":"ReplicationGroupNotFoundFault",
          "error":{
            "code":"ReplicationGroupNotFoundFault",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidReplicationGroupStateFault",
          "error":{
            "code":"InvalidReplicationGroupState",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"SnapshotAlreadyExistsFault",
          "error":{
            "code":"SnapshotAlreadyExistsFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"SnapshotFeatureNotSupportedFault",
          "error":{
            "code":"SnapshotFeatureNotSupportedFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"SnapshotQuotaExceededFault",
          "error":{
            "code":"SnapshotQuotaExceededFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidParameterValueException",
          "error":{
            "code":"InvalidParameterValue",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidParameterCombinationException",
          "error":{
            "code":"InvalidParameterCombination",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DeleteSnapshot":{
      "name":"DeleteSnapshot",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteSnapshotMessage"},
      "output":{
        "shape":"DeleteSnapshotResult",
        "wrapper":true,
        "resultWrapper":"DeleteSnapshotResult"
      },
      "errors":[
        {
          "shape":"SnapshotNotFoundFault",
          "error":{
            "code":"SnapshotNotFoundFault",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidSnapshotStateFault",
          "error":{
            "code":"InvalidSnapshotState",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidParameterValueException",
          "error":{
            "code":"InvalidParameterValue",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidParameterCombinationException",
          "error":{
            "code":"InvalidParameterCombination",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DescribeCacheClusters":{
      "name":"DescribeCacheClusters",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeCacheClustersMessage"},
      "output":{
        "shape":"CacheClusterMessage",
        "resultWrapper":"DescribeCacheClustersResult"
      },
      "errors":[
        {
          "shape":"CacheClusterNotFoundFault",
          "error":{
            "code":"CacheClusterNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidParameterValueException",
          "error":{
            "code":"InvalidParameterValue",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidParameterCombinationException",
          "error":{
            "code":"InvalidParameterCombination",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DescribeCacheEngineVersions":{
      "name":"DescribeCacheEngineVersions",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeCacheEngineVersionsMessage"},
      "output":{
        "shape":"CacheEngineVersionMessage",
        "resultWrapper":"DescribeCacheEngineVersionsResult"
      }
    },
    "DescribeCacheParameterGroups":{
      "name":"DescribeCacheParameterGroups",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeCacheParameterGroupsMessage"},
      "output":{
        "shape":"CacheParameterGroupsMessage",
        "resultWrapper":"DescribeCacheParameterGroupsResult"
      },
      "errors":[
        {
          "shape":"CacheParameterGroupNotFoundFault",
          "error":{
            "code":"CacheParameterGroupNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidParameterValueException",
          "error":{
            "code":"InvalidParameterValue",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidParameterCombinationException",
          "error":{
            "code":"InvalidParameterCombination",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DescribeCacheParameters":{
      "name":"DescribeCacheParameters",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeCacheParametersMessage"},
      "output":{
        "shape":"CacheParameterGroupDetails",
        "resultWrapper":"DescribeCacheParametersResult"
      },
      "errors":[
        {
          "shape":"CacheParameterGroupNotFoundFault",
          "error":{
            "code":"CacheParameterGroupNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidParameterValueException",
          "error":{
            "code":"InvalidParameterValue",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidParameterCombinationException",
          "error":{
            "code":"InvalidParameterCombination",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DescribeCacheSecurityGroups":{
      "name":"DescribeCacheSecurityGroups",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeCacheSecurityGroupsMessage"},
      "output":{
        "shape":"CacheSecurityGroupMessage",
        "resultWrapper":"DescribeCacheSecurityGroupsResult"
      },
      "errors":[
        {
          "shape":"CacheSecurityGroupNotFoundFault",
          "error":{
            "code":"CacheSecurityGroupNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidParameterValueException",
          "error":{
            "code":"InvalidParameterValue",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidParameterCombinationException",
          "error":{
            "code":"InvalidParameterCombination",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DescribeCacheSubnetGroups":{
      "name":"DescribeCacheSubnetGroups",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeCacheSubnetGroupsMessage"},
      "output":{
        "shape":"CacheSubnetGroupMessage",
        "resultWrapper":"DescribeCacheSubnetGroupsResult"
      },
      "errors":[
        {
          "shape":"CacheSubnetGroupNotFoundFault",
          "error":{
            "code":"CacheSubnetGroupNotFoundFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DescribeEngineDefaultParameters":{
      "name":"DescribeEngineDefaultParameters",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeEngineDefaultParametersMessage"},
      "output":{
        "shape":"DescribeEngineDefaultParametersResult",
        "wrapper":true,
        "resultWrapper":"DescribeEngineDefaultParametersResult"
      },
      "errors":[
        {
          "shape":"InvalidParameterValueException",
          "error":{
            "code":"InvalidParameterValue",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidParameterCombinationException",
          "error":{
            "code":"InvalidParameterCombination",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DescribeEvents":{
      "name":"DescribeEvents",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeEventsMessage"},
      "output":{
        "shape":"EventsMessage",
        "resultWrapper":"DescribeEventsResult"
      },
      "errors":[
        {
          "shape":"InvalidParameterValueException",
          "error":{
            "code":"InvalidParameterValue",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidParameterCombinationException",
          "error":{
            "code":"InvalidParameterCombination",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DescribeReplicationGroups":{
      "name":"DescribeReplicationGroups",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeReplicationGroupsMessage"},
      "output":{
        "shape":"ReplicationGroupMessage",
        "resultWrapper":"DescribeReplicationGroupsResult"
      },
      "errors":[
        {
          "shape":"ReplicationGroupNotFoundFault",
          "error":{
            "code":"ReplicationGroupNotFoundFault",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidParameterValueException",
          "error":{
            "code":"InvalidParameterValue",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidParameterCombinationException",
          "error":{
            "code":"InvalidParameterCombination",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DescribeReservedCacheNodes":{
      "name":"DescribeReservedCacheNodes",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeReservedCacheNodesMessage"},
      "output":{
        "shape":"ReservedCacheNodeMessage",
        "resultWrapper":"DescribeReservedCacheNodesResult"
      },
      "errors":[
        {
          "shape":"ReservedCacheNodeNotFoundFault",
          "error":{
            "code":"ReservedCacheNodeNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidParameterValueException",
          "error":{
            "code":"InvalidParameterValue",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidParameterCombinationException",
          "error":{
            "code":"InvalidParameterCombination",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DescribeReservedCacheNodesOfferings":{
      "name":"DescribeReservedCacheNodesOfferings",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeReservedCacheNodesOfferingsMessage"},
      "output":{
        "shape":"ReservedCacheNodesOfferingMessage",
        "resultWrapper":"DescribeReservedCacheNodesOfferingsResult"
      },
      "errors":[
        {
          "shape":"ReservedCacheNodesOfferingNotFoundFault",
          "error":{
            "code":"ReservedCacheNodesOfferingNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidParameterValueException",
          "error":{
            "code":"InvalidParameterValue",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidParameterCombinationException",
          "error":{
            "code":"InvalidParameterCombination",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DescribeSnapshots":{
      "name":"DescribeSnapshots",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeSnapshotsMessage"},
      "output":{
        "shape":"DescribeSnapshotsListMessage",
        "resultWrapper":"DescribeSnapshotsResult"
      },
      "errors":[
        {
          "shape":"CacheClusterNotFoundFault",
          "error":{
            "code":"CacheClusterNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"SnapshotNotFoundFault",
          "error":{
            "code":"SnapshotNotFoundFault",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidParameterValueException",
          "error":{
            "code":"InvalidParameterValue",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidParameterCombinationException",
          "error":{
            "code":"InvalidParameterCombination",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "ModifyCacheCluster":{
      "name":"ModifyCacheCluster",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ModifyCacheClusterMessage"},
      "output":{
        "shape":"ModifyCacheClusterResult",
        "wrapper":true,
        "resultWrapper":"ModifyCacheClusterResult"
      },
      "errors":[
        {
          "shape":"InvalidCacheClusterStateFault",
          "error":{
            "code":"InvalidCacheClusterState",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidCacheSecurityGroupStateFault",
          "error":{
            "code":"InvalidCacheSecurityGroupState",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InsufficientCacheClusterCapacityFault",
          "error":{
            "code":"InsufficientCacheClusterCapacity",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"CacheClusterNotFoundFault",
          "error":{
            "code":"CacheClusterNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"NodeQuotaForClusterExceededFault",
          "error":{
            "code":"NodeQuotaForClusterExceeded",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"NodeQuotaForCustomerExceededFault",
          "error":{
            "code":"NodeQuotaForCustomerExceeded",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"CacheSecurityGroupNotFoundFault",
          "error":{
            "code":"CacheSecurityGroupNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"CacheParameterGroupNotFoundFault",
          "error":{
            "code":"CacheParameterGroupNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidVPCNetworkStateFault",
          "error":{
            "code":"InvalidVPCNetworkStateFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidParameterValueException",
          "error":{
            "code":"InvalidParameterValue",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidParameterCombinationException",
          "error":{
            "code":"InvalidParameterCombination",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "ModifyCacheParameterGroup":{
      "name":"ModifyCacheParameterGroup",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ModifyCacheParameterGroupMessage"},
      "output":{
        "shape":"CacheParameterGroupNameMessage",
        "resultWrapper":"ModifyCacheParameterGroupResult"
      },
      "errors":[
        {
          "shape":"CacheParameterGroupNotFoundFault",
          "error":{
            "code":"CacheParameterGroupNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidCacheParameterGroupStateFault",
          "error":{
            "code":"InvalidCacheParameterGroupState",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidParameterValueException",
          "error":{
            "code":"InvalidParameterValue",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidParameterCombinationException",
          "error":{
            "code":"InvalidParameterCombination",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "ModifyCacheSubnetGroup":{
      "name":"ModifyCacheSubnetGroup",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ModifyCacheSubnetGroupMessage"},
      "output":{
        "shape":"ModifyCacheSubnetGroupResult",
        "wrapper":true,
        "resultWrapper":"ModifyCacheSubnetGroupResult"
      },
      "errors":[
        {
          "shape":"CacheSubnetGroupNotFoundFault",
          "error":{
            "code":"CacheSubnetGroupNotFoundFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"CacheSubnetQuotaExceededFault",
          "error":{
            "code":"CacheSubnetQuotaExceededFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"SubnetInUse",
          "error":{
            "code":"SubnetInUse",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidSubnet",
          "error":{
            "code":"InvalidSubnet",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "ModifyReplicationGroup":{
      "name":"ModifyReplicationGroup",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ModifyReplicationGroupMessage"},
      "output":{
        "shape":"ModifyReplicationGroupResult",
        "wrapper":true,
        "resultWrapper":"ModifyReplicationGroupResult"
      },
      "errors":[
        {
          "shape":"ReplicationGroupNotFoundFault",
          "error":{
            "code":"ReplicationGroupNotFoundFault",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidReplicationGroupStateFault",
          "error":{
            "code":"InvalidReplicationGroupState",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidCacheClusterStateFault",
          "error":{
            "code":"InvalidCacheClusterState",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidCacheSecurityGroupStateFault",
          "error":{
            "code":"InvalidCacheSecurityGroupState",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InsufficientCacheClusterCapacityFault",
          "error":{
            "code":"InsufficientCacheClusterCapacity",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"CacheClusterNotFoundFault",
          "error":{
            "code":"CacheClusterNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"NodeQuotaForClusterExceededFault",
          "error":{
            "code":"NodeQuotaForClusterExceeded",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"NodeQuotaForCustomerExceededFault",
          "error":{
            "code":"NodeQuotaForCustomerExceeded",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"CacheSecurityGroupNotFoundFault",
          "error":{
            "code":"CacheSecurityGroupNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"CacheParameterGroupNotFoundFault",
          "error":{
            "code":"CacheParameterGroupNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidVPCNetworkStateFault",
          "error":{
            "code":"InvalidVPCNetworkStateFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidParameterValueException",
          "error":{
            "code":"InvalidParameterValue",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidParameterCombinationException",
          "error":{
            "code":"InvalidParameterCombination",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "PurchaseReservedCacheNodesOffering":{
      "name":"PurchaseReservedCacheNodesOffering",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"PurchaseReservedCacheNodesOfferingMessage"},
      "output":{
        "shape":"PurchaseReservedCacheNodesOfferingResult",
        "wrapper":true,
        "resultWrapper":"PurchaseReservedCacheNodesOfferingResult"
      },
      "errors":[
        {
          "shape":"ReservedCacheNodesOfferingNotFoundFault",
          "error":{
            "code":"ReservedCacheNodesOfferingNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"ReservedCacheNodeAlreadyExistsFault",
          "error":{
            "code":"ReservedCacheNodeAlreadyExists",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"ReservedCacheNodeQuotaExceededFault",
          "error":{
            "code":"ReservedCacheNodeQuotaExceeded",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidParameterValueException",
          "error":{
            "code":"InvalidParameterValue",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidParameterCombinationException",
          "error":{
            "code":"InvalidParameterCombination",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "RebootCacheCluster":{
      "name":"RebootCacheCluster",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"RebootCacheClusterMessage"},
      "output":{
        "shape":"RebootCacheClusterResult",
        "wrapper":true,
        "resultWrapper":"RebootCacheClusterResult"
      },
      "errors":[
        {
          "shape":"InvalidCacheClusterStateFault",
          "error":{
            "code":"InvalidCacheClusterState",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"CacheClusterNotFoundFault",
          "error":{
            "code":"CacheClusterNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "ResetCacheParameterGroup":{
      "name":"ResetCacheParameterGroup",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ResetCacheParameterGroupMessage"},
      "output":{
        "shape":"CacheParameterGroupNameMessage",
        "resultWrapper":"ResetCacheParameterGroupResult"
      },
      "errors":[
        {
          "shape":"InvalidCacheParameterGroupStateFault",
          "error":{
            "code":"InvalidCacheParameterGroupState",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"CacheParameterGroupNotFoundFault",
          "error":{
            "code":"CacheParameterGroupNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidParameterValueException",
          "error":{
            "code":"InvalidParameterValue",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidParameterCombinationException",
          "error":{
            "code":"InvalidParameterCombination",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "RevokeCacheSecurityGroupIngress":{
      "name":"RevokeCacheSecurityGroupIngress",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"RevokeCacheSecurityGroupIngressMessage"},
      "output":{
        "shape":"RevokeCacheSecurityGroupIngressResult",
        "wrapper":true,
        "resultWrapper":"RevokeCacheSecurityGroupIngressResult"
      },
      "errors":[
        {
          "shape":"CacheSecurityGroupNotFoundFault",
          "error":{
            "code":"CacheSecurityGroupNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"AuthorizationNotFoundFault",
          "error":{
            "code":"AuthorizationNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidCacheSecurityGroupStateFault",
          "error":{
            "code":"InvalidCacheSecurityGroupState",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidParameterValueException",
          "error":{
            "code":"InvalidParameterValue",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidParameterCombinationException",
          "error":{
            "code":"InvalidParameterCombination",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    }
  },
  "shapes":{
    "AZMode":{
      "type":"string",
      "enum":[
        "single-az",
        "cross-az"
      ]
    },
    "AuthorizationAlreadyExistsFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"AuthorizationAlreadyExists",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "AuthorizationNotFoundFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"AuthorizationNotFound",
        "httpStatusCode":404,
        "senderFault":true
      },
      "exception":true
    },
    "AuthorizeCacheSecurityGroupIngressMessage":{
      "type":"structure",
      "required":[
        "CacheSecurityGroupName",
        "EC2SecurityGroupName",
        "EC2SecurityGroupOwnerId"
      ],
      "members":{
        "CacheSecurityGroupName":{"shape":"String"},
        "EC2SecurityGroupName":{"shape":"String"},
        "EC2SecurityGroupOwnerId":{"shape":"String"}
      }
    },
    "AutomaticFailoverStatus":{
      "type":"string",
      "enum":[
        "enabled",
        "disabled",
        "enabling",
        "disabling"
      ]
    },
    "AvailabilityZone":{
      "type":"structure",
      "members":{
        "Name":{"shape":"String"}
      },
      "wrapper":true
    },
    "AvailabilityZonesList":{
      "type":"list",
      "member":{
        "shape":"String",
        "locationName":"AvailabilityZone"
      }
    },
    "AwsQueryErrorMessage":{"type":"string"},
    "Boolean":{"type":"boolean"},
    "BooleanOptional":{"type":"boolean"},
    "CacheCluster":{
      "type":"structure",
      "members":{
        "CacheClusterId":{"shape":"String"},
        "ConfigurationEndpoint":{"shape":"Endpoint"},
        "ClientDownloadLandingPage":{"shape":"String"},
        "CacheNodeType":{"shape":"String"},
        "Engine":{"shape":"String"},
        "EngineVersion":{"shape":"String"},
        "CacheClusterStatus":{"shape":"String"},
        "NumCacheNodes":{"shape":"IntegerOptional"},
        "PreferredAvailabilityZone":{"shape":"String"},
        "CacheClusterCreateTime":{"shape":"TStamp"},
        "PreferredMaintenanceWindow":{"shape":"String"},
        "PendingModifiedValues":{"shape":"PendingModifiedValues"},
        "NotificationConfiguration":{"shape":"NotificationConfiguration"},
        "CacheSecurityGroups":{"shape":"CacheSecurityGroupMembershipList"},
        "CacheParameterGroup":{"shape":"CacheParameterGroupStatus"},
        "CacheSubnetGroupName":{"shape":"String"},
        "CacheNodes":{"shape":"CacheNodeList"},
        "AutoMinorVersionUpgrade":{"shape":"Boolean"},
        "SecurityGroups":{"shape":"SecurityGroupMembershipList"},
        "ReplicationGroupId":{"shape":"String"},
        "SnapshotRetentionLimit":{"shape":"IntegerOptional"},
        "SnapshotWindow":{"shape":"String"}
      },
      "wrapper":true
    },
    "CacheClusterAlreadyExistsFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"CacheClusterAlreadyExists",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "CacheClusterList":{
      "type":"list",
      "member":{
        "shape":"CacheCluster",
        "locationName":"CacheCluster"
      }
    },
    "CacheClusterMessage":{
      "type":"structure",
      "members":{
        "Marker":{"shape":"String"},
        "CacheClusters":{"shape":"CacheClusterList"}
      }
    },
    "CacheClusterNotFoundFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"CacheClusterNotFound",
        "httpStatusCode":404,
        "senderFault":true
      },
      "exception":true
    },
    "CacheEngineVersion":{
      "type":"structure",
      "members":{
        "Engine":{"shape":"String"},
        "EngineVersion":{"shape":"String"},
        "CacheParameterGroupFamily":{"shape":"String"},
        "CacheEngineDescription":{"shape":"String"},
        "CacheEngineVersionDescription":{"shape":"String"}
      }
    },
    "CacheEngineVersionList":{
      "type":"list",
      "member":{
        "shape":"CacheEngineVersion",
        "locationName":"CacheEngineVersion"
      }
    },
    "CacheEngineVersionMessage":{
      "type":"structure",
      "members":{
        "Marker":{"shape":"String"},
        "CacheEngineVersions":{"shape":"CacheEngineVersionList"}
      }
    },
    "CacheNode":{
      "type":"structure",
      "members":{
        "CacheNodeId":{"shape":"String"},
        "CacheNodeStatus":{"shape":"String"},
        "CacheNodeCreateTime":{"shape":"TStamp"},
        "Endpoint":{"shape":"Endpoint"},
        "ParameterGroupStatus":{"shape":"String"},
        "SourceCacheNodeId":{"shape":"String"},
        "CustomerAvailabilityZone":{"shape":"String"}
      }
    },
    "CacheNodeIdsList":{
      "type":"list",
      "member":{
        "shape":"String",
        "locationName":"CacheNodeId"
      }
    },
    "CacheNodeList":{
      "type":"list",
      "member":{
        "shape":"CacheNode",
        "locationName":"CacheNode"
      }
    },
    "CacheNodeTypeSpecificParameter":{
      "type":"structure",
      "members":{
        "ParameterName":{"shape":"String"},
        "Description":{"shape":"String"},
        "Source":{"shape":"String"},
        "DataType":{"shape":"String"},
        "AllowedValues":{"shape":"String"},
        "IsModifiable":{"shape":"Boolean"},
        "MinimumEngineVersion":{"shape":"String"},
        "CacheNodeTypeSpecificValues":{"shape":"CacheNodeTypeSpecificValueList"}
      }
    },
    "CacheNodeTypeSpecificParametersList":{
      "type":"list",
      "member":{
        "shape":"CacheNodeTypeSpecificParameter",
        "locationName":"CacheNodeTypeSpecificParameter"
      }
    },
    "CacheNodeTypeSpecificValue":{
      "type":"structure",
      "members":{
        "CacheNodeType":{"shape":"String"},
        "Value":{"shape":"String"}
      }
    },
    "CacheNodeTypeSpecificValueList":{
      "type":"list",
      "member":{
        "shape":"CacheNodeTypeSpecificValue",
        "locationName":"CacheNodeTypeSpecificValue"
      }
    },
    "CacheParameterGroup":{
      "type":"structure",
      "members":{
        "CacheParameterGroupName":{"shape":"String"},
        "CacheParameterGroupFamily":{"shape":"String"},
        "Description":{"shape":"String"}
      },
      "wrapper":true
    },
    "CacheParameterGroupAlreadyExistsFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"CacheParameterGroupAlreadyExists",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "CacheParameterGroupDetails":{
      "type":"structure",
      "members":{
        "Marker":{"shape":"String"},
        "Parameters":{"shape":"ParametersList"},
        "CacheNodeTypeSpecificParameters":{"shape":"CacheNodeTypeSpecificParametersList"}
      }
    },
    "CacheParameterGroupList":{
      "type":"list",
      "member":{
        "shape":"CacheParameterGroup",
        "locationName":"CacheParameterGroup"
      }
    },
    "CacheParameterGroupNameMessage":{
      "type":"structure",
      "members":{
        "CacheParameterGroupName":{"shape":"String"}
      }
    },
    "CacheParameterGroupNotFoundFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"CacheParameterGroupNotFound",
        "httpStatusCode":404,
        "senderFault":true
      },
      "exception":true
    },
    "CacheParameterGroupQuotaExceededFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"CacheParameterGroupQuotaExceeded",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "CacheParameterGroupStatus":{
      "type":"structure",
      "members":{
        "CacheParameterGroupName":{"shape":"String"},
        "ParameterApplyStatus":{"shape":"String"},
        "CacheNodeIdsToReboot":{"shape":"CacheNodeIdsList"}
      }
    },
    "CacheParameterGroupsMessage":{
      "type":"structure",
      "members":{
        "Marker":{"shape":"String"},
        "CacheParameterGroups":{"shape":"CacheParameterGroupList"}
      }
    },
    "CacheSecurityGroup":{
      "type":"structure",
      "members":{
        "OwnerId":{"shape":"String"},
        "CacheSecurityGroupName":{"shape":"String"},
        "Description":{"shape":"String"},
        "EC2SecurityGroups":{"shape":"EC2SecurityGroupList"}
      },
      "wrapper":true
    },
    "CacheSecurityGroupAlreadyExistsFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"CacheSecurityGroupAlreadyExists",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "CacheSecurityGroupMembership":{
      "type":"structure",
      "members":{
        "CacheSecurityGroupName":{"shape":"String"},
        "Status":{"shape":"String"}
      }
    },
    "CacheSecurityGroupMembershipList":{
      "type":"list",
      "member":{
        "shape":"CacheSecurityGroupMembership",
        "locationName":"CacheSecurityGroup"
      }
    },
    "CacheSecurityGroupMessage":{
      "type":"structure",
      "members":{
        "Marker":{"shape":"String"},
        "CacheSecurityGroups":{"shape":"CacheSecurityGroups"}
      }
    },
    "CacheSecurityGroupNameList":{
      "type":"list",
      "member":{
        "shape":"String",
        "locationName":"CacheSecurityGroupName"
      }
    },
    "CacheSecurityGroupNotFoundFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"CacheSecurityGroupNotFound",
        "httpStatusCode":404,
        "senderFault":true
      },
      "exception":true
    },
    "CacheSecurityGroupQuotaExceededFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"QuotaExceeded.CacheSecurityGroup",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "CacheSecurityGroups":{
      "type":"list",
      "member":{
        "shape":"CacheSecurityGroup",
        "locationName":"CacheSecurityGroup"
      }
    },
    "CacheSubnetGroup":{
      "type":"structure",
      "members":{
        "CacheSubnetGroupName":{"shape":"String"},
        "CacheSubnetGroupDescription":{"shape":"String"},
        "VpcId":{"shape":"String"},
        "Subnets":{"shape":"SubnetList"}
      },
      "wrapper":true
    },
    "CacheSubnetGroupAlreadyExistsFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"CacheSubnetGroupAlreadyExists",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "CacheSubnetGroupInUse":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"CacheSubnetGroupInUse",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "CacheSubnetGroupMessage":{
      "type":"structure",
      "members":{
        "Marker":{"shape":"String"},
        "CacheSubnetGroups":{"shape":"CacheSubnetGroups"}
      }
    },
    "CacheSubnetGroupNotFoundFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"CacheSubnetGroupNotFoundFault",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "CacheSubnetGroupQuotaExceededFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"CacheSubnetGroupQuotaExceeded",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "CacheSubnetGroups":{
      "type":"list",
      "member":{
        "shape":"CacheSubnetGroup",
        "locationName":"CacheSubnetGroup"
      }
    },
    "CacheSubnetQuotaExceededFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"CacheSubnetQuotaExceededFault",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "ClusterIdList":{
      "type":"list",
      "member":{
        "shape":"String",
        "locationName":"ClusterId"
      }
    },
    "ClusterQuotaForCustomerExceededFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"ClusterQuotaForCustomerExceeded",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "CopySnapshotMessage":{
      "type":"structure",
      "required":[
        "SourceSnapshotName",
        "TargetSnapshotName"
      ],
      "members":{
        "SourceSnapshotName":{"shape":"String"},
        "TargetSnapshotName":{"shape":"String"}
      }
    },
    "CreateCacheClusterMessage":{
      "type":"structure",
      "required":["CacheClusterId"],
      "members":{
        "CacheClusterId":{"shape":"String"},
        "ReplicationGroupId":{"shape":"String"},
        "AZMode":{"shape":"AZMode"},
        "PreferredAvailabilityZone":{"shape":"String"},
        "PreferredAvailabilityZones":{"shape":"PreferredAvailabilityZoneList"},
        "NumCacheNodes":{"shape":"IntegerOptional"},
        "CacheNodeType":{"shape":"String"},
        "Engine":{"shape":"String"},
        "EngineVersion":{"shape":"String"},
        "CacheParameterGroupName":{"shape":"String"},
        "CacheSubnetGroupName":{"shape":"String"},
        "CacheSecurityGroupNames":{"shape":"CacheSecurityGroupNameList"},
        "SecurityGroupIds":{"shape":"SecurityGroupIdsList"},
        "SnapshotArns":{"shape":"SnapshotArnsList"},
        "SnapshotName":{"shape":"String"},
        "PreferredMaintenanceWindow":{"shape":"String"},
        "Port":{"shape":"IntegerOptional"},
        "NotificationTopicArn":{"shape":"String"},
        "AutoMinorVersionUpgrade":{"shape":"BooleanOptional"},
        "SnapshotRetentionLimit":{"shape":"IntegerOptional"},
        "SnapshotWindow":{"shape":"String"}
      }
    },
    "CreateCacheParameterGroupMessage":{
      "type":"structure",
      "required":[
        "CacheParameterGroupName",
        "CacheParameterGroupFamily",
        "Description"
      ],
      "members":{
        "CacheParameterGroupName":{"shape":"String"},
        "CacheParameterGroupFamily":{"shape":"String"},
        "Description":{"shape":"String"}
      }
    },
    "CreateCacheSecurityGroupMessage":{
      "type":"structure",
      "required":[
        "CacheSecurityGroupName",
        "Description"
      ],
      "members":{
        "CacheSecurityGroupName":{"shape":"String"},
        "Description":{"shape":"String"}
      }
    },
    "CreateCacheSubnetGroupMessage":{
      "type":"structure",
      "required":[
        "CacheSubnetGroupName",
        "CacheSubnetGroupDescription",
        "SubnetIds"
      ],
      "members":{
        "CacheSubnetGroupName":{"shape":"String"},
        "CacheSubnetGroupDescription":{"shape":"String"},
        "SubnetIds":{"shape":"SubnetIdentifierList"}
      }
    },
    "CreateReplicationGroupMessage":{
      "type":"structure",
      "required":[
        "ReplicationGroupId",
        "ReplicationGroupDescription"
      ],
      "members":{
        "ReplicationGroupId":{"shape":"String"},
        "ReplicationGroupDescription":{"shape":"String"},
        "PrimaryClusterId":{"shape":"String"},
        "AutomaticFailoverEnabled":{"shape":"BooleanOptional"},
        "NumCacheClusters":{"shape":"IntegerOptional"},
        "PreferredCacheClusterAZs":{"shape":"AvailabilityZonesList"},
        "CacheNodeType":{"shape":"String"},
        "Engine":{"shape":"String"},
        "EngineVersion":{"shape":"String"},
        "CacheParameterGroupName":{"shape":"String"},
        "CacheSubnetGroupName":{"shape":"String"},
        "CacheSecurityGroupNames":{"shape":"CacheSecurityGroupNameList"},
        "SecurityGroupIds":{"shape":"SecurityGroupIdsList"},
        "SnapshotArns":{"shape":"SnapshotArnsList"},
        "SnapshotName":{"shape":"String"},
        "PreferredMaintenanceWindow":{"shape":"String"},
        "Port":{"shape":"IntegerOptional"},
        "NotificationTopicArn":{"shape":"String"},
        "AutoMinorVersionUpgrade":{"shape":"BooleanOptional"},
        "SnapshotRetentionLimit":{"shape":"IntegerOptional"},
        "SnapshotWindow":{"shape":"String"}
      }
    },
    "CreateSnapshotMessage":{
      "type":"structure",
      "required":[
        "CacheClusterId",
        "SnapshotName"
      ],
      "members":{
        "CacheClusterId":{"shape":"String"},
        "SnapshotName":{"shape":"String"}
      }
    },
    "DeleteCacheClusterMessage":{
      "type":"structure",
      "required":["CacheClusterId"],
      "members":{
        "CacheClusterId":{"shape":"String"},
        "FinalSnapshotIdentifier":{"shape":"String"}
      }
    },
    "DeleteCacheParameterGroupMessage":{
      "type":"structure",
      "required":["CacheParameterGroupName"],
      "members":{
        "CacheParameterGroupName":{"shape":"String"}
      }
    },
    "DeleteCacheSecurityGroupMessage":{
      "type":"structure",
      "required":["CacheSecurityGroupName"],
      "members":{
        "CacheSecurityGroupName":{"shape":"String"}
      }
    },
    "DeleteCacheSubnetGroupMessage":{
      "type":"structure",
      "required":["CacheSubnetGroupName"],
      "members":{
        "CacheSubnetGroupName":{"shape":"String"}
      }
    },
    "DeleteReplicationGroupMessage":{
      "type":"structure",
      "required":["ReplicationGroupId"],
      "members":{
        "ReplicationGroupId":{"shape":"String"},
        "RetainPrimaryCluster":{"shape":"BooleanOptional"},
        "FinalSnapshotIdentifier":{"shape":"String"}
      }
    },
    "DeleteSnapshotMessage":{
      "type":"structure",
      "required":["SnapshotName"],
      "members":{
        "SnapshotName":{"shape":"String"}
      }
    },
    "DescribeCacheClustersMessage":{
      "type":"structure",
      "members":{
        "CacheClusterId":{"shape":"String"},
        "MaxRecords":{"shape":"IntegerOptional"},
        "Marker":{"shape":"String"},
        "ShowCacheNodeInfo":{"shape":"BooleanOptional"}
      }
    },
    "DescribeCacheEngineVersionsMessage":{
      "type":"structure",
      "members":{
        "Engine":{"shape":"String"},
        "EngineVersion":{"shape":"String"},
        "CacheParameterGroupFamily":{"shape":"String"},
        "MaxRecords":{"shape":"IntegerOptional"},
        "Marker":{"shape":"String"},
        "DefaultOnly":{"shape":"Boolean"}
      }
    },
    "DescribeCacheParameterGroupsMessage":{
      "type":"structure",
      "members":{
        "CacheParameterGroupName":{"shape":"String"},
        "MaxRecords":{"shape":"IntegerOptional"},
        "Marker":{"shape":"String"}
      }
    },
    "DescribeCacheParametersMessage":{
      "type":"structure",
      "required":["CacheParameterGroupName"],
      "members":{
        "CacheParameterGroupName":{"shape":"String"},
        "Source":{"shape":"String"},
        "MaxRecords":{"shape":"IntegerOptional"},
        "Marker":{"shape":"String"}
      }
    },
    "DescribeCacheSecurityGroupsMessage":{
      "type":"structure",
      "members":{
        "CacheSecurityGroupName":{"shape":"String"},
        "MaxRecords":{"shape":"IntegerOptional"},
        "Marker":{"shape":"String"}
      }
    },
    "DescribeCacheSubnetGroupsMessage":{
      "type":"structure",
      "members":{
        "CacheSubnetGroupName":{"shape":"String"},
        "MaxRecords":{"shape":"IntegerOptional"},
        "Marker":{"shape":"String"}
      }
    },
    "DescribeEngineDefaultParametersMessage":{
      "type":"structure",
      "required":["CacheParameterGroupFamily"],
      "members":{
        "CacheParameterGroupFamily":{"shape":"String"},
        "MaxRecords":{"shape":"IntegerOptional"},
        "Marker":{"shape":"String"}
      }
    },
    "DescribeEventsMessage":{
      "type":"structure",
      "members":{
        "SourceIdentifier":{"shape":"String"},
        "SourceType":{"shape":"SourceType"},
        "StartTime":{"shape":"TStamp"},
        "EndTime":{"shape":"TStamp"},
        "Duration":{"shape":"IntegerOptional"},
        "MaxRecords":{"shape":"IntegerOptional"},
        "Marker":{"shape":"String"}
      }
    },
    "DescribeReplicationGroupsMessage":{
      "type":"structure",
      "members":{
        "ReplicationGroupId":{"shape":"String"},
        "MaxRecords":{"shape":"IntegerOptional"},
        "Marker":{"shape":"String"}
      }
    },
    "DescribeReservedCacheNodesMessage":{
      "type":"structure",
      "members":{
        "ReservedCacheNodeId":{"shape":"String"},
        "ReservedCacheNodesOfferingId":{"shape":"String"},
        "CacheNodeType":{"shape":"String"},
        "Duration":{"shape":"String"},
        "ProductDescription":{"shape":"String"},
        "OfferingType":{"shape":"String"},
        "MaxRecords":{"shape":"IntegerOptional"},
        "Marker":{"shape":"String"}
      }
    },
    "DescribeReservedCacheNodesOfferingsMessage":{
      "type":"structure",
      "members":{
        "ReservedCacheNodesOfferingId":{"shape":"String"},
        "CacheNodeType":{"shape":"String"},
        "Duration":{"shape":"String"},
        "ProductDescription":{"shape":"String"},
        "OfferingType":{"shape":"String"},
        "MaxRecords":{"shape":"IntegerOptional"},
        "Marker":{"shape":"String"}
      }
    },
    "DescribeSnapshotsListMessage":{
      "type":"structure",
      "members":{
        "Marker":{"shape":"String"},
        "Snapshots":{"shape":"SnapshotList"}
      }
    },
    "DescribeSnapshotsMessage":{
      "type":"structure",
      "members":{
        "CacheClusterId":{"shape":"String"},
        "SnapshotName":{"shape":"String"},
        "SnapshotSource":{"shape":"String"},
        "Marker":{"shape":"String"},
        "MaxRecords":{"shape":"IntegerOptional"}
      }
    },
    "Double":{"type":"double"},
    "EC2SecurityGroup":{
      "type":"structure",
      "members":{
        "Status":{"shape":"String"},
        "EC2SecurityGroupName":{"shape":"String"},
        "EC2SecurityGroupOwnerId":{"shape":"String"}
      }
    },
    "EC2SecurityGroupList":{
      "type":"list",
      "member":{
        "shape":"EC2SecurityGroup",
        "locationName":"EC2SecurityGroup"
      }
    },
    "Endpoint":{
      "type":"structure",
      "members":{
        "Address":{"shape":"String"},
        "Port":{"shape":"Integer"}
      }
    },
    "EngineDefaults":{
      "type":"structure",
      "members":{
        "CacheParameterGroupFamily":{"shape":"String"},
        "Marker":{"shape":"String"},
        "Parameters":{"shape":"ParametersList"},
        "CacheNodeTypeSpecificParameters":{"shape":"CacheNodeTypeSpecificParametersList"}
      },
      "wrapper":true
    },
    "Event":{
      "type":"structure",
      "members":{
        "SourceIdentifier":{"shape":"String"},
        "SourceType":{"shape":"SourceType"},
        "Message":{"shape":"String"},
        "Date":{"shape":"TStamp"}
      }
    },
    "EventList":{
      "type":"list",
      "member":{
        "shape":"Event",
        "locationName":"Event"
      }
    },
    "EventsMessage":{
      "type":"structure",
      "members":{
        "Marker":{"shape":"String"},
        "Events":{"shape":"EventList"}
      }
    },
    "InsufficientCacheClusterCapacityFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"InsufficientCacheClusterCapacity",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "Integer":{"type":"integer"},
    "IntegerOptional":{"type":"integer"},
    "InvalidCacheClusterStateFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"InvalidCacheClusterState",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "InvalidCacheParameterGroupStateFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"InvalidCacheParameterGroupState",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "InvalidCacheSecurityGroupStateFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"InvalidCacheSecurityGroupState",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "InvalidParameterCombinationException":{
      "type":"structure",
      "members":{
        "message":{"shape":"AwsQueryErrorMessage"}
      },
      "error":{
        "code":"InvalidParameterCombination",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "InvalidParameterValueException":{
      "type":"structure",
      "members":{
        "message":{"shape":"AwsQueryErrorMessage"}
      },
      "error":{
        "code":"InvalidParameterValue",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "InvalidReplicationGroupStateFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"InvalidReplicationGroupState",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "InvalidSnapshotStateFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"InvalidSnapshotState",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "InvalidSubnet":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"InvalidSubnet",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "InvalidVPCNetworkStateFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"InvalidVPCNetworkStateFault",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "ModifyCacheClusterMessage":{
      "type":"structure",
      "required":["CacheClusterId"],
      "members":{
        "CacheClusterId":{"shape":"String"},
        "NumCacheNodes":{"shape":"IntegerOptional"},
        "CacheNodeIdsToRemove":{"shape":"CacheNodeIdsList"},
        "AZMode":{"shape":"AZMode"},
        "NewAvailabilityZones":{"shape":"PreferredAvailabilityZoneList"},
        "CacheSecurityGroupNames":{"shape":"CacheSecurityGroupNameList"},
        "SecurityGroupIds":{"shape":"SecurityGroupIdsList"},
        "PreferredMaintenanceWindow":{"shape":"String"},
        "NotificationTopicArn":{"shape":"String"},
        "CacheParameterGroupName":{"shape":"String"},
        "NotificationTopicStatus":{"shape":"String"},
        "ApplyImmediately":{"shape":"Boolean"},
        "EngineVersion":{"shape":"String"},
        "AutoMinorVersionUpgrade":{"shape":"BooleanOptional"},
        "SnapshotRetentionLimit":{"shape":"IntegerOptional"},
        "SnapshotWindow":{"shape":"String"}
      }
    },
    "ModifyCacheParameterGroupMessage":{
      "type":"structure",
      "required":[
        "CacheParameterGroupName",
        "ParameterNameValues"
      ],
      "members":{
        "CacheParameterGroupName":{"shape":"String"},
        "ParameterNameValues":{"shape":"ParameterNameValueList"}
      }
    },
    "ModifyCacheSubnetGroupMessage":{
      "type":"structure",
      "required":["CacheSubnetGroupName"],
      "members":{
        "CacheSubnetGroupName":{"shape":"String"},
        "CacheSubnetGroupDescription":{"shape":"String"},
        "SubnetIds":{"shape":"SubnetIdentifierList"}
      }
    },
    "ModifyReplicationGroupMessage":{
      "type":"structure",
      "required":["ReplicationGroupId"],
      "members":{
        "ReplicationGroupId":{"shape":"String"},
        "ReplicationGroupDescription":{"shape":"String"},
        "PrimaryClusterId":{"shape":"String"},
        "SnapshottingClusterId":{"shape":"String"},
        "AutomaticFailoverEnabled":{"shape":"BooleanOptional"},
        "CacheSecurityGroupNames":{"shape":"CacheSecurityGroupNameList"},
        "SecurityGroupIds":{"shape":"SecurityGroupIdsList"},
        "PreferredMaintenanceWindow":{"shape":"String"},
        "NotificationTopicArn":{"shape":"String"},
        "CacheParameterGroupName":{"shape":"String"},
        "NotificationTopicStatus":{"shape":"String"},
        "ApplyImmediately":{"shape":"Boolean"},
        "EngineVersion":{"shape":"String"},
        "AutoMinorVersionUpgrade":{"shape":"BooleanOptional"},
        "SnapshotRetentionLimit":{"shape":"IntegerOptional"},
        "SnapshotWindow":{"shape":"String"}
      }
    },
    "NodeGroup":{
      "type":"structure",
      "members":{
        "NodeGroupId":{"shape":"String"},
        "Status":{"shape":"String"},
        "PrimaryEndpoint":{"shape":"Endpoint"},
        "NodeGroupMembers":{"shape":"NodeGroupMemberList"}
      }
    },
    "NodeGroupList":{
      "type":"list",
      "member":{
        "shape":"NodeGroup",
        "locationName":"NodeGroup"
      }
    },
    "NodeGroupMember":{
      "type":"structure",
      "members":{
        "CacheClusterId":{"shape":"String"},
        "CacheNodeId":{"shape":"String"},
        "ReadEndpoint":{"shape":"Endpoint"},
        "PreferredAvailabilityZone":{"shape":"String"},
        "CurrentRole":{"shape":"String"}
      }
    },
    "NodeGroupMemberList":{
      "type":"list",
      "member":{
        "shape":"NodeGroupMember",
        "locationName":"NodeGroupMember"
      }
    },
    "NodeQuotaForClusterExceededFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"NodeQuotaForClusterExceeded",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "NodeQuotaForCustomerExceededFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"NodeQuotaForCustomerExceeded",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "NodeSnapshot":{
      "type":"structure",
      "members":{
        "CacheNodeId":{"shape":"String"},
        "CacheSize":{"shape":"String"},
        "CacheNodeCreateTime":{"shape":"TStamp"},
        "SnapshotCreateTime":{"shape":"TStamp"}
      },
      "wrapper":true
    },
    "NodeSnapshotList":{
      "type":"list",
      "member":{
        "shape":"NodeSnapshot",
        "locationName":"NodeSnapshot"
      }
    },
    "NotificationConfiguration":{
      "type":"structure",
      "members":{
        "TopicArn":{"shape":"String"},
        "TopicStatus":{"shape":"String"}
      }
    },
    "Parameter":{
      "type":"structure",
      "members":{
        "ParameterName":{"shape":"String"},
        "ParameterValue":{"shape":"String"},
        "Description":{"shape":"String"},
        "Source":{"shape":"String"},
        "DataType":{"shape":"String"},
        "AllowedValues":{"shape":"String"},
        "IsModifiable":{"shape":"Boolean"},
        "MinimumEngineVersion":{"shape":"String"}
      }
    },
    "ParameterNameValue":{
      "type":"structure",
      "members":{
        "ParameterName":{"shape":"String"},
        "ParameterValue":{"shape":"String"}
      }
    },
    "ParameterNameValueList":{
      "type":"list",
      "member":{
        "shape":"ParameterNameValue",
        "locationName":"ParameterNameValue"
      }
    },
    "ParametersList":{
      "type":"list",
      "member":{
        "shape":"Parameter",
        "locationName":"Parameter"
      }
    },
    "PendingAutomaticFailoverStatus":{
      "type":"string",
      "enum":[
        "enabled",
        "disabled"
      ]
    },
    "PendingModifiedValues":{
      "type":"structure",
      "members":{
        "NumCacheNodes":{"shape":"IntegerOptional"},
        "CacheNodeIdsToRemove":{"shape":"CacheNodeIdsList"},
        "EngineVersion":{"shape":"String"}
      }
    },
    "PreferredAvailabilityZoneList":{
      "type":"list",
      "member":{
        "shape":"String",
        "locationName":"PreferredAvailabilityZone"
      }
    },
    "PurchaseReservedCacheNodesOfferingMessage":{
      "type":"structure",
      "required":["ReservedCacheNodesOfferingId"],
      "members":{
        "ReservedCacheNodesOfferingId":{"shape":"String"},
        "ReservedCacheNodeId":{"shape":"String"},
        "CacheNodeCount":{"shape":"IntegerOptional"}
      }
    },
    "RebootCacheClusterMessage":{
      "type":"structure",
      "required":[
        "CacheClusterId",
        "CacheNodeIdsToReboot"
      ],
      "members":{
        "CacheClusterId":{"shape":"String"},
        "CacheNodeIdsToReboot":{"shape":"CacheNodeIdsList"}
      }
    },
    "RecurringCharge":{
      "type":"structure",
      "members":{
        "RecurringChargeAmount":{"shape":"Double"},
        "RecurringChargeFrequency":{"shape":"String"}
      },
      "wrapper":true
    },
    "RecurringChargeList":{
      "type":"list",
      "member":{
        "shape":"RecurringCharge",
        "locationName":"RecurringCharge"
      }
    },
    "ReplicationGroup":{
      "type":"structure",
      "members":{
        "ReplicationGroupId":{"shape":"String"},
        "Description":{"shape":"String"},
        "Status":{"shape":"String"},
        "PendingModifiedValues":{"shape":"ReplicationGroupPendingModifiedValues"},
        "MemberClusters":{"shape":"ClusterIdList"},
        "NodeGroups":{"shape":"NodeGroupList"},
        "SnapshottingClusterId":{"shape":"String"},
        "AutomaticFailover":{"shape":"AutomaticFailoverStatus"}
      },
      "wrapper":true
    },
    "ReplicationGroupAlreadyExistsFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"ReplicationGroupAlreadyExists",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "ReplicationGroupList":{
      "type":"list",
      "member":{
        "shape":"ReplicationGroup",
        "locationName":"ReplicationGroup"
      }
    },
    "ReplicationGroupMessage":{
      "type":"structure",
      "members":{
        "Marker":{"shape":"String"},
        "ReplicationGroups":{"shape":"ReplicationGroupList"}
      }
    },
    "ReplicationGroupNotFoundFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"ReplicationGroupNotFoundFault",
        "httpStatusCode":404,
        "senderFault":true
      },
      "exception":true
    },
    "ReplicationGroupPendingModifiedValues":{
      "type":"structure",
      "members":{
        "PrimaryClusterId":{"shape":"String"},
        "AutomaticFailoverStatus":{"shape":"PendingAutomaticFailoverStatus"}
      }
    },
    "ReservedCacheNode":{
      "type":"structure",
      "members":{
        "ReservedCacheNodeId":{"shape":"String"},
        "ReservedCacheNodesOfferingId":{"shape":"String"},
        "CacheNodeType":{"shape":"String"},
        "StartTime":{"shape":"TStamp"},
        "Duration":{"shape":"Integer"},
        "FixedPrice":{"shape":"Double"},
        "UsagePrice":{"shape":"Double"},
        "CacheNodeCount":{"shape":"Integer"},
        "ProductDescription":{"shape":"String"},
        "OfferingType":{"shape":"String"},
        "State":{"shape":"String"},
        "RecurringCharges":{"shape":"RecurringChargeList"}
      },
      "wrapper":true
    },
    "ReservedCacheNodeAlreadyExistsFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"ReservedCacheNodeAlreadyExists",
        "httpStatusCode":404,
        "senderFault":true
      },
      "exception":true
    },
    "ReservedCacheNodeList":{
      "type":"list",
      "member":{
        "shape":"ReservedCacheNode",
        "locationName":"ReservedCacheNode"
      }
    },
    "ReservedCacheNodeMessage":{
      "type":"structure",
      "members":{
        "Marker":{"shape":"String"},
        "ReservedCacheNodes":{"shape":"ReservedCacheNodeList"}
      }
    },
    "ReservedCacheNodeNotFoundFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"ReservedCacheNodeNotFound",
        "httpStatusCode":404,
        "senderFault":true
      },
      "exception":true
    },
    "ReservedCacheNodeQuotaExceededFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"ReservedCacheNodeQuotaExceeded",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "ReservedCacheNodesOffering":{
      "type":"structure",
      "members":{
        "ReservedCacheNodesOfferingId":{"shape":"String"},
        "CacheNodeType":{"shape":"String"},
        "Duration":{"shape":"Integer"},
        "FixedPrice":{"shape":"Double"},
        "UsagePrice":{"shape":"Double"},
        "ProductDescription":{"shape":"String"},
        "OfferingType":{"shape":"String"},
        "RecurringCharges":{"shape":"RecurringChargeList"}
      },
      "wrapper":true
    },
    "ReservedCacheNodesOfferingList":{
      "type":"list",
      "member":{
        "shape":"ReservedCacheNodesOffering",
        "locationName":"ReservedCacheNodesOffering"
      }
    },
    "ReservedCacheNodesOfferingMessage":{
      "type":"structure",
      "members":{
        "Marker":{"shape":"String"},
        "ReservedCacheNodesOfferings":{"shape":"ReservedCacheNodesOfferingList"}
      }
    },
    "ReservedCacheNodesOfferingNotFoundFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"ReservedCacheNodesOfferingNotFound",
        "httpStatusCode":404,
        "senderFault":true
      },
      "exception":true
    },
    "ResetCacheParameterGroupMessage":{
      "type":"structure",
      "required":[
        "CacheParameterGroupName",
        "ParameterNameValues"
      ],
      "members":{
        "CacheParameterGroupName":{"shape":"String"},
        "ResetAllParameters":{"shape":"Boolean"},
        "ParameterNameValues":{"shape":"ParameterNameValueList"}
      }
    },
    "RevokeCacheSecurityGroupIngressMessage":{
      "type":"structure",
      "required":[
        "CacheSecurityGroupName",
        "EC2SecurityGroupName",
        "EC2SecurityGroupOwnerId"
      ],
      "members":{
        "CacheSecurityGroupName":{"shape":"String"},
        "EC2SecurityGroupName":{"shape":"String"},
        "EC2SecurityGroupOwnerId":{"shape":"String"}
      }
    },
    "SecurityGroupIdsList":{
      "type":"list",
      "member":{
        "shape":"String",
        "locationName":"SecurityGroupId"
      }
    },
    "SecurityGroupMembership":{
      "type":"structure",
      "members":{
        "SecurityGroupId":{"shape":"String"},
        "Status":{"shape":"String"}
      }
    },
    "SecurityGroupMembershipList":{
      "type":"list",
      "member":{"shape":"SecurityGroupMembership"}
    },
    "Snapshot":{
      "type":"structure",
      "members":{
        "SnapshotName":{"shape":"String"},
        "CacheClusterId":{"shape":"String"},
        "SnapshotStatus":{"shape":"String"},
        "SnapshotSource":{"shape":"String"},
        "CacheNodeType":{"shape":"String"},
        "Engine":{"shape":"String"},
        "EngineVersion":{"shape":"String"},
        "NumCacheNodes":{"shape":"IntegerOptional"},
        "PreferredAvailabilityZone":{"shape":"String"},
        "CacheClusterCreateTime":{"shape":"TStamp"},
        "PreferredMaintenanceWindow":{"shape":"String"},
        "TopicArn":{"shape":"String"},
        "Port":{"shape":"IntegerOptional"},
        "CacheParameterGroupName":{"shape":"String"},
        "CacheSubnetGroupName":{"shape":"String"},
        "VpcId":{"shape":"String"},
        "AutoMinorVersionUpgrade":{"shape":"Boolean"},
        "SnapshotRetentionLimit":{"shape":"IntegerOptional"},
        "SnapshotWindow":{"shape":"String"},
        "NodeSnapshots":{"shape":"NodeSnapshotList"}
      },
      "wrapper":true
    },
    "SnapshotAlreadyExistsFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"SnapshotAlreadyExistsFault",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "SnapshotArnsList":{
      "type":"list",
      "member":{
        "shape":"String",
        "locationName":"SnapshotArn"
      }
    },
    "SnapshotFeatureNotSupportedFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"SnapshotFeatureNotSupportedFault",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "SnapshotList":{
      "type":"list",
      "member":{
        "shape":"Snapshot",
        "locationName":"Snapshot"
      }
    },
    "SnapshotNotFoundFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"SnapshotNotFoundFault",
        "httpStatusCode":404,
        "senderFault":true
      },
      "exception":true
    },
    "SnapshotQuotaExceededFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"SnapshotQuotaExceededFault",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "SourceType":{
      "type":"string",
      "enum":[
        "cache-cluster",
        "cache-parameter-group",
        "cache-security-group",
        "cache-subnet-group"
      ]
    },
    "String":{"type":"string"},
    "Subnet":{
      "type":"structure",
      "members":{
        "SubnetIdentifier":{"shape":"String"},
        "SubnetAvailabilityZone":{"shape":"AvailabilityZone"}
      }
    },
    "SubnetIdentifierList":{
      "type":"list",
      "member":{
        "shape":"String",
        "locationName":"SubnetIdentifier"
      }
    },
    "SubnetInUse":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"SubnetInUse",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "SubnetList":{
      "type":"list",
      "member":{
        "shape":"Subnet",
        "locationName":"Subnet"
      }
    },
    "TStamp":{"type":"timestamp"},
    "AuthorizeCacheSecurityGroupIngressResult":{
      "type":"structure",
      "members":{
        "CacheSecurityGroup":{"shape":"CacheSecurityGroup"}
      }
    },
    "CopySnapshotResult":{
      "type":"structure",
      "members":{
        "Snapshot":{"shape":"Snapshot"}
      }
    },
    "CreateCacheClusterResult":{
      "type":"structure",
      "members":{
        "CacheCluster":{"shape":"CacheCluster"}
      }
    },
    "CreateCacheParameterGroupResult":{
      "type":"structure",
      "members":{
        "CacheParameterGroup":{"shape":"CacheParameterGroup"}
      }
    },
    "CreateCacheSecurityGroupResult":{
      "type":"structure",
      "members":{
        "CacheSecurityGroup":{"shape":"CacheSecurityGroup"}
      }
    },
    "CreateCacheSubnetGroupResult":{
      "type":"structure",
      "members":{
        "CacheSubnetGroup":{"shape":"CacheSubnetGroup"}
      }
    },
    "CreateReplicationGroupResult":{
      "type":"structure",
      "members":{
        "ReplicationGroup":{"shape":"ReplicationGroup"}
      }
    },
    "CreateSnapshotResult":{
      "type":"structure",
      "members":{
        "Snapshot":{"shape":"Snapshot"}
      }
    },
    "DeleteCacheClusterResult":{
      "type":"structure",
      "members":{
        "CacheCluster":{"shape":"CacheCluster"}
      }
    },
    "DeleteReplicationGroupResult":{
      "type":"structure",
      "members":{
        "ReplicationGroup":{"shape":"ReplicationGroup"}
      }
    },
    "DeleteSnapshotResult":{
      "type":"structure",
      "members":{
        "Snapshot":{"shape":"Snapshot"}
      }
    },
    "DescribeEngineDefaultParametersResult":{
      "type":"structure",
      "members":{
        "EngineDefaults":{"shape":"EngineDefaults"}
      }
    },
    "ModifyCacheClusterResult":{
      "type":"structure",
      "members":{
        "CacheCluster":{"shape":"CacheCluster"}
      }
    },
    "ModifyCacheSubnetGroupResult":{
      "type":"structure",
      "members":{
        "CacheSubnetGroup":{"shape":"CacheSubnetGroup"}
      }
    },
    "ModifyReplicationGroupResult":{
      "type":"structure",
      "members":{
        "ReplicationGroup":{"shape":"ReplicationGroup"}
      }
    },
    "PurchaseReservedCacheNodesOfferingResult":{
      "type":"structure",
      "members":{
        "ReservedCacheNode":{"shape":"ReservedCacheNode"}
      }
    },
    "RebootCacheClusterResult":{
      "type":"structure",
      "members":{
        "CacheCluster":{"shape":"CacheCluster"}
      }
    },
    "RevokeCacheSecurityGroupIngressResult":{
      "type":"structure",
      "members":{
        "CacheSecurityGroup":{"shape":"CacheSecurityGroup"}
      }
    }
  }
}
,
"ElasticBeanstalk":
{
  "metadata":{
    "apiVersion":"2010-12-01",
    "endpointPrefix":"elasticbeanstalk",
    "serviceAbbreviation":"Elastic Beanstalk",
    "serviceFullName":"AWS Elastic Beanstalk",
    "signatureVersion":"v4",
    "xmlNamespace":"http://elasticbeanstalk.amazonaws.com/docs/2010-12-01/",
    "protocol":"query"
  },
  "operations":{
    "CheckDNSAvailability":{
      "name":"CheckDNSAvailability",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CheckDNSAvailabilityMessage"},
      "output":{
        "shape":"CheckDNSAvailabilityResultMessage",
        "resultWrapper":"CheckDNSAvailabilityResult"
      }
    },
    "CreateApplication":{
      "name":"CreateApplication",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateApplicationMessage"},
      "output":{
        "shape":"ApplicationDescriptionMessage",
        "resultWrapper":"CreateApplicationResult"
      },
      "errors":[
        {
          "shape":"TooManyApplicationsException",
          "error":{
            "code":"TooManyApplicationsException",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "CreateApplicationVersion":{
      "name":"CreateApplicationVersion",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateApplicationVersionMessage"},
      "output":{
        "shape":"ApplicationVersionDescriptionMessage",
        "resultWrapper":"CreateApplicationVersionResult"
      },
      "errors":[
        {
          "shape":"TooManyApplicationsException",
          "error":{
            "code":"TooManyApplicationsException",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"TooManyApplicationVersionsException",
          "exception":true
        },
        {
          "shape":"InsufficientPrivilegesException",
          "error":{
            "code":"InsufficientPrivilegesException",
            "httpStatusCode":403,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"S3LocationNotInServiceRegionException",
          "error":{
            "code":"S3LocationNotInServiceRegionException",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "CreateConfigurationTemplate":{
      "name":"CreateConfigurationTemplate",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateConfigurationTemplateMessage"},
      "output":{
        "shape":"ConfigurationSettingsDescription",
        "resultWrapper":"CreateConfigurationTemplateResult"
      },
      "errors":[
        {
          "shape":"InsufficientPrivilegesException",
          "error":{
            "code":"InsufficientPrivilegesException",
            "httpStatusCode":403,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"TooManyConfigurationTemplatesException",
          "error":{
            "code":"TooManyConfigurationTemplatesException",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "CreateEnvironment":{
      "name":"CreateEnvironment",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateEnvironmentMessage"},
      "output":{
        "shape":"EnvironmentDescription",
        "resultWrapper":"CreateEnvironmentResult"
      },
      "errors":[
        {
          "shape":"TooManyEnvironmentsException",
          "error":{
            "code":"TooManyEnvironmentsException",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InsufficientPrivilegesException",
          "error":{
            "code":"InsufficientPrivilegesException",
            "httpStatusCode":403,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "CreateStorageLocation":{
      "name":"CreateStorageLocation",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "output":{
        "shape":"CreateStorageLocationResultMessage",
        "resultWrapper":"CreateStorageLocationResult"
      },
      "errors":[
        {
          "shape":"TooManyBucketsException",
          "error":{
            "code":"TooManyBucketsException",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"S3SubscriptionRequiredException",
          "error":{
            "code":"S3SubscriptionRequiredException",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InsufficientPrivilegesException",
          "error":{
            "code":"InsufficientPrivilegesException",
            "httpStatusCode":403,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DeleteApplication":{
      "name":"DeleteApplication",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteApplicationMessage"},
      "errors":[
        {
          "shape":"OperationInProgressException",
          "error":{
            "code":"OperationInProgressFailure",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DeleteApplicationVersion":{
      "name":"DeleteApplicationVersion",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteApplicationVersionMessage"},
      "errors":[
        {
          "shape":"SourceBundleDeletionException",
          "error":{
            "code":"SourceBundleDeletionFailure",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InsufficientPrivilegesException",
          "error":{
            "code":"InsufficientPrivilegesException",
            "httpStatusCode":403,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"OperationInProgressException",
          "error":{
            "code":"OperationInProgressFailure",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"S3LocationNotInServiceRegionException",
          "error":{
            "code":"S3LocationNotInServiceRegionException",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DeleteConfigurationTemplate":{
      "name":"DeleteConfigurationTemplate",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteConfigurationTemplateMessage"},
      "errors":[
        {
          "shape":"OperationInProgressException",
          "error":{
            "code":"OperationInProgressFailure",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DeleteEnvironmentConfiguration":{
      "name":"DeleteEnvironmentConfiguration",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteEnvironmentConfigurationMessage"}
    },
    "DescribeApplicationVersions":{
      "name":"DescribeApplicationVersions",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeApplicationVersionsMessage"},
      "output":{
        "shape":"ApplicationVersionDescriptionsMessage",
        "resultWrapper":"DescribeApplicationVersionsResult"
      }
    },
    "DescribeApplications":{
      "name":"DescribeApplications",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeApplicationsMessage"},
      "output":{
        "shape":"ApplicationDescriptionsMessage",
        "resultWrapper":"DescribeApplicationsResult"
      }
    },
    "DescribeConfigurationOptions":{
      "name":"DescribeConfigurationOptions",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeConfigurationOptionsMessage"},
      "output":{
        "shape":"ConfigurationOptionsDescription",
        "resultWrapper":"DescribeConfigurationOptionsResult"
      }
    },
    "DescribeConfigurationSettings":{
      "name":"DescribeConfigurationSettings",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeConfigurationSettingsMessage"},
      "output":{
        "shape":"ConfigurationSettingsDescriptions",
        "resultWrapper":"DescribeConfigurationSettingsResult"
      }
    },
    "DescribeEnvironmentResources":{
      "name":"DescribeEnvironmentResources",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeEnvironmentResourcesMessage"},
      "output":{
        "shape":"EnvironmentResourceDescriptionsMessage",
        "resultWrapper":"DescribeEnvironmentResourcesResult"
      },
      "errors":[
        {
          "shape":"InsufficientPrivilegesException",
          "error":{
            "code":"InsufficientPrivilegesException",
            "httpStatusCode":403,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DescribeEnvironments":{
      "name":"DescribeEnvironments",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeEnvironmentsMessage"},
      "output":{
        "shape":"EnvironmentDescriptionsMessage",
        "resultWrapper":"DescribeEnvironmentsResult"
      }
    },
    "DescribeEvents":{
      "name":"DescribeEvents",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeEventsMessage"},
      "output":{
        "shape":"EventDescriptionsMessage",
        "resultWrapper":"DescribeEventsResult"
      }
    },
    "ListAvailableSolutionStacks":{
      "name":"ListAvailableSolutionStacks",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "output":{
        "shape":"ListAvailableSolutionStacksResultMessage",
        "resultWrapper":"ListAvailableSolutionStacksResult"
      }
    },
    "RebuildEnvironment":{
      "name":"RebuildEnvironment",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"RebuildEnvironmentMessage"},
      "errors":[
        {
          "shape":"InsufficientPrivilegesException",
          "error":{
            "code":"InsufficientPrivilegesException",
            "httpStatusCode":403,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "RequestEnvironmentInfo":{
      "name":"RequestEnvironmentInfo",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"RequestEnvironmentInfoMessage"}
    },
    "RestartAppServer":{
      "name":"RestartAppServer",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"RestartAppServerMessage"}
    },
    "RetrieveEnvironmentInfo":{
      "name":"RetrieveEnvironmentInfo",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"RetrieveEnvironmentInfoMessage"},
      "output":{
        "shape":"RetrieveEnvironmentInfoResultMessage",
        "resultWrapper":"RetrieveEnvironmentInfoResult"
      }
    },
    "SwapEnvironmentCNAMEs":{
      "name":"SwapEnvironmentCNAMEs",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"SwapEnvironmentCNAMEsMessage"}
    },
    "TerminateEnvironment":{
      "name":"TerminateEnvironment",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"TerminateEnvironmentMessage"},
      "output":{
        "shape":"EnvironmentDescription",
        "resultWrapper":"TerminateEnvironmentResult"
      },
      "errors":[
        {
          "shape":"InsufficientPrivilegesException",
          "error":{
            "code":"InsufficientPrivilegesException",
            "httpStatusCode":403,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "UpdateApplication":{
      "name":"UpdateApplication",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"UpdateApplicationMessage"},
      "output":{
        "shape":"ApplicationDescriptionMessage",
        "resultWrapper":"UpdateApplicationResult"
      }
    },
    "UpdateApplicationVersion":{
      "name":"UpdateApplicationVersion",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"UpdateApplicationVersionMessage"},
      "output":{
        "shape":"ApplicationVersionDescriptionMessage",
        "resultWrapper":"UpdateApplicationVersionResult"
      }
    },
    "UpdateConfigurationTemplate":{
      "name":"UpdateConfigurationTemplate",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"UpdateConfigurationTemplateMessage"},
      "output":{
        "shape":"ConfigurationSettingsDescription",
        "resultWrapper":"UpdateConfigurationTemplateResult"
      },
      "errors":[
        {
          "shape":"InsufficientPrivilegesException",
          "error":{
            "code":"InsufficientPrivilegesException",
            "httpStatusCode":403,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "UpdateEnvironment":{
      "name":"UpdateEnvironment",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"UpdateEnvironmentMessage"},
      "output":{
        "shape":"EnvironmentDescription",
        "resultWrapper":"UpdateEnvironmentResult"
      },
      "errors":[
        {
          "shape":"InsufficientPrivilegesException",
          "error":{
            "code":"InsufficientPrivilegesException",
            "httpStatusCode":403,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "ValidateConfigurationSettings":{
      "name":"ValidateConfigurationSettings",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ValidateConfigurationSettingsMessage"},
      "output":{
        "shape":"ConfigurationSettingsValidationMessages",
        "resultWrapper":"ValidateConfigurationSettingsResult"
      },
      "errors":[
        {
          "shape":"InsufficientPrivilegesException",
          "error":{
            "code":"InsufficientPrivilegesException",
            "httpStatusCode":403,
            "senderFault":true
          },
          "exception":true
        }
      ]
    }
  },
  "shapes":{
    "ApplicationDescription":{
      "type":"structure",
      "members":{
        "ApplicationName":{"shape":"ApplicationName"},
        "Description":{"shape":"Description"},
        "DateCreated":{"shape":"CreationDate"},
        "DateUpdated":{"shape":"UpdateDate"},
        "Versions":{"shape":"VersionLabelsList"},
        "ConfigurationTemplates":{"shape":"ConfigurationTemplateNamesList"}
      }
    },
    "ApplicationDescriptionList":{
      "type":"list",
      "member":{"shape":"ApplicationDescription"}
    },
    "ApplicationDescriptionMessage":{
      "type":"structure",
      "members":{
        "Application":{"shape":"ApplicationDescription"}
      }
    },
    "ApplicationDescriptionsMessage":{
      "type":"structure",
      "members":{
        "Applications":{"shape":"ApplicationDescriptionList"}
      }
    },
    "ApplicationName":{
      "type":"string",
      "min":1,
      "max":100
    },
    "ApplicationNamesList":{
      "type":"list",
      "member":{"shape":"ApplicationName"}
    },
    "ApplicationVersionDescription":{
      "type":"structure",
      "members":{
        "ApplicationName":{"shape":"ApplicationName"},
        "Description":{"shape":"Description"},
        "VersionLabel":{"shape":"VersionLabel"},
        "SourceBundle":{"shape":"S3Location"},
        "DateCreated":{"shape":"CreationDate"},
        "DateUpdated":{"shape":"UpdateDate"}
      }
    },
    "ApplicationVersionDescriptionList":{
      "type":"list",
      "member":{"shape":"ApplicationVersionDescription"}
    },
    "ApplicationVersionDescriptionMessage":{
      "type":"structure",
      "members":{
        "ApplicationVersion":{"shape":"ApplicationVersionDescription"}
      }
    },
    "ApplicationVersionDescriptionsMessage":{
      "type":"structure",
      "members":{
        "ApplicationVersions":{"shape":"ApplicationVersionDescriptionList"}
      }
    },
    "AutoCreateApplication":{"type":"boolean"},
    "AutoScalingGroup":{
      "type":"structure",
      "members":{
        "Name":{"shape":"ResourceId"}
      }
    },
    "AutoScalingGroupList":{
      "type":"list",
      "member":{"shape":"AutoScalingGroup"}
    },
    "AvailableSolutionStackDetailsList":{
      "type":"list",
      "member":{"shape":"SolutionStackDescription"}
    },
    "AvailableSolutionStackNamesList":{
      "type":"list",
      "member":{"shape":"SolutionStackName"}
    },
    "CheckDNSAvailabilityMessage":{
      "type":"structure",
      "required":["CNAMEPrefix"],
      "members":{
        "CNAMEPrefix":{"shape":"DNSCnamePrefix"}
      }
    },
    "CheckDNSAvailabilityResultMessage":{
      "type":"structure",
      "members":{
        "Available":{"shape":"CnameAvailability"},
        "FullyQualifiedCNAME":{"shape":"DNSCname"}
      }
    },
    "CnameAvailability":{"type":"boolean"},
    "ConfigurationDeploymentStatus":{
      "type":"string",
      "enum":[
        "deployed",
        "pending",
        "failed"
      ]
    },
    "ConfigurationOptionDefaultValue":{"type":"string"},
    "ConfigurationOptionDescription":{
      "type":"structure",
      "members":{
        "Namespace":{"shape":"OptionNamespace"},
        "Name":{"shape":"ConfigurationOptionName"},
        "DefaultValue":{"shape":"ConfigurationOptionDefaultValue"},
        "ChangeSeverity":{"shape":"ConfigurationOptionSeverity"},
        "UserDefined":{"shape":"UserDefinedOption"},
        "ValueType":{"shape":"ConfigurationOptionValueType"},
        "ValueOptions":{"shape":"ConfigurationOptionPossibleValues"},
        "MinValue":{"shape":"OptionRestrictionMinValue"},
        "MaxValue":{"shape":"OptionRestrictionMaxValue"},
        "MaxLength":{"shape":"OptionRestrictionMaxLength"},
        "Regex":{"shape":"OptionRestrictionRegex"}
      }
    },
    "ConfigurationOptionDescriptionsList":{
      "type":"list",
      "member":{"shape":"ConfigurationOptionDescription"}
    },
    "ConfigurationOptionName":{"type":"string"},
    "ConfigurationOptionPossibleValue":{"type":"string"},
    "ConfigurationOptionPossibleValues":{
      "type":"list",
      "member":{"shape":"ConfigurationOptionPossibleValue"}
    },
    "ConfigurationOptionSetting":{
      "type":"structure",
      "members":{
        "Namespace":{"shape":"OptionNamespace"},
        "OptionName":{"shape":"ConfigurationOptionName"},
        "Value":{"shape":"ConfigurationOptionValue"}
      }
    },
    "ConfigurationOptionSettingsList":{
      "type":"list",
      "member":{"shape":"ConfigurationOptionSetting"}
    },
    "ConfigurationOptionSeverity":{"type":"string"},
    "ConfigurationOptionValue":{"type":"string"},
    "ConfigurationOptionValueType":{
      "type":"string",
      "enum":[
        "Scalar",
        "List"
      ]
    },
    "ConfigurationOptionsDescription":{
      "type":"structure",
      "members":{
        "SolutionStackName":{"shape":"SolutionStackName"},
        "Options":{"shape":"ConfigurationOptionDescriptionsList"}
      }
    },
    "ConfigurationSettingsDescription":{
      "type":"structure",
      "members":{
        "SolutionStackName":{"shape":"SolutionStackName"},
        "ApplicationName":{"shape":"ApplicationName"},
        "TemplateName":{"shape":"ConfigurationTemplateName"},
        "Description":{"shape":"Description"},
        "EnvironmentName":{"shape":"EnvironmentName"},
        "DeploymentStatus":{"shape":"ConfigurationDeploymentStatus"},
        "DateCreated":{"shape":"CreationDate"},
        "DateUpdated":{"shape":"UpdateDate"},
        "OptionSettings":{"shape":"ConfigurationOptionSettingsList"}
      }
    },
    "ConfigurationSettingsDescriptionList":{
      "type":"list",
      "member":{"shape":"ConfigurationSettingsDescription"}
    },
    "ConfigurationSettingsDescriptions":{
      "type":"structure",
      "members":{
        "ConfigurationSettings":{"shape":"ConfigurationSettingsDescriptionList"}
      }
    },
    "ConfigurationSettingsValidationMessages":{
      "type":"structure",
      "members":{
        "Messages":{"shape":"ValidationMessagesList"}
      }
    },
    "ConfigurationTemplateName":{
      "type":"string",
      "min":1,
      "max":100
    },
    "ConfigurationTemplateNamesList":{
      "type":"list",
      "member":{"shape":"ConfigurationTemplateName"}
    },
    "CreateApplicationMessage":{
      "type":"structure",
      "required":["ApplicationName"],
      "members":{
        "ApplicationName":{"shape":"ApplicationName"},
        "Description":{"shape":"Description"}
      }
    },
    "CreateApplicationVersionMessage":{
      "type":"structure",
      "required":[
        "ApplicationName",
        "VersionLabel"
      ],
      "members":{
        "ApplicationName":{"shape":"ApplicationName"},
        "VersionLabel":{"shape":"VersionLabel"},
        "Description":{"shape":"Description"},
        "SourceBundle":{"shape":"S3Location"},
        "AutoCreateApplication":{"shape":"AutoCreateApplication"}
      }
    },
    "CreateConfigurationTemplateMessage":{
      "type":"structure",
      "required":[
        "ApplicationName",
        "TemplateName"
      ],
      "members":{
        "ApplicationName":{"shape":"ApplicationName"},
        "TemplateName":{"shape":"ConfigurationTemplateName"},
        "SolutionStackName":{"shape":"SolutionStackName"},
        "SourceConfiguration":{"shape":"SourceConfiguration"},
        "EnvironmentId":{"shape":"EnvironmentId"},
        "Description":{"shape":"Description"},
        "OptionSettings":{"shape":"ConfigurationOptionSettingsList"}
      }
    },
    "CreateEnvironmentMessage":{
      "type":"structure",
      "required":[
        "ApplicationName",
        "EnvironmentName"
      ],
      "members":{
        "ApplicationName":{"shape":"ApplicationName"},
        "EnvironmentName":{"shape":"EnvironmentName"},
        "Description":{"shape":"Description"},
        "CNAMEPrefix":{"shape":"DNSCnamePrefix"},
        "Tier":{"shape":"EnvironmentTier"},
        "Tags":{"shape":"Tags"},
        "VersionLabel":{"shape":"VersionLabel"},
        "TemplateName":{"shape":"ConfigurationTemplateName"},
        "SolutionStackName":{"shape":"SolutionStackName"},
        "OptionSettings":{"shape":"ConfigurationOptionSettingsList"},
        "OptionsToRemove":{"shape":"OptionsSpecifierList"}
      }
    },
    "CreateStorageLocationResultMessage":{
      "type":"structure",
      "members":{
        "S3Bucket":{"shape":"S3Bucket"}
      }
    },
    "CreationDate":{"type":"timestamp"},
    "DNSCname":{
      "type":"string",
      "min":1,
      "max":255
    },
    "DNSCnamePrefix":{
      "type":"string",
      "min":4,
      "max":63
    },
    "DeleteApplicationMessage":{
      "type":"structure",
      "required":["ApplicationName"],
      "members":{
        "ApplicationName":{"shape":"ApplicationName"},
        "TerminateEnvByForce":{"shape":"TerminateEnvForce"}
      }
    },
    "DeleteApplicationVersionMessage":{
      "type":"structure",
      "required":[
        "ApplicationName",
        "VersionLabel"
      ],
      "members":{
        "ApplicationName":{"shape":"ApplicationName"},
        "VersionLabel":{"shape":"VersionLabel"},
        "DeleteSourceBundle":{"shape":"DeleteSourceBundle"}
      }
    },
    "DeleteConfigurationTemplateMessage":{
      "type":"structure",
      "required":[
        "ApplicationName",
        "TemplateName"
      ],
      "members":{
        "ApplicationName":{"shape":"ApplicationName"},
        "TemplateName":{"shape":"ConfigurationTemplateName"}
      }
    },
    "DeleteEnvironmentConfigurationMessage":{
      "type":"structure",
      "required":[
        "ApplicationName",
        "EnvironmentName"
      ],
      "members":{
        "ApplicationName":{"shape":"ApplicationName"},
        "EnvironmentName":{"shape":"EnvironmentName"}
      }
    },
    "DeleteSourceBundle":{"type":"boolean"},
    "DescribeApplicationVersionsMessage":{
      "type":"structure",
      "members":{
        "ApplicationName":{"shape":"ApplicationName"},
        "VersionLabels":{"shape":"VersionLabelsList"}
      }
    },
    "DescribeApplicationsMessage":{
      "type":"structure",
      "members":{
        "ApplicationNames":{"shape":"ApplicationNamesList"}
      }
    },
    "DescribeConfigurationOptionsMessage":{
      "type":"structure",
      "members":{
        "ApplicationName":{"shape":"ApplicationName"},
        "TemplateName":{"shape":"ConfigurationTemplateName"},
        "EnvironmentName":{"shape":"EnvironmentName"},
        "SolutionStackName":{"shape":"SolutionStackName"},
        "Options":{"shape":"OptionsSpecifierList"}
      }
    },
    "DescribeConfigurationSettingsMessage":{
      "type":"structure",
      "required":["ApplicationName"],
      "members":{
        "ApplicationName":{"shape":"ApplicationName"},
        "TemplateName":{"shape":"ConfigurationTemplateName"},
        "EnvironmentName":{"shape":"EnvironmentName"}
      }
    },
    "DescribeEnvironmentResourcesMessage":{
      "type":"structure",
      "members":{
        "EnvironmentId":{"shape":"EnvironmentId"},
        "EnvironmentName":{"shape":"EnvironmentName"}
      }
    },
    "DescribeEnvironmentsMessage":{
      "type":"structure",
      "members":{
        "ApplicationName":{"shape":"ApplicationName"},
        "VersionLabel":{"shape":"VersionLabel"},
        "EnvironmentIds":{"shape":"EnvironmentIdList"},
        "EnvironmentNames":{"shape":"EnvironmentNamesList"},
        "IncludeDeleted":{"shape":"IncludeDeleted"},
        "IncludedDeletedBackTo":{"shape":"IncludeDeletedBackTo"}
      }
    },
    "DescribeEventsMessage":{
      "type":"structure",
      "members":{
        "ApplicationName":{"shape":"ApplicationName"},
        "VersionLabel":{"shape":"VersionLabel"},
        "TemplateName":{"shape":"ConfigurationTemplateName"},
        "EnvironmentId":{"shape":"EnvironmentId"},
        "EnvironmentName":{"shape":"EnvironmentName"},
        "RequestId":{"shape":"RequestId"},
        "Severity":{"shape":"EventSeverity"},
        "StartTime":{"shape":"TimeFilterStart"},
        "EndTime":{"shape":"TimeFilterEnd"},
        "MaxRecords":{"shape":"MaxRecords"},
        "NextToken":{"shape":"Token"}
      }
    },
    "Description":{
      "type":"string",
      "max":200
    },
    "Ec2InstanceId":{"type":"string"},
    "EndpointURL":{"type":"string"},
    "EnvironmentDescription":{
      "type":"structure",
      "members":{
        "EnvironmentName":{"shape":"EnvironmentName"},
        "EnvironmentId":{"shape":"EnvironmentId"},
        "ApplicationName":{"shape":"ApplicationName"},
        "VersionLabel":{"shape":"VersionLabel"},
        "SolutionStackName":{"shape":"SolutionStackName"},
        "TemplateName":{"shape":"ConfigurationTemplateName"},
        "Description":{"shape":"Description"},
        "EndpointURL":{"shape":"EndpointURL"},
        "CNAME":{"shape":"DNSCname"},
        "DateCreated":{"shape":"CreationDate"},
        "DateUpdated":{"shape":"UpdateDate"},
        "Status":{"shape":"EnvironmentStatus"},
        "Health":{"shape":"EnvironmentHealth"},
        "Resources":{"shape":"EnvironmentResourcesDescription"},
        "Tier":{"shape":"EnvironmentTier"}
      }
    },
    "EnvironmentDescriptionsList":{
      "type":"list",
      "member":{"shape":"EnvironmentDescription"}
    },
    "EnvironmentDescriptionsMessage":{
      "type":"structure",
      "members":{
        "Environments":{"shape":"EnvironmentDescriptionsList"}
      }
    },
    "EnvironmentHealth":{
      "type":"string",
      "enum":[
        "Green",
        "Yellow",
        "Red",
        "Grey"
      ]
    },
    "EnvironmentId":{"type":"string"},
    "EnvironmentIdList":{
      "type":"list",
      "member":{"shape":"EnvironmentId"}
    },
    "EnvironmentInfoDescription":{
      "type":"structure",
      "members":{
        "InfoType":{"shape":"EnvironmentInfoType"},
        "Ec2InstanceId":{"shape":"Ec2InstanceId"},
        "SampleTimestamp":{"shape":"SampleTimestamp"},
        "Message":{"shape":"Message"}
      }
    },
    "EnvironmentInfoDescriptionList":{
      "type":"list",
      "member":{"shape":"EnvironmentInfoDescription"}
    },
    "EnvironmentInfoType":{
      "type":"string",
      "enum":[
        "tail",
        "bundle"
      ]
    },
    "EnvironmentName":{
      "type":"string",
      "min":4,
      "max":23
    },
    "EnvironmentNamesList":{
      "type":"list",
      "member":{"shape":"EnvironmentName"}
    },
    "EnvironmentResourceDescription":{
      "type":"structure",
      "members":{
        "EnvironmentName":{"shape":"EnvironmentName"},
        "AutoScalingGroups":{"shape":"AutoScalingGroupList"},
        "Instances":{"shape":"InstanceList"},
        "LaunchConfigurations":{"shape":"LaunchConfigurationList"},
        "LoadBalancers":{"shape":"LoadBalancerList"},
        "Triggers":{"shape":"TriggerList"},
        "Queues":{"shape":"QueueList"}
      }
    },
    "EnvironmentResourceDescriptionsMessage":{
      "type":"structure",
      "members":{
        "EnvironmentResources":{"shape":"EnvironmentResourceDescription"}
      }
    },
    "EnvironmentResourcesDescription":{
      "type":"structure",
      "members":{
        "LoadBalancer":{"shape":"LoadBalancerDescription"}
      }
    },
    "EnvironmentStatus":{
      "type":"string",
      "enum":[
        "Launching",
        "Updating",
        "Ready",
        "Terminating",
        "Terminated"
      ]
    },
    "EnvironmentTier":{
      "type":"structure",
      "members":{
        "Name":{"shape":"String"},
        "Type":{"shape":"String"},
        "Version":{"shape":"String"}
      }
    },
    "EventDate":{"type":"timestamp"},
    "EventDescription":{
      "type":"structure",
      "members":{
        "EventDate":{"shape":"EventDate"},
        "Message":{"shape":"EventMessage"},
        "ApplicationName":{"shape":"ApplicationName"},
        "VersionLabel":{"shape":"VersionLabel"},
        "TemplateName":{"shape":"ConfigurationTemplateName"},
        "EnvironmentName":{"shape":"EnvironmentName"},
        "RequestId":{"shape":"RequestId"},
        "Severity":{"shape":"EventSeverity"}
      }
    },
    "EventDescriptionList":{
      "type":"list",
      "member":{"shape":"EventDescription"}
    },
    "EventDescriptionsMessage":{
      "type":"structure",
      "members":{
        "Events":{"shape":"EventDescriptionList"},
        "NextToken":{"shape":"Token"}
      }
    },
    "EventMessage":{"type":"string"},
    "EventSeverity":{
      "type":"string",
      "enum":[
        "TRACE",
        "DEBUG",
        "INFO",
        "WARN",
        "ERROR",
        "FATAL"
      ]
    },
    "FileTypeExtension":{
      "type":"string",
      "min":1,
      "max":100
    },
    "IncludeDeleted":{"type":"boolean"},
    "IncludeDeletedBackTo":{"type":"timestamp"},
    "Instance":{
      "type":"structure",
      "members":{
        "Id":{"shape":"ResourceId"}
      }
    },
    "InstanceList":{
      "type":"list",
      "member":{"shape":"Instance"}
    },
    "InsufficientPrivilegesException":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"InsufficientPrivilegesException",
        "httpStatusCode":403,
        "senderFault":true
      },
      "exception":true
    },
    "Integer":{"type":"integer"},
    "LaunchConfiguration":{
      "type":"structure",
      "members":{
        "Name":{"shape":"ResourceId"}
      }
    },
    "LaunchConfigurationList":{
      "type":"list",
      "member":{"shape":"LaunchConfiguration"}
    },
    "ListAvailableSolutionStacksResultMessage":{
      "type":"structure",
      "members":{
        "SolutionStacks":{"shape":"AvailableSolutionStackNamesList"},
        "SolutionStackDetails":{"shape":"AvailableSolutionStackDetailsList"}
      }
    },
    "Listener":{
      "type":"structure",
      "members":{
        "Protocol":{"shape":"String"},
        "Port":{"shape":"Integer"}
      }
    },
    "LoadBalancer":{
      "type":"structure",
      "members":{
        "Name":{"shape":"ResourceId"}
      }
    },
    "LoadBalancerDescription":{
      "type":"structure",
      "members":{
        "LoadBalancerName":{"shape":"String"},
        "Domain":{"shape":"String"},
        "Listeners":{"shape":"LoadBalancerListenersDescription"}
      }
    },
    "LoadBalancerList":{
      "type":"list",
      "member":{"shape":"LoadBalancer"}
    },
    "LoadBalancerListenersDescription":{
      "type":"list",
      "member":{"shape":"Listener"}
    },
    "MaxRecords":{
      "type":"integer",
      "min":1,
      "max":1000
    },
    "Message":{"type":"string"},
    "OperationInProgressException":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"OperationInProgressFailure",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "OptionNamespace":{"type":"string"},
    "OptionRestrictionMaxLength":{"type":"integer"},
    "OptionRestrictionMaxValue":{"type":"integer"},
    "OptionRestrictionMinValue":{"type":"integer"},
    "OptionRestrictionRegex":{
      "type":"structure",
      "members":{
        "Pattern":{"shape":"RegexPattern"},
        "Label":{"shape":"RegexLabel"}
      }
    },
    "OptionSpecification":{
      "type":"structure",
      "members":{
        "Namespace":{"shape":"OptionNamespace"},
        "OptionName":{"shape":"ConfigurationOptionName"}
      }
    },
    "OptionsSpecifierList":{
      "type":"list",
      "member":{"shape":"OptionSpecification"}
    },
    "Queue":{
      "type":"structure",
      "members":{
        "Name":{"shape":"String"},
        "URL":{"shape":"String"}
      }
    },
    "QueueList":{
      "type":"list",
      "member":{"shape":"Queue"}
    },
    "RebuildEnvironmentMessage":{
      "type":"structure",
      "members":{
        "EnvironmentId":{"shape":"EnvironmentId"},
        "EnvironmentName":{"shape":"EnvironmentName"}
      }
    },
    "RegexLabel":{"type":"string"},
    "RegexPattern":{"type":"string"},
    "RequestEnvironmentInfoMessage":{
      "type":"structure",
      "required":["InfoType"],
      "members":{
        "EnvironmentId":{"shape":"EnvironmentId"},
        "EnvironmentName":{"shape":"EnvironmentName"},
        "InfoType":{"shape":"EnvironmentInfoType"}
      }
    },
    "RequestId":{"type":"string"},
    "ResourceId":{"type":"string"},
    "RestartAppServerMessage":{
      "type":"structure",
      "members":{
        "EnvironmentId":{"shape":"EnvironmentId"},
        "EnvironmentName":{"shape":"EnvironmentName"}
      }
    },
    "RetrieveEnvironmentInfoMessage":{
      "type":"structure",
      "required":["InfoType"],
      "members":{
        "EnvironmentId":{"shape":"EnvironmentId"},
        "EnvironmentName":{"shape":"EnvironmentName"},
        "InfoType":{"shape":"EnvironmentInfoType"}
      }
    },
    "RetrieveEnvironmentInfoResultMessage":{
      "type":"structure",
      "members":{
        "EnvironmentInfo":{"shape":"EnvironmentInfoDescriptionList"}
      }
    },
    "S3Bucket":{
      "type":"string",
      "max":255
    },
    "S3Key":{
      "type":"string",
      "max":1024
    },
    "S3Location":{
      "type":"structure",
      "members":{
        "S3Bucket":{"shape":"S3Bucket"},
        "S3Key":{"shape":"S3Key"}
      }
    },
    "S3LocationNotInServiceRegionException":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"S3LocationNotInServiceRegionException",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "S3SubscriptionRequiredException":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"S3SubscriptionRequiredException",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "SampleTimestamp":{"type":"timestamp"},
    "SolutionStackDescription":{
      "type":"structure",
      "members":{
        "SolutionStackName":{"shape":"SolutionStackName"},
        "PermittedFileTypes":{"shape":"SolutionStackFileTypeList"}
      }
    },
    "SolutionStackFileTypeList":{
      "type":"list",
      "member":{"shape":"FileTypeExtension"}
    },
    "SolutionStackName":{
      "type":"string",
      "max":100
    },
    "SourceBundleDeletionException":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"SourceBundleDeletionFailure",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "SourceConfiguration":{
      "type":"structure",
      "members":{
        "ApplicationName":{"shape":"ApplicationName"},
        "TemplateName":{"shape":"ConfigurationTemplateName"}
      }
    },
    "String":{"type":"string"},
    "SwapEnvironmentCNAMEsMessage":{
      "type":"structure",
      "members":{
        "SourceEnvironmentId":{"shape":"EnvironmentId"},
        "SourceEnvironmentName":{"shape":"EnvironmentName"},
        "DestinationEnvironmentId":{"shape":"EnvironmentId"},
        "DestinationEnvironmentName":{"shape":"EnvironmentName"}
      }
    },
    "Tag":{
      "type":"structure",
      "members":{
        "Key":{"shape":"TagKey"},
        "Value":{"shape":"TagValue"}
      }
    },
    "TagKey":{
      "type":"string",
      "min":1,
      "max":128
    },
    "TagValue":{
      "type":"string",
      "min":1,
      "max":256
    },
    "Tags":{
      "type":"list",
      "member":{"shape":"Tag"}
    },
    "TerminateEnvForce":{"type":"boolean"},
    "TerminateEnvironmentMessage":{
      "type":"structure",
      "members":{
        "EnvironmentId":{"shape":"EnvironmentId"},
        "EnvironmentName":{"shape":"EnvironmentName"},
        "TerminateResources":{"shape":"TerminateEnvironmentResources"}
      }
    },
    "TerminateEnvironmentResources":{"type":"boolean"},
    "TimeFilterEnd":{"type":"timestamp"},
    "TimeFilterStart":{"type":"timestamp"},
    "Token":{"type":"string"},
    "TooManyApplicationVersionsException":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "TooManyApplicationsException":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"TooManyApplicationsException",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "TooManyBucketsException":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"TooManyBucketsException",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "TooManyConfigurationTemplatesException":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"TooManyConfigurationTemplatesException",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "TooManyEnvironmentsException":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"TooManyEnvironmentsException",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "Trigger":{
      "type":"structure",
      "members":{
        "Name":{"shape":"ResourceId"}
      }
    },
    "TriggerList":{
      "type":"list",
      "member":{"shape":"Trigger"}
    },
    "UpdateApplicationMessage":{
      "type":"structure",
      "required":["ApplicationName"],
      "members":{
        "ApplicationName":{"shape":"ApplicationName"},
        "Description":{"shape":"Description"}
      }
    },
    "UpdateApplicationVersionMessage":{
      "type":"structure",
      "required":[
        "ApplicationName",
        "VersionLabel"
      ],
      "members":{
        "ApplicationName":{"shape":"ApplicationName"},
        "VersionLabel":{"shape":"VersionLabel"},
        "Description":{"shape":"Description"}
      }
    },
    "UpdateConfigurationTemplateMessage":{
      "type":"structure",
      "required":[
        "ApplicationName",
        "TemplateName"
      ],
      "members":{
        "ApplicationName":{"shape":"ApplicationName"},
        "TemplateName":{"shape":"ConfigurationTemplateName"},
        "Description":{"shape":"Description"},
        "OptionSettings":{"shape":"ConfigurationOptionSettingsList"},
        "OptionsToRemove":{"shape":"OptionsSpecifierList"}
      }
    },
    "UpdateDate":{"type":"timestamp"},
    "UpdateEnvironmentMessage":{
      "type":"structure",
      "members":{
        "EnvironmentId":{"shape":"EnvironmentId"},
        "EnvironmentName":{"shape":"EnvironmentName"},
        "Description":{"shape":"Description"},
        "Tier":{"shape":"EnvironmentTier"},
        "VersionLabel":{"shape":"VersionLabel"},
        "TemplateName":{"shape":"ConfigurationTemplateName"},
        "OptionSettings":{"shape":"ConfigurationOptionSettingsList"},
        "OptionsToRemove":{"shape":"OptionsSpecifierList"}
      }
    },
    "UserDefinedOption":{"type":"boolean"},
    "ValidateConfigurationSettingsMessage":{
      "type":"structure",
      "required":[
        "ApplicationName",
        "OptionSettings"
      ],
      "members":{
        "ApplicationName":{"shape":"ApplicationName"},
        "TemplateName":{"shape":"ConfigurationTemplateName"},
        "EnvironmentName":{"shape":"EnvironmentName"},
        "OptionSettings":{"shape":"ConfigurationOptionSettingsList"}
      }
    },
    "ValidationMessage":{
      "type":"structure",
      "members":{
        "Message":{"shape":"ValidationMessageString"},
        "Severity":{"shape":"ValidationSeverity"},
        "Namespace":{"shape":"OptionNamespace"},
        "OptionName":{"shape":"ConfigurationOptionName"}
      }
    },
    "ValidationMessageString":{"type":"string"},
    "ValidationMessagesList":{
      "type":"list",
      "member":{"shape":"ValidationMessage"}
    },
    "ValidationSeverity":{
      "type":"string",
      "enum":[
        "error",
        "warning"
      ]
    },
    "VersionLabel":{
      "type":"string",
      "min":1,
      "max":100
    },
    "VersionLabelsList":{
      "type":"list",
      "member":{"shape":"VersionLabel"}
    }
  }
}
,
"ElasticLoadBalancing":
{
  "metadata":{
    "apiVersion":"2012-06-01",
    "endpointPrefix":"elasticloadbalancing",
    "serviceFullName":"Elastic Load Balancing",
    "signatureVersion":"v4",
    "xmlNamespace":"http://elasticloadbalancing.amazonaws.com/doc/2012-06-01/",
    "protocol":"query"
  },
  "operations":{
    "AddTags":{
      "name":"AddTags",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"AddTagsInput"},
      "output":{
        "shape":"AddTagsOutput",
        "resultWrapper":"AddTagsResult"
      },
      "errors":[
        {
          "shape":"AccessPointNotFoundException",
          "error":{
            "code":"LoadBalancerNotFound",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"TooManyTagsException",
          "error":{
            "code":"TooManyTags",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"DuplicateTagKeysException",
          "error":{
            "code":"DuplicateTagKeys",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "ApplySecurityGroupsToLoadBalancer":{
      "name":"ApplySecurityGroupsToLoadBalancer",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ApplySecurityGroupsToLoadBalancerInput"},
      "output":{
        "shape":"ApplySecurityGroupsToLoadBalancerOutput",
        "resultWrapper":"ApplySecurityGroupsToLoadBalancerResult"
      },
      "errors":[
        {
          "shape":"AccessPointNotFoundException",
          "error":{
            "code":"LoadBalancerNotFound",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidConfigurationRequestException",
          "error":{
            "code":"InvalidConfigurationRequest",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidSecurityGroupException",
          "error":{
            "code":"InvalidSecurityGroup",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "AttachLoadBalancerToSubnets":{
      "name":"AttachLoadBalancerToSubnets",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"AttachLoadBalancerToSubnetsInput"},
      "output":{
        "shape":"AttachLoadBalancerToSubnetsOutput",
        "resultWrapper":"AttachLoadBalancerToSubnetsResult"
      },
      "errors":[
        {
          "shape":"AccessPointNotFoundException",
          "error":{
            "code":"LoadBalancerNotFound",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidConfigurationRequestException",
          "error":{
            "code":"InvalidConfigurationRequest",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"SubnetNotFoundException",
          "error":{
            "code":"SubnetNotFound",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidSubnetException",
          "error":{
            "code":"InvalidSubnet",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "ConfigureHealthCheck":{
      "name":"ConfigureHealthCheck",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ConfigureHealthCheckInput"},
      "output":{
        "shape":"ConfigureHealthCheckOutput",
        "resultWrapper":"ConfigureHealthCheckResult"
      },
      "errors":[
        {
          "shape":"AccessPointNotFoundException",
          "error":{
            "code":"LoadBalancerNotFound",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "CreateAppCookieStickinessPolicy":{
      "name":"CreateAppCookieStickinessPolicy",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateAppCookieStickinessPolicyInput"},
      "output":{
        "shape":"CreateAppCookieStickinessPolicyOutput",
        "resultWrapper":"CreateAppCookieStickinessPolicyResult"
      },
      "errors":[
        {
          "shape":"AccessPointNotFoundException",
          "error":{
            "code":"LoadBalancerNotFound",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"DuplicatePolicyNameException",
          "error":{
            "code":"DuplicatePolicyName",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"TooManyPoliciesException",
          "error":{
            "code":"TooManyPolicies",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidConfigurationRequestException",
          "error":{
            "code":"InvalidConfigurationRequest",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "CreateLBCookieStickinessPolicy":{
      "name":"CreateLBCookieStickinessPolicy",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateLBCookieStickinessPolicyInput"},
      "output":{
        "shape":"CreateLBCookieStickinessPolicyOutput",
        "resultWrapper":"CreateLBCookieStickinessPolicyResult"
      },
      "errors":[
        {
          "shape":"AccessPointNotFoundException",
          "error":{
            "code":"LoadBalancerNotFound",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"DuplicatePolicyNameException",
          "error":{
            "code":"DuplicatePolicyName",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"TooManyPoliciesException",
          "error":{
            "code":"TooManyPolicies",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidConfigurationRequestException",
          "error":{
            "code":"InvalidConfigurationRequest",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "CreateLoadBalancer":{
      "name":"CreateLoadBalancer",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateAccessPointInput"},
      "output":{
        "shape":"CreateAccessPointOutput",
        "resultWrapper":"CreateLoadBalancerResult"
      },
      "errors":[
        {
          "shape":"DuplicateAccessPointNameException",
          "error":{
            "code":"DuplicateLoadBalancerName",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"TooManyAccessPointsException",
          "error":{
            "code":"TooManyLoadBalancers",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"CertificateNotFoundException",
          "error":{
            "code":"CertificateNotFound",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidConfigurationRequestException",
          "error":{
            "code":"InvalidConfigurationRequest",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"SubnetNotFoundException",
          "error":{
            "code":"SubnetNotFound",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidSubnetException",
          "error":{
            "code":"InvalidSubnet",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidSecurityGroupException",
          "error":{
            "code":"InvalidSecurityGroup",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidSchemeException",
          "error":{
            "code":"InvalidScheme",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"TooManyTagsException",
          "error":{
            "code":"TooManyTags",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"DuplicateTagKeysException",
          "error":{
            "code":"DuplicateTagKeys",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "CreateLoadBalancerListeners":{
      "name":"CreateLoadBalancerListeners",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateLoadBalancerListenerInput"},
      "output":{
        "shape":"CreateLoadBalancerListenerOutput",
        "resultWrapper":"CreateLoadBalancerListenersResult"
      },
      "errors":[
        {
          "shape":"AccessPointNotFoundException",
          "error":{
            "code":"LoadBalancerNotFound",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"DuplicateListenerException",
          "error":{
            "code":"DuplicateListener",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"CertificateNotFoundException",
          "error":{
            "code":"CertificateNotFound",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidConfigurationRequestException",
          "error":{
            "code":"InvalidConfigurationRequest",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "CreateLoadBalancerPolicy":{
      "name":"CreateLoadBalancerPolicy",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateLoadBalancerPolicyInput"},
      "output":{
        "shape":"CreateLoadBalancerPolicyOutput",
        "resultWrapper":"CreateLoadBalancerPolicyResult"
      },
      "errors":[
        {
          "shape":"AccessPointNotFoundException",
          "error":{
            "code":"LoadBalancerNotFound",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"PolicyTypeNotFoundException",
          "error":{
            "code":"PolicyTypeNotFound",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"DuplicatePolicyNameException",
          "error":{
            "code":"DuplicatePolicyName",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"TooManyPoliciesException",
          "error":{
            "code":"TooManyPolicies",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidConfigurationRequestException",
          "error":{
            "code":"InvalidConfigurationRequest",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DeleteLoadBalancer":{
      "name":"DeleteLoadBalancer",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteAccessPointInput"},
      "output":{
        "shape":"DeleteAccessPointOutput",
        "resultWrapper":"DeleteLoadBalancerResult"
      }
    },
    "DeleteLoadBalancerListeners":{
      "name":"DeleteLoadBalancerListeners",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteLoadBalancerListenerInput"},
      "output":{
        "shape":"DeleteLoadBalancerListenerOutput",
        "resultWrapper":"DeleteLoadBalancerListenersResult"
      },
      "errors":[
        {
          "shape":"AccessPointNotFoundException",
          "error":{
            "code":"LoadBalancerNotFound",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DeleteLoadBalancerPolicy":{
      "name":"DeleteLoadBalancerPolicy",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteLoadBalancerPolicyInput"},
      "output":{
        "shape":"DeleteLoadBalancerPolicyOutput",
        "resultWrapper":"DeleteLoadBalancerPolicyResult"
      },
      "errors":[
        {
          "shape":"AccessPointNotFoundException",
          "error":{
            "code":"LoadBalancerNotFound",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidConfigurationRequestException",
          "error":{
            "code":"InvalidConfigurationRequest",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DeregisterInstancesFromLoadBalancer":{
      "name":"DeregisterInstancesFromLoadBalancer",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeregisterEndPointsInput"},
      "output":{
        "shape":"DeregisterEndPointsOutput",
        "resultWrapper":"DeregisterInstancesFromLoadBalancerResult"
      },
      "errors":[
        {
          "shape":"AccessPointNotFoundException",
          "error":{
            "code":"LoadBalancerNotFound",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidEndPointException",
          "error":{
            "code":"InvalidInstance",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DescribeInstanceHealth":{
      "name":"DescribeInstanceHealth",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeEndPointStateInput"},
      "output":{
        "shape":"DescribeEndPointStateOutput",
        "resultWrapper":"DescribeInstanceHealthResult"
      },
      "errors":[
        {
          "shape":"AccessPointNotFoundException",
          "error":{
            "code":"LoadBalancerNotFound",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidEndPointException",
          "error":{
            "code":"InvalidInstance",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DescribeLoadBalancerAttributes":{
      "name":"DescribeLoadBalancerAttributes",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeLoadBalancerAttributesInput"},
      "output":{
        "shape":"DescribeLoadBalancerAttributesOutput",
        "resultWrapper":"DescribeLoadBalancerAttributesResult"
      },
      "errors":[
        {
          "shape":"AccessPointNotFoundException",
          "error":{
            "code":"LoadBalancerNotFound",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"LoadBalancerAttributeNotFoundException",
          "error":{
            "code":"LoadBalancerAttributeNotFound",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DescribeLoadBalancerPolicies":{
      "name":"DescribeLoadBalancerPolicies",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeLoadBalancerPoliciesInput"},
      "output":{
        "shape":"DescribeLoadBalancerPoliciesOutput",
        "resultWrapper":"DescribeLoadBalancerPoliciesResult"
      },
      "errors":[
        {
          "shape":"AccessPointNotFoundException",
          "error":{
            "code":"LoadBalancerNotFound",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"PolicyNotFoundException",
          "error":{
            "code":"PolicyNotFound",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DescribeLoadBalancerPolicyTypes":{
      "name":"DescribeLoadBalancerPolicyTypes",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeLoadBalancerPolicyTypesInput"},
      "output":{
        "shape":"DescribeLoadBalancerPolicyTypesOutput",
        "resultWrapper":"DescribeLoadBalancerPolicyTypesResult"
      },
      "errors":[
        {
          "shape":"PolicyTypeNotFoundException",
          "error":{
            "code":"PolicyTypeNotFound",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DescribeLoadBalancers":{
      "name":"DescribeLoadBalancers",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeAccessPointsInput"},
      "output":{
        "shape":"DescribeAccessPointsOutput",
        "resultWrapper":"DescribeLoadBalancersResult"
      },
      "errors":[
        {
          "shape":"AccessPointNotFoundException",
          "error":{
            "code":"LoadBalancerNotFound",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DescribeTags":{
      "name":"DescribeTags",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeTagsInput"},
      "output":{
        "shape":"DescribeTagsOutput",
        "resultWrapper":"DescribeTagsResult"
      },
      "errors":[
        {
          "shape":"AccessPointNotFoundException",
          "error":{
            "code":"LoadBalancerNotFound",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DetachLoadBalancerFromSubnets":{
      "name":"DetachLoadBalancerFromSubnets",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DetachLoadBalancerFromSubnetsInput"},
      "output":{
        "shape":"DetachLoadBalancerFromSubnetsOutput",
        "resultWrapper":"DetachLoadBalancerFromSubnetsResult"
      },
      "errors":[
        {
          "shape":"AccessPointNotFoundException",
          "error":{
            "code":"LoadBalancerNotFound",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidConfigurationRequestException",
          "error":{
            "code":"InvalidConfigurationRequest",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DisableAvailabilityZonesForLoadBalancer":{
      "name":"DisableAvailabilityZonesForLoadBalancer",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"RemoveAvailabilityZonesInput"},
      "output":{
        "shape":"RemoveAvailabilityZonesOutput",
        "resultWrapper":"DisableAvailabilityZonesForLoadBalancerResult"
      },
      "errors":[
        {
          "shape":"AccessPointNotFoundException",
          "error":{
            "code":"LoadBalancerNotFound",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidConfigurationRequestException",
          "error":{
            "code":"InvalidConfigurationRequest",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "EnableAvailabilityZonesForLoadBalancer":{
      "name":"EnableAvailabilityZonesForLoadBalancer",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"AddAvailabilityZonesInput"},
      "output":{
        "shape":"AddAvailabilityZonesOutput",
        "resultWrapper":"EnableAvailabilityZonesForLoadBalancerResult"
      },
      "errors":[
        {
          "shape":"AccessPointNotFoundException",
          "error":{
            "code":"LoadBalancerNotFound",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "ModifyLoadBalancerAttributes":{
      "name":"ModifyLoadBalancerAttributes",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ModifyLoadBalancerAttributesInput"},
      "output":{
        "shape":"ModifyLoadBalancerAttributesOutput",
        "resultWrapper":"ModifyLoadBalancerAttributesResult"
      },
      "errors":[
        {
          "shape":"AccessPointNotFoundException",
          "error":{
            "code":"LoadBalancerNotFound",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"LoadBalancerAttributeNotFoundException",
          "error":{
            "code":"LoadBalancerAttributeNotFound",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidConfigurationRequestException",
          "error":{
            "code":"InvalidConfigurationRequest",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "RegisterInstancesWithLoadBalancer":{
      "name":"RegisterInstancesWithLoadBalancer",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"RegisterEndPointsInput"},
      "output":{
        "shape":"RegisterEndPointsOutput",
        "resultWrapper":"RegisterInstancesWithLoadBalancerResult"
      },
      "errors":[
        {
          "shape":"AccessPointNotFoundException",
          "error":{
            "code":"LoadBalancerNotFound",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidEndPointException",
          "error":{
            "code":"InvalidInstance",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "RemoveTags":{
      "name":"RemoveTags",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"RemoveTagsInput"},
      "output":{
        "shape":"RemoveTagsOutput",
        "resultWrapper":"RemoveTagsResult"
      },
      "errors":[
        {
          "shape":"AccessPointNotFoundException",
          "error":{
            "code":"LoadBalancerNotFound",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "SetLoadBalancerListenerSSLCertificate":{
      "name":"SetLoadBalancerListenerSSLCertificate",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"SetLoadBalancerListenerSSLCertificateInput"},
      "output":{
        "shape":"SetLoadBalancerListenerSSLCertificateOutput",
        "resultWrapper":"SetLoadBalancerListenerSSLCertificateResult"
      },
      "errors":[
        {
          "shape":"CertificateNotFoundException",
          "error":{
            "code":"CertificateNotFound",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"AccessPointNotFoundException",
          "error":{
            "code":"LoadBalancerNotFound",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"ListenerNotFoundException",
          "error":{
            "code":"ListenerNotFound",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidConfigurationRequestException",
          "error":{
            "code":"InvalidConfigurationRequest",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "SetLoadBalancerPoliciesForBackendServer":{
      "name":"SetLoadBalancerPoliciesForBackendServer",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"SetLoadBalancerPoliciesForBackendServerInput"},
      "output":{
        "shape":"SetLoadBalancerPoliciesForBackendServerOutput",
        "resultWrapper":"SetLoadBalancerPoliciesForBackendServerResult"
      },
      "errors":[
        {
          "shape":"AccessPointNotFoundException",
          "error":{
            "code":"LoadBalancerNotFound",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"PolicyNotFoundException",
          "error":{
            "code":"PolicyNotFound",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidConfigurationRequestException",
          "error":{
            "code":"InvalidConfigurationRequest",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "SetLoadBalancerPoliciesOfListener":{
      "name":"SetLoadBalancerPoliciesOfListener",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"SetLoadBalancerPoliciesOfListenerInput"},
      "output":{
        "shape":"SetLoadBalancerPoliciesOfListenerOutput",
        "resultWrapper":"SetLoadBalancerPoliciesOfListenerResult"
      },
      "errors":[
        {
          "shape":"AccessPointNotFoundException",
          "error":{
            "code":"LoadBalancerNotFound",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"PolicyNotFoundException",
          "error":{
            "code":"PolicyNotFound",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"ListenerNotFoundException",
          "error":{
            "code":"ListenerNotFound",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidConfigurationRequestException",
          "error":{
            "code":"InvalidConfigurationRequest",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        }
      ]
    }
  },
  "shapes":{
    "AccessLog":{
      "type":"structure",
      "required":["Enabled"],
      "members":{
        "Enabled":{"shape":"AccessLogEnabled"},
        "S3BucketName":{"shape":"S3BucketName"},
        "EmitInterval":{"shape":"AccessLogInterval"},
        "S3BucketPrefix":{"shape":"AccessLogPrefix"}
      }
    },
    "AccessLogEnabled":{"type":"boolean"},
    "AccessLogInterval":{"type":"integer"},
    "AccessLogPrefix":{"type":"string"},
    "AccessPointName":{"type":"string"},
    "AccessPointNotFoundException":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"LoadBalancerNotFound",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "AccessPointPort":{"type":"integer"},
    "AddAvailabilityZonesInput":{
      "type":"structure",
      "required":[
        "LoadBalancerName",
        "AvailabilityZones"
      ],
      "members":{
        "LoadBalancerName":{"shape":"AccessPointName"},
        "AvailabilityZones":{"shape":"AvailabilityZones"}
      }
    },
    "AddAvailabilityZonesOutput":{
      "type":"structure",
      "members":{
        "AvailabilityZones":{"shape":"AvailabilityZones"}
      }
    },
    "AddTagsInput":{
      "type":"structure",
      "required":[
        "LoadBalancerNames",
        "Tags"
      ],
      "members":{
        "LoadBalancerNames":{"shape":"LoadBalancerNames"},
        "Tags":{"shape":"TagList"}
      }
    },
    "AddTagsOutput":{
      "type":"structure",
      "members":{
      }
    },
    "AdditionalAttribute":{
      "type":"structure",
      "members":{
        "Key":{"shape":"StringVal"},
        "Value":{"shape":"StringVal"}
      }
    },
    "AdditionalAttributes":{
      "type":"list",
      "member":{"shape":"AdditionalAttribute"}
    },
    "AppCookieStickinessPolicies":{
      "type":"list",
      "member":{"shape":"AppCookieStickinessPolicy"}
    },
    "AppCookieStickinessPolicy":{
      "type":"structure",
      "members":{
        "PolicyName":{"shape":"PolicyName"},
        "CookieName":{"shape":"CookieName"}
      }
    },
    "ApplySecurityGroupsToLoadBalancerInput":{
      "type":"structure",
      "required":[
        "LoadBalancerName",
        "SecurityGroups"
      ],
      "members":{
        "LoadBalancerName":{"shape":"AccessPointName"},
        "SecurityGroups":{"shape":"SecurityGroups"}
      }
    },
    "ApplySecurityGroupsToLoadBalancerOutput":{
      "type":"structure",
      "members":{
        "SecurityGroups":{"shape":"SecurityGroups"}
      }
    },
    "AttachLoadBalancerToSubnetsInput":{
      "type":"structure",
      "required":[
        "LoadBalancerName",
        "Subnets"
      ],
      "members":{
        "LoadBalancerName":{"shape":"AccessPointName"},
        "Subnets":{"shape":"Subnets"}
      }
    },
    "AttachLoadBalancerToSubnetsOutput":{
      "type":"structure",
      "members":{
        "Subnets":{"shape":"Subnets"}
      }
    },
    "AttributeName":{"type":"string"},
    "AttributeType":{"type":"string"},
    "AttributeValue":{"type":"string"},
    "AvailabilityZone":{"type":"string"},
    "AvailabilityZones":{
      "type":"list",
      "member":{"shape":"AvailabilityZone"}
    },
    "BackendServerDescription":{
      "type":"structure",
      "members":{
        "InstancePort":{"shape":"InstancePort"},
        "PolicyNames":{"shape":"PolicyNames"}
      }
    },
    "BackendServerDescriptions":{
      "type":"list",
      "member":{"shape":"BackendServerDescription"}
    },
    "Cardinality":{"type":"string"},
    "CertificateNotFoundException":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"CertificateNotFound",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "ConfigureHealthCheckInput":{
      "type":"structure",
      "required":[
        "LoadBalancerName",
        "HealthCheck"
      ],
      "members":{
        "LoadBalancerName":{"shape":"AccessPointName"},
        "HealthCheck":{"shape":"HealthCheck"}
      }
    },
    "ConfigureHealthCheckOutput":{
      "type":"structure",
      "members":{
        "HealthCheck":{"shape":"HealthCheck"}
      }
    },
    "ConnectionDraining":{
      "type":"structure",
      "required":["Enabled"],
      "members":{
        "Enabled":{"shape":"ConnectionDrainingEnabled"},
        "Timeout":{"shape":"ConnectionDrainingTimeout"}
      }
    },
    "ConnectionDrainingEnabled":{"type":"boolean"},
    "ConnectionDrainingTimeout":{"type":"integer"},
    "ConnectionSettings":{
      "type":"structure",
      "required":["IdleTimeout"],
      "members":{
        "IdleTimeout":{"shape":"IdleTimeout"}
      }
    },
    "CookieExpirationPeriod":{"type":"long"},
    "CookieName":{"type":"string"},
    "CreateAccessPointInput":{
      "type":"structure",
      "required":[
        "LoadBalancerName",
        "Listeners"
      ],
      "members":{
        "LoadBalancerName":{"shape":"AccessPointName"},
        "Listeners":{"shape":"Listeners"},
        "AvailabilityZones":{"shape":"AvailabilityZones"},
        "Subnets":{"shape":"Subnets"},
        "SecurityGroups":{"shape":"SecurityGroups"},
        "Scheme":{"shape":"LoadBalancerScheme"},
        "Tags":{"shape":"TagList"}
      }
    },
    "CreateAccessPointOutput":{
      "type":"structure",
      "members":{
        "DNSName":{"shape":"DNSName"}
      }
    },
    "CreateAppCookieStickinessPolicyInput":{
      "type":"structure",
      "required":[
        "LoadBalancerName",
        "PolicyName",
        "CookieName"
      ],
      "members":{
        "LoadBalancerName":{"shape":"AccessPointName"},
        "PolicyName":{"shape":"PolicyName"},
        "CookieName":{"shape":"CookieName"}
      }
    },
    "CreateAppCookieStickinessPolicyOutput":{
      "type":"structure",
      "members":{
      }
    },
    "CreateLBCookieStickinessPolicyInput":{
      "type":"structure",
      "required":[
        "LoadBalancerName",
        "PolicyName"
      ],
      "members":{
        "LoadBalancerName":{"shape":"AccessPointName"},
        "PolicyName":{"shape":"PolicyName"},
        "CookieExpirationPeriod":{"shape":"CookieExpirationPeriod"}
      }
    },
    "CreateLBCookieStickinessPolicyOutput":{
      "type":"structure",
      "members":{
      }
    },
    "CreateLoadBalancerListenerInput":{
      "type":"structure",
      "required":[
        "LoadBalancerName",
        "Listeners"
      ],
      "members":{
        "LoadBalancerName":{"shape":"AccessPointName"},
        "Listeners":{"shape":"Listeners"}
      }
    },
    "CreateLoadBalancerListenerOutput":{
      "type":"structure",
      "members":{
      }
    },
    "CreateLoadBalancerPolicyInput":{
      "type":"structure",
      "required":[
        "LoadBalancerName",
        "PolicyName",
        "PolicyTypeName"
      ],
      "members":{
        "LoadBalancerName":{"shape":"AccessPointName"},
        "PolicyName":{"shape":"PolicyName"},
        "PolicyTypeName":{"shape":"PolicyTypeName"},
        "PolicyAttributes":{"shape":"PolicyAttributes"}
      }
    },
    "CreateLoadBalancerPolicyOutput":{
      "type":"structure",
      "members":{
      }
    },
    "CreatedTime":{"type":"timestamp"},
    "CrossZoneLoadBalancing":{
      "type":"structure",
      "required":["Enabled"],
      "members":{
        "Enabled":{"shape":"CrossZoneLoadBalancingEnabled"}
      }
    },
    "CrossZoneLoadBalancingEnabled":{"type":"boolean"},
    "DNSName":{"type":"string"},
    "DefaultValue":{"type":"string"},
    "DeleteAccessPointInput":{
      "type":"structure",
      "required":["LoadBalancerName"],
      "members":{
        "LoadBalancerName":{"shape":"AccessPointName"}
      }
    },
    "DeleteAccessPointOutput":{
      "type":"structure",
      "members":{
      }
    },
    "DeleteLoadBalancerListenerInput":{
      "type":"structure",
      "required":[
        "LoadBalancerName",
        "LoadBalancerPorts"
      ],
      "members":{
        "LoadBalancerName":{"shape":"AccessPointName"},
        "LoadBalancerPorts":{"shape":"Ports"}
      }
    },
    "DeleteLoadBalancerListenerOutput":{
      "type":"structure",
      "members":{
      }
    },
    "DeleteLoadBalancerPolicyInput":{
      "type":"structure",
      "required":[
        "LoadBalancerName",
        "PolicyName"
      ],
      "members":{
        "LoadBalancerName":{"shape":"AccessPointName"},
        "PolicyName":{"shape":"PolicyName"}
      }
    },
    "DeleteLoadBalancerPolicyOutput":{
      "type":"structure",
      "members":{
      }
    },
    "DeregisterEndPointsInput":{
      "type":"structure",
      "required":[
        "LoadBalancerName",
        "Instances"
      ],
      "members":{
        "LoadBalancerName":{"shape":"AccessPointName"},
        "Instances":{"shape":"Instances"}
      }
    },
    "DeregisterEndPointsOutput":{
      "type":"structure",
      "members":{
        "Instances":{"shape":"Instances"}
      }
    },
    "DescribeAccessPointsInput":{
      "type":"structure",
      "members":{
        "LoadBalancerNames":{"shape":"LoadBalancerNames"},
        "Marker":{"shape":"Marker"},
        "PageSize":{"shape":"PageSize"}
      }
    },
    "DescribeAccessPointsOutput":{
      "type":"structure",
      "members":{
        "LoadBalancerDescriptions":{"shape":"LoadBalancerDescriptions"},
        "NextMarker":{"shape":"Marker"}
      }
    },
    "DescribeEndPointStateInput":{
      "type":"structure",
      "required":["LoadBalancerName"],
      "members":{
        "LoadBalancerName":{"shape":"AccessPointName"},
        "Instances":{"shape":"Instances"}
      }
    },
    "DescribeEndPointStateOutput":{
      "type":"structure",
      "members":{
        "InstanceStates":{"shape":"InstanceStates"}
      }
    },
    "DescribeLoadBalancerAttributesInput":{
      "type":"structure",
      "required":["LoadBalancerName"],
      "members":{
        "LoadBalancerName":{"shape":"AccessPointName"}
      }
    },
    "DescribeLoadBalancerAttributesOutput":{
      "type":"structure",
      "members":{
        "LoadBalancerAttributes":{"shape":"LoadBalancerAttributes"}
      }
    },
    "DescribeLoadBalancerPoliciesInput":{
      "type":"structure",
      "members":{
        "LoadBalancerName":{"shape":"AccessPointName"},
        "PolicyNames":{"shape":"PolicyNames"}
      }
    },
    "DescribeLoadBalancerPoliciesOutput":{
      "type":"structure",
      "members":{
        "PolicyDescriptions":{"shape":"PolicyDescriptions"}
      }
    },
    "DescribeLoadBalancerPolicyTypesInput":{
      "type":"structure",
      "members":{
        "PolicyTypeNames":{"shape":"PolicyTypeNames"}
      }
    },
    "DescribeLoadBalancerPolicyTypesOutput":{
      "type":"structure",
      "members":{
        "PolicyTypeDescriptions":{"shape":"PolicyTypeDescriptions"}
      }
    },
    "DescribeTagsInput":{
      "type":"structure",
      "required":["LoadBalancerNames"],
      "members":{
        "LoadBalancerNames":{"shape":"LoadBalancerNamesMax20"}
      }
    },
    "DescribeTagsOutput":{
      "type":"structure",
      "members":{
        "TagDescriptions":{"shape":"TagDescriptions"}
      }
    },
    "Description":{"type":"string"},
    "DetachLoadBalancerFromSubnetsInput":{
      "type":"structure",
      "required":[
        "LoadBalancerName",
        "Subnets"
      ],
      "members":{
        "LoadBalancerName":{"shape":"AccessPointName"},
        "Subnets":{"shape":"Subnets"}
      }
    },
    "DetachLoadBalancerFromSubnetsOutput":{
      "type":"structure",
      "members":{
        "Subnets":{"shape":"Subnets"}
      }
    },
    "DuplicateAccessPointNameException":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"DuplicateLoadBalancerName",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "DuplicateListenerException":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"DuplicateListener",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "DuplicatePolicyNameException":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"DuplicatePolicyName",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "DuplicateTagKeysException":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"DuplicateTagKeys",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "EndPointPort":{"type":"integer"},
    "HealthCheck":{
      "type":"structure",
      "required":[
        "Target",
        "Interval",
        "Timeout",
        "UnhealthyThreshold",
        "HealthyThreshold"
      ],
      "members":{
        "Target":{"shape":"HealthCheckTarget"},
        "Interval":{"shape":"HealthCheckInterval"},
        "Timeout":{"shape":"HealthCheckTimeout"},
        "UnhealthyThreshold":{"shape":"UnhealthyThreshold"},
        "HealthyThreshold":{"shape":"HealthyThreshold"}
      }
    },
    "HealthCheckInterval":{
      "type":"integer",
      "min":1,
      "max":300
    },
    "HealthCheckTarget":{"type":"string"},
    "HealthCheckTimeout":{
      "type":"integer",
      "min":1,
      "max":300
    },
    "HealthyThreshold":{
      "type":"integer",
      "min":2,
      "max":10
    },
    "IdleTimeout":{
      "type":"integer",
      "min":1,
      "max":3600
    },
    "Instance":{
      "type":"structure",
      "members":{
        "InstanceId":{"shape":"InstanceId"}
      }
    },
    "InstanceId":{"type":"string"},
    "InstancePort":{
      "type":"integer",
      "min":1,
      "max":65535
    },
    "InstanceState":{
      "type":"structure",
      "members":{
        "InstanceId":{"shape":"InstanceId"},
        "State":{"shape":"State"},
        "ReasonCode":{"shape":"ReasonCode"},
        "Description":{"shape":"Description"}
      }
    },
    "InstanceStates":{
      "type":"list",
      "member":{"shape":"InstanceState"}
    },
    "Instances":{
      "type":"list",
      "member":{"shape":"Instance"}
    },
    "InvalidConfigurationRequestException":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"InvalidConfigurationRequest",
        "httpStatusCode":409,
        "senderFault":true
      },
      "exception":true
    },
    "InvalidEndPointException":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"InvalidInstance",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "InvalidSchemeException":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"InvalidScheme",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "InvalidSecurityGroupException":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"InvalidSecurityGroup",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "InvalidSubnetException":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"InvalidSubnet",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "LBCookieStickinessPolicies":{
      "type":"list",
      "member":{"shape":"LBCookieStickinessPolicy"}
    },
    "LBCookieStickinessPolicy":{
      "type":"structure",
      "members":{
        "PolicyName":{"shape":"PolicyName"},
        "CookieExpirationPeriod":{"shape":"CookieExpirationPeriod"}
      }
    },
    "Listener":{
      "type":"structure",
      "required":[
        "Protocol",
        "LoadBalancerPort",
        "InstancePort"
      ],
      "members":{
        "Protocol":{"shape":"Protocol"},
        "LoadBalancerPort":{"shape":"AccessPointPort"},
        "InstanceProtocol":{"shape":"Protocol"},
        "InstancePort":{"shape":"InstancePort"},
        "SSLCertificateId":{"shape":"SSLCertificateId"}
      }
    },
    "ListenerDescription":{
      "type":"structure",
      "members":{
        "Listener":{"shape":"Listener"},
        "PolicyNames":{"shape":"PolicyNames"}
      }
    },
    "ListenerDescriptions":{
      "type":"list",
      "member":{"shape":"ListenerDescription"}
    },
    "ListenerNotFoundException":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"ListenerNotFound",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "Listeners":{
      "type":"list",
      "member":{"shape":"Listener"}
    },
    "LoadBalancerAttributeNotFoundException":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"LoadBalancerAttributeNotFound",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "LoadBalancerAttributes":{
      "type":"structure",
      "members":{
        "CrossZoneLoadBalancing":{"shape":"CrossZoneLoadBalancing"},
        "AccessLog":{"shape":"AccessLog"},
        "ConnectionDraining":{"shape":"ConnectionDraining"},
        "ConnectionSettings":{"shape":"ConnectionSettings"},
        "AdditionalAttributes":{"shape":"AdditionalAttributes"}
      }
    },
    "LoadBalancerDescription":{
      "type":"structure",
      "members":{
        "LoadBalancerName":{"shape":"AccessPointName"},
        "DNSName":{"shape":"DNSName"},
        "CanonicalHostedZoneName":{"shape":"DNSName"},
        "CanonicalHostedZoneNameID":{"shape":"DNSName"},
        "ListenerDescriptions":{"shape":"ListenerDescriptions"},
        "Policies":{"shape":"Policies"},
        "BackendServerDescriptions":{"shape":"BackendServerDescriptions"},
        "AvailabilityZones":{"shape":"AvailabilityZones"},
        "Subnets":{"shape":"Subnets"},
        "VPCId":{"shape":"VPCId"},
        "Instances":{"shape":"Instances"},
        "HealthCheck":{"shape":"HealthCheck"},
        "SourceSecurityGroup":{"shape":"SourceSecurityGroup"},
        "SecurityGroups":{"shape":"SecurityGroups"},
        "CreatedTime":{"shape":"CreatedTime"},
        "Scheme":{"shape":"LoadBalancerScheme"}
      }
    },
    "LoadBalancerDescriptions":{
      "type":"list",
      "member":{"shape":"LoadBalancerDescription"}
    },
    "LoadBalancerNames":{
      "type":"list",
      "member":{"shape":"AccessPointName"}
    },
    "LoadBalancerNamesMax20":{
      "type":"list",
      "member":{"shape":"AccessPointName"},
      "min":1,
      "max":20
    },
    "LoadBalancerScheme":{"type":"string"},
    "Marker":{"type":"string"},
    "ModifyLoadBalancerAttributesInput":{
      "type":"structure",
      "required":[
        "LoadBalancerName",
        "LoadBalancerAttributes"
      ],
      "members":{
        "LoadBalancerName":{"shape":"AccessPointName"},
        "LoadBalancerAttributes":{"shape":"LoadBalancerAttributes"}
      }
    },
    "ModifyLoadBalancerAttributesOutput":{
      "type":"structure",
      "members":{
        "LoadBalancerName":{"shape":"AccessPointName"},
        "LoadBalancerAttributes":{"shape":"LoadBalancerAttributes"}
      }
    },
    "PageSize":{
      "type":"integer",
      "min":1,
      "max":400
    },
    "Policies":{
      "type":"structure",
      "members":{
        "AppCookieStickinessPolicies":{"shape":"AppCookieStickinessPolicies"},
        "LBCookieStickinessPolicies":{"shape":"LBCookieStickinessPolicies"},
        "OtherPolicies":{"shape":"PolicyNames"}
      }
    },
    "PolicyAttribute":{
      "type":"structure",
      "members":{
        "AttributeName":{"shape":"AttributeName"},
        "AttributeValue":{"shape":"AttributeValue"}
      }
    },
    "PolicyAttributeDescription":{
      "type":"structure",
      "members":{
        "AttributeName":{"shape":"AttributeName"},
        "AttributeValue":{"shape":"AttributeValue"}
      }
    },
    "PolicyAttributeDescriptions":{
      "type":"list",
      "member":{"shape":"PolicyAttributeDescription"}
    },
    "PolicyAttributeTypeDescription":{
      "type":"structure",
      "members":{
        "AttributeName":{"shape":"AttributeName"},
        "AttributeType":{"shape":"AttributeType"},
        "Description":{"shape":"Description"},
        "DefaultValue":{"shape":"DefaultValue"},
        "Cardinality":{"shape":"Cardinality"}
      }
    },
    "PolicyAttributeTypeDescriptions":{
      "type":"list",
      "member":{"shape":"PolicyAttributeTypeDescription"}
    },
    "PolicyAttributes":{
      "type":"list",
      "member":{"shape":"PolicyAttribute"}
    },
    "PolicyDescription":{
      "type":"structure",
      "members":{
        "PolicyName":{"shape":"PolicyName"},
        "PolicyTypeName":{"shape":"PolicyTypeName"},
        "PolicyAttributeDescriptions":{"shape":"PolicyAttributeDescriptions"}
      }
    },
    "PolicyDescriptions":{
      "type":"list",
      "member":{"shape":"PolicyDescription"}
    },
    "PolicyName":{"type":"string"},
    "PolicyNames":{
      "type":"list",
      "member":{"shape":"PolicyName"}
    },
    "PolicyNotFoundException":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"PolicyNotFound",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "PolicyTypeDescription":{
      "type":"structure",
      "members":{
        "PolicyTypeName":{"shape":"PolicyTypeName"},
        "Description":{"shape":"Description"},
        "PolicyAttributeTypeDescriptions":{"shape":"PolicyAttributeTypeDescriptions"}
      }
    },
    "PolicyTypeDescriptions":{
      "type":"list",
      "member":{"shape":"PolicyTypeDescription"}
    },
    "PolicyTypeName":{"type":"string"},
    "PolicyTypeNames":{
      "type":"list",
      "member":{"shape":"PolicyTypeName"}
    },
    "PolicyTypeNotFoundException":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"PolicyTypeNotFound",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "Ports":{
      "type":"list",
      "member":{"shape":"AccessPointPort"}
    },
    "Protocol":{"type":"string"},
    "ReasonCode":{"type":"string"},
    "RegisterEndPointsInput":{
      "type":"structure",
      "required":[
        "LoadBalancerName",
        "Instances"
      ],
      "members":{
        "LoadBalancerName":{"shape":"AccessPointName"},
        "Instances":{"shape":"Instances"}
      }
    },
    "RegisterEndPointsOutput":{
      "type":"structure",
      "members":{
        "Instances":{"shape":"Instances"}
      }
    },
    "RemoveAvailabilityZonesInput":{
      "type":"structure",
      "required":[
        "LoadBalancerName",
        "AvailabilityZones"
      ],
      "members":{
        "LoadBalancerName":{"shape":"AccessPointName"},
        "AvailabilityZones":{"shape":"AvailabilityZones"}
      }
    },
    "RemoveAvailabilityZonesOutput":{
      "type":"structure",
      "members":{
        "AvailabilityZones":{"shape":"AvailabilityZones"}
      }
    },
    "RemoveTagsInput":{
      "type":"structure",
      "required":[
        "LoadBalancerNames",
        "Tags"
      ],
      "members":{
        "LoadBalancerNames":{"shape":"LoadBalancerNames"},
        "Tags":{"shape":"TagKeyList"}
      }
    },
    "RemoveTagsOutput":{
      "type":"structure",
      "members":{
      }
    },
    "S3BucketName":{"type":"string"},
    "SSLCertificateId":{"type":"string"},
    "SecurityGroupId":{"type":"string"},
    "SecurityGroupName":{"type":"string"},
    "SecurityGroupOwnerAlias":{"type":"string"},
    "SecurityGroups":{
      "type":"list",
      "member":{"shape":"SecurityGroupId"}
    },
    "SetLoadBalancerListenerSSLCertificateInput":{
      "type":"structure",
      "required":[
        "LoadBalancerName",
        "LoadBalancerPort",
        "SSLCertificateId"
      ],
      "members":{
        "LoadBalancerName":{"shape":"AccessPointName"},
        "LoadBalancerPort":{"shape":"AccessPointPort"},
        "SSLCertificateId":{"shape":"SSLCertificateId"}
      }
    },
    "SetLoadBalancerListenerSSLCertificateOutput":{
      "type":"structure",
      "members":{
      }
    },
    "SetLoadBalancerPoliciesForBackendServerInput":{
      "type":"structure",
      "required":[
        "LoadBalancerName",
        "InstancePort",
        "PolicyNames"
      ],
      "members":{
        "LoadBalancerName":{"shape":"AccessPointName"},
        "InstancePort":{"shape":"EndPointPort"},
        "PolicyNames":{"shape":"PolicyNames"}
      }
    },
    "SetLoadBalancerPoliciesForBackendServerOutput":{
      "type":"structure",
      "members":{
      }
    },
    "SetLoadBalancerPoliciesOfListenerInput":{
      "type":"structure",
      "required":[
        "LoadBalancerName",
        "LoadBalancerPort",
        "PolicyNames"
      ],
      "members":{
        "LoadBalancerName":{"shape":"AccessPointName"},
        "LoadBalancerPort":{"shape":"AccessPointPort"},
        "PolicyNames":{"shape":"PolicyNames"}
      }
    },
    "SetLoadBalancerPoliciesOfListenerOutput":{
      "type":"structure",
      "members":{
      }
    },
    "SourceSecurityGroup":{
      "type":"structure",
      "members":{
        "OwnerAlias":{"shape":"SecurityGroupOwnerAlias"},
        "GroupName":{"shape":"SecurityGroupName"}
      }
    },
    "State":{"type":"string"},
    "StringVal":{"type":"string"},
    "SubnetId":{"type":"string"},
    "SubnetNotFoundException":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"SubnetNotFound",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "Subnets":{
      "type":"list",
      "member":{"shape":"SubnetId"}
    },
    "Tag":{
      "type":"structure",
      "required":["Key"],
      "members":{
        "Key":{"shape":"TagKey"},
        "Value":{"shape":"TagValue"}
      }
    },
    "TagDescription":{
      "type":"structure",
      "members":{
        "LoadBalancerName":{"shape":"AccessPointName"},
        "Tags":{"shape":"TagList"}
      }
    },
    "TagDescriptions":{
      "type":"list",
      "member":{"shape":"TagDescription"}
    },
    "TagKey":{
      "type":"string",
      "min":1,
      "max":128,
      "pattern":"^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$"
    },
    "TagKeyList":{
      "type":"list",
      "member":{"shape":"TagKeyOnly"},
      "min":1
    },
    "TagKeyOnly":{
      "type":"structure",
      "members":{
        "Key":{"shape":"TagKey"}
      }
    },
    "TagList":{
      "type":"list",
      "member":{"shape":"Tag"},
      "min":1
    },
    "TagValue":{
      "type":"string",
      "min":0,
      "max":256,
      "pattern":"^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$"
    },
    "TooManyAccessPointsException":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"TooManyLoadBalancers",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "TooManyPoliciesException":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"TooManyPolicies",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "TooManyTagsException":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"TooManyTags",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "UnhealthyThreshold":{
      "type":"integer",
      "min":2,
      "max":10
    },
    "VPCId":{"type":"string"}
  }
}
,
"ElasticTranscoder":
{
  "metadata":{
    "apiVersion":"2012-09-25",
    "endpointPrefix":"elastictranscoder",
    "serviceFullName":"Amazon Elastic Transcoder",
    "signatureVersion":"v4",
    "protocol":"rest-json"
  },
  "operations":{
    "CancelJob":{
      "name":"CancelJob",
      "http":{
        "method":"DELETE",
        "requestUri":"/2012-09-25/jobs/{Id}",
        "responseCode":202
      },
      "input":{"shape":"CancelJobRequest"},
      "output":{"shape":"CancelJobResponse"},
      "errors":[
        {
          "shape":"ValidationException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"IncompatibleVersionException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "error":{"httpStatusCode":404},
          "exception":true
        },
        {
          "shape":"ResourceInUseException",
          "error":{"httpStatusCode":409},
          "exception":true
        },
        {
          "shape":"AccessDeniedException",
          "error":{"httpStatusCode":403},
          "exception":true
        },
        {
          "shape":"InternalServiceException",
          "exception":true,
          "fault":true
        }
      ]
    },
    "CreateJob":{
      "name":"CreateJob",
      "http":{
        "method":"POST",
        "requestUri":"/2012-09-25/jobs",
        "responseCode":201
      },
      "input":{"shape":"CreateJobRequest"},
      "output":{"shape":"CreateJobResponse"},
      "errors":[
        {
          "shape":"ValidationException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"IncompatibleVersionException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "error":{"httpStatusCode":404},
          "exception":true
        },
        {
          "shape":"AccessDeniedException",
          "error":{"httpStatusCode":403},
          "exception":true
        },
        {
          "shape":"LimitExceededException",
          "error":{"httpStatusCode":429},
          "exception":true
        },
        {
          "shape":"InternalServiceException",
          "exception":true,
          "fault":true
        }
      ]
    },
    "CreatePipeline":{
      "name":"CreatePipeline",
      "http":{
        "method":"POST",
        "requestUri":"/2012-09-25/pipelines",
        "responseCode":201
      },
      "input":{"shape":"CreatePipelineRequest"},
      "output":{"shape":"CreatePipelineResponse"},
      "errors":[
        {
          "shape":"ValidationException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"IncompatibleVersionException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"AccessDeniedException",
          "error":{"httpStatusCode":403},
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "error":{"httpStatusCode":404},
          "exception":true
        },
        {
          "shape":"LimitExceededException",
          "error":{"httpStatusCode":429},
          "exception":true
        },
        {
          "shape":"InternalServiceException",
          "exception":true,
          "fault":true
        }
      ]
    },
    "CreatePreset":{
      "name":"CreatePreset",
      "http":{
        "method":"POST",
        "requestUri":"/2012-09-25/presets",
        "responseCode":201
      },
      "input":{"shape":"CreatePresetRequest"},
      "output":{"shape":"CreatePresetResponse"},
      "errors":[
        {
          "shape":"ValidationException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"IncompatibleVersionException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"AccessDeniedException",
          "error":{"httpStatusCode":403},
          "exception":true
        },
        {
          "shape":"LimitExceededException",
          "error":{"httpStatusCode":429},
          "exception":true
        },
        {
          "shape":"InternalServiceException",
          "exception":true,
          "fault":true
        }
      ]
    },
    "DeletePipeline":{
      "name":"DeletePipeline",
      "http":{
        "method":"DELETE",
        "requestUri":"/2012-09-25/pipelines/{Id}",
        "responseCode":202
      },
      "input":{"shape":"DeletePipelineRequest"},
      "output":{"shape":"DeletePipelineResponse"},
      "errors":[
        {
          "shape":"ValidationException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"IncompatibleVersionException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "error":{"httpStatusCode":404},
          "exception":true
        },
        {
          "shape":"ResourceInUseException",
          "error":{"httpStatusCode":409},
          "exception":true
        },
        {
          "shape":"AccessDeniedException",
          "error":{"httpStatusCode":403},
          "exception":true
        },
        {
          "shape":"InternalServiceException",
          "exception":true,
          "fault":true
        }
      ]
    },
    "DeletePreset":{
      "name":"DeletePreset",
      "http":{
        "method":"DELETE",
        "requestUri":"/2012-09-25/presets/{Id}",
        "responseCode":202
      },
      "input":{"shape":"DeletePresetRequest"},
      "output":{"shape":"DeletePresetResponse"},
      "errors":[
        {
          "shape":"ValidationException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"IncompatibleVersionException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "error":{"httpStatusCode":404},
          "exception":true
        },
        {
          "shape":"AccessDeniedException",
          "error":{"httpStatusCode":403},
          "exception":true
        },
        {
          "shape":"InternalServiceException",
          "exception":true,
          "fault":true
        }
      ]
    },
    "ListJobsByPipeline":{
      "name":"ListJobsByPipeline",
      "http":{
        "method":"GET",
        "requestUri":"/2012-09-25/jobsByPipeline/{PipelineId}"
      },
      "input":{"shape":"ListJobsByPipelineRequest"},
      "output":{"shape":"ListJobsByPipelineResponse"},
      "errors":[
        {
          "shape":"ValidationException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"IncompatibleVersionException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "error":{"httpStatusCode":404},
          "exception":true
        },
        {
          "shape":"AccessDeniedException",
          "error":{"httpStatusCode":403},
          "exception":true
        },
        {
          "shape":"InternalServiceException",
          "exception":true,
          "fault":true
        }
      ]
    },
    "ListJobsByStatus":{
      "name":"ListJobsByStatus",
      "http":{
        "method":"GET",
        "requestUri":"/2012-09-25/jobsByStatus/{Status}"
      },
      "input":{"shape":"ListJobsByStatusRequest"},
      "output":{"shape":"ListJobsByStatusResponse"},
      "errors":[
        {
          "shape":"ValidationException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"IncompatibleVersionException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "error":{"httpStatusCode":404},
          "exception":true
        },
        {
          "shape":"AccessDeniedException",
          "error":{"httpStatusCode":403},
          "exception":true
        },
        {
          "shape":"InternalServiceException",
          "exception":true,
          "fault":true
        }
      ]
    },
    "ListPipelines":{
      "name":"ListPipelines",
      "http":{
        "method":"GET",
        "requestUri":"/2012-09-25/pipelines"
      },
      "input":{"shape":"ListPipelinesRequest"},
      "output":{"shape":"ListPipelinesResponse"},
      "errors":[
        {
          "shape":"ValidationException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"IncompatibleVersionException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"AccessDeniedException",
          "error":{"httpStatusCode":403},
          "exception":true
        },
        {
          "shape":"InternalServiceException",
          "exception":true,
          "fault":true
        }
      ]
    },
    "ListPresets":{
      "name":"ListPresets",
      "http":{
        "method":"GET",
        "requestUri":"/2012-09-25/presets"
      },
      "input":{"shape":"ListPresetsRequest"},
      "output":{"shape":"ListPresetsResponse"},
      "errors":[
        {
          "shape":"ValidationException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"IncompatibleVersionException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"AccessDeniedException",
          "error":{"httpStatusCode":403},
          "exception":true
        },
        {
          "shape":"InternalServiceException",
          "exception":true,
          "fault":true
        }
      ]
    },
    "ReadJob":{
      "name":"ReadJob",
      "http":{
        "method":"GET",
        "requestUri":"/2012-09-25/jobs/{Id}"
      },
      "input":{"shape":"ReadJobRequest"},
      "output":{"shape":"ReadJobResponse"},
      "errors":[
        {
          "shape":"ValidationException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"IncompatibleVersionException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "error":{"httpStatusCode":404},
          "exception":true
        },
        {
          "shape":"AccessDeniedException",
          "error":{"httpStatusCode":403},
          "exception":true
        },
        {
          "shape":"InternalServiceException",
          "exception":true,
          "fault":true
        }
      ]
    },
    "ReadPipeline":{
      "name":"ReadPipeline",
      "http":{
        "method":"GET",
        "requestUri":"/2012-09-25/pipelines/{Id}"
      },
      "input":{"shape":"ReadPipelineRequest"},
      "output":{"shape":"ReadPipelineResponse"},
      "errors":[
        {
          "shape":"ValidationException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"IncompatibleVersionException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "error":{"httpStatusCode":404},
          "exception":true
        },
        {
          "shape":"AccessDeniedException",
          "error":{"httpStatusCode":403},
          "exception":true
        },
        {
          "shape":"InternalServiceException",
          "exception":true,
          "fault":true
        }
      ]
    },
    "ReadPreset":{
      "name":"ReadPreset",
      "http":{
        "method":"GET",
        "requestUri":"/2012-09-25/presets/{Id}"
      },
      "input":{"shape":"ReadPresetRequest"},
      "output":{"shape":"ReadPresetResponse"},
      "errors":[
        {
          "shape":"ValidationException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"IncompatibleVersionException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "error":{"httpStatusCode":404},
          "exception":true
        },
        {
          "shape":"AccessDeniedException",
          "error":{"httpStatusCode":403},
          "exception":true
        },
        {
          "shape":"InternalServiceException",
          "exception":true,
          "fault":true
        }
      ]
    },
    "TestRole":{
      "name":"TestRole",
      "http":{
        "method":"POST",
        "requestUri":"/2012-09-25/roleTests",
        "responseCode":200
      },
      "input":{"shape":"TestRoleRequest"},
      "output":{"shape":"TestRoleResponse"},
      "errors":[
        {
          "shape":"ValidationException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"IncompatibleVersionException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "error":{"httpStatusCode":404},
          "exception":true
        },
        {
          "shape":"AccessDeniedException",
          "error":{"httpStatusCode":403},
          "exception":true
        },
        {
          "shape":"InternalServiceException",
          "exception":true,
          "fault":true
        }
      ]
    },
    "UpdatePipeline":{
      "name":"UpdatePipeline",
      "http":{
        "method":"PUT",
        "requestUri":"/2012-09-25/pipelines/{Id}",
        "responseCode":200
      },
      "input":{"shape":"UpdatePipelineRequest"},
      "output":{"shape":"UpdatePipelineResponse"},
      "errors":[
        {
          "shape":"ValidationException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"IncompatibleVersionException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"AccessDeniedException",
          "error":{"httpStatusCode":403},
          "exception":true
        },
        {
          "shape":"ResourceInUseException",
          "error":{"httpStatusCode":409},
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "error":{"httpStatusCode":404},
          "exception":true
        },
        {
          "shape":"InternalServiceException",
          "exception":true,
          "fault":true
        }
      ]
    },
    "UpdatePipelineNotifications":{
      "name":"UpdatePipelineNotifications",
      "http":{
        "method":"POST",
        "requestUri":"/2012-09-25/pipelines/{Id}/notifications"
      },
      "input":{"shape":"UpdatePipelineNotificationsRequest"},
      "output":{"shape":"UpdatePipelineNotificationsResponse"},
      "errors":[
        {
          "shape":"ValidationException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"IncompatibleVersionException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "error":{"httpStatusCode":404},
          "exception":true
        },
        {
          "shape":"ResourceInUseException",
          "error":{"httpStatusCode":409},
          "exception":true
        },
        {
          "shape":"AccessDeniedException",
          "error":{"httpStatusCode":403},
          "exception":true
        },
        {
          "shape":"InternalServiceException",
          "exception":true,
          "fault":true
        }
      ]
    },
    "UpdatePipelineStatus":{
      "name":"UpdatePipelineStatus",
      "http":{
        "method":"POST",
        "requestUri":"/2012-09-25/pipelines/{Id}/status"
      },
      "input":{"shape":"UpdatePipelineStatusRequest"},
      "output":{"shape":"UpdatePipelineStatusResponse"},
      "errors":[
        {
          "shape":"ValidationException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"IncompatibleVersionException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "error":{"httpStatusCode":404},
          "exception":true
        },
        {
          "shape":"ResourceInUseException",
          "error":{"httpStatusCode":409},
          "exception":true
        },
        {
          "shape":"AccessDeniedException",
          "error":{"httpStatusCode":403},
          "exception":true
        },
        {
          "shape":"InternalServiceException",
          "exception":true,
          "fault":true
        }
      ]
    }
  },
  "shapes":{
    "AccessControl":{
      "type":"string",
      "pattern":"(^FullControl$)|(^Read$)|(^ReadAcp$)|(^WriteAcp$)"
    },
    "AccessControls":{
      "type":"list",
      "member":{"shape":"AccessControl"},
      "max":30
    },
    "AccessDeniedException":{
      "type":"structure",
      "members":{
      },
      "error":{"httpStatusCode":403},
      "exception":true
    },
    "Artwork":{
      "type":"structure",
      "members":{
        "InputKey":{"shape":"WatermarkKey"},
        "MaxWidth":{"shape":"DigitsOrAuto"},
        "MaxHeight":{"shape":"DigitsOrAuto"},
        "SizingPolicy":{"shape":"SizingPolicy"},
        "PaddingPolicy":{"shape":"PaddingPolicy"},
        "AlbumArtFormat":{"shape":"JpgOrPng"},
        "Encryption":{"shape":"Encryption"}
      }
    },
    "Artworks":{
      "type":"list",
      "member":{"shape":"Artwork"}
    },
    "Ascending":{
      "type":"string",
      "pattern":"(^true$)|(^false$)"
    },
    "AspectRatio":{
      "type":"string",
      "pattern":"(^auto$)|(^1:1$)|(^4:3$)|(^3:2$)|(^16:9$)"
    },
    "AudioBitRate":{
      "type":"string",
      "pattern":"^\\d{1,3}$"
    },
    "AudioChannels":{
      "type":"string",
      "pattern":"(^auto$)|(^0$)|(^1$)|(^2$)"
    },
    "AudioCodec":{
      "type":"string",
      "pattern":"(^AAC$)|(^vorbis$)|(^mp3$)"
    },
    "AudioCodecOptions":{
      "type":"structure",
      "members":{
        "Profile":{"shape":"AudioCodecProfile"}
      }
    },
    "AudioCodecProfile":{
      "type":"string",
      "pattern":"(^auto$)|(^AAC-LC$)|(^HE-AAC$)|(^HE-AACv2$)"
    },
    "AudioParameters":{
      "type":"structure",
      "members":{
        "Codec":{"shape":"AudioCodec"},
        "SampleRate":{"shape":"AudioSampleRate"},
        "BitRate":{"shape":"AudioBitRate"},
        "Channels":{"shape":"AudioChannels"},
        "CodecOptions":{"shape":"AudioCodecOptions"}
      }
    },
    "AudioSampleRate":{
      "type":"string",
      "pattern":"(^auto$)|(^22050$)|(^32000$)|(^44100$)|(^48000$)|(^96000$)"
    },
    "Base64EncodedString":{
      "type":"string",
      "pattern":"^(?:[A-Za-z0-9\\+/]{4})*(?:[A-Za-z0-9\\+/]{2}==|[A-Za-z0-9\\+/]{3}=)?$"
    },
    "BucketName":{
      "type":"string",
      "pattern":"^(\\w|\\.|-){1,255}$"
    },
    "CancelJobRequest":{
      "type":"structure",
      "required":["Id"],
      "members":{
        "Id":{
          "shape":"Id",
          "location":"uri",
          "locationName":"Id"
        }
      }
    },
    "CancelJobResponse":{
      "type":"structure",
      "members":{
      }
    },
    "CaptionFormat":{
      "type":"structure",
      "members":{
        "Format":{"shape":"CaptionFormatFormat"},
        "Pattern":{"shape":"CaptionFormatPattern"},
        "Encryption":{"shape":"Encryption"}
      }
    },
    "CaptionFormatFormat":{
      "type":"string",
      "pattern":"(^mov-text$)|(^srt$)|(^scc$)|(^webvtt$)|(^dfxp$)"
    },
    "CaptionFormatPattern":{
      "type":"string",
      "pattern":"(^$)|(^.*\\{language\\}.*$)"
    },
    "CaptionFormats":{
      "type":"list",
      "member":{"shape":"CaptionFormat"},
      "max":4
    },
    "CaptionMergePolicy":{
      "type":"string",
      "pattern":"(^MergeOverride$)|(^MergeRetain$)|(^Override$)"
    },
    "CaptionSource":{
      "type":"structure",
      "members":{
        "Key":{"shape":"Key"},
        "Language":{"shape":"Key"},
        "TimeOffset":{"shape":"TimeOffset"},
        "Label":{"shape":"Name"},
        "Encryption":{"shape":"Encryption"}
      }
    },
    "CaptionSources":{
      "type":"list",
      "member":{"shape":"CaptionSource"},
      "max":20
    },
    "Captions":{
      "type":"structure",
      "members":{
        "MergePolicy":{"shape":"CaptionMergePolicy"},
        "CaptionSources":{"shape":"CaptionSources"},
        "CaptionFormats":{"shape":"CaptionFormats"}
      }
    },
    "Clip":{
      "type":"structure",
      "members":{
        "TimeSpan":{"shape":"TimeSpan"}
      }
    },
    "CodecOption":{
      "type":"string",
      "min":1,
      "max":255
    },
    "CodecOptions":{
      "type":"map",
      "key":{"shape":"CodecOption"},
      "value":{"shape":"CodecOption"},
      "max":30
    },
    "Composition":{
      "type":"list",
      "member":{"shape":"Clip"}
    },
    "CreateJobOutput":{
      "type":"structure",
      "members":{
        "Key":{"shape":"Key"},
        "ThumbnailPattern":{"shape":"ThumbnailPattern"},
        "ThumbnailEncryption":{"shape":"Encryption"},
        "Rotate":{"shape":"Rotate"},
        "PresetId":{"shape":"Id"},
        "SegmentDuration":{"shape":"Float"},
        "Watermarks":{"shape":"JobWatermarks"},
        "AlbumArt":{"shape":"JobAlbumArt"},
        "Composition":{"shape":"Composition"},
        "Captions":{"shape":"Captions"},
        "Encryption":{"shape":"Encryption"}
      }
    },
    "CreateJobOutputs":{
      "type":"list",
      "member":{"shape":"CreateJobOutput"},
      "max":30
    },
    "CreateJobPlaylist":{
      "type":"structure",
      "members":{
        "Name":{"shape":"Filename"},
        "Format":{"shape":"PlaylistFormat"},
        "OutputKeys":{"shape":"OutputKeys"}
      }
    },
    "CreateJobPlaylists":{
      "type":"list",
      "member":{"shape":"CreateJobPlaylist"},
      "max":30
    },
    "CreateJobRequest":{
      "type":"structure",
      "required":[
        "PipelineId",
        "Input"
      ],
      "members":{
        "PipelineId":{"shape":"Id"},
        "Input":{"shape":"JobInput"},
        "Output":{"shape":"CreateJobOutput"},
        "Outputs":{"shape":"CreateJobOutputs"},
        "OutputKeyPrefix":{"shape":"Key"},
        "Playlists":{"shape":"CreateJobPlaylists"}
      }
    },
    "CreateJobResponse":{
      "type":"structure",
      "members":{
        "Job":{"shape":"Job"}
      }
    },
    "CreatePipelineRequest":{
      "type":"structure",
      "required":[
        "Name",
        "InputBucket",
        "Role"
      ],
      "members":{
        "Name":{"shape":"Name"},
        "InputBucket":{"shape":"BucketName"},
        "OutputBucket":{"shape":"BucketName"},
        "Role":{"shape":"Role"},
        "AwsKmsKeyArn":{"shape":"KeyArn"},
        "Notifications":{"shape":"Notifications"},
        "ContentConfig":{"shape":"PipelineOutputConfig"},
        "ThumbnailConfig":{"shape":"PipelineOutputConfig"}
      }
    },
    "CreatePipelineResponse":{
      "type":"structure",
      "members":{
        "Pipeline":{"shape":"Pipeline"}
      }
    },
    "CreatePresetRequest":{
      "type":"structure",
      "required":[
        "Name",
        "Container"
      ],
      "members":{
        "Name":{"shape":"Name"},
        "Description":{"shape":"Description"},
        "Container":{"shape":"PresetContainer"},
        "Video":{"shape":"VideoParameters"},
        "Audio":{"shape":"AudioParameters"},
        "Thumbnails":{"shape":"Thumbnails"}
      }
    },
    "CreatePresetResponse":{
      "type":"structure",
      "members":{
        "Preset":{"shape":"Preset"},
        "Warning":{"shape":"String"}
      }
    },
    "DeletePipelineRequest":{
      "type":"structure",
      "required":["Id"],
      "members":{
        "Id":{
          "shape":"Id",
          "location":"uri",
          "locationName":"Id"
        }
      }
    },
    "DeletePipelineResponse":{
      "type":"structure",
      "members":{
      }
    },
    "DeletePresetRequest":{
      "type":"structure",
      "required":["Id"],
      "members":{
        "Id":{
          "shape":"Id",
          "location":"uri",
          "locationName":"Id"
        }
      }
    },
    "DeletePresetResponse":{
      "type":"structure",
      "members":{
      }
    },
    "Description":{
      "type":"string",
      "min":0,
      "max":255
    },
    "Digits":{
      "type":"string",
      "pattern":"^\\d{1,5}$"
    },
    "DigitsOrAuto":{
      "type":"string",
      "pattern":"(^auto$)|(^\\d{2,4}$)"
    },
    "Encryption":{
      "type":"structure",
      "members":{
        "Mode":{"shape":"EncryptionMode"},
        "Key":{"shape":"Base64EncodedString"},
        "KeyMd5":{"shape":"Base64EncodedString"},
        "InitializationVector":{"shape":"Key"}
      }
    },
    "EncryptionMode":{
      "type":"string",
      "pattern":"(^s3$)|(^s3-aws-kms$)|(^aes-cbc-pkcs7$)|(^aes-ctr$)|(^aes-gcm$)"
    },
    "ExceptionMessages":{
      "type":"list",
      "member":{"shape":"String"}
    },
    "Filename":{
      "type":"string",
      "min":1,
      "max":255
    },
    "FixedGOP":{
      "type":"string",
      "pattern":"(^true$)|(^false$)"
    },
    "Float":{
      "type":"string",
      "pattern":"^\\d{1,5}(\\.\\d{0,5})?$"
    },
    "FrameRate":{
      "type":"string",
      "pattern":"(^auto$)|(^10$)|(^15$)|(^23.97$)|(^24$)|(^25$)|(^29.97$)|(^30$)|(^50$)|(^60$)"
    },
    "Grantee":{
      "type":"string",
      "min":1,
      "max":255
    },
    "GranteeType":{
      "type":"string",
      "pattern":"(^Canonical$)|(^Email$)|(^Group$)"
    },
    "HorizontalAlign":{
      "type":"string",
      "pattern":"(^Left$)|(^Right$)|(^Center$)"
    },
    "Id":{
      "type":"string",
      "pattern":"^\\d{13}-\\w{6}$"
    },
    "IncompatibleVersionException":{
      "type":"structure",
      "members":{
      },
      "error":{"httpStatusCode":400},
      "exception":true
    },
    "Interlaced":{
      "type":"string",
      "pattern":"(^auto$)|(^true$)|(^false$)"
    },
    "InternalServiceException":{
      "type":"structure",
      "members":{
      },
      "exception":true,
      "fault":true
    },
    "Job":{
      "type":"structure",
      "members":{
        "Id":{"shape":"Id"},
        "Arn":{"shape":"String"},
        "PipelineId":{"shape":"Id"},
        "Input":{"shape":"JobInput"},
        "Output":{"shape":"JobOutput"},
        "Outputs":{"shape":"JobOutputs"},
        "OutputKeyPrefix":{"shape":"Key"},
        "Playlists":{"shape":"Playlists"},
        "Status":{"shape":"JobStatus"}
      }
    },
    "JobAlbumArt":{
      "type":"structure",
      "members":{
        "MergePolicy":{"shape":"MergePolicy"},
        "Artwork":{"shape":"Artworks"}
      }
    },
    "JobContainer":{
      "type":"string",
      "pattern":"(^auto$)|(^3gp$)|(^asf$)|(^avi$)|(^divx$)|(^flv$)|(^mkv$)|(^mov$)|(^mp4$)|(^mpeg$)|(^mpeg-ps$)|(^mpeg-ts$)|(^mxf$)|(^ogg$)|(^ts$)|(^vob$)|(^wav$)|(^webm$)|(^mp3$)|(^m4a$)|(^aac$)"
    },
    "JobInput":{
      "type":"structure",
      "members":{
        "Key":{"shape":"Key"},
        "FrameRate":{"shape":"FrameRate"},
        "Resolution":{"shape":"Resolution"},
        "AspectRatio":{"shape":"AspectRatio"},
        "Interlaced":{"shape":"Interlaced"},
        "Container":{"shape":"JobContainer"},
        "Encryption":{"shape":"Encryption"}
      }
    },
    "JobOutput":{
      "type":"structure",
      "members":{
        "Id":{"shape":"String"},
        "Key":{"shape":"Key"},
        "ThumbnailPattern":{"shape":"ThumbnailPattern"},
        "ThumbnailEncryption":{"shape":"Encryption"},
        "Rotate":{"shape":"Rotate"},
        "PresetId":{"shape":"Id"},
        "SegmentDuration":{"shape":"Float"},
        "Status":{"shape":"JobStatus"},
        "StatusDetail":{"shape":"Description"},
        "Duration":{"shape":"NullableLong"},
        "Width":{"shape":"NullableInteger"},
        "Height":{"shape":"NullableInteger"},
        "Watermarks":{"shape":"JobWatermarks"},
        "AlbumArt":{"shape":"JobAlbumArt"},
        "Composition":{"shape":"Composition"},
        "Captions":{"shape":"Captions"},
        "Encryption":{"shape":"Encryption"}
      }
    },
    "JobOutputs":{
      "type":"list",
      "member":{"shape":"JobOutput"}
    },
    "JobStatus":{
      "type":"string",
      "pattern":"(^Submitted$)|(^Progressing$)|(^Complete$)|(^Canceled$)|(^Error$)"
    },
    "JobWatermark":{
      "type":"structure",
      "members":{
        "PresetWatermarkId":{"shape":"PresetWatermarkId"},
        "InputKey":{"shape":"WatermarkKey"},
        "Encryption":{"shape":"Encryption"}
      }
    },
    "JobWatermarks":{
      "type":"list",
      "member":{"shape":"JobWatermark"}
    },
    "Jobs":{
      "type":"list",
      "member":{"shape":"Job"}
    },
    "JpgOrPng":{
      "type":"string",
      "pattern":"(^jpg$)|(^png$)"
    },
    "Key":{
      "type":"string",
      "min":1,
      "max":255
    },
    "KeyArn":{
      "type":"string",
      "min":0,
      "max":255
    },
    "KeyframesMaxDist":{
      "type":"string",
      "pattern":"^\\d{1,6}$"
    },
    "LimitExceededException":{
      "type":"structure",
      "members":{
      },
      "error":{"httpStatusCode":429},
      "exception":true
    },
    "ListJobsByPipelineRequest":{
      "type":"structure",
      "required":["PipelineId"],
      "members":{
        "PipelineId":{
          "shape":"Id",
          "location":"uri",
          "locationName":"PipelineId"
        },
        "Ascending":{
          "shape":"Ascending",
          "location":"querystring",
          "locationName":"Ascending"
        },
        "PageToken":{
          "shape":"Id",
          "location":"querystring",
          "locationName":"PageToken"
        }
      }
    },
    "ListJobsByPipelineResponse":{
      "type":"structure",
      "members":{
        "Jobs":{"shape":"Jobs"},
        "NextPageToken":{"shape":"Id"}
      }
    },
    "ListJobsByStatusRequest":{
      "type":"structure",
      "required":["Status"],
      "members":{
        "Status":{
          "shape":"JobStatus",
          "location":"uri",
          "locationName":"Status"
        },
        "Ascending":{
          "shape":"Ascending",
          "location":"querystring",
          "locationName":"Ascending"
        },
        "PageToken":{
          "shape":"Id",
          "location":"querystring",
          "locationName":"PageToken"
        }
      }
    },
    "ListJobsByStatusResponse":{
      "type":"structure",
      "members":{
        "Jobs":{"shape":"Jobs"},
        "NextPageToken":{"shape":"Id"}
      }
    },
    "ListPipelinesRequest":{
      "type":"structure",
      "members":{
        "Ascending":{
          "shape":"Ascending",
          "location":"querystring",
          "locationName":"Ascending"
        },
        "PageToken":{
          "shape":"Id",
          "location":"querystring",
          "locationName":"PageToken"
        }
      }
    },
    "ListPipelinesResponse":{
      "type":"structure",
      "members":{
        "Pipelines":{"shape":"Pipelines"},
        "NextPageToken":{"shape":"Id"}
      }
    },
    "ListPresetsRequest":{
      "type":"structure",
      "members":{
        "Ascending":{
          "shape":"Ascending",
          "location":"querystring",
          "locationName":"Ascending"
        },
        "PageToken":{
          "shape":"Id",
          "location":"querystring",
          "locationName":"PageToken"
        }
      }
    },
    "ListPresetsResponse":{
      "type":"structure",
      "members":{
        "Presets":{"shape":"Presets"},
        "NextPageToken":{"shape":"Id"}
      }
    },
    "MaxFrameRate":{
      "type":"string",
      "pattern":"(^10$)|(^15$)|(^23.97$)|(^24$)|(^25$)|(^29.97$)|(^30$)|(^50$)|(^60$)"
    },
    "MergePolicy":{
      "type":"string",
      "pattern":"(^Replace$)|(^Prepend$)|(^Append$)|(^Fallback$)"
    },
    "Name":{
      "type":"string",
      "min":1,
      "max":40
    },
    "Notifications":{
      "type":"structure",
      "members":{
        "Progressing":{"shape":"SnsTopic"},
        "Completed":{"shape":"SnsTopic"},
        "Warning":{"shape":"SnsTopic"},
        "Error":{"shape":"SnsTopic"}
      }
    },
    "NullableInteger":{"type":"integer"},
    "NullableLong":{"type":"long"},
    "Opacity":{
      "type":"string",
      "pattern":"^\\d{1,3}(\\.\\d{0,20})?$"
    },
    "OutputKeys":{
      "type":"list",
      "member":{"shape":"Key"},
      "max":30
    },
    "PaddingPolicy":{
      "type":"string",
      "pattern":"(^Pad$)|(^NoPad$)"
    },
    "Permission":{
      "type":"structure",
      "members":{
        "GranteeType":{"shape":"GranteeType"},
        "Grantee":{"shape":"Grantee"},
        "Access":{"shape":"AccessControls"}
      }
    },
    "Permissions":{
      "type":"list",
      "member":{"shape":"Permission"},
      "max":30
    },
    "Pipeline":{
      "type":"structure",
      "members":{
        "Id":{"shape":"Id"},
        "Arn":{"shape":"String"},
        "Name":{"shape":"Name"},
        "Status":{"shape":"PipelineStatus"},
        "InputBucket":{"shape":"BucketName"},
        "OutputBucket":{"shape":"BucketName"},
        "Role":{"shape":"Role"},
        "AwsKmsKeyArn":{"shape":"KeyArn"},
        "Notifications":{"shape":"Notifications"},
        "ContentConfig":{"shape":"PipelineOutputConfig"},
        "ThumbnailConfig":{"shape":"PipelineOutputConfig"}
      }
    },
    "PipelineOutputConfig":{
      "type":"structure",
      "members":{
        "Bucket":{"shape":"BucketName"},
        "StorageClass":{"shape":"StorageClass"},
        "Permissions":{"shape":"Permissions"}
      }
    },
    "PipelineStatus":{
      "type":"string",
      "pattern":"(^Active$)|(^Paused$)"
    },
    "Pipelines":{
      "type":"list",
      "member":{"shape":"Pipeline"}
    },
    "PixelsOrPercent":{
      "type":"string",
      "pattern":"(^\\d{1,3}(\\.\\d{0,5})?%$)|(^\\d{1,4}?px$)"
    },
    "Playlist":{
      "type":"structure",
      "members":{
        "Name":{"shape":"Filename"},
        "Format":{"shape":"PlaylistFormat"},
        "OutputKeys":{"shape":"OutputKeys"},
        "Status":{"shape":"JobStatus"},
        "StatusDetail":{"shape":"Description"}
      }
    },
    "PlaylistFormat":{
      "type":"string",
      "pattern":"(^HLSv3$)|(^HLSv4$)|(^Smooth$)"
    },
    "Playlists":{
      "type":"list",
      "member":{"shape":"Playlist"}
    },
    "Preset":{
      "type":"structure",
      "members":{
        "Id":{"shape":"Id"},
        "Arn":{"shape":"String"},
        "Name":{"shape":"Name"},
        "Description":{"shape":"Description"},
        "Container":{"shape":"PresetContainer"},
        "Audio":{"shape":"AudioParameters"},
        "Video":{"shape":"VideoParameters"},
        "Thumbnails":{"shape":"Thumbnails"},
        "Type":{"shape":"PresetType"}
      }
    },
    "PresetContainer":{
      "type":"string",
      "pattern":"(^mp4$)|(^ts$)|(^webm$)|(^mp3$)|(^ogg$)|(^fmp4$)"
    },
    "PresetType":{
      "type":"string",
      "pattern":"(^System$)|(^Custom$)"
    },
    "PresetWatermark":{
      "type":"structure",
      "members":{
        "Id":{"shape":"PresetWatermarkId"},
        "MaxWidth":{"shape":"PixelsOrPercent"},
        "MaxHeight":{"shape":"PixelsOrPercent"},
        "SizingPolicy":{"shape":"WatermarkSizingPolicy"},
        "HorizontalAlign":{"shape":"HorizontalAlign"},
        "HorizontalOffset":{"shape":"PixelsOrPercent"},
        "VerticalAlign":{"shape":"VerticalAlign"},
        "VerticalOffset":{"shape":"PixelsOrPercent"},
        "Opacity":{"shape":"Opacity"},
        "Target":{"shape":"Target"}
      }
    },
    "PresetWatermarkId":{
      "type":"string",
      "min":1,
      "max":40
    },
    "PresetWatermarks":{
      "type":"list",
      "member":{"shape":"PresetWatermark"}
    },
    "Presets":{
      "type":"list",
      "member":{"shape":"Preset"}
    },
    "ReadJobRequest":{
      "type":"structure",
      "required":["Id"],
      "members":{
        "Id":{
          "shape":"Id",
          "location":"uri",
          "locationName":"Id"
        }
      }
    },
    "ReadJobResponse":{
      "type":"structure",
      "members":{
        "Job":{"shape":"Job"}
      }
    },
    "ReadPipelineRequest":{
      "type":"structure",
      "required":["Id"],
      "members":{
        "Id":{
          "shape":"Id",
          "location":"uri",
          "locationName":"Id"
        }
      }
    },
    "ReadPipelineResponse":{
      "type":"structure",
      "members":{
        "Pipeline":{"shape":"Pipeline"}
      }
    },
    "ReadPresetRequest":{
      "type":"structure",
      "required":["Id"],
      "members":{
        "Id":{
          "shape":"Id",
          "location":"uri",
          "locationName":"Id"
        }
      }
    },
    "ReadPresetResponse":{
      "type":"structure",
      "members":{
        "Preset":{"shape":"Preset"}
      }
    },
    "Resolution":{
      "type":"string",
      "pattern":"(^auto$)|(^\\d{1,5}x\\d{1,5}$)"
    },
    "ResourceInUseException":{
      "type":"structure",
      "members":{
      },
      "error":{"httpStatusCode":409},
      "exception":true
    },
    "ResourceNotFoundException":{
      "type":"structure",
      "members":{
      },
      "error":{"httpStatusCode":404},
      "exception":true
    },
    "Role":{
      "type":"string",
      "pattern":"^arn:aws:iam::\\w{12}:role/.+$"
    },
    "Rotate":{
      "type":"string",
      "pattern":"(^auto$)|(^0$)|(^90$)|(^180$)|(^270$)"
    },
    "SizingPolicy":{
      "type":"string",
      "pattern":"(^Fit$)|(^Fill$)|(^Stretch$)|(^Keep$)|(^ShrinkToFit$)|(^ShrinkToFill$)"
    },
    "SnsTopic":{
      "type":"string",
      "pattern":"(^$)|(^arn:aws:sns:.*:\\w{12}:.+$)"
    },
    "SnsTopics":{
      "type":"list",
      "member":{"shape":"SnsTopic"},
      "max":30
    },
    "StorageClass":{
      "type":"string",
      "pattern":"(^ReducedRedundancy$)|(^Standard$)"
    },
    "String":{"type":"string"},
    "Success":{
      "type":"string",
      "pattern":"(^true$)|(^false$)"
    },
    "Target":{
      "type":"string",
      "pattern":"(^Content$)|(^Frame$)"
    },
    "TestRoleRequest":{
      "type":"structure",
      "required":[
        "Role",
        "InputBucket",
        "OutputBucket",
        "Topics"
      ],
      "members":{
        "Role":{"shape":"Role"},
        "InputBucket":{"shape":"BucketName"},
        "OutputBucket":{"shape":"BucketName"},
        "Topics":{"shape":"SnsTopics"}
      }
    },
    "TestRoleResponse":{
      "type":"structure",
      "members":{
        "Success":{"shape":"Success"},
        "Messages":{"shape":"ExceptionMessages"}
      }
    },
    "ThumbnailPattern":{
      "type":"string",
      "pattern":"(^$)|(^.*\\{count\\}.*$)"
    },
    "ThumbnailResolution":{
      "type":"string",
      "pattern":"^\\d{1,5}x\\d{1,5}$"
    },
    "Thumbnails":{
      "type":"structure",
      "members":{
        "Format":{"shape":"JpgOrPng"},
        "Interval":{"shape":"Digits"},
        "Resolution":{"shape":"ThumbnailResolution"},
        "AspectRatio":{"shape":"AspectRatio"},
        "MaxWidth":{"shape":"DigitsOrAuto"},
        "MaxHeight":{"shape":"DigitsOrAuto"},
        "SizingPolicy":{"shape":"SizingPolicy"},
        "PaddingPolicy":{"shape":"PaddingPolicy"}
      }
    },
    "Time":{
      "type":"string",
      "pattern":"(^\\d{1,5}(\\.\\d{0,3})?$)|(^([0-1]?[0-9]:|2[0-3]:)?([0-5]?[0-9]:)?[0-5]?[0-9](\\.\\d{0,3})?$)"
    },
    "TimeOffset":{
      "type":"string",
      "pattern":"(^[+-]?\\d{1,5}(\\.\\d{0,3})?$)|(^[+-]?([0-1]?[0-9]:|2[0-3]:)?([0-5]?[0-9]:)?[0-5]?[0-9](\\.\\d{0,3})?$)"
    },
    "TimeSpan":{
      "type":"structure",
      "members":{
        "StartTime":{"shape":"Time"},
        "Duration":{"shape":"Time"}
      }
    },
    "UpdatePipelineNotificationsRequest":{
      "type":"structure",
      "required":[
        "Id",
        "Notifications"
      ],
      "members":{
        "Id":{
          "shape":"Id",
          "location":"uri",
          "locationName":"Id"
        },
        "Notifications":{"shape":"Notifications"}
      }
    },
    "UpdatePipelineNotificationsResponse":{
      "type":"structure",
      "members":{
        "Pipeline":{"shape":"Pipeline"}
      }
    },
    "UpdatePipelineRequest":{
      "type":"structure",
      "required":["Id"],
      "members":{
        "Id":{
          "shape":"Id",
          "location":"uri",
          "locationName":"Id"
        },
        "Name":{"shape":"Name"},
        "InputBucket":{"shape":"BucketName"},
        "Role":{"shape":"Role"},
        "AwsKmsKeyArn":{"shape":"KeyArn"},
        "Notifications":{"shape":"Notifications"},
        "ContentConfig":{"shape":"PipelineOutputConfig"},
        "ThumbnailConfig":{"shape":"PipelineOutputConfig"}
      }
    },
    "UpdatePipelineResponse":{
      "type":"structure",
      "members":{
        "Pipeline":{"shape":"Pipeline"}
      }
    },
    "UpdatePipelineStatusRequest":{
      "type":"structure",
      "required":[
        "Id",
        "Status"
      ],
      "members":{
        "Id":{
          "shape":"Id",
          "location":"uri",
          "locationName":"Id"
        },
        "Status":{"shape":"PipelineStatus"}
      }
    },
    "UpdatePipelineStatusResponse":{
      "type":"structure",
      "members":{
        "Pipeline":{"shape":"Pipeline"}
      }
    },
    "ValidationException":{
      "type":"structure",
      "members":{
      },
      "error":{"httpStatusCode":400},
      "exception":true
    },
    "VerticalAlign":{
      "type":"string",
      "pattern":"(^Top$)|(^Bottom$)|(^Center$)"
    },
    "VideoBitRate":{
      "type":"string",
      "pattern":"(^\\d{2,5}$)|(^auto$)"
    },
    "VideoCodec":{
      "type":"string",
      "pattern":"(^H\\.264$)|(^vp8$)"
    },
    "VideoParameters":{
      "type":"structure",
      "members":{
        "Codec":{"shape":"VideoCodec"},
        "CodecOptions":{"shape":"CodecOptions"},
        "KeyframesMaxDist":{"shape":"KeyframesMaxDist"},
        "FixedGOP":{"shape":"FixedGOP"},
        "BitRate":{"shape":"VideoBitRate"},
        "FrameRate":{"shape":"FrameRate"},
        "MaxFrameRate":{"shape":"MaxFrameRate"},
        "Resolution":{"shape":"Resolution"},
        "AspectRatio":{"shape":"AspectRatio"},
        "MaxWidth":{"shape":"DigitsOrAuto"},
        "MaxHeight":{"shape":"DigitsOrAuto"},
        "DisplayAspectRatio":{"shape":"AspectRatio"},
        "SizingPolicy":{"shape":"SizingPolicy"},
        "PaddingPolicy":{"shape":"PaddingPolicy"},
        "Watermarks":{"shape":"PresetWatermarks"}
      }
    },
    "WatermarkKey":{
      "type":"string",
      "min":1,
      "max":255,
      "pattern":"(^.{1,}.jpg$)|(^.{1,}.jpeg$)|(^.{1,}.png$)"
    },
    "WatermarkSizingPolicy":{
      "type":"string",
      "pattern":"(^Fit$)|(^Stretch$)|(^ShrinkToFit$)"
    }
  }
}
,
"EMR":
{
  "metadata":{
    "apiVersion":"2009-03-31",
    "endpointPrefix":"elasticmapreduce",
    "jsonVersion":"1.1",
    "serviceAbbreviation":"Amazon EMR",
    "serviceFullName":"Amazon Elastic MapReduce",
    "signatureVersion":"v4",
    "targetPrefix":"ElasticMapReduce",
    "timestampFormat":"unixTimestamp",
    "protocol":"json"
  },
  "operations":{
    "AddInstanceGroups":{
      "name":"AddInstanceGroups",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"AddInstanceGroupsInput"},
      "output":{"shape":"AddInstanceGroupsOutput"},
      "errors":[
        {
          "shape":"InternalServerError",
          "error":{
            "code":"InternalFailure",
            "httpStatusCode":500
          },
          "exception":true
        }
      ]
    },
    "AddJobFlowSteps":{
      "name":"AddJobFlowSteps",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"AddJobFlowStepsInput"},
      "output":{"shape":"AddJobFlowStepsOutput"},
      "errors":[
        {
          "shape":"InternalServerError",
          "error":{
            "code":"InternalFailure",
            "httpStatusCode":500
          },
          "exception":true
        }
      ]
    },
    "AddTags":{
      "name":"AddTags",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"AddTagsInput"},
      "output":{"shape":"AddTagsOutput"},
      "errors":[
        {
          "shape":"InternalServerException",
          "exception":true,
          "fault":true
        },
        {
          "shape":"InvalidRequestException",
          "exception":true
        }
      ]
    },
    "DescribeCluster":{
      "name":"DescribeCluster",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeClusterInput"},
      "output":{"shape":"DescribeClusterOutput"},
      "errors":[
        {
          "shape":"InternalServerException",
          "exception":true,
          "fault":true
        },
        {
          "shape":"InvalidRequestException",
          "exception":true
        }
      ]
    },
    "DescribeJobFlows":{
      "name":"DescribeJobFlows",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeJobFlowsInput"},
      "output":{"shape":"DescribeJobFlowsOutput"},
      "errors":[
        {
          "shape":"InternalServerError",
          "error":{
            "code":"InternalFailure",
            "httpStatusCode":500
          },
          "exception":true
        }
      ],
      "deprecated":true
    },
    "DescribeStep":{
      "name":"DescribeStep",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeStepInput"},
      "output":{"shape":"DescribeStepOutput"},
      "errors":[
        {
          "shape":"InternalServerException",
          "exception":true,
          "fault":true
        },
        {
          "shape":"InvalidRequestException",
          "exception":true
        }
      ]
    },
    "ListBootstrapActions":{
      "name":"ListBootstrapActions",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ListBootstrapActionsInput"},
      "output":{"shape":"ListBootstrapActionsOutput"},
      "errors":[
        {
          "shape":"InternalServerException",
          "exception":true,
          "fault":true
        },
        {
          "shape":"InvalidRequestException",
          "exception":true
        }
      ]
    },
    "ListClusters":{
      "name":"ListClusters",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ListClustersInput"},
      "output":{"shape":"ListClustersOutput"},
      "errors":[
        {
          "shape":"InternalServerException",
          "exception":true,
          "fault":true
        },
        {
          "shape":"InvalidRequestException",
          "exception":true
        }
      ]
    },
    "ListInstanceGroups":{
      "name":"ListInstanceGroups",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ListInstanceGroupsInput"},
      "output":{"shape":"ListInstanceGroupsOutput"},
      "errors":[
        {
          "shape":"InternalServerException",
          "exception":true,
          "fault":true
        },
        {
          "shape":"InvalidRequestException",
          "exception":true
        }
      ]
    },
    "ListInstances":{
      "name":"ListInstances",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ListInstancesInput"},
      "output":{"shape":"ListInstancesOutput"},
      "errors":[
        {
          "shape":"InternalServerException",
          "exception":true,
          "fault":true
        },
        {
          "shape":"InvalidRequestException",
          "exception":true
        }
      ]
    },
    "ListSteps":{
      "name":"ListSteps",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ListStepsInput"},
      "output":{"shape":"ListStepsOutput"},
      "errors":[
        {
          "shape":"InternalServerException",
          "exception":true,
          "fault":true
        },
        {
          "shape":"InvalidRequestException",
          "exception":true
        }
      ]
    },
    "ModifyInstanceGroups":{
      "name":"ModifyInstanceGroups",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ModifyInstanceGroupsInput"},
      "errors":[
        {
          "shape":"InternalServerError",
          "error":{
            "code":"InternalFailure",
            "httpStatusCode":500
          },
          "exception":true
        }
      ]
    },
    "RemoveTags":{
      "name":"RemoveTags",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"RemoveTagsInput"},
      "output":{"shape":"RemoveTagsOutput"},
      "errors":[
        {
          "shape":"InternalServerException",
          "exception":true,
          "fault":true
        },
        {
          "shape":"InvalidRequestException",
          "exception":true
        }
      ]
    },
    "RunJobFlow":{
      "name":"RunJobFlow",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"RunJobFlowInput"},
      "output":{"shape":"RunJobFlowOutput"},
      "errors":[
        {
          "shape":"InternalServerError",
          "error":{
            "code":"InternalFailure",
            "httpStatusCode":500
          },
          "exception":true
        }
      ]
    },
    "SetTerminationProtection":{
      "name":"SetTerminationProtection",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"SetTerminationProtectionInput"},
      "errors":[
        {
          "shape":"InternalServerError",
          "error":{
            "code":"InternalFailure",
            "httpStatusCode":500
          },
          "exception":true
        }
      ]
    },
    "SetVisibleToAllUsers":{
      "name":"SetVisibleToAllUsers",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"SetVisibleToAllUsersInput"},
      "errors":[
        {
          "shape":"InternalServerError",
          "error":{
            "code":"InternalFailure",
            "httpStatusCode":500
          },
          "exception":true
        }
      ]
    },
    "TerminateJobFlows":{
      "name":"TerminateJobFlows",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"TerminateJobFlowsInput"},
      "errors":[
        {
          "shape":"InternalServerError",
          "error":{
            "code":"InternalFailure",
            "httpStatusCode":500
          },
          "exception":true
        }
      ]
    }
  },
  "shapes":{
    "ActionOnFailure":{
      "type":"string",
      "enum":[
        "TERMINATE_JOB_FLOW",
        "TERMINATE_CLUSTER",
        "CANCEL_AND_WAIT",
        "CONTINUE"
      ]
    },
    "AddInstanceGroupsInput":{
      "type":"structure",
      "required":[
        "InstanceGroups",
        "JobFlowId"
      ],
      "members":{
        "InstanceGroups":{"shape":"InstanceGroupConfigList"},
        "JobFlowId":{"shape":"XmlStringMaxLen256"}
      }
    },
    "AddInstanceGroupsOutput":{
      "type":"structure",
      "members":{
        "JobFlowId":{"shape":"XmlStringMaxLen256"},
        "InstanceGroupIds":{"shape":"InstanceGroupIdsList"}
      }
    },
    "AddJobFlowStepsInput":{
      "type":"structure",
      "required":[
        "JobFlowId",
        "Steps"
      ],
      "members":{
        "JobFlowId":{"shape":"XmlStringMaxLen256"},
        "Steps":{"shape":"StepConfigList"}
      }
    },
    "AddJobFlowStepsOutput":{
      "type":"structure",
      "members":{
        "StepIds":{"shape":"StepIdsList"}
      }
    },
    "AddTagsInput":{
      "type":"structure",
      "required":[
        "ResourceId",
        "Tags"
      ],
      "members":{
        "ResourceId":{"shape":"ResourceId"},
        "Tags":{"shape":"TagList"}
      }
    },
    "AddTagsOutput":{
      "type":"structure",
      "members":{
      }
    },
    "Application":{
      "type":"structure",
      "members":{
        "Name":{"shape":"String"},
        "Version":{"shape":"String"},
        "Args":{"shape":"StringList"},
        "AdditionalInfo":{"shape":"StringMap"}
      }
    },
    "ApplicationList":{
      "type":"list",
      "member":{"shape":"Application"}
    },
    "Boolean":{"type":"boolean"},
    "BootstrapActionConfig":{
      "type":"structure",
      "required":[
        "Name",
        "ScriptBootstrapAction"
      ],
      "members":{
        "Name":{"shape":"XmlStringMaxLen256"},
        "ScriptBootstrapAction":{"shape":"ScriptBootstrapActionConfig"}
      }
    },
    "BootstrapActionConfigList":{
      "type":"list",
      "member":{"shape":"BootstrapActionConfig"}
    },
    "BootstrapActionDetail":{
      "type":"structure",
      "members":{
        "BootstrapActionConfig":{"shape":"BootstrapActionConfig"}
      }
    },
    "BootstrapActionDetailList":{
      "type":"list",
      "member":{"shape":"BootstrapActionDetail"}
    },
    "Cluster":{
      "type":"structure",
      "members":{
        "Id":{"shape":"ClusterId"},
        "Name":{"shape":"String"},
        "Status":{"shape":"ClusterStatus"},
        "Ec2InstanceAttributes":{"shape":"Ec2InstanceAttributes"},
        "LogUri":{"shape":"String"},
        "RequestedAmiVersion":{"shape":"String"},
        "RunningAmiVersion":{"shape":"String"},
        "AutoTerminate":{"shape":"Boolean"},
        "TerminationProtected":{"shape":"Boolean"},
        "VisibleToAllUsers":{"shape":"Boolean"},
        "Applications":{"shape":"ApplicationList"},
        "Tags":{"shape":"TagList"},
        "ServiceRole":{"shape":"String"}
      }
    },
    "ClusterId":{"type":"string"},
    "ClusterState":{
      "type":"string",
      "enum":[
        "STARTING",
        "BOOTSTRAPPING",
        "RUNNING",
        "WAITING",
        "TERMINATING",
        "TERMINATED",
        "TERMINATED_WITH_ERRORS"
      ]
    },
    "ClusterStateChangeReason":{
      "type":"structure",
      "members":{
        "Code":{"shape":"ClusterStateChangeReasonCode"},
        "Message":{"shape":"String"}
      }
    },
    "ClusterStateChangeReasonCode":{
      "type":"string",
      "enum":[
        "INTERNAL_ERROR",
        "VALIDATION_ERROR",
        "INSTANCE_FAILURE",
        "BOOTSTRAP_FAILURE",
        "USER_REQUEST",
        "STEP_FAILURE",
        "ALL_STEPS_COMPLETED"
      ]
    },
    "ClusterStateList":{
      "type":"list",
      "member":{"shape":"ClusterState"}
    },
    "ClusterStatus":{
      "type":"structure",
      "members":{
        "State":{"shape":"ClusterState"},
        "StateChangeReason":{"shape":"ClusterStateChangeReason"},
        "Timeline":{"shape":"ClusterTimeline"}
      }
    },
    "ClusterSummary":{
      "type":"structure",
      "members":{
        "Id":{"shape":"ClusterId"},
        "Name":{"shape":"String"},
        "Status":{"shape":"ClusterStatus"}
      }
    },
    "ClusterSummaryList":{
      "type":"list",
      "member":{"shape":"ClusterSummary"}
    },
    "ClusterTimeline":{
      "type":"structure",
      "members":{
        "CreationDateTime":{"shape":"Date"},
        "ReadyDateTime":{"shape":"Date"},
        "EndDateTime":{"shape":"Date"}
      }
    },
    "Command":{
      "type":"structure",
      "members":{
        "Name":{"shape":"String"},
        "ScriptPath":{"shape":"String"},
        "Args":{"shape":"StringList"}
      }
    },
    "CommandList":{
      "type":"list",
      "member":{"shape":"Command"}
    },
    "Date":{"type":"timestamp"},
    "DescribeClusterInput":{
      "type":"structure",
      "required":["ClusterId"],
      "members":{
        "ClusterId":{"shape":"ClusterId"}
      }
    },
    "DescribeClusterOutput":{
      "type":"structure",
      "members":{
        "Cluster":{"shape":"Cluster"}
      }
    },
    "DescribeJobFlowsInput":{
      "type":"structure",
      "members":{
        "CreatedAfter":{"shape":"Date"},
        "CreatedBefore":{"shape":"Date"},
        "JobFlowIds":{"shape":"XmlStringList"},
        "JobFlowStates":{"shape":"JobFlowExecutionStateList"}
      }
    },
    "DescribeJobFlowsOutput":{
      "type":"structure",
      "members":{
        "JobFlows":{"shape":"JobFlowDetailList"}
      }
    },
    "DescribeStepInput":{
      "type":"structure",
      "required":[
        "ClusterId",
        "StepId"
      ],
      "members":{
        "ClusterId":{"shape":"ClusterId"},
        "StepId":{"shape":"StepId"}
      }
    },
    "DescribeStepOutput":{
      "type":"structure",
      "members":{
        "Step":{"shape":"Step"}
      }
    },
    "EC2InstanceIdsToTerminateList":{
      "type":"list",
      "member":{"shape":"InstanceId"}
    },
    "Ec2InstanceAttributes":{
      "type":"structure",
      "members":{
        "Ec2KeyName":{"shape":"String"},
        "Ec2SubnetId":{"shape":"String"},
        "Ec2AvailabilityZone":{"shape":"String"},
        "IamInstanceProfile":{"shape":"String"}
      }
    },
    "ErrorCode":{
      "type":"string",
      "min":1,
      "max":256
    },
    "ErrorMessage":{"type":"string"},
    "HadoopJarStepConfig":{
      "type":"structure",
      "required":["Jar"],
      "members":{
        "Properties":{"shape":"KeyValueList"},
        "Jar":{"shape":"XmlString"},
        "MainClass":{"shape":"XmlString"},
        "Args":{"shape":"XmlStringList"}
      }
    },
    "HadoopStepConfig":{
      "type":"structure",
      "members":{
        "Jar":{"shape":"String"},
        "Properties":{"shape":"StringMap"},
        "MainClass":{"shape":"String"},
        "Args":{"shape":"StringList"}
      }
    },
    "Instance":{
      "type":"structure",
      "members":{
        "Id":{"shape":"InstanceId"},
        "Ec2InstanceId":{"shape":"InstanceId"},
        "PublicDnsName":{"shape":"String"},
        "PublicIpAddress":{"shape":"String"},
        "PrivateDnsName":{"shape":"String"},
        "PrivateIpAddress":{"shape":"String"},
        "Status":{"shape":"InstanceStatus"}
      }
    },
    "InstanceGroup":{
      "type":"structure",
      "members":{
        "Id":{"shape":"InstanceGroupId"},
        "Name":{"shape":"String"},
        "Market":{"shape":"MarketType"},
        "InstanceGroupType":{"shape":"InstanceGroupType"},
        "BidPrice":{"shape":"String"},
        "InstanceType":{"shape":"InstanceType"},
        "RequestedInstanceCount":{"shape":"Integer"},
        "RunningInstanceCount":{"shape":"Integer"},
        "Status":{"shape":"InstanceGroupStatus"}
      }
    },
    "InstanceGroupConfig":{
      "type":"structure",
      "required":[
        "InstanceRole",
        "InstanceType",
        "InstanceCount"
      ],
      "members":{
        "Name":{"shape":"XmlStringMaxLen256"},
        "Market":{"shape":"MarketType"},
        "InstanceRole":{"shape":"InstanceRoleType"},
        "BidPrice":{"shape":"XmlStringMaxLen256"},
        "InstanceType":{"shape":"InstanceType"},
        "InstanceCount":{"shape":"Integer"}
      }
    },
    "InstanceGroupConfigList":{
      "type":"list",
      "member":{"shape":"InstanceGroupConfig"}
    },
    "InstanceGroupDetail":{
      "type":"structure",
      "required":[
        "Market",
        "InstanceRole",
        "InstanceType",
        "InstanceRequestCount",
        "InstanceRunningCount",
        "State",
        "CreationDateTime"
      ],
      "members":{
        "InstanceGroupId":{"shape":"XmlStringMaxLen256"},
        "Name":{"shape":"XmlStringMaxLen256"},
        "Market":{"shape":"MarketType"},
        "InstanceRole":{"shape":"InstanceRoleType"},
        "BidPrice":{"shape":"XmlStringMaxLen256"},
        "InstanceType":{"shape":"InstanceType"},
        "InstanceRequestCount":{"shape":"Integer"},
        "InstanceRunningCount":{"shape":"Integer"},
        "State":{"shape":"InstanceGroupState"},
        "LastStateChangeReason":{"shape":"XmlString"},
        "CreationDateTime":{"shape":"Date"},
        "StartDateTime":{"shape":"Date"},
        "ReadyDateTime":{"shape":"Date"},
        "EndDateTime":{"shape":"Date"}
      }
    },
    "InstanceGroupDetailList":{
      "type":"list",
      "member":{"shape":"InstanceGroupDetail"}
    },
    "InstanceGroupId":{"type":"string"},
    "InstanceGroupIdsList":{
      "type":"list",
      "member":{"shape":"XmlStringMaxLen256"}
    },
    "InstanceGroupList":{
      "type":"list",
      "member":{"shape":"InstanceGroup"}
    },
    "InstanceGroupModifyConfig":{
      "type":"structure",
      "required":["InstanceGroupId"],
      "members":{
        "InstanceGroupId":{"shape":"XmlStringMaxLen256"},
        "InstanceCount":{"shape":"Integer"},
        "EC2InstanceIdsToTerminate":{"shape":"EC2InstanceIdsToTerminateList"}
      }
    },
    "InstanceGroupModifyConfigList":{
      "type":"list",
      "member":{"shape":"InstanceGroupModifyConfig"}
    },
    "InstanceGroupState":{
      "type":"string",
      "enum":[
        "PROVISIONING",
        "BOOTSTRAPPING",
        "RUNNING",
        "RESIZING",
        "SUSPENDED",
        "TERMINATING",
        "TERMINATED",
        "ARRESTED",
        "SHUTTING_DOWN",
        "ENDED"
      ]
    },
    "InstanceGroupStateChangeReason":{
      "type":"structure",
      "members":{
        "Code":{"shape":"InstanceGroupStateChangeReasonCode"},
        "Message":{"shape":"String"}
      }
    },
    "InstanceGroupStateChangeReasonCode":{
      "type":"string",
      "enum":[
        "INTERNAL_ERROR",
        "VALIDATION_ERROR",
        "INSTANCE_FAILURE",
        "CLUSTER_TERMINATED"
      ]
    },
    "InstanceGroupStatus":{
      "type":"structure",
      "members":{
        "State":{"shape":"InstanceGroupState"},
        "StateChangeReason":{"shape":"InstanceGroupStateChangeReason"},
        "Timeline":{"shape":"InstanceGroupTimeline"}
      }
    },
    "InstanceGroupTimeline":{
      "type":"structure",
      "members":{
        "CreationDateTime":{"shape":"Date"},
        "ReadyDateTime":{"shape":"Date"},
        "EndDateTime":{"shape":"Date"}
      }
    },
    "InstanceGroupType":{
      "type":"string",
      "enum":[
        "MASTER",
        "CORE",
        "TASK"
      ]
    },
    "InstanceGroupTypeList":{
      "type":"list",
      "member":{"shape":"InstanceGroupType"}
    },
    "InstanceId":{"type":"string"},
    "InstanceList":{
      "type":"list",
      "member":{"shape":"Instance"}
    },
    "InstanceRoleType":{
      "type":"string",
      "enum":[
        "MASTER",
        "CORE",
        "TASK"
      ]
    },
    "InstanceState":{
      "type":"string",
      "enum":[
        "AWAITING_FULFILLMENT",
        "PROVISIONING",
        "BOOTSTRAPPING",
        "RUNNING",
        "TERMINATED"
      ]
    },
    "InstanceStateChangeReason":{
      "type":"structure",
      "members":{
        "Code":{"shape":"InstanceStateChangeReasonCode"},
        "Message":{"shape":"String"}
      }
    },
    "InstanceStateChangeReasonCode":{
      "type":"string",
      "enum":[
        "INTERNAL_ERROR",
        "VALIDATION_ERROR",
        "INSTANCE_FAILURE",
        "BOOTSTRAP_FAILURE",
        "CLUSTER_TERMINATED"
      ]
    },
    "InstanceStatus":{
      "type":"structure",
      "members":{
        "State":{"shape":"InstanceState"},
        "StateChangeReason":{"shape":"InstanceStateChangeReason"},
        "Timeline":{"shape":"InstanceTimeline"}
      }
    },
    "InstanceTimeline":{
      "type":"structure",
      "members":{
        "CreationDateTime":{"shape":"Date"},
        "ReadyDateTime":{"shape":"Date"},
        "EndDateTime":{"shape":"Date"}
      }
    },
    "InstanceType":{
      "type":"string",
      "min":1,
      "max":256,
      "pattern":"[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*"
    },
    "Integer":{"type":"integer"},
    "InternalServerError":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"InternalFailure",
        "httpStatusCode":500
      },
      "exception":true
    },
    "InternalServerException":{
      "type":"structure",
      "members":{
        "Message":{"shape":"ErrorMessage"}
      },
      "exception":true,
      "fault":true
    },
    "InvalidRequestException":{
      "type":"structure",
      "members":{
        "ErrorCode":{"shape":"ErrorCode"},
        "Message":{"shape":"ErrorMessage"}
      },
      "exception":true
    },
    "JobFlowDetail":{
      "type":"structure",
      "required":[
        "JobFlowId",
        "Name",
        "ExecutionStatusDetail",
        "Instances"
      ],
      "members":{
        "JobFlowId":{"shape":"XmlStringMaxLen256"},
        "Name":{"shape":"XmlStringMaxLen256"},
        "LogUri":{"shape":"XmlString"},
        "AmiVersion":{"shape":"XmlStringMaxLen256"},
        "ExecutionStatusDetail":{"shape":"JobFlowExecutionStatusDetail"},
        "Instances":{"shape":"JobFlowInstancesDetail"},
        "Steps":{"shape":"StepDetailList"},
        "BootstrapActions":{"shape":"BootstrapActionDetailList"},
        "SupportedProducts":{"shape":"SupportedProductsList"},
        "VisibleToAllUsers":{"shape":"Boolean"},
        "JobFlowRole":{"shape":"XmlString"},
        "ServiceRole":{"shape":"XmlString"}
      }
    },
    "JobFlowDetailList":{
      "type":"list",
      "member":{"shape":"JobFlowDetail"}
    },
    "JobFlowExecutionState":{
      "type":"string",
      "enum":[
        "STARTING",
        "BOOTSTRAPPING",
        "RUNNING",
        "WAITING",
        "SHUTTING_DOWN",
        "TERMINATED",
        "COMPLETED",
        "FAILED"
      ]
    },
    "JobFlowExecutionStateList":{
      "type":"list",
      "member":{"shape":"JobFlowExecutionState"}
    },
    "JobFlowExecutionStatusDetail":{
      "type":"structure",
      "required":[
        "State",
        "CreationDateTime"
      ],
      "members":{
        "State":{"shape":"JobFlowExecutionState"},
        "CreationDateTime":{"shape":"Date"},
        "StartDateTime":{"shape":"Date"},
        "ReadyDateTime":{"shape":"Date"},
        "EndDateTime":{"shape":"Date"},
        "LastStateChangeReason":{"shape":"XmlString"}
      }
    },
    "JobFlowInstancesConfig":{
      "type":"structure",
      "members":{
        "MasterInstanceType":{"shape":"InstanceType"},
        "SlaveInstanceType":{"shape":"InstanceType"},
        "InstanceCount":{"shape":"Integer"},
        "InstanceGroups":{"shape":"InstanceGroupConfigList"},
        "Ec2KeyName":{"shape":"XmlStringMaxLen256"},
        "Placement":{"shape":"PlacementType"},
        "KeepJobFlowAliveWhenNoSteps":{"shape":"Boolean"},
        "TerminationProtected":{"shape":"Boolean"},
        "HadoopVersion":{"shape":"XmlStringMaxLen256"},
        "Ec2SubnetId":{"shape":"XmlStringMaxLen256"}
      }
    },
    "JobFlowInstancesDetail":{
      "type":"structure",
      "required":[
        "MasterInstanceType",
        "SlaveInstanceType",
        "InstanceCount"
      ],
      "members":{
        "MasterInstanceType":{"shape":"InstanceType"},
        "MasterPublicDnsName":{"shape":"XmlString"},
        "MasterInstanceId":{"shape":"XmlString"},
        "SlaveInstanceType":{"shape":"InstanceType"},
        "InstanceCount":{"shape":"Integer"},
        "InstanceGroups":{"shape":"InstanceGroupDetailList"},
        "NormalizedInstanceHours":{"shape":"Integer"},
        "Ec2KeyName":{"shape":"XmlStringMaxLen256"},
        "Ec2SubnetId":{"shape":"XmlStringMaxLen256"},
        "Placement":{"shape":"PlacementType"},
        "KeepJobFlowAliveWhenNoSteps":{"shape":"Boolean"},
        "TerminationProtected":{"shape":"Boolean"},
        "HadoopVersion":{"shape":"XmlStringMaxLen256"}
      }
    },
    "KeyValue":{
      "type":"structure",
      "members":{
        "Key":{"shape":"XmlString"},
        "Value":{"shape":"XmlString"}
      }
    },
    "KeyValueList":{
      "type":"list",
      "member":{"shape":"KeyValue"}
    },
    "ListBootstrapActionsInput":{
      "type":"structure",
      "required":["ClusterId"],
      "members":{
        "ClusterId":{"shape":"ClusterId"},
        "Marker":{"shape":"Marker"}
      }
    },
    "ListBootstrapActionsOutput":{
      "type":"structure",
      "members":{
        "BootstrapActions":{"shape":"CommandList"},
        "Marker":{"shape":"Marker"}
      }
    },
    "ListClustersInput":{
      "type":"structure",
      "members":{
        "CreatedAfter":{"shape":"Date"},
        "CreatedBefore":{"shape":"Date"},
        "ClusterStates":{"shape":"ClusterStateList"},
        "Marker":{"shape":"Marker"}
      }
    },
    "ListClustersOutput":{
      "type":"structure",
      "members":{
        "Clusters":{"shape":"ClusterSummaryList"},
        "Marker":{"shape":"Marker"}
      }
    },
    "ListInstanceGroupsInput":{
      "type":"structure",
      "required":["ClusterId"],
      "members":{
        "ClusterId":{"shape":"ClusterId"},
        "Marker":{"shape":"Marker"}
      }
    },
    "ListInstanceGroupsOutput":{
      "type":"structure",
      "members":{
        "InstanceGroups":{"shape":"InstanceGroupList"},
        "Marker":{"shape":"Marker"}
      }
    },
    "ListInstancesInput":{
      "type":"structure",
      "required":["ClusterId"],
      "members":{
        "ClusterId":{"shape":"ClusterId"},
        "InstanceGroupId":{"shape":"InstanceGroupId"},
        "InstanceGroupTypes":{"shape":"InstanceGroupTypeList"},
        "Marker":{"shape":"Marker"}
      }
    },
    "ListInstancesOutput":{
      "type":"structure",
      "members":{
        "Instances":{"shape":"InstanceList"},
        "Marker":{"shape":"Marker"}
      }
    },
    "ListStepsInput":{
      "type":"structure",
      "required":["ClusterId"],
      "members":{
        "ClusterId":{"shape":"ClusterId"},
        "StepStates":{"shape":"StepStateList"},
        "Marker":{"shape":"Marker"}
      }
    },
    "ListStepsOutput":{
      "type":"structure",
      "members":{
        "Steps":{"shape":"StepSummaryList"},
        "Marker":{"shape":"Marker"}
      }
    },
    "Marker":{"type":"string"},
    "MarketType":{
      "type":"string",
      "enum":[
        "ON_DEMAND",
        "SPOT"
      ]
    },
    "ModifyInstanceGroupsInput":{
      "type":"structure",
      "members":{
        "InstanceGroups":{"shape":"InstanceGroupModifyConfigList"}
      }
    },
    "NewSupportedProductsList":{
      "type":"list",
      "member":{"shape":"SupportedProductConfig"}
    },
    "PlacementType":{
      "type":"structure",
      "required":["AvailabilityZone"],
      "members":{
        "AvailabilityZone":{"shape":"XmlString"}
      }
    },
    "RemoveTagsInput":{
      "type":"structure",
      "required":[
        "ResourceId",
        "TagKeys"
      ],
      "members":{
        "ResourceId":{"shape":"ResourceId"},
        "TagKeys":{"shape":"StringList"}
      }
    },
    "RemoveTagsOutput":{
      "type":"structure",
      "members":{
      }
    },
    "ResourceId":{"type":"string"},
    "RunJobFlowInput":{
      "type":"structure",
      "required":[
        "Name",
        "Instances"
      ],
      "members":{
        "Name":{"shape":"XmlStringMaxLen256"},
        "LogUri":{"shape":"XmlString"},
        "AdditionalInfo":{"shape":"XmlString"},
        "AmiVersion":{"shape":"XmlStringMaxLen256"},
        "Instances":{"shape":"JobFlowInstancesConfig"},
        "Steps":{"shape":"StepConfigList"},
        "BootstrapActions":{"shape":"BootstrapActionConfigList"},
        "SupportedProducts":{"shape":"SupportedProductsList"},
        "NewSupportedProducts":{"shape":"NewSupportedProductsList"},
        "VisibleToAllUsers":{"shape":"Boolean"},
        "JobFlowRole":{"shape":"XmlString"},
        "ServiceRole":{"shape":"XmlString"},
        "Tags":{"shape":"TagList"}
      }
    },
    "RunJobFlowOutput":{
      "type":"structure",
      "members":{
        "JobFlowId":{"shape":"XmlStringMaxLen256"}
      }
    },
    "ScriptBootstrapActionConfig":{
      "type":"structure",
      "required":["Path"],
      "members":{
        "Path":{"shape":"XmlString"},
        "Args":{"shape":"XmlStringList"}
      }
    },
    "SetTerminationProtectionInput":{
      "type":"structure",
      "required":[
        "JobFlowIds",
        "TerminationProtected"
      ],
      "members":{
        "JobFlowIds":{"shape":"XmlStringList"},
        "TerminationProtected":{"shape":"Boolean"}
      }
    },
    "SetVisibleToAllUsersInput":{
      "type":"structure",
      "required":[
        "JobFlowIds",
        "VisibleToAllUsers"
      ],
      "members":{
        "JobFlowIds":{"shape":"XmlStringList"},
        "VisibleToAllUsers":{"shape":"Boolean"}
      }
    },
    "Step":{
      "type":"structure",
      "members":{
        "Id":{"shape":"StepId"},
        "Name":{"shape":"String"},
        "Config":{"shape":"HadoopStepConfig"},
        "ActionOnFailure":{"shape":"ActionOnFailure"},
        "Status":{"shape":"StepStatus"}
      }
    },
    "StepConfig":{
      "type":"structure",
      "required":[
        "Name",
        "HadoopJarStep"
      ],
      "members":{
        "Name":{"shape":"XmlStringMaxLen256"},
        "ActionOnFailure":{"shape":"ActionOnFailure"},
        "HadoopJarStep":{"shape":"HadoopJarStepConfig"}
      }
    },
    "StepConfigList":{
      "type":"list",
      "member":{"shape":"StepConfig"}
    },
    "StepDetail":{
      "type":"structure",
      "required":[
        "StepConfig",
        "ExecutionStatusDetail"
      ],
      "members":{
        "StepConfig":{"shape":"StepConfig"},
        "ExecutionStatusDetail":{"shape":"StepExecutionStatusDetail"}
      }
    },
    "StepDetailList":{
      "type":"list",
      "member":{"shape":"StepDetail"}
    },
    "StepExecutionState":{
      "type":"string",
      "enum":[
        "PENDING",
        "RUNNING",
        "CONTINUE",
        "COMPLETED",
        "CANCELLED",
        "FAILED",
        "INTERRUPTED"
      ]
    },
    "StepExecutionStatusDetail":{
      "type":"structure",
      "required":[
        "State",
        "CreationDateTime"
      ],
      "members":{
        "State":{"shape":"StepExecutionState"},
        "CreationDateTime":{"shape":"Date"},
        "StartDateTime":{"shape":"Date"},
        "EndDateTime":{"shape":"Date"},
        "LastStateChangeReason":{"shape":"XmlString"}
      }
    },
    "StepId":{"type":"string"},
    "StepIdsList":{
      "type":"list",
      "member":{"shape":"XmlStringMaxLen256"}
    },
    "StepState":{
      "type":"string",
      "enum":[
        "PENDING",
        "RUNNING",
        "COMPLETED",
        "CANCELLED",
        "FAILED",
        "INTERRUPTED"
      ]
    },
    "StepStateChangeReason":{
      "type":"structure",
      "members":{
        "Code":{"shape":"StepStateChangeReasonCode"},
        "Message":{"shape":"String"}
      }
    },
    "StepStateChangeReasonCode":{
      "type":"string",
      "enum":["NONE"]
    },
    "StepStateList":{
      "type":"list",
      "member":{"shape":"StepState"}
    },
    "StepStatus":{
      "type":"structure",
      "members":{
        "State":{"shape":"StepState"},
        "StateChangeReason":{"shape":"StepStateChangeReason"},
        "Timeline":{"shape":"StepTimeline"}
      }
    },
    "StepSummary":{
      "type":"structure",
      "members":{
        "Id":{"shape":"StepId"},
        "Name":{"shape":"String"},
        "Status":{"shape":"StepStatus"}
      }
    },
    "StepSummaryList":{
      "type":"list",
      "member":{"shape":"StepSummary"}
    },
    "StepTimeline":{
      "type":"structure",
      "members":{
        "CreationDateTime":{"shape":"Date"},
        "StartDateTime":{"shape":"Date"},
        "EndDateTime":{"shape":"Date"}
      }
    },
    "String":{"type":"string"},
    "StringList":{
      "type":"list",
      "member":{"shape":"String"}
    },
    "StringMap":{
      "type":"map",
      "key":{"shape":"String"},
      "value":{"shape":"String"}
    },
    "SupportedProductConfig":{
      "type":"structure",
      "members":{
        "Name":{"shape":"XmlStringMaxLen256"},
        "Args":{"shape":"XmlStringList"}
      }
    },
    "SupportedProductsList":{
      "type":"list",
      "member":{"shape":"XmlStringMaxLen256"}
    },
    "Tag":{
      "type":"structure",
      "members":{
        "Key":{"shape":"String"},
        "Value":{"shape":"String"}
      }
    },
    "TagList":{
      "type":"list",
      "member":{"shape":"Tag"}
    },
    "TerminateJobFlowsInput":{
      "type":"structure",
      "required":["JobFlowIds"],
      "members":{
        "JobFlowIds":{"shape":"XmlStringList"}
      }
    },
    "XmlString":{
      "type":"string",
      "min":0,
      "max":10280,
      "pattern":"[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*"
    },
    "XmlStringList":{
      "type":"list",
      "member":{"shape":"XmlString"}
    },
    "XmlStringMaxLen256":{
      "type":"string",
      "min":0,
      "max":256,
      "pattern":"[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*"
    }
  }
}
,
"Glacier":
{
  "metadata":{
    "apiVersion":"2012-06-01",
    "checksumFormat":"sha256",
    "endpointPrefix":"glacier",
    "serviceFullName":"Amazon Glacier",
    "signatureVersion":"v4",
    "protocol":"rest-json"
  },
  "operations":{
    "AbortMultipartUpload":{
      "name":"AbortMultipartUpload",
      "http":{
        "method":"DELETE",
        "requestUri":"/{accountId}/vaults/{vaultName}/multipart-uploads/{uploadId}",
        "responseCode":204
      },
      "input":{"shape":"AbortMultipartUploadInput"},
      "errors":[
        {
          "shape":"ResourceNotFoundException",
          "error":{"httpStatusCode":404},
          "exception":true
        },
        {
          "shape":"InvalidParameterValueException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"MissingParameterValueException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"ServiceUnavailableException",
          "error":{"httpStatusCode":500},
          "exception":true
        }
      ]
    },
    "CompleteMultipartUpload":{
      "name":"CompleteMultipartUpload",
      "http":{
        "method":"POST",
        "requestUri":"/{accountId}/vaults/{vaultName}/multipart-uploads/{uploadId}",
        "responseCode":201
      },
      "input":{"shape":"CompleteMultipartUploadInput"},
      "output":{"shape":"ArchiveCreationOutput"},
      "errors":[
        {
          "shape":"ResourceNotFoundException",
          "error":{"httpStatusCode":404},
          "exception":true
        },
        {
          "shape":"InvalidParameterValueException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"MissingParameterValueException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"ServiceUnavailableException",
          "error":{"httpStatusCode":500},
          "exception":true
        }
      ]
    },
    "CreateVault":{
      "name":"CreateVault",
      "http":{
        "method":"PUT",
        "requestUri":"/{accountId}/vaults/{vaultName}",
        "responseCode":201
      },
      "input":{"shape":"CreateVaultInput"},
      "output":{"shape":"CreateVaultOutput"},
      "errors":[
        {
          "shape":"InvalidParameterValueException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"MissingParameterValueException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"ServiceUnavailableException",
          "error":{"httpStatusCode":500},
          "exception":true
        },
        {
          "shape":"LimitExceededException",
          "error":{"httpStatusCode":400},
          "exception":true
        }
      ]
    },
    "DeleteArchive":{
      "name":"DeleteArchive",
      "http":{
        "method":"DELETE",
        "requestUri":"/{accountId}/vaults/{vaultName}/archives/{archiveId}",
        "responseCode":204
      },
      "input":{"shape":"DeleteArchiveInput"},
      "errors":[
        {
          "shape":"ResourceNotFoundException",
          "error":{"httpStatusCode":404},
          "exception":true
        },
        {
          "shape":"InvalidParameterValueException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"MissingParameterValueException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"ServiceUnavailableException",
          "error":{"httpStatusCode":500},
          "exception":true
        }
      ]
    },
    "DeleteVault":{
      "name":"DeleteVault",
      "http":{
        "method":"DELETE",
        "requestUri":"/{accountId}/vaults/{vaultName}",
        "responseCode":204
      },
      "input":{"shape":"DeleteVaultInput"},
      "errors":[
        {
          "shape":"ResourceNotFoundException",
          "error":{"httpStatusCode":404},
          "exception":true
        },
        {
          "shape":"InvalidParameterValueException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"MissingParameterValueException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"ServiceUnavailableException",
          "error":{"httpStatusCode":500},
          "exception":true
        }
      ]
    },
    "DeleteVaultNotifications":{
      "name":"DeleteVaultNotifications",
      "http":{
        "method":"DELETE",
        "requestUri":"/{accountId}/vaults/{vaultName}/notification-configuration",
        "responseCode":204
      },
      "input":{"shape":"DeleteVaultNotificationsInput"},
      "errors":[
        {
          "shape":"ResourceNotFoundException",
          "error":{"httpStatusCode":404},
          "exception":true
        },
        {
          "shape":"InvalidParameterValueException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"MissingParameterValueException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"ServiceUnavailableException",
          "error":{"httpStatusCode":500},
          "exception":true
        }
      ]
    },
    "DescribeJob":{
      "name":"DescribeJob",
      "http":{
        "method":"GET",
        "requestUri":"/{accountId}/vaults/{vaultName}/jobs/{jobId}"
      },
      "input":{"shape":"DescribeJobInput"},
      "output":{"shape":"GlacierJobDescription"},
      "errors":[
        {
          "shape":"ResourceNotFoundException",
          "error":{"httpStatusCode":404},
          "exception":true
        },
        {
          "shape":"InvalidParameterValueException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"MissingParameterValueException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"ServiceUnavailableException",
          "error":{"httpStatusCode":500},
          "exception":true
        }
      ]
    },
    "DescribeVault":{
      "name":"DescribeVault",
      "http":{
        "method":"GET",
        "requestUri":"/{accountId}/vaults/{vaultName}"
      },
      "input":{"shape":"DescribeVaultInput"},
      "output":{"shape":"DescribeVaultOutput"},
      "errors":[
        {
          "shape":"ResourceNotFoundException",
          "error":{"httpStatusCode":404},
          "exception":true
        },
        {
          "shape":"InvalidParameterValueException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"MissingParameterValueException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"ServiceUnavailableException",
          "error":{"httpStatusCode":500},
          "exception":true
        }
      ]
    },
    "GetJobOutput":{
      "name":"GetJobOutput",
      "http":{
        "method":"GET",
        "requestUri":"/{accountId}/vaults/{vaultName}/jobs/{jobId}/output"
      },
      "input":{"shape":"GetJobOutputInput"},
      "output":{"shape":"GetJobOutputOutput"},
      "errors":[
        {
          "shape":"ResourceNotFoundException",
          "error":{"httpStatusCode":404},
          "exception":true
        },
        {
          "shape":"InvalidParameterValueException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"MissingParameterValueException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"ServiceUnavailableException",
          "error":{"httpStatusCode":500},
          "exception":true
        }
      ]
    },
    "GetVaultNotifications":{
      "name":"GetVaultNotifications",
      "http":{
        "method":"GET",
        "requestUri":"/{accountId}/vaults/{vaultName}/notification-configuration"
      },
      "input":{"shape":"GetVaultNotificationsInput"},
      "output":{"shape":"GetVaultNotificationsOutput"},
      "errors":[
        {
          "shape":"ResourceNotFoundException",
          "error":{"httpStatusCode":404},
          "exception":true
        },
        {
          "shape":"InvalidParameterValueException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"MissingParameterValueException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"ServiceUnavailableException",
          "error":{"httpStatusCode":500},
          "exception":true
        }
      ]
    },
    "InitiateJob":{
      "name":"InitiateJob",
      "http":{
        "method":"POST",
        "requestUri":"/{accountId}/vaults/{vaultName}/jobs",
        "responseCode":202
      },
      "input":{"shape":"InitiateJobInput"},
      "output":{"shape":"InitiateJobOutput"},
      "errors":[
        {
          "shape":"ResourceNotFoundException",
          "error":{"httpStatusCode":404},
          "exception":true
        },
        {
          "shape":"InvalidParameterValueException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"MissingParameterValueException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"ServiceUnavailableException",
          "error":{"httpStatusCode":500},
          "exception":true
        }
      ]
    },
    "InitiateMultipartUpload":{
      "name":"InitiateMultipartUpload",
      "http":{
        "method":"POST",
        "requestUri":"/{accountId}/vaults/{vaultName}/multipart-uploads",
        "responseCode":201
      },
      "input":{"shape":"InitiateMultipartUploadInput"},
      "output":{"shape":"InitiateMultipartUploadOutput"},
      "errors":[
        {
          "shape":"ResourceNotFoundException",
          "error":{"httpStatusCode":404},
          "exception":true
        },
        {
          "shape":"InvalidParameterValueException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"MissingParameterValueException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"ServiceUnavailableException",
          "error":{"httpStatusCode":500},
          "exception":true
        }
      ]
    },
    "ListJobs":{
      "name":"ListJobs",
      "http":{
        "method":"GET",
        "requestUri":"/{accountId}/vaults/{vaultName}/jobs"
      },
      "input":{"shape":"ListJobsInput"},
      "output":{"shape":"ListJobsOutput"},
      "errors":[
        {
          "shape":"ResourceNotFoundException",
          "error":{"httpStatusCode":404},
          "exception":true
        },
        {
          "shape":"InvalidParameterValueException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"MissingParameterValueException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"ServiceUnavailableException",
          "error":{"httpStatusCode":500},
          "exception":true
        }
      ]
    },
    "ListMultipartUploads":{
      "name":"ListMultipartUploads",
      "http":{
        "method":"GET",
        "requestUri":"/{accountId}/vaults/{vaultName}/multipart-uploads"
      },
      "input":{"shape":"ListMultipartUploadsInput"},
      "output":{"shape":"ListMultipartUploadsOutput"},
      "errors":[
        {
          "shape":"ResourceNotFoundException",
          "error":{"httpStatusCode":404},
          "exception":true
        },
        {
          "shape":"InvalidParameterValueException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"MissingParameterValueException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"ServiceUnavailableException",
          "error":{"httpStatusCode":500},
          "exception":true
        }
      ]
    },
    "ListParts":{
      "name":"ListParts",
      "http":{
        "method":"GET",
        "requestUri":"/{accountId}/vaults/{vaultName}/multipart-uploads/{uploadId}"
      },
      "input":{"shape":"ListPartsInput"},
      "output":{"shape":"ListPartsOutput"},
      "errors":[
        {
          "shape":"ResourceNotFoundException",
          "error":{"httpStatusCode":404},
          "exception":true
        },
        {
          "shape":"InvalidParameterValueException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"MissingParameterValueException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"ServiceUnavailableException",
          "error":{"httpStatusCode":500},
          "exception":true
        }
      ]
    },
    "ListVaults":{
      "name":"ListVaults",
      "http":{
        "method":"GET",
        "requestUri":"/{accountId}/vaults"
      },
      "input":{"shape":"ListVaultsInput"},
      "output":{"shape":"ListVaultsOutput"},
      "errors":[
        {
          "shape":"ResourceNotFoundException",
          "error":{"httpStatusCode":404},
          "exception":true
        },
        {
          "shape":"InvalidParameterValueException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"MissingParameterValueException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"ServiceUnavailableException",
          "error":{"httpStatusCode":500},
          "exception":true
        }
      ]
    },
    "SetVaultNotifications":{
      "name":"SetVaultNotifications",
      "http":{
        "method":"PUT",
        "requestUri":"/{accountId}/vaults/{vaultName}/notification-configuration",
        "responseCode":204
      },
      "input":{"shape":"SetVaultNotificationsInput"},
      "errors":[
        {
          "shape":"ResourceNotFoundException",
          "error":{"httpStatusCode":404},
          "exception":true
        },
        {
          "shape":"InvalidParameterValueException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"MissingParameterValueException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"ServiceUnavailableException",
          "error":{"httpStatusCode":500},
          "exception":true
        }
      ]
    },
    "UploadArchive":{
      "name":"UploadArchive",
      "http":{
        "method":"POST",
        "requestUri":"/{accountId}/vaults/{vaultName}/archives",
        "responseCode":201
      },
      "input":{"shape":"UploadArchiveInput"},
      "output":{"shape":"ArchiveCreationOutput"},
      "errors":[
        {
          "shape":"ResourceNotFoundException",
          "error":{"httpStatusCode":404},
          "exception":true
        },
        {
          "shape":"InvalidParameterValueException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"MissingParameterValueException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"RequestTimeoutException",
          "error":{"httpStatusCode":408},
          "exception":true
        },
        {
          "shape":"ServiceUnavailableException",
          "error":{"httpStatusCode":500},
          "exception":true
        }
      ]
    },
    "UploadMultipartPart":{
      "name":"UploadMultipartPart",
      "http":{
        "method":"PUT",
        "requestUri":"/{accountId}/vaults/{vaultName}/multipart-uploads/{uploadId}",
        "responseCode":204
      },
      "input":{"shape":"UploadMultipartPartInput"},
      "output":{"shape":"UploadMultipartPartOutput"},
      "errors":[
        {
          "shape":"ResourceNotFoundException",
          "error":{"httpStatusCode":404},
          "exception":true
        },
        {
          "shape":"InvalidParameterValueException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"MissingParameterValueException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"RequestTimeoutException",
          "error":{"httpStatusCode":408},
          "exception":true
        },
        {
          "shape":"ServiceUnavailableException",
          "error":{"httpStatusCode":500},
          "exception":true
        }
      ]
    }
  },
  "shapes":{
    "AbortMultipartUploadInput":{
      "type":"structure",
      "members":{
        "accountId":{
          "shape":"string",
          "location":"uri",
          "locationName":"accountId"
        },
        "vaultName":{
          "shape":"string",
          "location":"uri",
          "locationName":"vaultName"
        },
        "uploadId":{
          "shape":"string",
          "location":"uri",
          "locationName":"uploadId"
        }
      },
      "required":[
        "accountId",
        "vaultName",
        "uploadId"
      ]
    },
    "ActionCode":{
      "type":"string",
      "enum":[
        "ArchiveRetrieval",
        "InventoryRetrieval"
      ]
    },
    "ArchiveCreationOutput":{
      "type":"structure",
      "members":{
        "location":{
          "shape":"string",
          "location":"header",
          "locationName":"Location"
        },
        "checksum":{
          "shape":"string",
          "location":"header",
          "locationName":"x-amz-sha256-tree-hash"
        },
        "archiveId":{
          "shape":"string",
          "location":"header",
          "locationName":"x-amz-archive-id"
        }
      }
    },
    "CompleteMultipartUploadInput":{
      "type":"structure",
      "members":{
        "accountId":{
          "shape":"string",
          "location":"uri",
          "locationName":"accountId"
        },
        "vaultName":{
          "shape":"string",
          "location":"uri",
          "locationName":"vaultName"
        },
        "uploadId":{
          "shape":"string",
          "location":"uri",
          "locationName":"uploadId"
        },
        "archiveSize":{
          "shape":"string",
          "location":"header",
          "locationName":"x-amz-archive-size"
        },
        "checksum":{
          "shape":"string",
          "location":"header",
          "locationName":"x-amz-sha256-tree-hash"
        }
      },
      "required":[
        "accountId",
        "vaultName",
        "uploadId"
      ]
    },
    "CreateVaultInput":{
      "type":"structure",
      "members":{
        "accountId":{
          "shape":"string",
          "location":"uri",
          "locationName":"accountId"
        },
        "vaultName":{
          "shape":"string",
          "location":"uri",
          "locationName":"vaultName"
        }
      },
      "required":[
        "accountId",
        "vaultName"
      ]
    },
    "CreateVaultOutput":{
      "type":"structure",
      "members":{
        "location":{
          "shape":"string",
          "location":"header",
          "locationName":"Location"
        }
      }
    },
    "DateTime":{"type":"string"},
    "DeleteArchiveInput":{
      "type":"structure",
      "members":{
        "accountId":{
          "shape":"string",
          "location":"uri",
          "locationName":"accountId"
        },
        "vaultName":{
          "shape":"string",
          "location":"uri",
          "locationName":"vaultName"
        },
        "archiveId":{
          "shape":"string",
          "location":"uri",
          "locationName":"archiveId"
        }
      },
      "required":[
        "accountId",
        "vaultName",
        "archiveId"
      ]
    },
    "DeleteVaultInput":{
      "type":"structure",
      "members":{
        "accountId":{
          "shape":"string",
          "location":"uri",
          "locationName":"accountId"
        },
        "vaultName":{
          "shape":"string",
          "location":"uri",
          "locationName":"vaultName"
        }
      },
      "required":[
        "accountId",
        "vaultName"
      ]
    },
    "DeleteVaultNotificationsInput":{
      "type":"structure",
      "members":{
        "accountId":{
          "shape":"string",
          "location":"uri",
          "locationName":"accountId"
        },
        "vaultName":{
          "shape":"string",
          "location":"uri",
          "locationName":"vaultName"
        }
      },
      "required":[
        "accountId",
        "vaultName"
      ]
    },
    "DescribeJobInput":{
      "type":"structure",
      "members":{
        "accountId":{
          "shape":"string",
          "location":"uri",
          "locationName":"accountId"
        },
        "vaultName":{
          "shape":"string",
          "location":"uri",
          "locationName":"vaultName"
        },
        "jobId":{
          "shape":"string",
          "location":"uri",
          "locationName":"jobId"
        }
      },
      "required":[
        "accountId",
        "vaultName",
        "jobId"
      ]
    },
    "DescribeVaultInput":{
      "type":"structure",
      "members":{
        "accountId":{
          "shape":"string",
          "location":"uri",
          "locationName":"accountId"
        },
        "vaultName":{
          "shape":"string",
          "location":"uri",
          "locationName":"vaultName"
        }
      },
      "required":[
        "accountId",
        "vaultName"
      ]
    },
    "DescribeVaultOutput":{
      "type":"structure",
      "members":{
        "VaultARN":{"shape":"string"},
        "VaultName":{"shape":"string"},
        "CreationDate":{"shape":"string"},
        "LastInventoryDate":{"shape":"string"},
        "NumberOfArchives":{"shape":"long"},
        "SizeInBytes":{"shape":"long"}
      }
    },
    "GetJobOutputInput":{
      "type":"structure",
      "members":{
        "accountId":{
          "shape":"string",
          "location":"uri",
          "locationName":"accountId"
        },
        "vaultName":{
          "shape":"string",
          "location":"uri",
          "locationName":"vaultName"
        },
        "jobId":{
          "shape":"string",
          "location":"uri",
          "locationName":"jobId"
        },
        "range":{
          "shape":"string",
          "location":"header",
          "locationName":"Range"
        }
      },
      "required":[
        "accountId",
        "vaultName",
        "jobId"
      ]
    },
    "GetJobOutputOutput":{
      "type":"structure",
      "members":{
        "body":{"shape":"Stream"},
        "checksum":{
          "shape":"string",
          "location":"header",
          "locationName":"x-amz-sha256-tree-hash"
        },
        "status":{
          "shape":"httpstatus",
          "location":"statusCode"
        },
        "contentRange":{
          "shape":"string",
          "location":"header",
          "locationName":"Content-Range"
        },
        "acceptRanges":{
          "shape":"string",
          "location":"header",
          "locationName":"Accept-Ranges"
        },
        "contentType":{
          "shape":"string",
          "location":"header",
          "locationName":"Content-Type"
        },
        "archiveDescription":{
          "shape":"string",
          "location":"header",
          "locationName":"x-amz-archive-description"
        }
      },
      "payload":"body"
    },
    "GetVaultNotificationsInput":{
      "type":"structure",
      "members":{
        "accountId":{
          "shape":"string",
          "location":"uri",
          "locationName":"accountId"
        },
        "vaultName":{
          "shape":"string",
          "location":"uri",
          "locationName":"vaultName"
        }
      },
      "required":[
        "accountId",
        "vaultName"
      ]
    },
    "GetVaultNotificationsOutput":{
      "type":"structure",
      "members":{
        "vaultNotificationConfig":{"shape":"VaultNotificationConfig"}
      },
      "payload":"vaultNotificationConfig"
    },
    "GlacierJobDescription":{
      "type":"structure",
      "members":{
        "JobId":{"shape":"string"},
        "JobDescription":{"shape":"string"},
        "Action":{"shape":"ActionCode"},
        "ArchiveId":{"shape":"string"},
        "VaultARN":{"shape":"string"},
        "CreationDate":{"shape":"string"},
        "Completed":{"shape":"boolean"},
        "StatusCode":{"shape":"StatusCode"},
        "StatusMessage":{"shape":"string"},
        "ArchiveSizeInBytes":{"shape":"Size"},
        "InventorySizeInBytes":{"shape":"Size"},
        "SNSTopic":{"shape":"string"},
        "CompletionDate":{"shape":"string"},
        "SHA256TreeHash":{"shape":"string"},
        "ArchiveSHA256TreeHash":{"shape":"string"},
        "RetrievalByteRange":{"shape":"string"},
        "InventoryRetrievalParameters":{"shape":"InventoryRetrievalJobDescription"}
      }
    },
    "InitiateJobInput":{
      "type":"structure",
      "members":{
        "accountId":{
          "shape":"string",
          "location":"uri",
          "locationName":"accountId"
        },
        "vaultName":{
          "shape":"string",
          "location":"uri",
          "locationName":"vaultName"
        },
        "jobParameters":{"shape":"JobParameters"}
      },
      "required":[
        "accountId",
        "vaultName"
      ],
      "payload":"jobParameters"
    },
    "InitiateJobOutput":{
      "type":"structure",
      "members":{
        "location":{
          "shape":"string",
          "location":"header",
          "locationName":"Location"
        },
        "jobId":{
          "shape":"string",
          "location":"header",
          "locationName":"x-amz-job-id"
        }
      }
    },
    "InitiateMultipartUploadInput":{
      "type":"structure",
      "members":{
        "accountId":{
          "shape":"string",
          "location":"uri",
          "locationName":"accountId"
        },
        "vaultName":{
          "shape":"string",
          "location":"uri",
          "locationName":"vaultName"
        },
        "archiveDescription":{
          "shape":"string",
          "location":"header",
          "locationName":"x-amz-archive-description"
        },
        "partSize":{
          "shape":"string",
          "location":"header",
          "locationName":"x-amz-part-size"
        }
      },
      "required":[
        "accountId",
        "vaultName"
      ]
    },
    "InitiateMultipartUploadOutput":{
      "type":"structure",
      "members":{
        "location":{
          "shape":"string",
          "location":"header",
          "locationName":"Location"
        },
        "uploadId":{
          "shape":"string",
          "location":"header",
          "locationName":"x-amz-multipart-upload-id"
        }
      }
    },
    "InvalidParameterValueException":{
      "type":"structure",
      "members":{
        "type":{"shape":"string"},
        "code":{"shape":"string"},
        "message":{"shape":"string"}
      },
      "error":{"httpStatusCode":400},
      "exception":true
    },
    "InventoryRetrievalJobDescription":{
      "type":"structure",
      "members":{
        "Format":{"shape":"string"},
        "StartDate":{"shape":"DateTime"},
        "EndDate":{"shape":"DateTime"},
        "Limit":{"shape":"string"},
        "Marker":{"shape":"string"}
      }
    },
    "InventoryRetrievalJobInput":{
      "type":"structure",
      "members":{
        "StartDate":{"shape":"string"},
        "EndDate":{"shape":"string"},
        "Limit":{"shape":"string"},
        "Marker":{"shape":"string"}
      }
    },
    "JobList":{
      "type":"list",
      "member":{"shape":"GlacierJobDescription"}
    },
    "JobParameters":{
      "type":"structure",
      "members":{
        "Format":{"shape":"string"},
        "Type":{"shape":"string"},
        "ArchiveId":{"shape":"string"},
        "Description":{"shape":"string"},
        "SNSTopic":{"shape":"string"},
        "RetrievalByteRange":{"shape":"string"},
        "InventoryRetrievalParameters":{"shape":"InventoryRetrievalJobInput"}
      }
    },
    "LimitExceededException":{
      "type":"structure",
      "members":{
        "type":{"shape":"string"},
        "code":{"shape":"string"},
        "message":{"shape":"string"}
      },
      "error":{"httpStatusCode":400},
      "exception":true
    },
    "ListJobsInput":{
      "type":"structure",
      "members":{
        "accountId":{
          "shape":"string",
          "location":"uri",
          "locationName":"accountId"
        },
        "vaultName":{
          "shape":"string",
          "location":"uri",
          "locationName":"vaultName"
        },
        "limit":{
          "shape":"string",
          "location":"querystring",
          "locationName":"limit"
        },
        "marker":{
          "shape":"string",
          "location":"querystring",
          "locationName":"marker"
        },
        "statuscode":{
          "shape":"string",
          "location":"querystring",
          "locationName":"statuscode"
        },
        "completed":{
          "shape":"string",
          "location":"querystring",
          "locationName":"completed"
        }
      },
      "required":[
        "accountId",
        "vaultName"
      ]
    },
    "ListJobsOutput":{
      "type":"structure",
      "members":{
        "JobList":{"shape":"JobList"},
        "Marker":{"shape":"string"}
      }
    },
    "ListMultipartUploadsInput":{
      "type":"structure",
      "members":{
        "accountId":{
          "shape":"string",
          "location":"uri",
          "locationName":"accountId"
        },
        "vaultName":{
          "shape":"string",
          "location":"uri",
          "locationName":"vaultName"
        },
        "marker":{
          "shape":"string",
          "location":"querystring",
          "locationName":"marker"
        },
        "limit":{
          "shape":"string",
          "location":"querystring",
          "locationName":"limit"
        }
      },
      "required":[
        "accountId",
        "vaultName"
      ]
    },
    "ListMultipartUploadsOutput":{
      "type":"structure",
      "members":{
        "UploadsList":{"shape":"UploadsList"},
        "Marker":{"shape":"string"}
      }
    },
    "ListPartsInput":{
      "type":"structure",
      "members":{
        "accountId":{
          "shape":"string",
          "location":"uri",
          "locationName":"accountId"
        },
        "vaultName":{
          "shape":"string",
          "location":"uri",
          "locationName":"vaultName"
        },
        "uploadId":{
          "shape":"string",
          "location":"uri",
          "locationName":"uploadId"
        },
        "marker":{
          "shape":"string",
          "location":"querystring",
          "locationName":"marker"
        },
        "limit":{
          "shape":"string",
          "location":"querystring",
          "locationName":"limit"
        }
      },
      "required":[
        "accountId",
        "vaultName",
        "uploadId"
      ]
    },
    "ListPartsOutput":{
      "type":"structure",
      "members":{
        "MultipartUploadId":{"shape":"string"},
        "VaultARN":{"shape":"string"},
        "ArchiveDescription":{"shape":"string"},
        "PartSizeInBytes":{"shape":"long"},
        "CreationDate":{"shape":"string"},
        "Parts":{"shape":"PartList"},
        "Marker":{"shape":"string"}
      }
    },
    "ListVaultsInput":{
      "type":"structure",
      "members":{
        "accountId":{
          "shape":"string",
          "location":"uri",
          "locationName":"accountId"
        },
        "marker":{
          "shape":"string",
          "location":"querystring",
          "locationName":"marker"
        },
        "limit":{
          "shape":"string",
          "location":"querystring",
          "locationName":"limit"
        }
      },
      "required":["accountId"]
    },
    "ListVaultsOutput":{
      "type":"structure",
      "members":{
        "VaultList":{"shape":"VaultList"},
        "Marker":{"shape":"string"}
      }
    },
    "MissingParameterValueException":{
      "type":"structure",
      "members":{
        "type":{"shape":"string"},
        "code":{"shape":"string"},
        "message":{"shape":"string"}
      },
      "error":{"httpStatusCode":400},
      "exception":true
    },
    "NotificationEventList":{
      "type":"list",
      "member":{"shape":"string"}
    },
    "PartList":{
      "type":"list",
      "member":{"shape":"PartListElement"}
    },
    "PartListElement":{
      "type":"structure",
      "members":{
        "RangeInBytes":{"shape":"string"},
        "SHA256TreeHash":{"shape":"string"}
      }
    },
    "RequestTimeoutException":{
      "type":"structure",
      "members":{
        "type":{"shape":"string"},
        "code":{"shape":"string"},
        "message":{"shape":"string"}
      },
      "error":{"httpStatusCode":408},
      "exception":true
    },
    "ResourceNotFoundException":{
      "type":"structure",
      "members":{
        "type":{"shape":"string"},
        "code":{"shape":"string"},
        "message":{"shape":"string"}
      },
      "error":{"httpStatusCode":404},
      "exception":true
    },
    "ServiceUnavailableException":{
      "type":"structure",
      "members":{
        "type":{"shape":"string"},
        "code":{"shape":"string"},
        "message":{"shape":"string"}
      },
      "error":{"httpStatusCode":500},
      "exception":true
    },
    "SetVaultNotificationsInput":{
      "type":"structure",
      "members":{
        "accountId":{
          "shape":"string",
          "location":"uri",
          "locationName":"accountId"
        },
        "vaultName":{
          "shape":"string",
          "location":"uri",
          "locationName":"vaultName"
        },
        "vaultNotificationConfig":{"shape":"VaultNotificationConfig"}
      },
      "required":[
        "accountId",
        "vaultName"
      ],
      "payload":"vaultNotificationConfig"
    },
    "Size":{"type":"long"},
    "StatusCode":{
      "type":"string",
      "enum":[
        "InProgress",
        "Succeeded",
        "Failed"
      ]
    },
    "Stream":{
      "type":"blob",
      "streaming":true
    },
    "UploadArchiveInput":{
      "type":"structure",
      "members":{
        "vaultName":{
          "shape":"string",
          "location":"uri",
          "locationName":"vaultName"
        },
        "accountId":{
          "shape":"string",
          "location":"uri",
          "locationName":"accountId"
        },
        "archiveDescription":{
          "shape":"string",
          "location":"header",
          "locationName":"x-amz-archive-description"
        },
        "checksum":{
          "shape":"string",
          "location":"header",
          "locationName":"x-amz-sha256-tree-hash"
        },
        "body":{"shape":"Stream"}
      },
      "required":[
        "vaultName",
        "accountId"
      ],
      "payload":"body"
    },
    "UploadListElement":{
      "type":"structure",
      "members":{
        "MultipartUploadId":{"shape":"string"},
        "VaultARN":{"shape":"string"},
        "ArchiveDescription":{"shape":"string"},
        "PartSizeInBytes":{"shape":"long"},
        "CreationDate":{"shape":"string"}
      }
    },
    "UploadMultipartPartInput":{
      "type":"structure",
      "members":{
        "accountId":{
          "shape":"string",
          "location":"uri",
          "locationName":"accountId"
        },
        "vaultName":{
          "shape":"string",
          "location":"uri",
          "locationName":"vaultName"
        },
        "uploadId":{
          "shape":"string",
          "location":"uri",
          "locationName":"uploadId"
        },
        "checksum":{
          "shape":"string",
          "location":"header",
          "locationName":"x-amz-sha256-tree-hash"
        },
        "range":{
          "shape":"string",
          "location":"header",
          "locationName":"Content-Range"
        },
        "body":{"shape":"Stream"}
      },
      "required":[
        "accountId",
        "vaultName",
        "uploadId"
      ],
      "payload":"body"
    },
    "UploadMultipartPartOutput":{
      "type":"structure",
      "members":{
        "checksum":{
          "shape":"string",
          "location":"header",
          "locationName":"x-amz-sha256-tree-hash"
        }
      }
    },
    "UploadsList":{
      "type":"list",
      "member":{"shape":"UploadListElement"}
    },
    "VaultList":{
      "type":"list",
      "member":{"shape":"DescribeVaultOutput"}
    },
    "VaultNotificationConfig":{
      "type":"structure",
      "members":{
        "SNSTopic":{"shape":"string"},
        "Events":{"shape":"NotificationEventList"}
      }
    },
    "boolean":{"type":"boolean"},
    "httpstatus":{"type":"integer"},
    "long":{"type":"long"},
    "string":{"type":"string"}
  }
}
,
"IAM":
{
  "metadata":{
    "apiVersion":"2010-05-08",
    "endpointPrefix":"iam",
    "globalEndpoint":"iam.amazonaws.com",
    "serviceAbbreviation":"IAM",
    "serviceFullName":"AWS Identity and Access Management",
    "signatureVersion":"v4",
    "xmlNamespace":"https://iam.amazonaws.com/doc/2010-05-08/",
    "protocol":"query"
  },
  "operations":{
    "AddClientIDToOpenIDConnectProvider":{
      "name":"AddClientIDToOpenIDConnectProvider",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"AddClientIDToOpenIDConnectProviderRequest"},
      "errors":[
        {
          "shape":"InvalidInputException",
          "error":{
            "code":"InvalidInput",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"NoSuchEntityException",
          "error":{
            "code":"NoSuchEntity",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"LimitExceededException",
          "error":{
            "code":"LimitExceeded",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "AddRoleToInstanceProfile":{
      "name":"AddRoleToInstanceProfile",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"AddRoleToInstanceProfileRequest"},
      "errors":[
        {
          "shape":"NoSuchEntityException",
          "error":{
            "code":"NoSuchEntity",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"EntityAlreadyExistsException",
          "error":{
            "code":"EntityAlreadyExists",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"LimitExceededException",
          "error":{
            "code":"LimitExceeded",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "AddUserToGroup":{
      "name":"AddUserToGroup",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"AddUserToGroupRequest"},
      "errors":[
        {
          "shape":"NoSuchEntityException",
          "error":{
            "code":"NoSuchEntity",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"LimitExceededException",
          "error":{
            "code":"LimitExceeded",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "ChangePassword":{
      "name":"ChangePassword",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ChangePasswordRequest"},
      "errors":[
        {
          "shape":"NoSuchEntityException",
          "error":{
            "code":"NoSuchEntity",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidUserTypeException",
          "error":{
            "code":"InvalidUserType",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"LimitExceededException",
          "error":{
            "code":"LimitExceeded",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"EntityTemporarilyUnmodifiableException",
          "error":{
            "code":"EntityTemporarilyUnmodifiable",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"PasswordPolicyViolationException",
          "error":{
            "code":"PasswordPolicyViolation",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "CreateAccessKey":{
      "name":"CreateAccessKey",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateAccessKeyRequest"},
      "output":{
        "shape":"CreateAccessKeyResponse",
        "resultWrapper":"CreateAccessKeyResult"
      },
      "errors":[
        {
          "shape":"NoSuchEntityException",
          "error":{
            "code":"NoSuchEntity",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"LimitExceededException",
          "error":{
            "code":"LimitExceeded",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "CreateAccountAlias":{
      "name":"CreateAccountAlias",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateAccountAliasRequest"},
      "errors":[
        {
          "shape":"EntityAlreadyExistsException",
          "error":{
            "code":"EntityAlreadyExists",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"LimitExceededException",
          "error":{
            "code":"LimitExceeded",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "CreateGroup":{
      "name":"CreateGroup",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateGroupRequest"},
      "output":{
        "shape":"CreateGroupResponse",
        "resultWrapper":"CreateGroupResult"
      },
      "errors":[
        {
          "shape":"LimitExceededException",
          "error":{
            "code":"LimitExceeded",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"EntityAlreadyExistsException",
          "error":{
            "code":"EntityAlreadyExists",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"NoSuchEntityException",
          "error":{
            "code":"NoSuchEntity",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "CreateInstanceProfile":{
      "name":"CreateInstanceProfile",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateInstanceProfileRequest"},
      "output":{
        "shape":"CreateInstanceProfileResponse",
        "resultWrapper":"CreateInstanceProfileResult"
      },
      "errors":[
        {
          "shape":"EntityAlreadyExistsException",
          "error":{
            "code":"EntityAlreadyExists",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"LimitExceededException",
          "error":{
            "code":"LimitExceeded",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "CreateLoginProfile":{
      "name":"CreateLoginProfile",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateLoginProfileRequest"},
      "output":{
        "shape":"CreateLoginProfileResponse",
        "resultWrapper":"CreateLoginProfileResult"
      },
      "errors":[
        {
          "shape":"EntityAlreadyExistsException",
          "error":{
            "code":"EntityAlreadyExists",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"NoSuchEntityException",
          "error":{
            "code":"NoSuchEntity",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"PasswordPolicyViolationException",
          "error":{
            "code":"PasswordPolicyViolation",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"LimitExceededException",
          "error":{
            "code":"LimitExceeded",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "CreateOpenIDConnectProvider":{
      "name":"CreateOpenIDConnectProvider",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateOpenIDConnectProviderRequest"},
      "output":{
        "shape":"CreateOpenIDConnectProviderResponse",
        "resultWrapper":"CreateOpenIDConnectProviderResult"
      },
      "errors":[
        {
          "shape":"InvalidInputException",
          "error":{
            "code":"InvalidInput",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"EntityAlreadyExistsException",
          "error":{
            "code":"EntityAlreadyExists",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"LimitExceededException",
          "error":{
            "code":"LimitExceeded",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "CreateRole":{
      "name":"CreateRole",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateRoleRequest"},
      "output":{
        "shape":"CreateRoleResponse",
        "resultWrapper":"CreateRoleResult"
      },
      "errors":[
        {
          "shape":"LimitExceededException",
          "error":{
            "code":"LimitExceeded",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"EntityAlreadyExistsException",
          "error":{
            "code":"EntityAlreadyExists",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"MalformedPolicyDocumentException",
          "error":{
            "code":"MalformedPolicyDocument",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "CreateSAMLProvider":{
      "name":"CreateSAMLProvider",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateSAMLProviderRequest"},
      "output":{
        "shape":"CreateSAMLProviderResponse",
        "resultWrapper":"CreateSAMLProviderResult"
      },
      "errors":[
        {
          "shape":"InvalidInputException",
          "error":{
            "code":"InvalidInput",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"EntityAlreadyExistsException",
          "error":{
            "code":"EntityAlreadyExists",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"LimitExceededException",
          "error":{
            "code":"LimitExceeded",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "CreateUser":{
      "name":"CreateUser",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateUserRequest"},
      "output":{
        "shape":"CreateUserResponse",
        "resultWrapper":"CreateUserResult"
      },
      "errors":[
        {
          "shape":"LimitExceededException",
          "error":{
            "code":"LimitExceeded",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"EntityAlreadyExistsException",
          "error":{
            "code":"EntityAlreadyExists",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"NoSuchEntityException",
          "error":{
            "code":"NoSuchEntity",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "CreateVirtualMFADevice":{
      "name":"CreateVirtualMFADevice",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateVirtualMFADeviceRequest"},
      "output":{
        "shape":"CreateVirtualMFADeviceResponse",
        "resultWrapper":"CreateVirtualMFADeviceResult"
      },
      "errors":[
        {
          "shape":"LimitExceededException",
          "error":{
            "code":"LimitExceeded",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"EntityAlreadyExistsException",
          "error":{
            "code":"EntityAlreadyExists",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DeactivateMFADevice":{
      "name":"DeactivateMFADevice",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeactivateMFADeviceRequest"},
      "errors":[
        {
          "shape":"EntityTemporarilyUnmodifiableException",
          "error":{
            "code":"EntityTemporarilyUnmodifiable",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"NoSuchEntityException",
          "error":{
            "code":"NoSuchEntity",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"LimitExceededException",
          "error":{
            "code":"LimitExceeded",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DeleteAccessKey":{
      "name":"DeleteAccessKey",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteAccessKeyRequest"},
      "errors":[
        {
          "shape":"NoSuchEntityException",
          "error":{
            "code":"NoSuchEntity",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"LimitExceededException",
          "error":{
            "code":"LimitExceeded",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DeleteAccountAlias":{
      "name":"DeleteAccountAlias",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteAccountAliasRequest"},
      "errors":[
        {
          "shape":"NoSuchEntityException",
          "error":{
            "code":"NoSuchEntity",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"LimitExceededException",
          "error":{
            "code":"LimitExceeded",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DeleteAccountPasswordPolicy":{
      "name":"DeleteAccountPasswordPolicy",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "errors":[
        {
          "shape":"NoSuchEntityException",
          "error":{
            "code":"NoSuchEntity",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"LimitExceededException",
          "error":{
            "code":"LimitExceeded",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DeleteGroup":{
      "name":"DeleteGroup",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteGroupRequest"},
      "errors":[
        {
          "shape":"NoSuchEntityException",
          "error":{
            "code":"NoSuchEntity",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"DeleteConflictException",
          "error":{
            "code":"DeleteConflict",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"LimitExceededException",
          "error":{
            "code":"LimitExceeded",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DeleteGroupPolicy":{
      "name":"DeleteGroupPolicy",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteGroupPolicyRequest"},
      "errors":[
        {
          "shape":"NoSuchEntityException",
          "error":{
            "code":"NoSuchEntity",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"LimitExceededException",
          "error":{
            "code":"LimitExceeded",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DeleteInstanceProfile":{
      "name":"DeleteInstanceProfile",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteInstanceProfileRequest"},
      "errors":[
        {
          "shape":"NoSuchEntityException",
          "error":{
            "code":"NoSuchEntity",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"DeleteConflictException",
          "error":{
            "code":"DeleteConflict",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"LimitExceededException",
          "error":{
            "code":"LimitExceeded",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DeleteLoginProfile":{
      "name":"DeleteLoginProfile",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteLoginProfileRequest"},
      "errors":[
        {
          "shape":"EntityTemporarilyUnmodifiableException",
          "error":{
            "code":"EntityTemporarilyUnmodifiable",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"NoSuchEntityException",
          "error":{
            "code":"NoSuchEntity",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"LimitExceededException",
          "error":{
            "code":"LimitExceeded",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DeleteOpenIDConnectProvider":{
      "name":"DeleteOpenIDConnectProvider",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteOpenIDConnectProviderRequest"},
      "errors":[
        {
          "shape":"InvalidInputException",
          "error":{
            "code":"InvalidInput",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"NoSuchEntityException",
          "error":{
            "code":"NoSuchEntity",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DeleteRole":{
      "name":"DeleteRole",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteRoleRequest"},
      "errors":[
        {
          "shape":"NoSuchEntityException",
          "error":{
            "code":"NoSuchEntity",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"DeleteConflictException",
          "error":{
            "code":"DeleteConflict",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"LimitExceededException",
          "error":{
            "code":"LimitExceeded",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DeleteRolePolicy":{
      "name":"DeleteRolePolicy",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteRolePolicyRequest"},
      "errors":[
        {
          "shape":"NoSuchEntityException",
          "error":{
            "code":"NoSuchEntity",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"LimitExceededException",
          "error":{
            "code":"LimitExceeded",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DeleteSAMLProvider":{
      "name":"DeleteSAMLProvider",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteSAMLProviderRequest"},
      "errors":[
        {
          "shape":"InvalidInputException",
          "error":{
            "code":"InvalidInput",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"LimitExceededException",
          "error":{
            "code":"LimitExceeded",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"NoSuchEntityException",
          "error":{
            "code":"NoSuchEntity",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DeleteServerCertificate":{
      "name":"DeleteServerCertificate",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteServerCertificateRequest"},
      "errors":[
        {
          "shape":"NoSuchEntityException",
          "error":{
            "code":"NoSuchEntity",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"DeleteConflictException",
          "error":{
            "code":"DeleteConflict",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"LimitExceededException",
          "error":{
            "code":"LimitExceeded",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DeleteSigningCertificate":{
      "name":"DeleteSigningCertificate",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteSigningCertificateRequest"},
      "errors":[
        {
          "shape":"NoSuchEntityException",
          "error":{
            "code":"NoSuchEntity",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"LimitExceededException",
          "error":{
            "code":"LimitExceeded",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DeleteUser":{
      "name":"DeleteUser",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteUserRequest"},
      "errors":[
        {
          "shape":"LimitExceededException",
          "error":{
            "code":"LimitExceeded",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"NoSuchEntityException",
          "error":{
            "code":"NoSuchEntity",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"DeleteConflictException",
          "error":{
            "code":"DeleteConflict",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DeleteUserPolicy":{
      "name":"DeleteUserPolicy",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteUserPolicyRequest"},
      "errors":[
        {
          "shape":"NoSuchEntityException",
          "error":{
            "code":"NoSuchEntity",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"LimitExceededException",
          "error":{
            "code":"LimitExceeded",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DeleteVirtualMFADevice":{
      "name":"DeleteVirtualMFADevice",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteVirtualMFADeviceRequest"},
      "errors":[
        {
          "shape":"NoSuchEntityException",
          "error":{
            "code":"NoSuchEntity",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"DeleteConflictException",
          "error":{
            "code":"DeleteConflict",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"LimitExceededException",
          "error":{
            "code":"LimitExceeded",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "EnableMFADevice":{
      "name":"EnableMFADevice",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"EnableMFADeviceRequest"},
      "errors":[
        {
          "shape":"EntityAlreadyExistsException",
          "error":{
            "code":"EntityAlreadyExists",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"EntityTemporarilyUnmodifiableException",
          "error":{
            "code":"EntityTemporarilyUnmodifiable",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidAuthenticationCodeException",
          "error":{
            "code":"InvalidAuthenticationCode",
            "httpStatusCode":403,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"LimitExceededException",
          "error":{
            "code":"LimitExceeded",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"NoSuchEntityException",
          "error":{
            "code":"NoSuchEntity",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "GenerateCredentialReport":{
      "name":"GenerateCredentialReport",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "output":{
        "shape":"GenerateCredentialReportResponse",
        "resultWrapper":"GenerateCredentialReportResult"
      },
      "errors":[
        {
          "shape":"LimitExceededException",
          "error":{
            "code":"LimitExceeded",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "GetAccountAuthorizationDetails":{
      "name":"GetAccountAuthorizationDetails",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"GetAccountAuthorizationDetailsRequest"},
      "output":{
        "shape":"GetAccountAuthorizationDetailsResponse",
        "resultWrapper":"GetAccountAuthorizationDetailsResult"
      }
    },
    "GetAccountPasswordPolicy":{
      "name":"GetAccountPasswordPolicy",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "output":{
        "shape":"GetAccountPasswordPolicyResponse",
        "resultWrapper":"GetAccountPasswordPolicyResult"
      },
      "errors":[
        {
          "shape":"NoSuchEntityException",
          "error":{
            "code":"NoSuchEntity",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "GetAccountSummary":{
      "name":"GetAccountSummary",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "output":{
        "shape":"GetAccountSummaryResponse",
        "resultWrapper":"GetAccountSummaryResult"
      }
    },
    "GetCredentialReport":{
      "name":"GetCredentialReport",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "output":{
        "shape":"GetCredentialReportResponse",
        "resultWrapper":"GetCredentialReportResult"
      },
      "errors":[
        {
          "shape":"CredentialReportNotPresentException",
          "error":{
            "code":"ReportNotPresent",
            "httpStatusCode":410,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"CredentialReportExpiredException",
          "error":{
            "code":"ReportExpired",
            "httpStatusCode":410,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"CredentialReportNotReadyException",
          "error":{
            "code":"ReportInProgress",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "GetGroup":{
      "name":"GetGroup",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"GetGroupRequest"},
      "output":{
        "shape":"GetGroupResponse",
        "resultWrapper":"GetGroupResult"
      },
      "errors":[
        {
          "shape":"NoSuchEntityException",
          "error":{
            "code":"NoSuchEntity",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "GetGroupPolicy":{
      "name":"GetGroupPolicy",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"GetGroupPolicyRequest"},
      "output":{
        "shape":"GetGroupPolicyResponse",
        "resultWrapper":"GetGroupPolicyResult"
      },
      "errors":[
        {
          "shape":"NoSuchEntityException",
          "error":{
            "code":"NoSuchEntity",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "GetInstanceProfile":{
      "name":"GetInstanceProfile",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"GetInstanceProfileRequest"},
      "output":{
        "shape":"GetInstanceProfileResponse",
        "resultWrapper":"GetInstanceProfileResult"
      },
      "errors":[
        {
          "shape":"NoSuchEntityException",
          "error":{
            "code":"NoSuchEntity",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "GetLoginProfile":{
      "name":"GetLoginProfile",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"GetLoginProfileRequest"},
      "output":{
        "shape":"GetLoginProfileResponse",
        "resultWrapper":"GetLoginProfileResult"
      },
      "errors":[
        {
          "shape":"NoSuchEntityException",
          "error":{
            "code":"NoSuchEntity",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "GetOpenIDConnectProvider":{
      "name":"GetOpenIDConnectProvider",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"GetOpenIDConnectProviderRequest"},
      "output":{
        "shape":"GetOpenIDConnectProviderResponse",
        "resultWrapper":"GetOpenIDConnectProviderResult"
      },
      "errors":[
        {
          "shape":"InvalidInputException",
          "error":{
            "code":"InvalidInput",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"NoSuchEntityException",
          "error":{
            "code":"NoSuchEntity",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "GetRole":{
      "name":"GetRole",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"GetRoleRequest"},
      "output":{
        "shape":"GetRoleResponse",
        "resultWrapper":"GetRoleResult"
      },
      "errors":[
        {
          "shape":"NoSuchEntityException",
          "error":{
            "code":"NoSuchEntity",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "GetRolePolicy":{
      "name":"GetRolePolicy",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"GetRolePolicyRequest"},
      "output":{
        "shape":"GetRolePolicyResponse",
        "resultWrapper":"GetRolePolicyResult"
      },
      "errors":[
        {
          "shape":"NoSuchEntityException",
          "error":{
            "code":"NoSuchEntity",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "GetSAMLProvider":{
      "name":"GetSAMLProvider",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"GetSAMLProviderRequest"},
      "output":{
        "shape":"GetSAMLProviderResponse",
        "resultWrapper":"GetSAMLProviderResult"
      },
      "errors":[
        {
          "shape":"NoSuchEntityException",
          "error":{
            "code":"NoSuchEntity",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidInputException",
          "error":{
            "code":"InvalidInput",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "GetServerCertificate":{
      "name":"GetServerCertificate",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"GetServerCertificateRequest"},
      "output":{
        "shape":"GetServerCertificateResponse",
        "resultWrapper":"GetServerCertificateResult"
      },
      "errors":[
        {
          "shape":"NoSuchEntityException",
          "error":{
            "code":"NoSuchEntity",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "GetUser":{
      "name":"GetUser",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"GetUserRequest"},
      "output":{
        "shape":"GetUserResponse",
        "resultWrapper":"GetUserResult"
      },
      "errors":[
        {
          "shape":"NoSuchEntityException",
          "error":{
            "code":"NoSuchEntity",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "GetUserPolicy":{
      "name":"GetUserPolicy",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"GetUserPolicyRequest"},
      "output":{
        "shape":"GetUserPolicyResponse",
        "resultWrapper":"GetUserPolicyResult"
      },
      "errors":[
        {
          "shape":"NoSuchEntityException",
          "error":{
            "code":"NoSuchEntity",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "ListAccessKeys":{
      "name":"ListAccessKeys",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ListAccessKeysRequest"},
      "output":{
        "shape":"ListAccessKeysResponse",
        "resultWrapper":"ListAccessKeysResult"
      },
      "errors":[
        {
          "shape":"NoSuchEntityException",
          "error":{
            "code":"NoSuchEntity",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "ListAccountAliases":{
      "name":"ListAccountAliases",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ListAccountAliasesRequest"},
      "output":{
        "shape":"ListAccountAliasesResponse",
        "resultWrapper":"ListAccountAliasesResult"
      }
    },
    "ListGroupPolicies":{
      "name":"ListGroupPolicies",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ListGroupPoliciesRequest"},
      "output":{
        "shape":"ListGroupPoliciesResponse",
        "resultWrapper":"ListGroupPoliciesResult"
      },
      "errors":[
        {
          "shape":"NoSuchEntityException",
          "error":{
            "code":"NoSuchEntity",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "ListGroups":{
      "name":"ListGroups",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ListGroupsRequest"},
      "output":{
        "shape":"ListGroupsResponse",
        "resultWrapper":"ListGroupsResult"
      }
    },
    "ListGroupsForUser":{
      "name":"ListGroupsForUser",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ListGroupsForUserRequest"},
      "output":{
        "shape":"ListGroupsForUserResponse",
        "resultWrapper":"ListGroupsForUserResult"
      },
      "errors":[
        {
          "shape":"NoSuchEntityException",
          "error":{
            "code":"NoSuchEntity",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "ListInstanceProfiles":{
      "name":"ListInstanceProfiles",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ListInstanceProfilesRequest"},
      "output":{
        "shape":"ListInstanceProfilesResponse",
        "resultWrapper":"ListInstanceProfilesResult"
      }
    },
    "ListInstanceProfilesForRole":{
      "name":"ListInstanceProfilesForRole",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ListInstanceProfilesForRoleRequest"},
      "output":{
        "shape":"ListInstanceProfilesForRoleResponse",
        "resultWrapper":"ListInstanceProfilesForRoleResult"
      },
      "errors":[
        {
          "shape":"NoSuchEntityException",
          "error":{
            "code":"NoSuchEntity",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "ListMFADevices":{
      "name":"ListMFADevices",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ListMFADevicesRequest"},
      "output":{
        "shape":"ListMFADevicesResponse",
        "resultWrapper":"ListMFADevicesResult"
      },
      "errors":[
        {
          "shape":"NoSuchEntityException",
          "error":{
            "code":"NoSuchEntity",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "ListOpenIDConnectProviders":{
      "name":"ListOpenIDConnectProviders",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ListOpenIDConnectProvidersRequest"},
      "output":{
        "shape":"ListOpenIDConnectProvidersResponse",
        "resultWrapper":"ListOpenIDConnectProvidersResult"
      }
    },
    "ListRolePolicies":{
      "name":"ListRolePolicies",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ListRolePoliciesRequest"},
      "output":{
        "shape":"ListRolePoliciesResponse",
        "resultWrapper":"ListRolePoliciesResult"
      },
      "errors":[
        {
          "shape":"NoSuchEntityException",
          "error":{
            "code":"NoSuchEntity",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "ListRoles":{
      "name":"ListRoles",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ListRolesRequest"},
      "output":{
        "shape":"ListRolesResponse",
        "resultWrapper":"ListRolesResult"
      }
    },
    "ListSAMLProviders":{
      "name":"ListSAMLProviders",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ListSAMLProvidersRequest"},
      "output":{
        "shape":"ListSAMLProvidersResponse",
        "resultWrapper":"ListSAMLProvidersResult"
      }
    },
    "ListServerCertificates":{
      "name":"ListServerCertificates",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ListServerCertificatesRequest"},
      "output":{
        "shape":"ListServerCertificatesResponse",
        "resultWrapper":"ListServerCertificatesResult"
      }
    },
    "ListSigningCertificates":{
      "name":"ListSigningCertificates",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ListSigningCertificatesRequest"},
      "output":{
        "shape":"ListSigningCertificatesResponse",
        "resultWrapper":"ListSigningCertificatesResult"
      },
      "errors":[
        {
          "shape":"NoSuchEntityException",
          "error":{
            "code":"NoSuchEntity",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "ListUserPolicies":{
      "name":"ListUserPolicies",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ListUserPoliciesRequest"},
      "output":{
        "shape":"ListUserPoliciesResponse",
        "resultWrapper":"ListUserPoliciesResult"
      },
      "errors":[
        {
          "shape":"NoSuchEntityException",
          "error":{
            "code":"NoSuchEntity",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "ListUsers":{
      "name":"ListUsers",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ListUsersRequest"},
      "output":{
        "shape":"ListUsersResponse",
        "resultWrapper":"ListUsersResult"
      }
    },
    "ListVirtualMFADevices":{
      "name":"ListVirtualMFADevices",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ListVirtualMFADevicesRequest"},
      "output":{
        "shape":"ListVirtualMFADevicesResponse",
        "resultWrapper":"ListVirtualMFADevicesResult"
      }
    },
    "PutGroupPolicy":{
      "name":"PutGroupPolicy",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"PutGroupPolicyRequest"},
      "errors":[
        {
          "shape":"LimitExceededException",
          "error":{
            "code":"LimitExceeded",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"MalformedPolicyDocumentException",
          "error":{
            "code":"MalformedPolicyDocument",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"NoSuchEntityException",
          "error":{
            "code":"NoSuchEntity",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "PutRolePolicy":{
      "name":"PutRolePolicy",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"PutRolePolicyRequest"},
      "errors":[
        {
          "shape":"LimitExceededException",
          "error":{
            "code":"LimitExceeded",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"MalformedPolicyDocumentException",
          "error":{
            "code":"MalformedPolicyDocument",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"NoSuchEntityException",
          "error":{
            "code":"NoSuchEntity",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "PutUserPolicy":{
      "name":"PutUserPolicy",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"PutUserPolicyRequest"},
      "errors":[
        {
          "shape":"LimitExceededException",
          "error":{
            "code":"LimitExceeded",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"MalformedPolicyDocumentException",
          "error":{
            "code":"MalformedPolicyDocument",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"NoSuchEntityException",
          "error":{
            "code":"NoSuchEntity",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "RemoveClientIDFromOpenIDConnectProvider":{
      "name":"RemoveClientIDFromOpenIDConnectProvider",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"RemoveClientIDFromOpenIDConnectProviderRequest"},
      "errors":[
        {
          "shape":"InvalidInputException",
          "error":{
            "code":"InvalidInput",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"NoSuchEntityException",
          "error":{
            "code":"NoSuchEntity",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "RemoveRoleFromInstanceProfile":{
      "name":"RemoveRoleFromInstanceProfile",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"RemoveRoleFromInstanceProfileRequest"},
      "errors":[
        {
          "shape":"NoSuchEntityException",
          "error":{
            "code":"NoSuchEntity",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"LimitExceededException",
          "error":{
            "code":"LimitExceeded",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "RemoveUserFromGroup":{
      "name":"RemoveUserFromGroup",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"RemoveUserFromGroupRequest"},
      "errors":[
        {
          "shape":"NoSuchEntityException",
          "error":{
            "code":"NoSuchEntity",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"LimitExceededException",
          "error":{
            "code":"LimitExceeded",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "ResyncMFADevice":{
      "name":"ResyncMFADevice",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ResyncMFADeviceRequest"},
      "errors":[
        {
          "shape":"InvalidAuthenticationCodeException",
          "error":{
            "code":"InvalidAuthenticationCode",
            "httpStatusCode":403,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"NoSuchEntityException",
          "error":{
            "code":"NoSuchEntity",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"LimitExceededException",
          "error":{
            "code":"LimitExceeded",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "UpdateAccessKey":{
      "name":"UpdateAccessKey",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"UpdateAccessKeyRequest"},
      "errors":[
        {
          "shape":"NoSuchEntityException",
          "error":{
            "code":"NoSuchEntity",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"LimitExceededException",
          "error":{
            "code":"LimitExceeded",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "UpdateAccountPasswordPolicy":{
      "name":"UpdateAccountPasswordPolicy",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"UpdateAccountPasswordPolicyRequest"},
      "errors":[
        {
          "shape":"NoSuchEntityException",
          "error":{
            "code":"NoSuchEntity",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"MalformedPolicyDocumentException",
          "error":{
            "code":"MalformedPolicyDocument",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"LimitExceededException",
          "error":{
            "code":"LimitExceeded",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "UpdateAssumeRolePolicy":{
      "name":"UpdateAssumeRolePolicy",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"UpdateAssumeRolePolicyRequest"},
      "errors":[
        {
          "shape":"NoSuchEntityException",
          "error":{
            "code":"NoSuchEntity",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"MalformedPolicyDocumentException",
          "error":{
            "code":"MalformedPolicyDocument",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"LimitExceededException",
          "error":{
            "code":"LimitExceeded",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "UpdateGroup":{
      "name":"UpdateGroup",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"UpdateGroupRequest"},
      "errors":[
        {
          "shape":"NoSuchEntityException",
          "error":{
            "code":"NoSuchEntity",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"EntityAlreadyExistsException",
          "error":{
            "code":"EntityAlreadyExists",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"LimitExceededException",
          "error":{
            "code":"LimitExceeded",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "UpdateLoginProfile":{
      "name":"UpdateLoginProfile",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"UpdateLoginProfileRequest"},
      "errors":[
        {
          "shape":"EntityTemporarilyUnmodifiableException",
          "error":{
            "code":"EntityTemporarilyUnmodifiable",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"NoSuchEntityException",
          "error":{
            "code":"NoSuchEntity",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"PasswordPolicyViolationException",
          "error":{
            "code":"PasswordPolicyViolation",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"LimitExceededException",
          "error":{
            "code":"LimitExceeded",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "UpdateOpenIDConnectProviderThumbprint":{
      "name":"UpdateOpenIDConnectProviderThumbprint",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"UpdateOpenIDConnectProviderThumbprintRequest"},
      "errors":[
        {
          "shape":"InvalidInputException",
          "error":{
            "code":"InvalidInput",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"NoSuchEntityException",
          "error":{
            "code":"NoSuchEntity",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "UpdateSAMLProvider":{
      "name":"UpdateSAMLProvider",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"UpdateSAMLProviderRequest"},
      "output":{
        "shape":"UpdateSAMLProviderResponse",
        "resultWrapper":"UpdateSAMLProviderResult"
      },
      "errors":[
        {
          "shape":"NoSuchEntityException",
          "error":{
            "code":"NoSuchEntity",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidInputException",
          "error":{
            "code":"InvalidInput",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"LimitExceededException",
          "error":{
            "code":"LimitExceeded",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "UpdateServerCertificate":{
      "name":"UpdateServerCertificate",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"UpdateServerCertificateRequest"},
      "errors":[
        {
          "shape":"NoSuchEntityException",
          "error":{
            "code":"NoSuchEntity",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"EntityAlreadyExistsException",
          "error":{
            "code":"EntityAlreadyExists",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"LimitExceededException",
          "error":{
            "code":"LimitExceeded",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "UpdateSigningCertificate":{
      "name":"UpdateSigningCertificate",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"UpdateSigningCertificateRequest"},
      "errors":[
        {
          "shape":"NoSuchEntityException",
          "error":{
            "code":"NoSuchEntity",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"LimitExceededException",
          "error":{
            "code":"LimitExceeded",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "UpdateUser":{
      "name":"UpdateUser",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"UpdateUserRequest"},
      "errors":[
        {
          "shape":"NoSuchEntityException",
          "error":{
            "code":"NoSuchEntity",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"LimitExceededException",
          "error":{
            "code":"LimitExceeded",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"EntityAlreadyExistsException",
          "error":{
            "code":"EntityAlreadyExists",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"EntityTemporarilyUnmodifiableException",
          "error":{
            "code":"EntityTemporarilyUnmodifiable",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "UploadServerCertificate":{
      "name":"UploadServerCertificate",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"UploadServerCertificateRequest"},
      "output":{
        "shape":"UploadServerCertificateResponse",
        "resultWrapper":"UploadServerCertificateResult"
      },
      "errors":[
        {
          "shape":"LimitExceededException",
          "error":{
            "code":"LimitExceeded",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"EntityAlreadyExistsException",
          "error":{
            "code":"EntityAlreadyExists",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"MalformedCertificateException",
          "error":{
            "code":"MalformedCertificate",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"KeyPairMismatchException",
          "error":{
            "code":"KeyPairMismatch",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "UploadSigningCertificate":{
      "name":"UploadSigningCertificate",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"UploadSigningCertificateRequest"},
      "output":{
        "shape":"UploadSigningCertificateResponse",
        "resultWrapper":"UploadSigningCertificateResult"
      },
      "errors":[
        {
          "shape":"LimitExceededException",
          "error":{
            "code":"LimitExceeded",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"EntityAlreadyExistsException",
          "error":{
            "code":"EntityAlreadyExists",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"MalformedCertificateException",
          "error":{
            "code":"MalformedCertificate",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidCertificateException",
          "error":{
            "code":"InvalidCertificate",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"DuplicateCertificateException",
          "error":{
            "code":"DuplicateCertificate",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"NoSuchEntityException",
          "error":{
            "code":"NoSuchEntity",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        }
      ]
    }
  },
  "shapes":{
    "AccessKey":{
      "type":"structure",
      "required":[
        "UserName",
        "AccessKeyId",
        "Status",
        "SecretAccessKey"
      ],
      "members":{
        "UserName":{"shape":"userNameType"},
        "AccessKeyId":{"shape":"accessKeyIdType"},
        "Status":{"shape":"statusType"},
        "SecretAccessKey":{"shape":"accessKeySecretType"},
        "CreateDate":{"shape":"dateType"}
      }
    },
    "AccessKeyMetadata":{
      "type":"structure",
      "members":{
        "UserName":{"shape":"userNameType"},
        "AccessKeyId":{"shape":"accessKeyIdType"},
        "Status":{"shape":"statusType"},
        "CreateDate":{"shape":"dateType"}
      }
    },
    "AddClientIDToOpenIDConnectProviderRequest":{
      "type":"structure",
      "required":[
        "OpenIDConnectProviderArn",
        "ClientID"
      ],
      "members":{
        "OpenIDConnectProviderArn":{"shape":"arnType"},
        "ClientID":{"shape":"clientIDType"}
      }
    },
    "AddRoleToInstanceProfileRequest":{
      "type":"structure",
      "required":[
        "InstanceProfileName",
        "RoleName"
      ],
      "members":{
        "InstanceProfileName":{"shape":"instanceProfileNameType"},
        "RoleName":{"shape":"roleNameType"}
      }
    },
    "AddUserToGroupRequest":{
      "type":"structure",
      "required":[
        "GroupName",
        "UserName"
      ],
      "members":{
        "GroupName":{"shape":"groupNameType"},
        "UserName":{"shape":"existingUserNameType"}
      }
    },
    "BootstrapDatum":{
      "type":"blob",
      "sensitive":true
    },
    "ChangePasswordRequest":{
      "type":"structure",
      "required":[
        "OldPassword",
        "NewPassword"
      ],
      "members":{
        "OldPassword":{"shape":"passwordType"},
        "NewPassword":{"shape":"passwordType"}
      }
    },
    "CreateAccessKeyRequest":{
      "type":"structure",
      "members":{
        "UserName":{"shape":"existingUserNameType"}
      }
    },
    "CreateAccessKeyResponse":{
      "type":"structure",
      "required":["AccessKey"],
      "members":{
        "AccessKey":{"shape":"AccessKey"}
      }
    },
    "CreateAccountAliasRequest":{
      "type":"structure",
      "required":["AccountAlias"],
      "members":{
        "AccountAlias":{"shape":"accountAliasType"}
      }
    },
    "CreateGroupRequest":{
      "type":"structure",
      "required":["GroupName"],
      "members":{
        "Path":{"shape":"pathType"},
        "GroupName":{"shape":"groupNameType"}
      }
    },
    "CreateGroupResponse":{
      "type":"structure",
      "required":["Group"],
      "members":{
        "Group":{"shape":"Group"}
      }
    },
    "CreateInstanceProfileRequest":{
      "type":"structure",
      "required":["InstanceProfileName"],
      "members":{
        "InstanceProfileName":{"shape":"instanceProfileNameType"},
        "Path":{"shape":"pathType"}
      }
    },
    "CreateInstanceProfileResponse":{
      "type":"structure",
      "required":["InstanceProfile"],
      "members":{
        "InstanceProfile":{"shape":"InstanceProfile"}
      }
    },
    "CreateLoginProfileRequest":{
      "type":"structure",
      "required":[
        "UserName",
        "Password"
      ],
      "members":{
        "UserName":{"shape":"userNameType"},
        "Password":{"shape":"passwordType"},
        "PasswordResetRequired":{"shape":"booleanType"}
      }
    },
    "CreateLoginProfileResponse":{
      "type":"structure",
      "required":["LoginProfile"],
      "members":{
        "LoginProfile":{"shape":"LoginProfile"}
      }
    },
    "CreateOpenIDConnectProviderRequest":{
      "type":"structure",
      "required":[
        "Url",
        "ThumbprintList"
      ],
      "members":{
        "Url":{"shape":"OpenIDConnectProviderUrlType"},
        "ClientIDList":{"shape":"clientIDListType"},
        "ThumbprintList":{"shape":"thumbprintListType"}
      }
    },
    "CreateOpenIDConnectProviderResponse":{
      "type":"structure",
      "members":{
        "OpenIDConnectProviderArn":{"shape":"arnType"}
      }
    },
    "CreateRoleRequest":{
      "type":"structure",
      "required":[
        "RoleName",
        "AssumeRolePolicyDocument"
      ],
      "members":{
        "Path":{"shape":"pathType"},
        "RoleName":{"shape":"roleNameType"},
        "AssumeRolePolicyDocument":{"shape":"policyDocumentType"}
      }
    },
    "CreateRoleResponse":{
      "type":"structure",
      "required":["Role"],
      "members":{
        "Role":{"shape":"Role"}
      }
    },
    "CreateSAMLProviderRequest":{
      "type":"structure",
      "required":[
        "SAMLMetadataDocument",
        "Name"
      ],
      "members":{
        "SAMLMetadataDocument":{"shape":"SAMLMetadataDocumentType"},
        "Name":{"shape":"SAMLProviderNameType"}
      }
    },
    "CreateSAMLProviderResponse":{
      "type":"structure",
      "members":{
        "SAMLProviderArn":{"shape":"arnType"}
      }
    },
    "CreateUserRequest":{
      "type":"structure",
      "required":["UserName"],
      "members":{
        "Path":{"shape":"pathType"},
        "UserName":{"shape":"userNameType"}
      }
    },
    "CreateUserResponse":{
      "type":"structure",
      "members":{
        "User":{"shape":"User"}
      }
    },
    "CreateVirtualMFADeviceRequest":{
      "type":"structure",
      "required":["VirtualMFADeviceName"],
      "members":{
        "Path":{"shape":"pathType"},
        "VirtualMFADeviceName":{"shape":"virtualMFADeviceName"}
      }
    },
    "CreateVirtualMFADeviceResponse":{
      "type":"structure",
      "required":["VirtualMFADevice"],
      "members":{
        "VirtualMFADevice":{"shape":"VirtualMFADevice"}
      }
    },
    "CredentialReportExpiredException":{
      "type":"structure",
      "members":{
        "message":{"shape":"credentialReportExpiredExceptionMessage"}
      },
      "error":{
        "code":"ReportExpired",
        "httpStatusCode":410,
        "senderFault":true
      },
      "exception":true
    },
    "CredentialReportNotPresentException":{
      "type":"structure",
      "members":{
        "message":{"shape":"credentialReportNotPresentExceptionMessage"}
      },
      "error":{
        "code":"ReportNotPresent",
        "httpStatusCode":410,
        "senderFault":true
      },
      "exception":true
    },
    "CredentialReportNotReadyException":{
      "type":"structure",
      "members":{
        "message":{"shape":"credentialReportNotReadyExceptionMessage"}
      },
      "error":{
        "code":"ReportInProgress",
        "httpStatusCode":404,
        "senderFault":true
      },
      "exception":true
    },
    "DeactivateMFADeviceRequest":{
      "type":"structure",
      "required":[
        "UserName",
        "SerialNumber"
      ],
      "members":{
        "UserName":{"shape":"existingUserNameType"},
        "SerialNumber":{"shape":"serialNumberType"}
      }
    },
    "DeleteAccessKeyRequest":{
      "type":"structure",
      "required":["AccessKeyId"],
      "members":{
        "UserName":{"shape":"existingUserNameType"},
        "AccessKeyId":{"shape":"accessKeyIdType"}
      }
    },
    "DeleteAccountAliasRequest":{
      "type":"structure",
      "required":["AccountAlias"],
      "members":{
        "AccountAlias":{"shape":"accountAliasType"}
      }
    },
    "DeleteConflictException":{
      "type":"structure",
      "members":{
        "message":{"shape":"deleteConflictMessage"}
      },
      "error":{
        "code":"DeleteConflict",
        "httpStatusCode":409,
        "senderFault":true
      },
      "exception":true
    },
    "DeleteGroupPolicyRequest":{
      "type":"structure",
      "required":[
        "GroupName",
        "PolicyName"
      ],
      "members":{
        "GroupName":{"shape":"groupNameType"},
        "PolicyName":{"shape":"policyNameType"}
      }
    },
    "DeleteGroupRequest":{
      "type":"structure",
      "required":["GroupName"],
      "members":{
        "GroupName":{"shape":"groupNameType"}
      }
    },
    "DeleteInstanceProfileRequest":{
      "type":"structure",
      "required":["InstanceProfileName"],
      "members":{
        "InstanceProfileName":{"shape":"instanceProfileNameType"}
      }
    },
    "DeleteLoginProfileRequest":{
      "type":"structure",
      "required":["UserName"],
      "members":{
        "UserName":{"shape":"userNameType"}
      }
    },
    "DeleteOpenIDConnectProviderRequest":{
      "type":"structure",
      "required":["OpenIDConnectProviderArn"],
      "members":{
        "OpenIDConnectProviderArn":{"shape":"arnType"}
      }
    },
    "DeleteRolePolicyRequest":{
      "type":"structure",
      "required":[
        "RoleName",
        "PolicyName"
      ],
      "members":{
        "RoleName":{"shape":"roleNameType"},
        "PolicyName":{"shape":"policyNameType"}
      }
    },
    "DeleteRoleRequest":{
      "type":"structure",
      "required":["RoleName"],
      "members":{
        "RoleName":{"shape":"roleNameType"}
      }
    },
    "DeleteSAMLProviderRequest":{
      "type":"structure",
      "required":["SAMLProviderArn"],
      "members":{
        "SAMLProviderArn":{"shape":"arnType"}
      }
    },
    "DeleteServerCertificateRequest":{
      "type":"structure",
      "required":["ServerCertificateName"],
      "members":{
        "ServerCertificateName":{"shape":"serverCertificateNameType"}
      }
    },
    "DeleteSigningCertificateRequest":{
      "type":"structure",
      "required":["CertificateId"],
      "members":{
        "UserName":{"shape":"existingUserNameType"},
        "CertificateId":{"shape":"certificateIdType"}
      }
    },
    "DeleteUserPolicyRequest":{
      "type":"structure",
      "required":[
        "UserName",
        "PolicyName"
      ],
      "members":{
        "UserName":{"shape":"existingUserNameType"},
        "PolicyName":{"shape":"policyNameType"}
      }
    },
    "DeleteUserRequest":{
      "type":"structure",
      "required":["UserName"],
      "members":{
        "UserName":{"shape":"existingUserNameType"}
      }
    },
    "DeleteVirtualMFADeviceRequest":{
      "type":"structure",
      "required":["SerialNumber"],
      "members":{
        "SerialNumber":{"shape":"serialNumberType"}
      }
    },
    "DuplicateCertificateException":{
      "type":"structure",
      "members":{
        "message":{"shape":"duplicateCertificateMessage"}
      },
      "error":{
        "code":"DuplicateCertificate",
        "httpStatusCode":409,
        "senderFault":true
      },
      "exception":true
    },
    "EnableMFADeviceRequest":{
      "type":"structure",
      "required":[
        "UserName",
        "SerialNumber",
        "AuthenticationCode1",
        "AuthenticationCode2"
      ],
      "members":{
        "UserName":{"shape":"existingUserNameType"},
        "SerialNumber":{"shape":"serialNumberType"},
        "AuthenticationCode1":{"shape":"authenticationCodeType"},
        "AuthenticationCode2":{"shape":"authenticationCodeType"}
      }
    },
    "EntityAlreadyExistsException":{
      "type":"structure",
      "members":{
        "message":{"shape":"entityAlreadyExistsMessage"}
      },
      "error":{
        "code":"EntityAlreadyExists",
        "httpStatusCode":409,
        "senderFault":true
      },
      "exception":true
    },
    "EntityTemporarilyUnmodifiableException":{
      "type":"structure",
      "members":{
        "message":{"shape":"entityTemporarilyUnmodifiableMessage"}
      },
      "error":{
        "code":"EntityTemporarilyUnmodifiable",
        "httpStatusCode":409,
        "senderFault":true
      },
      "exception":true
    },
    "EntityType":{
      "type":"string",
      "enum":[
        "User",
        "Role",
        "Group"
      ]
    },
    "GenerateCredentialReportResponse":{
      "type":"structure",
      "members":{
        "State":{"shape":"ReportStateType"},
        "Description":{"shape":"ReportStateDescriptionType"}
      }
    },
    "GetAccountAuthorizationDetailsRequest":{
      "type":"structure",
      "members":{
        "Filter":{"shape":"entityListType"},
        "MaxItems":{"shape":"maxItemsType"},
        "Marker":{"shape":"markerType"}
      }
    },
    "GetAccountAuthorizationDetailsResponse":{
      "type":"structure",
      "members":{
        "UserDetailList":{"shape":"userDetailListType"},
        "GroupDetailList":{"shape":"groupDetailListType"},
        "RoleDetailList":{"shape":"roleDetailListType"},
        "IsTruncated":{"shape":"booleanType"},
        "Marker":{"shape":"markerType"}
      }
    },
    "GetAccountPasswordPolicyResponse":{
      "type":"structure",
      "required":["PasswordPolicy"],
      "members":{
        "PasswordPolicy":{"shape":"PasswordPolicy"}
      }
    },
    "GetAccountSummaryResponse":{
      "type":"structure",
      "members":{
        "SummaryMap":{"shape":"summaryMapType"}
      }
    },
    "GetCredentialReportResponse":{
      "type":"structure",
      "members":{
        "Content":{"shape":"ReportContentType"},
        "ReportFormat":{"shape":"ReportFormatType"},
        "GeneratedTime":{"shape":"dateType"}
      }
    },
    "GetGroupPolicyRequest":{
      "type":"structure",
      "required":[
        "GroupName",
        "PolicyName"
      ],
      "members":{
        "GroupName":{"shape":"groupNameType"},
        "PolicyName":{"shape":"policyNameType"}
      }
    },
    "GetGroupPolicyResponse":{
      "type":"structure",
      "required":[
        "GroupName",
        "PolicyName",
        "PolicyDocument"
      ],
      "members":{
        "GroupName":{"shape":"groupNameType"},
        "PolicyName":{"shape":"policyNameType"},
        "PolicyDocument":{"shape":"policyDocumentType"}
      }
    },
    "GetGroupRequest":{
      "type":"structure",
      "required":["GroupName"],
      "members":{
        "GroupName":{"shape":"groupNameType"},
        "Marker":{"shape":"markerType"},
        "MaxItems":{"shape":"maxItemsType"}
      }
    },
    "GetGroupResponse":{
      "type":"structure",
      "required":[
        "Group",
        "Users"
      ],
      "members":{
        "Group":{"shape":"Group"},
        "Users":{"shape":"userListType"},
        "IsTruncated":{"shape":"booleanType"},
        "Marker":{"shape":"markerType"}
      }
    },
    "GetInstanceProfileRequest":{
      "type":"structure",
      "required":["InstanceProfileName"],
      "members":{
        "InstanceProfileName":{"shape":"instanceProfileNameType"}
      }
    },
    "GetInstanceProfileResponse":{
      "type":"structure",
      "required":["InstanceProfile"],
      "members":{
        "InstanceProfile":{"shape":"InstanceProfile"}
      }
    },
    "GetLoginProfileRequest":{
      "type":"structure",
      "required":["UserName"],
      "members":{
        "UserName":{"shape":"userNameType"}
      }
    },
    "GetLoginProfileResponse":{
      "type":"structure",
      "required":["LoginProfile"],
      "members":{
        "LoginProfile":{"shape":"LoginProfile"}
      }
    },
    "GetOpenIDConnectProviderRequest":{
      "type":"structure",
      "required":["OpenIDConnectProviderArn"],
      "members":{
        "OpenIDConnectProviderArn":{"shape":"arnType"}
      }
    },
    "GetOpenIDConnectProviderResponse":{
      "type":"structure",
      "members":{
        "Url":{"shape":"OpenIDConnectProviderUrlType"},
        "ClientIDList":{"shape":"clientIDListType"},
        "ThumbprintList":{"shape":"thumbprintListType"},
        "CreateDate":{"shape":"dateType"}
      }
    },
    "GetRolePolicyRequest":{
      "type":"structure",
      "required":[
        "RoleName",
        "PolicyName"
      ],
      "members":{
        "RoleName":{"shape":"roleNameType"},
        "PolicyName":{"shape":"policyNameType"}
      }
    },
    "GetRolePolicyResponse":{
      "type":"structure",
      "required":[
        "RoleName",
        "PolicyName",
        "PolicyDocument"
      ],
      "members":{
        "RoleName":{"shape":"roleNameType"},
        "PolicyName":{"shape":"policyNameType"},
        "PolicyDocument":{"shape":"policyDocumentType"}
      }
    },
    "GetRoleRequest":{
      "type":"structure",
      "required":["RoleName"],
      "members":{
        "RoleName":{"shape":"roleNameType"}
      }
    },
    "GetRoleResponse":{
      "type":"structure",
      "required":["Role"],
      "members":{
        "Role":{"shape":"Role"}
      }
    },
    "GetSAMLProviderRequest":{
      "type":"structure",
      "required":["SAMLProviderArn"],
      "members":{
        "SAMLProviderArn":{"shape":"arnType"}
      }
    },
    "GetSAMLProviderResponse":{
      "type":"structure",
      "members":{
        "SAMLMetadataDocument":{"shape":"SAMLMetadataDocumentType"},
        "CreateDate":{"shape":"dateType"},
        "ValidUntil":{"shape":"dateType"}
      }
    },
    "GetServerCertificateRequest":{
      "type":"structure",
      "required":["ServerCertificateName"],
      "members":{
        "ServerCertificateName":{"shape":"serverCertificateNameType"}
      }
    },
    "GetServerCertificateResponse":{
      "type":"structure",
      "required":["ServerCertificate"],
      "members":{
        "ServerCertificate":{"shape":"ServerCertificate"}
      }
    },
    "GetUserPolicyRequest":{
      "type":"structure",
      "required":[
        "UserName",
        "PolicyName"
      ],
      "members":{
        "UserName":{"shape":"existingUserNameType"},
        "PolicyName":{"shape":"policyNameType"}
      }
    },
    "GetUserPolicyResponse":{
      "type":"structure",
      "required":[
        "UserName",
        "PolicyName",
        "PolicyDocument"
      ],
      "members":{
        "UserName":{"shape":"existingUserNameType"},
        "PolicyName":{"shape":"policyNameType"},
        "PolicyDocument":{"shape":"policyDocumentType"}
      }
    },
    "GetUserRequest":{
      "type":"structure",
      "members":{
        "UserName":{"shape":"existingUserNameType"}
      }
    },
    "GetUserResponse":{
      "type":"structure",
      "required":["User"],
      "members":{
        "User":{"shape":"User"}
      }
    },
    "Group":{
      "type":"structure",
      "required":[
        "Path",
        "GroupName",
        "GroupId",
        "Arn",
        "CreateDate"
      ],
      "members":{
        "Path":{"shape":"pathType"},
        "GroupName":{"shape":"groupNameType"},
        "GroupId":{"shape":"idType"},
        "Arn":{"shape":"arnType"},
        "CreateDate":{"shape":"dateType"}
      }
    },
    "GroupDetail":{
      "type":"structure",
      "members":{
        "Path":{"shape":"pathType"},
        "GroupName":{"shape":"groupNameType"},
        "GroupId":{"shape":"idType"},
        "Arn":{"shape":"arnType"},
        "CreateDate":{"shape":"dateType"},
        "GroupPolicyList":{"shape":"policyDetailListType"}
      }
    },
    "InstanceProfile":{
      "type":"structure",
      "required":[
        "Path",
        "InstanceProfileName",
        "InstanceProfileId",
        "Arn",
        "CreateDate",
        "Roles"
      ],
      "members":{
        "Path":{"shape":"pathType"},
        "InstanceProfileName":{"shape":"instanceProfileNameType"},
        "InstanceProfileId":{"shape":"idType"},
        "Arn":{"shape":"arnType"},
        "CreateDate":{"shape":"dateType"},
        "Roles":{"shape":"roleListType"}
      }
    },
    "InvalidAuthenticationCodeException":{
      "type":"structure",
      "members":{
        "message":{"shape":"invalidAuthenticationCodeMessage"}
      },
      "error":{
        "code":"InvalidAuthenticationCode",
        "httpStatusCode":403,
        "senderFault":true
      },
      "exception":true
    },
    "InvalidCertificateException":{
      "type":"structure",
      "members":{
        "message":{"shape":"invalidCertificateMessage"}
      },
      "error":{
        "code":"InvalidCertificate",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "InvalidInputException":{
      "type":"structure",
      "members":{
        "message":{"shape":"invalidInputMessage"}
      },
      "error":{
        "code":"InvalidInput",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "InvalidUserTypeException":{
      "type":"structure",
      "members":{
        "message":{"shape":"invalidUserTypeMessage"}
      },
      "error":{
        "code":"InvalidUserType",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "KeyPairMismatchException":{
      "type":"structure",
      "members":{
        "message":{"shape":"keyPairMismatchMessage"}
      },
      "error":{
        "code":"KeyPairMismatch",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "LimitExceededException":{
      "type":"structure",
      "members":{
        "message":{"shape":"limitExceededMessage"}
      },
      "error":{
        "code":"LimitExceeded",
        "httpStatusCode":409,
        "senderFault":true
      },
      "exception":true
    },
    "ListAccessKeysRequest":{
      "type":"structure",
      "members":{
        "UserName":{"shape":"existingUserNameType"},
        "Marker":{"shape":"markerType"},
        "MaxItems":{"shape":"maxItemsType"}
      }
    },
    "ListAccessKeysResponse":{
      "type":"structure",
      "required":["AccessKeyMetadata"],
      "members":{
        "AccessKeyMetadata":{"shape":"accessKeyMetadataListType"},
        "IsTruncated":{"shape":"booleanType"},
        "Marker":{"shape":"markerType"}
      }
    },
    "ListAccountAliasesRequest":{
      "type":"structure",
      "members":{
        "Marker":{"shape":"markerType"},
        "MaxItems":{"shape":"maxItemsType"}
      }
    },
    "ListAccountAliasesResponse":{
      "type":"structure",
      "required":["AccountAliases"],
      "members":{
        "AccountAliases":{"shape":"accountAliasListType"},
        "IsTruncated":{"shape":"booleanType"},
        "Marker":{"shape":"markerType"}
      }
    },
    "ListGroupPoliciesRequest":{
      "type":"structure",
      "required":["GroupName"],
      "members":{
        "GroupName":{"shape":"groupNameType"},
        "Marker":{"shape":"markerType"},
        "MaxItems":{"shape":"maxItemsType"}
      }
    },
    "ListGroupPoliciesResponse":{
      "type":"structure",
      "required":["PolicyNames"],
      "members":{
        "PolicyNames":{"shape":"policyNameListType"},
        "IsTruncated":{"shape":"booleanType"},
        "Marker":{"shape":"markerType"}
      }
    },
    "ListGroupsForUserRequest":{
      "type":"structure",
      "required":["UserName"],
      "members":{
        "UserName":{"shape":"existingUserNameType"},
        "Marker":{"shape":"markerType"},
        "MaxItems":{"shape":"maxItemsType"}
      }
    },
    "ListGroupsForUserResponse":{
      "type":"structure",
      "required":["Groups"],
      "members":{
        "Groups":{"shape":"groupListType"},
        "IsTruncated":{"shape":"booleanType"},
        "Marker":{"shape":"markerType"}
      }
    },
    "ListGroupsRequest":{
      "type":"structure",
      "members":{
        "PathPrefix":{"shape":"pathPrefixType"},
        "Marker":{"shape":"markerType"},
        "MaxItems":{"shape":"maxItemsType"}
      }
    },
    "ListGroupsResponse":{
      "type":"structure",
      "required":["Groups"],
      "members":{
        "Groups":{"shape":"groupListType"},
        "IsTruncated":{"shape":"booleanType"},
        "Marker":{"shape":"markerType"}
      }
    },
    "ListInstanceProfilesForRoleRequest":{
      "type":"structure",
      "required":["RoleName"],
      "members":{
        "RoleName":{"shape":"roleNameType"},
        "Marker":{"shape":"markerType"},
        "MaxItems":{"shape":"maxItemsType"}
      }
    },
    "ListInstanceProfilesForRoleResponse":{
      "type":"structure",
      "required":["InstanceProfiles"],
      "members":{
        "InstanceProfiles":{"shape":"instanceProfileListType"},
        "IsTruncated":{"shape":"booleanType"},
        "Marker":{"shape":"markerType"}
      }
    },
    "ListInstanceProfilesRequest":{
      "type":"structure",
      "members":{
        "PathPrefix":{"shape":"pathPrefixType"},
        "Marker":{"shape":"markerType"},
        "MaxItems":{"shape":"maxItemsType"}
      }
    },
    "ListInstanceProfilesResponse":{
      "type":"structure",
      "required":["InstanceProfiles"],
      "members":{
        "InstanceProfiles":{"shape":"instanceProfileListType"},
        "IsTruncated":{"shape":"booleanType"},
        "Marker":{"shape":"markerType"}
      }
    },
    "ListMFADevicesRequest":{
      "type":"structure",
      "members":{
        "UserName":{"shape":"existingUserNameType"},
        "Marker":{"shape":"markerType"},
        "MaxItems":{"shape":"maxItemsType"}
      }
    },
    "ListMFADevicesResponse":{
      "type":"structure",
      "required":["MFADevices"],
      "members":{
        "MFADevices":{"shape":"mfaDeviceListType"},
        "IsTruncated":{"shape":"booleanType"},
        "Marker":{"shape":"markerType"}
      }
    },
    "ListOpenIDConnectProvidersRequest":{
      "type":"structure",
      "members":{
      }
    },
    "ListOpenIDConnectProvidersResponse":{
      "type":"structure",
      "members":{
        "OpenIDConnectProviderList":{"shape":"OpenIDConnectProviderListType"}
      }
    },
    "ListRolePoliciesRequest":{
      "type":"structure",
      "required":["RoleName"],
      "members":{
        "RoleName":{"shape":"roleNameType"},
        "Marker":{"shape":"markerType"},
        "MaxItems":{"shape":"maxItemsType"}
      }
    },
    "ListRolePoliciesResponse":{
      "type":"structure",
      "required":["PolicyNames"],
      "members":{
        "PolicyNames":{"shape":"policyNameListType"},
        "IsTruncated":{"shape":"booleanType"},
        "Marker":{"shape":"markerType"}
      }
    },
    "ListRolesRequest":{
      "type":"structure",
      "members":{
        "PathPrefix":{"shape":"pathPrefixType"},
        "Marker":{"shape":"markerType"},
        "MaxItems":{"shape":"maxItemsType"}
      }
    },
    "ListRolesResponse":{
      "type":"structure",
      "required":["Roles"],
      "members":{
        "Roles":{"shape":"roleListType"},
        "IsTruncated":{"shape":"booleanType"},
        "Marker":{"shape":"markerType"}
      }
    },
    "ListSAMLProvidersRequest":{
      "type":"structure",
      "members":{
      }
    },
    "ListSAMLProvidersResponse":{
      "type":"structure",
      "members":{
        "SAMLProviderList":{"shape":"SAMLProviderListType"}
      }
    },
    "ListServerCertificatesRequest":{
      "type":"structure",
      "members":{
        "PathPrefix":{"shape":"pathPrefixType"},
        "Marker":{"shape":"markerType"},
        "MaxItems":{"shape":"maxItemsType"}
      }
    },
    "ListServerCertificatesResponse":{
      "type":"structure",
      "required":["ServerCertificateMetadataList"],
      "members":{
        "ServerCertificateMetadataList":{"shape":"serverCertificateMetadataListType"},
        "IsTruncated":{"shape":"booleanType"},
        "Marker":{"shape":"markerType"}
      }
    },
    "ListSigningCertificatesRequest":{
      "type":"structure",
      "members":{
        "UserName":{"shape":"existingUserNameType"},
        "Marker":{"shape":"markerType"},
        "MaxItems":{"shape":"maxItemsType"}
      }
    },
    "ListSigningCertificatesResponse":{
      "type":"structure",
      "required":["Certificates"],
      "members":{
        "Certificates":{"shape":"certificateListType"},
        "IsTruncated":{"shape":"booleanType"},
        "Marker":{"shape":"markerType"}
      }
    },
    "ListUserPoliciesRequest":{
      "type":"structure",
      "required":["UserName"],
      "members":{
        "UserName":{"shape":"existingUserNameType"},
        "Marker":{"shape":"markerType"},
        "MaxItems":{"shape":"maxItemsType"}
      }
    },
    "ListUserPoliciesResponse":{
      "type":"structure",
      "required":["PolicyNames"],
      "members":{
        "PolicyNames":{"shape":"policyNameListType"},
        "IsTruncated":{"shape":"booleanType"},
        "Marker":{"shape":"markerType"}
      }
    },
    "ListUsersRequest":{
      "type":"structure",
      "members":{
        "PathPrefix":{"shape":"pathPrefixType"},
        "Marker":{"shape":"markerType"},
        "MaxItems":{"shape":"maxItemsType"}
      }
    },
    "ListUsersResponse":{
      "type":"structure",
      "required":["Users"],
      "members":{
        "Users":{"shape":"userListType"},
        "IsTruncated":{"shape":"booleanType"},
        "Marker":{"shape":"markerType"}
      }
    },
    "ListVirtualMFADevicesRequest":{
      "type":"structure",
      "members":{
        "AssignmentStatus":{"shape":"assignmentStatusType"},
        "Marker":{"shape":"markerType"},
        "MaxItems":{"shape":"maxItemsType"}
      }
    },
    "ListVirtualMFADevicesResponse":{
      "type":"structure",
      "required":["VirtualMFADevices"],
      "members":{
        "VirtualMFADevices":{"shape":"virtualMFADeviceListType"},
        "IsTruncated":{"shape":"booleanType"},
        "Marker":{"shape":"markerType"}
      }
    },
    "LoginProfile":{
      "type":"structure",
      "required":[
        "UserName",
        "CreateDate"
      ],
      "members":{
        "UserName":{"shape":"userNameType"},
        "CreateDate":{"shape":"dateType"},
        "PasswordResetRequired":{"shape":"booleanType"}
      }
    },
    "MFADevice":{
      "type":"structure",
      "required":[
        "UserName",
        "SerialNumber",
        "EnableDate"
      ],
      "members":{
        "UserName":{"shape":"userNameType"},
        "SerialNumber":{"shape":"serialNumberType"},
        "EnableDate":{"shape":"dateType"}
      }
    },
    "MalformedCertificateException":{
      "type":"structure",
      "members":{
        "message":{"shape":"malformedCertificateMessage"}
      },
      "error":{
        "code":"MalformedCertificate",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "MalformedPolicyDocumentException":{
      "type":"structure",
      "members":{
        "message":{"shape":"malformedPolicyDocumentMessage"}
      },
      "error":{
        "code":"MalformedPolicyDocument",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "NoSuchEntityException":{
      "type":"structure",
      "members":{
        "message":{"shape":"noSuchEntityMessage"}
      },
      "error":{
        "code":"NoSuchEntity",
        "httpStatusCode":404,
        "senderFault":true
      },
      "exception":true
    },
    "OpenIDConnectProviderListEntry":{
      "type":"structure",
      "members":{
        "Arn":{"shape":"arnType"}
      }
    },
    "OpenIDConnectProviderListType":{
      "type":"list",
      "member":{"shape":"OpenIDConnectProviderListEntry"}
    },
    "OpenIDConnectProviderUrlType":{
      "type":"string",
      "min":1,
      "max":255
    },
    "PasswordPolicy":{
      "type":"structure",
      "members":{
        "MinimumPasswordLength":{"shape":"minimumPasswordLengthType"},
        "RequireSymbols":{"shape":"booleanType"},
        "RequireNumbers":{"shape":"booleanType"},
        "RequireUppercaseCharacters":{"shape":"booleanType"},
        "RequireLowercaseCharacters":{"shape":"booleanType"},
        "AllowUsersToChangePassword":{"shape":"booleanType"},
        "ExpirePasswords":{"shape":"booleanType"},
        "MaxPasswordAge":{"shape":"maxPasswordAgeType"},
        "PasswordReusePrevention":{"shape":"passwordReusePreventionType"},
        "HardExpiry":{"shape":"booleanObjectType"}
      }
    },
    "PasswordPolicyViolationException":{
      "type":"structure",
      "members":{
        "message":{"shape":"passwordPolicyViolationMessage"}
      },
      "error":{
        "code":"PasswordPolicyViolation",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "PolicyDetail":{
      "type":"structure",
      "members":{
        "PolicyName":{"shape":"policyNameType"},
        "PolicyDocument":{"shape":"policyDocumentType"}
      }
    },
    "PutGroupPolicyRequest":{
      "type":"structure",
      "required":[
        "GroupName",
        "PolicyName",
        "PolicyDocument"
      ],
      "members":{
        "GroupName":{"shape":"groupNameType"},
        "PolicyName":{"shape":"policyNameType"},
        "PolicyDocument":{"shape":"policyDocumentType"}
      }
    },
    "PutRolePolicyRequest":{
      "type":"structure",
      "required":[
        "RoleName",
        "PolicyName",
        "PolicyDocument"
      ],
      "members":{
        "RoleName":{"shape":"roleNameType"},
        "PolicyName":{"shape":"policyNameType"},
        "PolicyDocument":{"shape":"policyDocumentType"}
      }
    },
    "PutUserPolicyRequest":{
      "type":"structure",
      "required":[
        "UserName",
        "PolicyName",
        "PolicyDocument"
      ],
      "members":{
        "UserName":{"shape":"existingUserNameType"},
        "PolicyName":{"shape":"policyNameType"},
        "PolicyDocument":{"shape":"policyDocumentType"}
      }
    },
    "RemoveClientIDFromOpenIDConnectProviderRequest":{
      "type":"structure",
      "required":[
        "OpenIDConnectProviderArn",
        "ClientID"
      ],
      "members":{
        "OpenIDConnectProviderArn":{"shape":"arnType"},
        "ClientID":{"shape":"clientIDType"}
      }
    },
    "RemoveRoleFromInstanceProfileRequest":{
      "type":"structure",
      "required":[
        "InstanceProfileName",
        "RoleName"
      ],
      "members":{
        "InstanceProfileName":{"shape":"instanceProfileNameType"},
        "RoleName":{"shape":"roleNameType"}
      }
    },
    "RemoveUserFromGroupRequest":{
      "type":"structure",
      "required":[
        "GroupName",
        "UserName"
      ],
      "members":{
        "GroupName":{"shape":"groupNameType"},
        "UserName":{"shape":"existingUserNameType"}
      }
    },
    "ReportContentType":{"type":"blob"},
    "ReportFormatType":{
      "type":"string",
      "enum":["text/csv"]
    },
    "ReportStateDescriptionType":{"type":"string"},
    "ReportStateType":{
      "type":"string",
      "enum":[
        "STARTED",
        "INPROGRESS",
        "COMPLETE"
      ]
    },
    "ResyncMFADeviceRequest":{
      "type":"structure",
      "required":[
        "UserName",
        "SerialNumber",
        "AuthenticationCode1",
        "AuthenticationCode2"
      ],
      "members":{
        "UserName":{"shape":"existingUserNameType"},
        "SerialNumber":{"shape":"serialNumberType"},
        "AuthenticationCode1":{"shape":"authenticationCodeType"},
        "AuthenticationCode2":{"shape":"authenticationCodeType"}
      }
    },
    "Role":{
      "type":"structure",
      "required":[
        "Path",
        "RoleName",
        "RoleId",
        "Arn",
        "CreateDate"
      ],
      "members":{
        "Path":{"shape":"pathType"},
        "RoleName":{"shape":"roleNameType"},
        "RoleId":{"shape":"idType"},
        "Arn":{"shape":"arnType"},
        "CreateDate":{"shape":"dateType"},
        "AssumeRolePolicyDocument":{"shape":"policyDocumentType"}
      }
    },
    "RoleDetail":{
      "type":"structure",
      "members":{
        "Path":{"shape":"pathType"},
        "RoleName":{"shape":"roleNameType"},
        "RoleId":{"shape":"idType"},
        "Arn":{"shape":"arnType"},
        "CreateDate":{"shape":"dateType"},
        "AssumeRolePolicyDocument":{"shape":"policyDocumentType"},
        "InstanceProfileList":{"shape":"instanceProfileListType"},
        "RolePolicyList":{"shape":"policyDetailListType"}
      }
    },
    "SAMLMetadataDocumentType":{
      "type":"string",
      "min":1000,
      "max":10000000
    },
    "SAMLProviderListEntry":{
      "type":"structure",
      "members":{
        "Arn":{"shape":"arnType"},
        "ValidUntil":{"shape":"dateType"},
        "CreateDate":{"shape":"dateType"}
      }
    },
    "SAMLProviderListType":{
      "type":"list",
      "member":{"shape":"SAMLProviderListEntry"}
    },
    "SAMLProviderNameType":{
      "type":"string",
      "min":1,
      "max":128,
      "pattern":"[\\w._-]*"
    },
    "ServerCertificate":{
      "type":"structure",
      "required":[
        "ServerCertificateMetadata",
        "CertificateBody"
      ],
      "members":{
        "ServerCertificateMetadata":{"shape":"ServerCertificateMetadata"},
        "CertificateBody":{"shape":"certificateBodyType"},
        "CertificateChain":{"shape":"certificateChainType"}
      }
    },
    "ServerCertificateMetadata":{
      "type":"structure",
      "required":[
        "Path",
        "ServerCertificateName",
        "ServerCertificateId",
        "Arn"
      ],
      "members":{
        "Path":{"shape":"pathType"},
        "ServerCertificateName":{"shape":"serverCertificateNameType"},
        "ServerCertificateId":{"shape":"idType"},
        "Arn":{"shape":"arnType"},
        "UploadDate":{"shape":"dateType"},
        "Expiration":{"shape":"dateType"}
      }
    },
    "SigningCertificate":{
      "type":"structure",
      "required":[
        "UserName",
        "CertificateId",
        "CertificateBody",
        "Status"
      ],
      "members":{
        "UserName":{"shape":"userNameType"},
        "CertificateId":{"shape":"certificateIdType"},
        "CertificateBody":{"shape":"certificateBodyType"},
        "Status":{"shape":"statusType"},
        "UploadDate":{"shape":"dateType"}
      }
    },
    "UpdateAccessKeyRequest":{
      "type":"structure",
      "required":[
        "AccessKeyId",
        "Status"
      ],
      "members":{
        "UserName":{"shape":"existingUserNameType"},
        "AccessKeyId":{"shape":"accessKeyIdType"},
        "Status":{"shape":"statusType"}
      }
    },
    "UpdateAccountPasswordPolicyRequest":{
      "type":"structure",
      "members":{
        "MinimumPasswordLength":{"shape":"minimumPasswordLengthType"},
        "RequireSymbols":{"shape":"booleanType"},
        "RequireNumbers":{"shape":"booleanType"},
        "RequireUppercaseCharacters":{"shape":"booleanType"},
        "RequireLowercaseCharacters":{"shape":"booleanType"},
        "AllowUsersToChangePassword":{"shape":"booleanType"},
        "MaxPasswordAge":{"shape":"maxPasswordAgeType"},
        "PasswordReusePrevention":{"shape":"passwordReusePreventionType"},
        "HardExpiry":{"shape":"booleanObjectType"}
      }
    },
    "UpdateAssumeRolePolicyRequest":{
      "type":"structure",
      "required":[
        "RoleName",
        "PolicyDocument"
      ],
      "members":{
        "RoleName":{"shape":"roleNameType"},
        "PolicyDocument":{"shape":"policyDocumentType"}
      }
    },
    "UpdateGroupRequest":{
      "type":"structure",
      "required":["GroupName"],
      "members":{
        "GroupName":{"shape":"groupNameType"},
        "NewPath":{"shape":"pathType"},
        "NewGroupName":{"shape":"groupNameType"}
      }
    },
    "UpdateLoginProfileRequest":{
      "type":"structure",
      "required":["UserName"],
      "members":{
        "UserName":{"shape":"userNameType"},
        "Password":{"shape":"passwordType"},
        "PasswordResetRequired":{"shape":"booleanObjectType"}
      }
    },
    "UpdateOpenIDConnectProviderThumbprintRequest":{
      "type":"structure",
      "required":[
        "OpenIDConnectProviderArn",
        "ThumbprintList"
      ],
      "members":{
        "OpenIDConnectProviderArn":{"shape":"arnType"},
        "ThumbprintList":{"shape":"thumbprintListType"}
      }
    },
    "UpdateSAMLProviderRequest":{
      "type":"structure",
      "required":[
        "SAMLMetadataDocument",
        "SAMLProviderArn"
      ],
      "members":{
        "SAMLMetadataDocument":{"shape":"SAMLMetadataDocumentType"},
        "SAMLProviderArn":{"shape":"arnType"}
      }
    },
    "UpdateSAMLProviderResponse":{
      "type":"structure",
      "members":{
        "SAMLProviderArn":{"shape":"arnType"}
      }
    },
    "UpdateServerCertificateRequest":{
      "type":"structure",
      "required":["ServerCertificateName"],
      "members":{
        "ServerCertificateName":{"shape":"serverCertificateNameType"},
        "NewPath":{"shape":"pathType"},
        "NewServerCertificateName":{"shape":"serverCertificateNameType"}
      }
    },
    "UpdateSigningCertificateRequest":{
      "type":"structure",
      "required":[
        "CertificateId",
        "Status"
      ],
      "members":{
        "UserName":{"shape":"existingUserNameType"},
        "CertificateId":{"shape":"certificateIdType"},
        "Status":{"shape":"statusType"}
      }
    },
    "UpdateUserRequest":{
      "type":"structure",
      "required":["UserName"],
      "members":{
        "UserName":{"shape":"existingUserNameType"},
        "NewPath":{"shape":"pathType"},
        "NewUserName":{"shape":"userNameType"}
      }
    },
    "UploadServerCertificateRequest":{
      "type":"structure",
      "required":[
        "ServerCertificateName",
        "CertificateBody",
        "PrivateKey"
      ],
      "members":{
        "Path":{"shape":"pathType"},
        "ServerCertificateName":{"shape":"serverCertificateNameType"},
        "CertificateBody":{"shape":"certificateBodyType"},
        "PrivateKey":{"shape":"privateKeyType"},
        "CertificateChain":{"shape":"certificateChainType"}
      }
    },
    "UploadServerCertificateResponse":{
      "type":"structure",
      "members":{
        "ServerCertificateMetadata":{"shape":"ServerCertificateMetadata"}
      }
    },
    "UploadSigningCertificateRequest":{
      "type":"structure",
      "required":["CertificateBody"],
      "members":{
        "UserName":{"shape":"existingUserNameType"},
        "CertificateBody":{"shape":"certificateBodyType"}
      }
    },
    "UploadSigningCertificateResponse":{
      "type":"structure",
      "required":["Certificate"],
      "members":{
        "Certificate":{"shape":"SigningCertificate"}
      }
    },
    "User":{
      "type":"structure",
      "required":[
        "Path",
        "UserName",
        "UserId",
        "Arn",
        "CreateDate"
      ],
      "members":{
        "Path":{"shape":"pathType"},
        "UserName":{"shape":"userNameType"},
        "UserId":{"shape":"idType"},
        "Arn":{"shape":"arnType"},
        "CreateDate":{"shape":"dateType"},
        "PasswordLastUsed":{"shape":"dateType"}
      }
    },
    "UserDetail":{
      "type":"structure",
      "members":{
        "Path":{"shape":"pathType"},
        "UserName":{"shape":"userNameType"},
        "UserId":{"shape":"idType"},
        "Arn":{"shape":"arnType"},
        "CreateDate":{"shape":"dateType"},
        "UserPolicyList":{"shape":"policyDetailListType"},
        "GroupList":{"shape":"groupNameListType"}
      }
    },
    "VirtualMFADevice":{
      "type":"structure",
      "required":["SerialNumber"],
      "members":{
        "SerialNumber":{"shape":"serialNumberType"},
        "Base32StringSeed":{"shape":"BootstrapDatum"},
        "QRCodePNG":{"shape":"BootstrapDatum"},
        "User":{"shape":"User"},
        "EnableDate":{"shape":"dateType"}
      }
    },
    "accessKeyIdType":{
      "type":"string",
      "min":16,
      "max":32,
      "pattern":"[\\w]*"
    },
    "accessKeyMetadataListType":{
      "type":"list",
      "member":{"shape":"AccessKeyMetadata"}
    },
    "accessKeySecretType":{
      "type":"string",
      "sensitive":true
    },
    "accountAliasListType":{
      "type":"list",
      "member":{"shape":"accountAliasType"}
    },
    "accountAliasType":{
      "type":"string",
      "min":3,
      "max":63,
      "pattern":"^[a-z0-9](([a-z0-9]|-(?!-))*[a-z0-9])?$"
    },
    "arnType":{
      "type":"string",
      "min":20,
      "max":2048
    },
    "assignmentStatusType":{
      "type":"string",
      "enum":[
        "Assigned",
        "Unassigned",
        "Any"
      ]
    },
    "authenticationCodeType":{
      "type":"string",
      "min":6,
      "max":6,
      "pattern":"[\\d]*"
    },
    "booleanObjectType":{
      "type":"boolean",
      "box":true
    },
    "booleanType":{"type":"boolean"},
    "certificateBodyType":{
      "type":"string",
      "min":1,
      "max":16384,
      "pattern":"[\\u0009\\u000A\\u000D\\u0020-\\u00FF]+"
    },
    "certificateChainType":{
      "type":"string",
      "min":1,
      "max":2097152,
      "pattern":"[\\u0009\\u000A\\u000D\\u0020-\\u00FF]*"
    },
    "certificateIdType":{
      "type":"string",
      "min":24,
      "max":128,
      "pattern":"[\\w]*"
    },
    "certificateListType":{
      "type":"list",
      "member":{"shape":"SigningCertificate"}
    },
    "clientIDListType":{
      "type":"list",
      "member":{"shape":"clientIDType"}
    },
    "clientIDType":{
      "type":"string",
      "min":1,
      "max":255
    },
    "credentialReportExpiredExceptionMessage":{"type":"string"},
    "credentialReportNotPresentExceptionMessage":{"type":"string"},
    "credentialReportNotReadyExceptionMessage":{"type":"string"},
    "dateType":{"type":"timestamp"},
    "deleteConflictMessage":{"type":"string"},
    "duplicateCertificateMessage":{"type":"string"},
    "entityAlreadyExistsMessage":{"type":"string"},
    "entityListType":{
      "type":"list",
      "member":{"shape":"EntityType"}
    },
    "entityTemporarilyUnmodifiableMessage":{"type":"string"},
    "existingUserNameType":{
      "type":"string",
      "min":1,
      "max":128,
      "pattern":"[\\w+=,.@-]*"
    },
    "groupDetailListType":{
      "type":"list",
      "member":{"shape":"GroupDetail"}
    },
    "groupListType":{
      "type":"list",
      "member":{"shape":"Group"}
    },
    "groupNameListType":{
      "type":"list",
      "member":{"shape":"groupNameType"}
    },
    "groupNameType":{
      "type":"string",
      "min":1,
      "max":128,
      "pattern":"[\\w+=,.@-]*"
    },
    "idType":{
      "type":"string",
      "min":16,
      "max":32,
      "pattern":"[\\w]*"
    },
    "instanceProfileListType":{
      "type":"list",
      "member":{"shape":"InstanceProfile"}
    },
    "instanceProfileNameType":{
      "type":"string",
      "min":1,
      "max":128,
      "pattern":"[\\w+=,.@-]*"
    },
    "invalidAuthenticationCodeMessage":{"type":"string"},
    "invalidCertificateMessage":{"type":"string"},
    "invalidInputMessage":{"type":"string"},
    "invalidUserTypeMessage":{"type":"string"},
    "keyPairMismatchMessage":{"type":"string"},
    "limitExceededMessage":{"type":"string"},
    "malformedCertificateMessage":{"type":"string"},
    "malformedPolicyDocumentMessage":{"type":"string"},
    "markerType":{
      "type":"string",
      "min":1,
      "max":320,
      "pattern":"[\\u0020-\\u00FF]*"
    },
    "maxItemsType":{
      "type":"integer",
      "min":1,
      "max":1000
    },
    "maxPasswordAgeType":{
      "type":"integer",
      "min":1,
      "max":1095,
      "box":true
    },
    "mfaDeviceListType":{
      "type":"list",
      "member":{"shape":"MFADevice"}
    },
    "minimumPasswordLengthType":{
      "type":"integer",
      "min":6,
      "max":128
    },
    "noSuchEntityMessage":{"type":"string"},
    "passwordPolicyViolationMessage":{"type":"string"},
    "passwordReusePreventionType":{
      "type":"integer",
      "min":1,
      "max":24,
      "box":true
    },
    "passwordType":{
      "type":"string",
      "min":1,
      "max":128,
      "pattern":"[\\u0009\\u000A\\u000D\\u0020-\\u00FF]+",
      "sensitive":true
    },
    "pathPrefixType":{
      "type":"string",
      "min":1,
      "max":512,
      "pattern":"\\u002F[\\u0021-\\u007F]*"
    },
    "pathType":{
      "type":"string",
      "min":1,
      "max":512,
      "pattern":"(\\u002F)|(\\u002F[\\u0021-\\u007F]+\\u002F)"
    },
    "policyDetailListType":{
      "type":"list",
      "member":{"shape":"PolicyDetail"}
    },
    "policyDocumentType":{
      "type":"string",
      "min":1,
      "max":131072,
      "pattern":"[\\u0009\\u000A\\u000D\\u0020-\\u00FF]+"
    },
    "policyNameListType":{
      "type":"list",
      "member":{"shape":"policyNameType"}
    },
    "policyNameType":{
      "type":"string",
      "min":1,
      "max":128,
      "pattern":"[\\w+=,.@-]*"
    },
    "privateKeyType":{
      "type":"string",
      "min":1,
      "max":16384,
      "pattern":"[\\u0009\\u000A\\u000D\\u0020-\\u00FF]*",
      "sensitive":true
    },
    "roleDetailListType":{
      "type":"list",
      "member":{"shape":"RoleDetail"}
    },
    "roleListType":{
      "type":"list",
      "member":{"shape":"Role"}
    },
    "roleNameType":{
      "type":"string",
      "min":1,
      "max":64,
      "pattern":"[\\w+=,.@-]*"
    },
    "serialNumberType":{
      "type":"string",
      "min":9,
      "max":256,
      "pattern":"[\\w+=/:,.@-]*"
    },
    "serverCertificateMetadataListType":{
      "type":"list",
      "member":{"shape":"ServerCertificateMetadata"}
    },
    "serverCertificateNameType":{
      "type":"string",
      "min":1,
      "max":128,
      "pattern":"[\\w+=,.@-]*"
    },
    "statusType":{
      "type":"string",
      "enum":[
        "Active",
        "Inactive"
      ]
    },
    "summaryKeyType":{
      "type":"string",
      "enum":[
        "Users",
        "UsersQuota",
        "Groups",
        "GroupsQuota",
        "ServerCertificates",
        "ServerCertificatesQuota",
        "UserPolicySizeQuota",
        "GroupPolicySizeQuota",
        "GroupsPerUserQuota",
        "SigningCertificatesPerUserQuota",
        "AccessKeysPerUserQuota",
        "MFADevices",
        "MFADevicesInUse",
        "AccountMFAEnabled"
      ]
    },
    "summaryMapType":{
      "type":"map",
      "key":{"shape":"summaryKeyType"},
      "value":{"shape":"summaryValueType"}
    },
    "summaryValueType":{"type":"integer"},
    "thumbprintListType":{
      "type":"list",
      "member":{"shape":"thumbprintType"}
    },
    "thumbprintType":{
      "type":"string",
      "min":40,
      "max":40
    },
    "userDetailListType":{
      "type":"list",
      "member":{"shape":"UserDetail"}
    },
    "userListType":{
      "type":"list",
      "member":{"shape":"User"}
    },
    "userNameType":{
      "type":"string",
      "min":1,
      "max":64,
      "pattern":"[\\w+=,.@-]*"
    },
    "virtualMFADeviceListType":{
      "type":"list",
      "member":{"shape":"VirtualMFADevice"}
    },
    "virtualMFADeviceName":{
      "type":"string",
      "min":1,
      "pattern":"[\\w+=,.@-]*"
    }
  }
}
,
"ImportExport":
{
  "metadata":{
    "apiVersion":"2010-06-01",
    "endpointPrefix":"importexport",
    "globalEndpoint":"importexport.amazonaws.com",
    "serviceFullName":"AWS Import/Export",
    "signatureVersion":"v2",
    "xmlNamespace":"http://importexport.amazonaws.com/doc/2010-06-01/",
    "protocol":"query"
  },
  "operations":{
    "CancelJob":{
      "name":"CancelJob",
      "http":{
        "method":"POST",
        "requestUri":"/?Operation=CancelJob"
      },
      "input":{"shape":"CancelJobInput"},
      "output":{
        "shape":"CancelJobOutput",
        "resultWrapper":"CancelJobResult"
      },
      "errors":[
        {
          "shape":"InvalidJobIdException",
          "exception":true
        },
        {
          "shape":"ExpiredJobIdException",
          "exception":true
        },
        {
          "shape":"CanceledJobIdException",
          "exception":true
        },
        {
          "shape":"UnableToCancelJobIdException",
          "exception":true
        },
        {
          "shape":"InvalidAccessKeyIdException",
          "exception":true
        }
      ]
    },
    "CreateJob":{
      "name":"CreateJob",
      "http":{
        "method":"POST",
        "requestUri":"/?Operation=CreateJob"
      },
      "input":{"shape":"CreateJobInput"},
      "output":{
        "shape":"CreateJobOutput",
        "resultWrapper":"CreateJobResult"
      },
      "errors":[
        {
          "shape":"MissingParameterException",
          "exception":true
        },
        {
          "shape":"InvalidParameterException",
          "exception":true
        },
        {
          "shape":"InvalidParameterException",
          "exception":true
        },
        {
          "shape":"InvalidAccessKeyIdException",
          "exception":true
        },
        {
          "shape":"InvalidAddressException",
          "exception":true
        },
        {
          "shape":"InvalidManifestFieldException",
          "exception":true
        },
        {
          "shape":"MissingManifestFieldException",
          "exception":true
        },
        {
          "shape":"NoSuchBucketException",
          "exception":true
        },
        {
          "shape":"MissingCustomsException",
          "exception":true
        },
        {
          "shape":"InvalidCustomsException",
          "exception":true
        },
        {
          "shape":"InvalidFileSystemException",
          "exception":true
        },
        {
          "shape":"MultipleRegionsException",
          "exception":true
        },
        {
          "shape":"BucketPermissionException",
          "exception":true
        },
        {
          "shape":"MalformedManifestException",
          "exception":true
        }
      ]
    },
    "GetStatus":{
      "name":"GetStatus",
      "http":{
        "method":"POST",
        "requestUri":"/?Operation=GetStatus"
      },
      "input":{"shape":"GetStatusInput"},
      "output":{
        "shape":"GetStatusOutput",
        "resultWrapper":"GetStatusResult"
      },
      "errors":[
        {
          "shape":"InvalidJobIdException",
          "exception":true
        },
        {
          "shape":"ExpiredJobIdException",
          "exception":true
        },
        {
          "shape":"CanceledJobIdException",
          "exception":true
        },
        {
          "shape":"InvalidAccessKeyIdException",
          "exception":true
        }
      ]
    },
    "ListJobs":{
      "name":"ListJobs",
      "http":{
        "method":"POST",
        "requestUri":"/?Operation=ListJobs"
      },
      "input":{"shape":"ListJobsInput"},
      "output":{
        "shape":"ListJobsOutput",
        "resultWrapper":"ListJobsResult"
      },
      "errors":[
        {
          "shape":"InvalidParameterException",
          "exception":true
        },
        {
          "shape":"InvalidAccessKeyIdException",
          "exception":true
        }
      ]
    },
    "UpdateJob":{
      "name":"UpdateJob",
      "http":{
        "method":"POST",
        "requestUri":"/?Operation=UpdateJob"
      },
      "input":{"shape":"UpdateJobInput"},
      "output":{
        "shape":"UpdateJobOutput",
        "resultWrapper":"UpdateJobResult"
      },
      "errors":[
        {
          "shape":"MissingParameterException",
          "exception":true
        },
        {
          "shape":"InvalidParameterException",
          "exception":true
        },
        {
          "shape":"InvalidAccessKeyIdException",
          "exception":true
        },
        {
          "shape":"InvalidAddressException",
          "exception":true
        },
        {
          "shape":"InvalidManifestFieldException",
          "exception":true
        },
        {
          "shape":"InvalidJobIdException",
          "exception":true
        },
        {
          "shape":"MissingManifestFieldException",
          "exception":true
        },
        {
          "shape":"NoSuchBucketException",
          "exception":true
        },
        {
          "shape":"ExpiredJobIdException",
          "exception":true
        },
        {
          "shape":"CanceledJobIdException",
          "exception":true
        },
        {
          "shape":"MissingCustomsException",
          "exception":true
        },
        {
          "shape":"InvalidCustomsException",
          "exception":true
        },
        {
          "shape":"InvalidFileSystemException",
          "exception":true
        },
        {
          "shape":"MultipleRegionsException",
          "exception":true
        },
        {
          "shape":"BucketPermissionException",
          "exception":true
        },
        {
          "shape":"MalformedManifestException",
          "exception":true
        }
      ]
    }
  },
  "shapes":{
    "AwsShippingAddress":{"type":"string"},
    "BucketPermissionException":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "exception":true
    },
    "CancelJobInput":{
      "type":"structure",
      "required":["JobId"],
      "members":{
        "JobId":{"shape":"JobId"}
      }
    },
    "CancelJobOutput":{
      "type":"structure",
      "members":{
        "Success":{"shape":"Success"}
      }
    },
    "CanceledJobIdException":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "exception":true
    },
    "Carrier":{"type":"string"},
    "CreateJobInput":{
      "type":"structure",
      "required":[
        "JobType",
        "Manifest",
        "ValidateOnly"
      ],
      "members":{
        "JobType":{"shape":"JobType"},
        "Manifest":{"shape":"Manifest"},
        "ManifestAddendum":{"shape":"ManifestAddendum"},
        "ValidateOnly":{"shape":"ValidateOnly"}
      }
    },
    "CreateJobOutput":{
      "type":"structure",
      "members":{
        "JobId":{"shape":"JobId"},
        "JobType":{"shape":"JobType"},
        "AwsShippingAddress":{"shape":"AwsShippingAddress"},
        "Signature":{"shape":"Signature"},
        "SignatureFileContents":{"shape":"SignatureFileContents"},
        "WarningMessage":{"shape":"WarningMessage"}
      }
    },
    "CreationDate":{"type":"timestamp"},
    "CurrentManifest":{"type":"string"},
    "ErrorCount":{"type":"integer"},
    "ErrorMessage":{"type":"string"},
    "ExpiredJobIdException":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "exception":true
    },
    "GetStatusInput":{
      "type":"structure",
      "required":["JobId"],
      "members":{
        "JobId":{"shape":"JobId"}
      }
    },
    "GetStatusOutput":{
      "type":"structure",
      "members":{
        "JobId":{"shape":"JobId"},
        "JobType":{"shape":"JobType"},
        "AwsShippingAddress":{"shape":"AwsShippingAddress"},
        "LocationCode":{"shape":"LocationCode"},
        "LocationMessage":{"shape":"LocationMessage"},
        "ProgressCode":{"shape":"ProgressCode"},
        "ProgressMessage":{"shape":"ProgressMessage"},
        "Carrier":{"shape":"Carrier"},
        "TrackingNumber":{"shape":"TrackingNumber"},
        "LogBucket":{"shape":"LogBucket"},
        "LogKey":{"shape":"LogKey"},
        "ErrorCount":{"shape":"ErrorCount"},
        "Signature":{"shape":"Signature"},
        "SignatureFileContents":{"shape":"Signature"},
        "CurrentManifest":{"shape":"CurrentManifest"},
        "CreationDate":{"shape":"CreationDate"}
      }
    },
    "InvalidAccessKeyIdException":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "exception":true
    },
    "InvalidAddressException":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "exception":true
    },
    "InvalidCustomsException":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "exception":true
    },
    "InvalidFileSystemException":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "exception":true
    },
    "InvalidJobIdException":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "exception":true
    },
    "InvalidManifestFieldException":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "exception":true
    },
    "InvalidParameterException":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "exception":true
    },
    "IsCanceled":{"type":"boolean"},
    "IsTruncated":{"type":"boolean"},
    "Job":{
      "type":"structure",
      "members":{
        "JobId":{"shape":"JobId"},
        "CreationDate":{"shape":"CreationDate"},
        "IsCanceled":{"shape":"IsCanceled"},
        "JobType":{"shape":"JobType"}
      }
    },
    "JobId":{"type":"string"},
    "JobType":{
      "type":"string",
      "enum":[
        "Import",
        "Export"
      ]
    },
    "JobsList":{
      "type":"list",
      "member":{"shape":"Job"}
    },
    "ListJobsInput":{
      "type":"structure",
      "members":{
        "MaxJobs":{"shape":"MaxJobs"},
        "Marker":{"shape":"Marker"}
      }
    },
    "ListJobsOutput":{
      "type":"structure",
      "members":{
        "Jobs":{"shape":"JobsList"},
        "IsTruncated":{"shape":"IsTruncated"}
      }
    },
    "LocationCode":{"type":"string"},
    "LocationMessage":{"type":"string"},
    "LogBucket":{"type":"string"},
    "LogKey":{"type":"string"},
    "MalformedManifestException":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "exception":true
    },
    "Manifest":{"type":"string"},
    "ManifestAddendum":{"type":"string"},
    "Marker":{"type":"string"},
    "MaxJobs":{"type":"integer"},
    "MissingCustomsException":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "exception":true
    },
    "MissingManifestFieldException":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "exception":true
    },
    "MissingParameterException":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "exception":true
    },
    "MultipleRegionsException":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "exception":true
    },
    "NoSuchBucketException":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "exception":true
    },
    "ProgressCode":{"type":"string"},
    "ProgressMessage":{"type":"string"},
    "Signature":{"type":"string"},
    "SignatureFileContents":{"type":"string"},
    "Success":{"type":"boolean"},
    "TrackingNumber":{"type":"string"},
    "UnableToCancelJobIdException":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "exception":true
    },
    "UpdateJobInput":{
      "type":"structure",
      "required":[
        "JobId",
        "Manifest",
        "JobType",
        "ValidateOnly"
      ],
      "members":{
        "JobId":{"shape":"JobId"},
        "Manifest":{"shape":"Manifest"},
        "JobType":{"shape":"JobType"},
        "ValidateOnly":{"shape":"ValidateOnly"}
      }
    },
    "UpdateJobOutput":{
      "type":"structure",
      "members":{
        "Success":{"shape":"Success"},
        "WarningMessage":{"shape":"WarningMessage"}
      }
    },
    "ValidateOnly":{"type":"boolean"},
    "WarningMessage":{"type":"string"}
  }
}
,
"Kinesis":
{
  "metadata":{
    "apiVersion":"2013-12-02",
    "endpointPrefix":"kinesis",
    "jsonVersion":"1.1",
    "serviceAbbreviation":"Kinesis",
    "serviceFullName":"Amazon Kinesis",
    "signatureVersion":"v4",
    "targetPrefix":"Kinesis_20131202",
    "protocol":"json"
  },
  "operations":{
    "AddTagsToStream":{
      "name":"AddTagsToStream",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"AddTagsToStreamInput"},
      "errors":[
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        },
        {
          "shape":"ResourceInUseException",
          "exception":true
        },
        {
          "shape":"InvalidArgumentException",
          "exception":true
        },
        {
          "shape":"LimitExceededException",
          "exception":true
        }
      ]
    },
    "CreateStream":{
      "name":"CreateStream",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateStreamInput"},
      "errors":[
        {
          "shape":"ResourceInUseException",
          "exception":true
        },
        {
          "shape":"LimitExceededException",
          "exception":true
        },
        {
          "shape":"InvalidArgumentException",
          "exception":true
        }
      ]
    },
    "DeleteStream":{
      "name":"DeleteStream",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteStreamInput"},
      "errors":[
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        },
        {
          "shape":"LimitExceededException",
          "exception":true
        }
      ]
    },
    "DescribeStream":{
      "name":"DescribeStream",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeStreamInput"},
      "output":{"shape":"DescribeStreamOutput"},
      "errors":[
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        },
        {
          "shape":"LimitExceededException",
          "exception":true
        }
      ]
    },
    "GetRecords":{
      "name":"GetRecords",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"GetRecordsInput"},
      "output":{"shape":"GetRecordsOutput"},
      "errors":[
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        },
        {
          "shape":"InvalidArgumentException",
          "exception":true
        },
        {
          "shape":"ProvisionedThroughputExceededException",
          "exception":true
        },
        {
          "shape":"ExpiredIteratorException",
          "exception":true
        }
      ]
    },
    "GetShardIterator":{
      "name":"GetShardIterator",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"GetShardIteratorInput"},
      "output":{"shape":"GetShardIteratorOutput"},
      "errors":[
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        },
        {
          "shape":"InvalidArgumentException",
          "exception":true
        },
        {
          "shape":"ProvisionedThroughputExceededException",
          "exception":true
        }
      ]
    },
    "ListStreams":{
      "name":"ListStreams",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ListStreamsInput"},
      "output":{"shape":"ListStreamsOutput"},
      "errors":[
        {
          "shape":"LimitExceededException",
          "exception":true
        }
      ]
    },
    "ListTagsForStream":{
      "name":"ListTagsForStream",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ListTagsForStreamInput"},
      "output":{"shape":"ListTagsForStreamOutput"},
      "errors":[
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        },
        {
          "shape":"InvalidArgumentException",
          "exception":true
        },
        {
          "shape":"LimitExceededException",
          "exception":true
        }
      ]
    },
    "MergeShards":{
      "name":"MergeShards",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"MergeShardsInput"},
      "errors":[
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        },
        {
          "shape":"ResourceInUseException",
          "exception":true
        },
        {
          "shape":"InvalidArgumentException",
          "exception":true
        },
        {
          "shape":"LimitExceededException",
          "exception":true
        }
      ]
    },
    "PutRecord":{
      "name":"PutRecord",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"PutRecordInput"},
      "output":{"shape":"PutRecordOutput"},
      "errors":[
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        },
        {
          "shape":"InvalidArgumentException",
          "exception":true
        },
        {
          "shape":"ProvisionedThroughputExceededException",
          "exception":true
        }
      ]
    },
    "PutRecords":{
      "name":"PutRecords",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"PutRecordsInput"},
      "output":{"shape":"PutRecordsOutput"},
      "errors":[
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        },
        {
          "shape":"InvalidArgumentException",
          "exception":true
        },
        {
          "shape":"ProvisionedThroughputExceededException",
          "exception":true
        }
      ]
    },
    "RemoveTagsFromStream":{
      "name":"RemoveTagsFromStream",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"RemoveTagsFromStreamInput"},
      "errors":[
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        },
        {
          "shape":"ResourceInUseException",
          "exception":true
        },
        {
          "shape":"InvalidArgumentException",
          "exception":true
        },
        {
          "shape":"LimitExceededException",
          "exception":true
        }
      ]
    },
    "SplitShard":{
      "name":"SplitShard",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"SplitShardInput"},
      "errors":[
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        },
        {
          "shape":"ResourceInUseException",
          "exception":true
        },
        {
          "shape":"InvalidArgumentException",
          "exception":true
        },
        {
          "shape":"LimitExceededException",
          "exception":true
        }
      ]
    }
  },
  "shapes":{
    "AddTagsToStreamInput":{
      "type":"structure",
      "required":[
        "StreamName",
        "Tags"
      ],
      "members":{
        "StreamName":{"shape":"StreamName"},
        "Tags":{"shape":"TagMap"}
      }
    },
    "BooleanObject":{"type":"boolean"},
    "CreateStreamInput":{
      "type":"structure",
      "required":[
        "StreamName",
        "ShardCount"
      ],
      "members":{
        "StreamName":{"shape":"StreamName"},
        "ShardCount":{"shape":"PositiveIntegerObject"}
      }
    },
    "Data":{
      "type":"blob",
      "min":0,
      "max":51200
    },
    "DeleteStreamInput":{
      "type":"structure",
      "required":["StreamName"],
      "members":{
        "StreamName":{"shape":"StreamName"}
      }
    },
    "DescribeStreamInput":{
      "type":"structure",
      "required":["StreamName"],
      "members":{
        "StreamName":{"shape":"StreamName"},
        "Limit":{"shape":"DescribeStreamInputLimit"},
        "ExclusiveStartShardId":{"shape":"ShardId"}
      }
    },
    "DescribeStreamInputLimit":{
      "type":"integer",
      "min":1,
      "max":10000
    },
    "DescribeStreamOutput":{
      "type":"structure",
      "required":["StreamDescription"],
      "members":{
        "StreamDescription":{"shape":"StreamDescription"}
      }
    },
    "ErrorCode":{"type":"string"},
    "ErrorMessage":{"type":"string"},
    "ExpiredIteratorException":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "exception":true
    },
    "GetRecordsInput":{
      "type":"structure",
      "required":["ShardIterator"],
      "members":{
        "ShardIterator":{"shape":"ShardIterator"},
        "Limit":{"shape":"GetRecordsInputLimit"}
      }
    },
    "GetRecordsInputLimit":{
      "type":"integer",
      "min":1,
      "max":10000
    },
    "GetRecordsOutput":{
      "type":"structure",
      "required":["Records"],
      "members":{
        "Records":{"shape":"RecordList"},
        "NextShardIterator":{"shape":"ShardIterator"}
      }
    },
    "GetShardIteratorInput":{
      "type":"structure",
      "required":[
        "StreamName",
        "ShardId",
        "ShardIteratorType"
      ],
      "members":{
        "StreamName":{"shape":"StreamName"},
        "ShardId":{"shape":"ShardId"},
        "ShardIteratorType":{"shape":"ShardIteratorType"},
        "StartingSequenceNumber":{"shape":"SequenceNumber"}
      }
    },
    "GetShardIteratorOutput":{
      "type":"structure",
      "members":{
        "ShardIterator":{"shape":"ShardIterator"}
      }
    },
    "HashKey":{
      "type":"string",
      "pattern":"0|([1-9]\\d{0,38})"
    },
    "HashKeyRange":{
      "type":"structure",
      "required":[
        "StartingHashKey",
        "EndingHashKey"
      ],
      "members":{
        "StartingHashKey":{"shape":"HashKey"},
        "EndingHashKey":{"shape":"HashKey"}
      }
    },
    "InvalidArgumentException":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "exception":true
    },
    "LimitExceededException":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "exception":true
    },
    "ListStreamsInput":{
      "type":"structure",
      "members":{
        "Limit":{"shape":"ListStreamsInputLimit"},
        "ExclusiveStartStreamName":{"shape":"StreamName"}
      }
    },
    "ListStreamsInputLimit":{
      "type":"integer",
      "min":1,
      "max":10000
    },
    "ListStreamsOutput":{
      "type":"structure",
      "required":[
        "StreamNames",
        "HasMoreStreams"
      ],
      "members":{
        "StreamNames":{"shape":"StreamNameList"},
        "HasMoreStreams":{"shape":"BooleanObject"}
      }
    },
    "ListTagsForStreamInput":{
      "type":"structure",
      "required":["StreamName"],
      "members":{
        "StreamName":{"shape":"StreamName"},
        "ExclusiveStartTagKey":{"shape":"TagKey"},
        "Limit":{"shape":"ListTagsForStreamInputLimit"}
      }
    },
    "ListTagsForStreamInputLimit":{
      "type":"integer",
      "min":1,
      "max":10
    },
    "ListTagsForStreamOutput":{
      "type":"structure",
      "required":[
        "Tags",
        "HasMoreTags"
      ],
      "members":{
        "Tags":{"shape":"TagList"},
        "HasMoreTags":{"shape":"BooleanObject"}
      }
    },
    "MergeShardsInput":{
      "type":"structure",
      "required":[
        "StreamName",
        "ShardToMerge",
        "AdjacentShardToMerge"
      ],
      "members":{
        "StreamName":{"shape":"StreamName"},
        "ShardToMerge":{"shape":"ShardId"},
        "AdjacentShardToMerge":{"shape":"ShardId"}
      }
    },
    "PartitionKey":{
      "type":"string",
      "min":1,
      "max":256
    },
    "PositiveIntegerObject":{
      "type":"integer",
      "min":1
    },
    "ProvisionedThroughputExceededException":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "exception":true
    },
    "PutRecordInput":{
      "type":"structure",
      "required":[
        "StreamName",
        "Data",
        "PartitionKey"
      ],
      "members":{
        "StreamName":{"shape":"StreamName"},
        "Data":{"shape":"Data"},
        "PartitionKey":{"shape":"PartitionKey"},
        "ExplicitHashKey":{"shape":"HashKey"},
        "SequenceNumberForOrdering":{"shape":"SequenceNumber"}
      }
    },
    "PutRecordOutput":{
      "type":"structure",
      "required":[
        "ShardId",
        "SequenceNumber"
      ],
      "members":{
        "ShardId":{"shape":"ShardId"},
        "SequenceNumber":{"shape":"SequenceNumber"}
      }
    },
    "PutRecordsInput":{
      "type":"structure",
      "required":[
        "Records",
        "StreamName"
      ],
      "members":{
        "Records":{"shape":"PutRecordsRequestEntryList"},
        "StreamName":{"shape":"StreamName"}
      }
    },
    "PutRecordsOutput":{
      "type":"structure",
      "required":["Records"],
      "members":{
        "FailedRecordCount":{"shape":"PositiveIntegerObject"},
        "Records":{"shape":"PutRecordsResultEntryList"}
      }
    },
    "PutRecordsRequestEntry":{
      "type":"structure",
      "required":[
        "Data",
        "PartitionKey"
      ],
      "members":{
        "Data":{"shape":"Data"},
        "ExplicitHashKey":{"shape":"HashKey"},
        "PartitionKey":{"shape":"PartitionKey"}
      }
    },
    "PutRecordsRequestEntryList":{
      "type":"list",
      "member":{"shape":"PutRecordsRequestEntry"},
      "min":1,
      "max":500
    },
    "PutRecordsResultEntry":{
      "type":"structure",
      "members":{
        "SequenceNumber":{"shape":"SequenceNumber"},
        "ShardId":{"shape":"ShardId"},
        "ErrorCode":{"shape":"ErrorCode"},
        "ErrorMessage":{"shape":"ErrorMessage"}
      }
    },
    "PutRecordsResultEntryList":{
      "type":"list",
      "member":{"shape":"PutRecordsResultEntry"},
      "min":1,
      "max":500
    },
    "Record":{
      "type":"structure",
      "required":[
        "SequenceNumber",
        "Data",
        "PartitionKey"
      ],
      "members":{
        "SequenceNumber":{"shape":"SequenceNumber"},
        "Data":{"shape":"Data"},
        "PartitionKey":{"shape":"PartitionKey"}
      }
    },
    "RecordList":{
      "type":"list",
      "member":{"shape":"Record"}
    },
    "RemoveTagsFromStreamInput":{
      "type":"structure",
      "required":[
        "StreamName",
        "TagKeys"
      ],
      "members":{
        "StreamName":{"shape":"StreamName"},
        "TagKeys":{"shape":"TagKeyList"}
      }
    },
    "ResourceInUseException":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "exception":true
    },
    "ResourceNotFoundException":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "exception":true
    },
    "SequenceNumber":{
      "type":"string",
      "pattern":"0|([1-9]\\d{0,128})"
    },
    "SequenceNumberRange":{
      "type":"structure",
      "required":["StartingSequenceNumber"],
      "members":{
        "StartingSequenceNumber":{"shape":"SequenceNumber"},
        "EndingSequenceNumber":{"shape":"SequenceNumber"}
      }
    },
    "Shard":{
      "type":"structure",
      "required":[
        "ShardId",
        "HashKeyRange",
        "SequenceNumberRange"
      ],
      "members":{
        "ShardId":{"shape":"ShardId"},
        "ParentShardId":{"shape":"ShardId"},
        "AdjacentParentShardId":{"shape":"ShardId"},
        "HashKeyRange":{"shape":"HashKeyRange"},
        "SequenceNumberRange":{"shape":"SequenceNumberRange"}
      }
    },
    "ShardId":{
      "type":"string",
      "min":1,
      "max":128,
      "pattern":"[a-zA-Z0-9_.-]+"
    },
    "ShardIterator":{
      "type":"string",
      "min":1,
      "max":512
    },
    "ShardIteratorType":{
      "type":"string",
      "enum":[
        "AT_SEQUENCE_NUMBER",
        "AFTER_SEQUENCE_NUMBER",
        "TRIM_HORIZON",
        "LATEST"
      ]
    },
    "ShardList":{
      "type":"list",
      "member":{"shape":"Shard"}
    },
    "SplitShardInput":{
      "type":"structure",
      "required":[
        "StreamName",
        "ShardToSplit",
        "NewStartingHashKey"
      ],
      "members":{
        "StreamName":{"shape":"StreamName"},
        "ShardToSplit":{"shape":"ShardId"},
        "NewStartingHashKey":{"shape":"HashKey"}
      }
    },
    "StreamARN":{"type":"string"},
    "StreamDescription":{
      "type":"structure",
      "required":[
        "StreamName",
        "StreamARN",
        "StreamStatus",
        "Shards",
        "HasMoreShards"
      ],
      "members":{
        "StreamName":{"shape":"StreamName"},
        "StreamARN":{"shape":"StreamARN"},
        "StreamStatus":{"shape":"StreamStatus"},
        "Shards":{"shape":"ShardList"},
        "HasMoreShards":{"shape":"BooleanObject"}
      }
    },
    "StreamName":{
      "type":"string",
      "min":1,
      "max":128,
      "pattern":"[a-zA-Z0-9_.-]+"
    },
    "StreamNameList":{
      "type":"list",
      "member":{"shape":"StreamName"}
    },
    "StreamStatus":{
      "type":"string",
      "enum":[
        "CREATING",
        "DELETING",
        "ACTIVE",
        "UPDATING"
      ]
    },
    "Tag":{
      "type":"structure",
      "required":["Key"],
      "members":{
        "Key":{"shape":"TagKey"},
        "Value":{"shape":"TagValue"}
      }
    },
    "TagKey":{
      "type":"string",
      "min":1,
      "max":128
    },
    "TagKeyList":{
      "type":"list",
      "member":{"shape":"TagKey"},
      "min":1,
      "max":10
    },
    "TagList":{
      "type":"list",
      "member":{"shape":"Tag"},
      "min":0
    },
    "TagMap":{
      "type":"map",
      "key":{"shape":"TagKey"},
      "value":{"shape":"TagValue"},
      "min":1,
      "max":10
    },
    "TagValue":{
      "type":"string",
      "min":0,
      "max":256
    }
  }
}
,
"KMS":
{
  "metadata":{
    "apiVersion":"2014-11-01",
    "endpointPrefix":"kms",
    "jsonVersion":"1.1",
    "serviceAbbreviation":"KMS",
    "serviceFullName":"AWS Key Management Service",
    "signatureVersion":"v4",
    "targetPrefix":"TrentService",
    "protocol":"json"
  },
  "operations":{
    "CreateAlias":{
      "name":"CreateAlias",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateAliasRequest"},
      "errors":[
        {
          "shape":"DependencyTimeoutException",
          "error":{
            "code":"DependencyTimeout",
            "httpStatusCode":503
          },
          "exception":true,
          "fault":true
        },
        {
          "shape":"AlreadyExistsException",
          "error":{
            "code":"AlreadyExists",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"NotFoundException",
          "error":{
            "code":"NotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidAliasNameException",
          "error":{
            "code":"InvalidAliasName",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"KMSInternalException",
          "error":{
            "code":"KMSInternal",
            "httpStatusCode":500
          },
          "exception":true
        },
        {
          "shape":"LimitExceededException",
          "error":{
            "code":"LimitExceeded",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "CreateGrant":{
      "name":"CreateGrant",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateGrantRequest"},
      "output":{"shape":"CreateGrantResponse"},
      "errors":[
        {
          "shape":"NotFoundException",
          "error":{
            "code":"NotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"DisabledException",
          "error":{
            "code":"Disabled",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"DependencyTimeoutException",
          "error":{
            "code":"DependencyTimeout",
            "httpStatusCode":503
          },
          "exception":true,
          "fault":true
        },
        {
          "shape":"InvalidArnException",
          "error":{
            "code":"InvalidArn",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"KMSInternalException",
          "error":{
            "code":"KMSInternal",
            "httpStatusCode":500
          },
          "exception":true
        },
        {
          "shape":"InvalidGrantTokenException",
          "error":{
            "code":"InvalidGrantToken",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"LimitExceededException",
          "error":{
            "code":"LimitExceeded",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "CreateKey":{
      "name":"CreateKey",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateKeyRequest"},
      "output":{"shape":"CreateKeyResponse"},
      "errors":[
        {
          "shape":"MalformedPolicyDocumentException",
          "error":{
            "code":"MalformedPolicyDocument",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"DependencyTimeoutException",
          "error":{
            "code":"DependencyTimeout",
            "httpStatusCode":503
          },
          "exception":true,
          "fault":true
        },
        {
          "shape":"InvalidArnException",
          "error":{
            "code":"InvalidArn",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"UnsupportedOperationException",
          "error":{
            "code":"UnsupportedOperation",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"KMSInternalException",
          "error":{
            "code":"KMSInternal",
            "httpStatusCode":500
          },
          "exception":true
        },
        {
          "shape":"LimitExceededException",
          "error":{
            "code":"LimitExceeded",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "Decrypt":{
      "name":"Decrypt",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DecryptRequest"},
      "output":{"shape":"DecryptResponse"},
      "errors":[
        {
          "shape":"NotFoundException",
          "error":{
            "code":"NotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"DisabledException",
          "error":{
            "code":"Disabled",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidCiphertextException",
          "error":{
            "code":"InvalidCiphertext",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"KeyUnavailableException",
          "error":{
            "code":"KeyUnavailable",
            "httpStatusCode":500
          },
          "exception":true,
          "fault":true
        },
        {
          "shape":"DependencyTimeoutException",
          "error":{
            "code":"DependencyTimeout",
            "httpStatusCode":503
          },
          "exception":true,
          "fault":true
        },
        {
          "shape":"InvalidGrantTokenException",
          "error":{
            "code":"InvalidGrantToken",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"KMSInternalException",
          "error":{
            "code":"KMSInternal",
            "httpStatusCode":500
          },
          "exception":true
        }
      ]
    },
    "DeleteAlias":{
      "name":"DeleteAlias",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteAliasRequest"},
      "errors":[
        {
          "shape":"DependencyTimeoutException",
          "error":{
            "code":"DependencyTimeout",
            "httpStatusCode":503
          },
          "exception":true,
          "fault":true
        },
        {
          "shape":"NotFoundException",
          "error":{
            "code":"NotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"KMSInternalException",
          "error":{
            "code":"KMSInternal",
            "httpStatusCode":500
          },
          "exception":true
        }
      ]
    },
    "DescribeKey":{
      "name":"DescribeKey",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeKeyRequest"},
      "output":{"shape":"DescribeKeyResponse"},
      "errors":[
        {
          "shape":"NotFoundException",
          "error":{
            "code":"NotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidArnException",
          "error":{
            "code":"InvalidArn",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"DependencyTimeoutException",
          "error":{
            "code":"DependencyTimeout",
            "httpStatusCode":503
          },
          "exception":true,
          "fault":true
        },
        {
          "shape":"KMSInternalException",
          "error":{
            "code":"KMSInternal",
            "httpStatusCode":500
          },
          "exception":true
        }
      ]
    },
    "DisableKey":{
      "name":"DisableKey",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DisableKeyRequest"},
      "errors":[
        {
          "shape":"NotFoundException",
          "error":{
            "code":"NotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidArnException",
          "error":{
            "code":"InvalidArn",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"DependencyTimeoutException",
          "error":{
            "code":"DependencyTimeout",
            "httpStatusCode":503
          },
          "exception":true,
          "fault":true
        },
        {
          "shape":"KMSInternalException",
          "error":{
            "code":"KMSInternal",
            "httpStatusCode":500
          },
          "exception":true
        }
      ]
    },
    "DisableKeyRotation":{
      "name":"DisableKeyRotation",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DisableKeyRotationRequest"},
      "errors":[
        {
          "shape":"NotFoundException",
          "error":{
            "code":"NotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidArnException",
          "error":{
            "code":"InvalidArn",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"DependencyTimeoutException",
          "error":{
            "code":"DependencyTimeout",
            "httpStatusCode":503
          },
          "exception":true,
          "fault":true
        },
        {
          "shape":"KMSInternalException",
          "error":{
            "code":"KMSInternal",
            "httpStatusCode":500
          },
          "exception":true
        }
      ]
    },
    "EnableKey":{
      "name":"EnableKey",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"EnableKeyRequest"},
      "errors":[
        {
          "shape":"NotFoundException",
          "error":{
            "code":"NotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidArnException",
          "error":{
            "code":"InvalidArn",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"DependencyTimeoutException",
          "error":{
            "code":"DependencyTimeout",
            "httpStatusCode":503
          },
          "exception":true,
          "fault":true
        },
        {
          "shape":"KMSInternalException",
          "error":{
            "code":"KMSInternal",
            "httpStatusCode":500
          },
          "exception":true
        },
        {
          "shape":"LimitExceededException",
          "error":{
            "code":"LimitExceeded",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "EnableKeyRotation":{
      "name":"EnableKeyRotation",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"EnableKeyRotationRequest"},
      "errors":[
        {
          "shape":"NotFoundException",
          "error":{
            "code":"NotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidArnException",
          "error":{
            "code":"InvalidArn",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"DependencyTimeoutException",
          "error":{
            "code":"DependencyTimeout",
            "httpStatusCode":503
          },
          "exception":true,
          "fault":true
        },
        {
          "shape":"KMSInternalException",
          "error":{
            "code":"KMSInternal",
            "httpStatusCode":500
          },
          "exception":true
        }
      ]
    },
    "Encrypt":{
      "name":"Encrypt",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"EncryptRequest"},
      "output":{"shape":"EncryptResponse"},
      "errors":[
        {
          "shape":"NotFoundException",
          "error":{
            "code":"NotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"DisabledException",
          "error":{
            "code":"Disabled",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"KeyUnavailableException",
          "error":{
            "code":"KeyUnavailable",
            "httpStatusCode":500
          },
          "exception":true,
          "fault":true
        },
        {
          "shape":"DependencyTimeoutException",
          "error":{
            "code":"DependencyTimeout",
            "httpStatusCode":503
          },
          "exception":true,
          "fault":true
        },
        {
          "shape":"InvalidKeyUsageException",
          "error":{
            "code":"InvalidKeyUsage",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidGrantTokenException",
          "error":{
            "code":"InvalidGrantToken",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"KMSInternalException",
          "error":{
            "code":"KMSInternal",
            "httpStatusCode":500
          },
          "exception":true
        }
      ]
    },
    "GenerateDataKey":{
      "name":"GenerateDataKey",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"GenerateDataKeyRequest"},
      "output":{"shape":"GenerateDataKeyResponse"},
      "errors":[
        {
          "shape":"NotFoundException",
          "error":{
            "code":"NotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"DisabledException",
          "error":{
            "code":"Disabled",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"KeyUnavailableException",
          "error":{
            "code":"KeyUnavailable",
            "httpStatusCode":500
          },
          "exception":true,
          "fault":true
        },
        {
          "shape":"DependencyTimeoutException",
          "error":{
            "code":"DependencyTimeout",
            "httpStatusCode":503
          },
          "exception":true,
          "fault":true
        },
        {
          "shape":"InvalidKeyUsageException",
          "error":{
            "code":"InvalidKeyUsage",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidGrantTokenException",
          "error":{
            "code":"InvalidGrantToken",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"KMSInternalException",
          "error":{
            "code":"KMSInternal",
            "httpStatusCode":500
          },
          "exception":true
        }
      ]
    },
    "GenerateDataKeyWithoutPlaintext":{
      "name":"GenerateDataKeyWithoutPlaintext",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"GenerateDataKeyWithoutPlaintextRequest"},
      "output":{"shape":"GenerateDataKeyWithoutPlaintextResponse"},
      "errors":[
        {
          "shape":"NotFoundException",
          "error":{
            "code":"NotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"DisabledException",
          "error":{
            "code":"Disabled",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"KeyUnavailableException",
          "error":{
            "code":"KeyUnavailable",
            "httpStatusCode":500
          },
          "exception":true,
          "fault":true
        },
        {
          "shape":"DependencyTimeoutException",
          "error":{
            "code":"DependencyTimeout",
            "httpStatusCode":503
          },
          "exception":true,
          "fault":true
        },
        {
          "shape":"InvalidKeyUsageException",
          "error":{
            "code":"InvalidKeyUsage",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidGrantTokenException",
          "error":{
            "code":"InvalidGrantToken",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"KMSInternalException",
          "error":{
            "code":"KMSInternal",
            "httpStatusCode":500
          },
          "exception":true
        }
      ]
    },
    "GenerateRandom":{
      "name":"GenerateRandom",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"GenerateRandomRequest"},
      "output":{"shape":"GenerateRandomResponse"},
      "errors":[
        {
          "shape":"DependencyTimeoutException",
          "error":{
            "code":"DependencyTimeout",
            "httpStatusCode":503
          },
          "exception":true,
          "fault":true
        },
        {
          "shape":"KMSInternalException",
          "error":{
            "code":"KMSInternal",
            "httpStatusCode":500
          },
          "exception":true
        }
      ]
    },
    "GetKeyPolicy":{
      "name":"GetKeyPolicy",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"GetKeyPolicyRequest"},
      "output":{"shape":"GetKeyPolicyResponse"},
      "errors":[
        {
          "shape":"NotFoundException",
          "error":{
            "code":"NotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidArnException",
          "error":{
            "code":"InvalidArn",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"DependencyTimeoutException",
          "error":{
            "code":"DependencyTimeout",
            "httpStatusCode":503
          },
          "exception":true,
          "fault":true
        },
        {
          "shape":"KMSInternalException",
          "error":{
            "code":"KMSInternal",
            "httpStatusCode":500
          },
          "exception":true
        }
      ]
    },
    "GetKeyRotationStatus":{
      "name":"GetKeyRotationStatus",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"GetKeyRotationStatusRequest"},
      "output":{"shape":"GetKeyRotationStatusResponse"},
      "errors":[
        {
          "shape":"NotFoundException",
          "error":{
            "code":"NotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidArnException",
          "error":{
            "code":"InvalidArn",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"DependencyTimeoutException",
          "error":{
            "code":"DependencyTimeout",
            "httpStatusCode":503
          },
          "exception":true,
          "fault":true
        },
        {
          "shape":"KMSInternalException",
          "error":{
            "code":"KMSInternal",
            "httpStatusCode":500
          },
          "exception":true
        }
      ]
    },
    "ListAliases":{
      "name":"ListAliases",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ListAliasesRequest"},
      "output":{"shape":"ListAliasesResponse"},
      "errors":[
        {
          "shape":"DependencyTimeoutException",
          "error":{
            "code":"DependencyTimeout",
            "httpStatusCode":503
          },
          "exception":true,
          "fault":true
        },
        {
          "shape":"KMSInternalException",
          "error":{
            "code":"KMSInternal",
            "httpStatusCode":500
          },
          "exception":true
        }
      ]
    },
    "ListGrants":{
      "name":"ListGrants",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ListGrantsRequest"},
      "output":{"shape":"ListGrantsResponse"},
      "errors":[
        {
          "shape":"DependencyTimeoutException",
          "error":{
            "code":"DependencyTimeout",
            "httpStatusCode":503
          },
          "exception":true,
          "fault":true
        },
        {
          "shape":"InvalidMarkerException",
          "error":{
            "code":"InvalidMarker",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"KMSInternalException",
          "error":{
            "code":"KMSInternal",
            "httpStatusCode":500
          },
          "exception":true
        }
      ]
    },
    "ListKeyPolicies":{
      "name":"ListKeyPolicies",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ListKeyPoliciesRequest"},
      "output":{"shape":"ListKeyPoliciesResponse"},
      "errors":[
        {
          "shape":"NotFoundException",
          "error":{
            "code":"NotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidArnException",
          "error":{
            "code":"InvalidArn",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"DependencyTimeoutException",
          "error":{
            "code":"DependencyTimeout",
            "httpStatusCode":503
          },
          "exception":true,
          "fault":true
        },
        {
          "shape":"KMSInternalException",
          "error":{
            "code":"KMSInternal",
            "httpStatusCode":500
          },
          "exception":true
        }
      ]
    },
    "ListKeys":{
      "name":"ListKeys",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ListKeysRequest"},
      "output":{"shape":"ListKeysResponse"},
      "errors":[
        {
          "shape":"DependencyTimeoutException",
          "error":{
            "code":"DependencyTimeout",
            "httpStatusCode":503
          },
          "exception":true,
          "fault":true
        },
        {
          "shape":"KMSInternalException",
          "error":{
            "code":"KMSInternal",
            "httpStatusCode":500
          },
          "exception":true
        }
      ]
    },
    "PutKeyPolicy":{
      "name":"PutKeyPolicy",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"PutKeyPolicyRequest"},
      "errors":[
        {
          "shape":"NotFoundException",
          "error":{
            "code":"NotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidArnException",
          "error":{
            "code":"InvalidArn",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"MalformedPolicyDocumentException",
          "error":{
            "code":"MalformedPolicyDocument",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"DependencyTimeoutException",
          "error":{
            "code":"DependencyTimeout",
            "httpStatusCode":503
          },
          "exception":true,
          "fault":true
        },
        {
          "shape":"InvalidArnException",
          "error":{
            "code":"InvalidArn",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"UnsupportedOperationException",
          "error":{
            "code":"UnsupportedOperation",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"KMSInternalException",
          "error":{
            "code":"KMSInternal",
            "httpStatusCode":500
          },
          "exception":true
        },
        {
          "shape":"LimitExceededException",
          "error":{
            "code":"LimitExceeded",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "ReEncrypt":{
      "name":"ReEncrypt",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ReEncryptRequest"},
      "output":{"shape":"ReEncryptResponse"},
      "errors":[
        {
          "shape":"NotFoundException",
          "error":{
            "code":"NotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"DisabledException",
          "error":{
            "code":"Disabled",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidCiphertextException",
          "error":{
            "code":"InvalidCiphertext",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"KeyUnavailableException",
          "error":{
            "code":"KeyUnavailable",
            "httpStatusCode":500
          },
          "exception":true,
          "fault":true
        },
        {
          "shape":"DependencyTimeoutException",
          "error":{
            "code":"DependencyTimeout",
            "httpStatusCode":503
          },
          "exception":true,
          "fault":true
        },
        {
          "shape":"InvalidKeyUsageException",
          "error":{
            "code":"InvalidKeyUsage",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidGrantTokenException",
          "error":{
            "code":"InvalidGrantToken",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"KMSInternalException",
          "error":{
            "code":"KMSInternal",
            "httpStatusCode":500
          },
          "exception":true
        }
      ]
    },
    "RetireGrant":{
      "name":"RetireGrant",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"RetireGrantRequest"},
      "errors":[
        {
          "shape":"InvalidGrantTokenException",
          "error":{
            "code":"InvalidGrantToken",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"DependencyTimeoutException",
          "error":{
            "code":"DependencyTimeout",
            "httpStatusCode":503
          },
          "exception":true,
          "fault":true
        },
        {
          "shape":"KMSInternalException",
          "error":{
            "code":"KMSInternal",
            "httpStatusCode":500
          },
          "exception":true
        }
      ]
    },
    "RevokeGrant":{
      "name":"RevokeGrant",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"RevokeGrantRequest"},
      "errors":[
        {
          "shape":"NotFoundException",
          "error":{
            "code":"NotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"DependencyTimeoutException",
          "error":{
            "code":"DependencyTimeout",
            "httpStatusCode":503
          },
          "exception":true,
          "fault":true
        },
        {
          "shape":"KMSInternalException",
          "error":{
            "code":"KMSInternal",
            "httpStatusCode":500
          },
          "exception":true
        }
      ]
    },
    "UpdateKeyDescription":{
      "name":"UpdateKeyDescription",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"UpdateKeyDescriptionRequest"},
      "errors":[
        {
          "shape":"NotFoundException",
          "error":{
            "code":"NotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidArnException",
          "error":{
            "code":"InvalidArn",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"DependencyTimeoutException",
          "error":{
            "code":"DependencyTimeout",
            "httpStatusCode":503
          },
          "exception":true,
          "fault":true
        },
        {
          "shape":"KMSInternalException",
          "error":{
            "code":"KMSInternal",
            "httpStatusCode":500
          },
          "exception":true
        }
      ]
    }
  },
  "shapes":{
    "AWSAccountIdType":{"type":"string"},
    "AliasList":{
      "type":"list",
      "member":{"shape":"AliasListEntry"}
    },
    "AliasListEntry":{
      "type":"structure",
      "members":{
        "AliasName":{"shape":"AliasNameType"},
        "AliasArn":{"shape":"ArnType"},
        "TargetKeyId":{"shape":"KeyIdType"}
      }
    },
    "AliasNameType":{
      "type":"string",
      "min":1,
      "max":256,
      "pattern":"^[a-zA-Z0-9:/_-]+$"
    },
    "AlreadyExistsException":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessageType"}
      },
      "error":{
        "code":"AlreadyExists",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "ArnType":{
      "type":"string",
      "min":20,
      "max":2048
    },
    "BooleanType":{"type":"boolean"},
    "CiphertextType":{
      "type":"blob",
      "min":1,
      "max":6144
    },
    "CreateAliasRequest":{
      "type":"structure",
      "required":[
        "AliasName",
        "TargetKeyId"
      ],
      "members":{
        "AliasName":{"shape":"AliasNameType"},
        "TargetKeyId":{"shape":"KeyIdType"}
      }
    },
    "CreateGrantRequest":{
      "type":"structure",
      "required":[
        "KeyId",
        "GranteePrincipal"
      ],
      "members":{
        "KeyId":{"shape":"KeyIdType"},
        "GranteePrincipal":{"shape":"PrincipalIdType"},
        "RetiringPrincipal":{"shape":"PrincipalIdType"},
        "Operations":{"shape":"GrantOperationList"},
        "Constraints":{"shape":"GrantConstraints"},
        "GrantTokens":{"shape":"GrantTokenList"}
      }
    },
    "CreateGrantResponse":{
      "type":"structure",
      "members":{
        "GrantToken":{"shape":"GrantTokenType"},
        "GrantId":{"shape":"GrantIdType"}
      }
    },
    "CreateKeyRequest":{
      "type":"structure",
      "members":{
        "Policy":{"shape":"PolicyType"},
        "Description":{"shape":"DescriptionType"},
        "KeyUsage":{"shape":"KeyUsageType"}
      }
    },
    "CreateKeyResponse":{
      "type":"structure",
      "members":{
        "KeyMetadata":{"shape":"KeyMetadata"}
      }
    },
    "DataKeySpec":{
      "type":"string",
      "enum":[
        "AES_256",
        "AES_128"
      ]
    },
    "DateType":{"type":"timestamp"},
    "DecryptRequest":{
      "type":"structure",
      "required":["CiphertextBlob"],
      "members":{
        "CiphertextBlob":{"shape":"CiphertextType"},
        "EncryptionContext":{"shape":"EncryptionContextType"},
        "GrantTokens":{"shape":"GrantTokenList"}
      }
    },
    "DecryptResponse":{
      "type":"structure",
      "members":{
        "KeyId":{"shape":"KeyIdType"},
        "Plaintext":{"shape":"PlaintextType"}
      }
    },
    "DeleteAliasRequest":{
      "type":"structure",
      "required":["AliasName"],
      "members":{
        "AliasName":{"shape":"AliasNameType"}
      }
    },
    "DependencyTimeoutException":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessageType"}
      },
      "error":{
        "code":"DependencyTimeout",
        "httpStatusCode":503
      },
      "exception":true,
      "fault":true
    },
    "DescribeKeyRequest":{
      "type":"structure",
      "required":["KeyId"],
      "members":{
        "KeyId":{"shape":"KeyIdType"}
      }
    },
    "DescribeKeyResponse":{
      "type":"structure",
      "members":{
        "KeyMetadata":{"shape":"KeyMetadata"}
      }
    },
    "DescriptionType":{
      "type":"string",
      "min":0,
      "max":8192
    },
    "DisableKeyRequest":{
      "type":"structure",
      "required":["KeyId"],
      "members":{
        "KeyId":{"shape":"KeyIdType"}
      }
    },
    "DisableKeyRotationRequest":{
      "type":"structure",
      "required":["KeyId"],
      "members":{
        "KeyId":{"shape":"KeyIdType"}
      }
    },
    "DisabledException":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessageType"}
      },
      "error":{
        "code":"Disabled",
        "httpStatusCode":409,
        "senderFault":true
      },
      "exception":true
    },
    "EnableKeyRequest":{
      "type":"structure",
      "required":["KeyId"],
      "members":{
        "KeyId":{"shape":"KeyIdType"}
      }
    },
    "EnableKeyRotationRequest":{
      "type":"structure",
      "required":["KeyId"],
      "members":{
        "KeyId":{"shape":"KeyIdType"}
      }
    },
    "EncryptRequest":{
      "type":"structure",
      "required":[
        "KeyId",
        "Plaintext"
      ],
      "members":{
        "KeyId":{"shape":"KeyIdType"},
        "Plaintext":{"shape":"PlaintextType"},
        "EncryptionContext":{"shape":"EncryptionContextType"},
        "GrantTokens":{"shape":"GrantTokenList"}
      }
    },
    "EncryptResponse":{
      "type":"structure",
      "members":{
        "CiphertextBlob":{"shape":"CiphertextType"},
        "KeyId":{"shape":"KeyIdType"}
      }
    },
    "EncryptionContextKey":{"type":"string"},
    "EncryptionContextType":{
      "type":"map",
      "key":{"shape":"EncryptionContextKey"},
      "value":{"shape":"EncryptionContextValue"}
    },
    "EncryptionContextValue":{"type":"string"},
    "ErrorMessageType":{"type":"string"},
    "GenerateDataKeyRequest":{
      "type":"structure",
      "required":["KeyId"],
      "members":{
        "KeyId":{"shape":"KeyIdType"},
        "EncryptionContext":{"shape":"EncryptionContextType"},
        "NumberOfBytes":{"shape":"NumberOfBytesType"},
        "KeySpec":{"shape":"DataKeySpec"},
        "GrantTokens":{"shape":"GrantTokenList"}
      }
    },
    "GenerateDataKeyResponse":{
      "type":"structure",
      "members":{
        "CiphertextBlob":{"shape":"CiphertextType"},
        "Plaintext":{"shape":"PlaintextType"},
        "KeyId":{"shape":"KeyIdType"}
      }
    },
    "GenerateDataKeyWithoutPlaintextRequest":{
      "type":"structure",
      "required":["KeyId"],
      "members":{
        "KeyId":{"shape":"KeyIdType"},
        "EncryptionContext":{"shape":"EncryptionContextType"},
        "KeySpec":{"shape":"DataKeySpec"},
        "NumberOfBytes":{"shape":"NumberOfBytesType"},
        "GrantTokens":{"shape":"GrantTokenList"}
      }
    },
    "GenerateDataKeyWithoutPlaintextResponse":{
      "type":"structure",
      "members":{
        "CiphertextBlob":{"shape":"CiphertextType"},
        "KeyId":{"shape":"KeyIdType"}
      }
    },
    "GenerateRandomRequest":{
      "type":"structure",
      "members":{
        "NumberOfBytes":{"shape":"NumberOfBytesType"}
      }
    },
    "GenerateRandomResponse":{
      "type":"structure",
      "members":{
        "Plaintext":{"shape":"PlaintextType"}
      }
    },
    "GetKeyPolicyRequest":{
      "type":"structure",
      "required":[
        "KeyId",
        "PolicyName"
      ],
      "members":{
        "KeyId":{"shape":"KeyIdType"},
        "PolicyName":{"shape":"PolicyNameType"}
      }
    },
    "GetKeyPolicyResponse":{
      "type":"structure",
      "members":{
        "Policy":{"shape":"PolicyType"}
      }
    },
    "GetKeyRotationStatusRequest":{
      "type":"structure",
      "required":["KeyId"],
      "members":{
        "KeyId":{"shape":"KeyIdType"}
      }
    },
    "GetKeyRotationStatusResponse":{
      "type":"structure",
      "members":{
        "KeyRotationEnabled":{"shape":"BooleanType"}
      }
    },
    "GrantConstraints":{
      "type":"structure",
      "members":{
        "EncryptionContextSubset":{"shape":"EncryptionContextType"},
        "EncryptionContextEquals":{"shape":"EncryptionContextType"}
      }
    },
    "GrantIdType":{
      "type":"string",
      "min":1,
      "max":128
    },
    "GrantList":{
      "type":"list",
      "member":{"shape":"GrantListEntry"}
    },
    "GrantListEntry":{
      "type":"structure",
      "members":{
        "GrantId":{"shape":"GrantIdType"},
        "GranteePrincipal":{"shape":"PrincipalIdType"},
        "RetiringPrincipal":{"shape":"PrincipalIdType"},
        "IssuingAccount":{"shape":"PrincipalIdType"},
        "Operations":{"shape":"GrantOperationList"},
        "Constraints":{"shape":"GrantConstraints"}
      }
    },
    "GrantOperation":{
      "type":"string",
      "enum":[
        "Decrypt",
        "Encrypt",
        "GenerateDataKey",
        "GenerateDataKeyWithoutPlaintext",
        "ReEncryptFrom",
        "ReEncryptTo",
        "CreateGrant",
        "RetireGrant"
      ]
    },
    "GrantOperationList":{
      "type":"list",
      "member":{"shape":"GrantOperation"}
    },
    "GrantTokenList":{
      "type":"list",
      "member":{"shape":"GrantTokenType"},
      "min":0,
      "max":10
    },
    "GrantTokenType":{
      "type":"string",
      "min":1,
      "max":8192
    },
    "InvalidAliasNameException":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessageType"}
      },
      "error":{
        "code":"InvalidAliasName",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "InvalidArnException":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessageType"}
      },
      "error":{
        "code":"InvalidArn",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "InvalidCiphertextException":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessageType"}
      },
      "error":{
        "code":"InvalidCiphertext",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "InvalidGrantTokenException":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessageType"}
      },
      "error":{
        "code":"InvalidGrantToken",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "InvalidKeyUsageException":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessageType"}
      },
      "error":{
        "code":"InvalidKeyUsage",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "InvalidMarkerException":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessageType"}
      },
      "error":{
        "code":"InvalidMarker",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "KMSInternalException":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessageType"}
      },
      "error":{
        "code":"KMSInternal",
        "httpStatusCode":500
      },
      "exception":true
    },
    "KeyIdType":{
      "type":"string",
      "min":1,
      "max":256
    },
    "KeyList":{
      "type":"list",
      "member":{"shape":"KeyListEntry"}
    },
    "KeyListEntry":{
      "type":"structure",
      "members":{
        "KeyId":{"shape":"KeyIdType"},
        "KeyArn":{"shape":"ArnType"}
      }
    },
    "KeyMetadata":{
      "type":"structure",
      "required":["KeyId"],
      "members":{
        "AWSAccountId":{"shape":"AWSAccountIdType"},
        "KeyId":{"shape":"KeyIdType"},
        "Arn":{"shape":"ArnType"},
        "CreationDate":{"shape":"DateType"},
        "Enabled":{"shape":"BooleanType"},
        "Description":{"shape":"DescriptionType"},
        "KeyUsage":{"shape":"KeyUsageType"}
      }
    },
    "KeyUnavailableException":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessageType"}
      },
      "error":{
        "code":"KeyUnavailable",
        "httpStatusCode":500
      },
      "exception":true,
      "fault":true
    },
    "KeyUsageType":{
      "type":"string",
      "enum":["ENCRYPT_DECRYPT"]
    },
    "LimitExceededException":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessageType"}
      },
      "error":{
        "code":"LimitExceeded",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "LimitType":{
      "type":"integer",
      "min":1,
      "max":1000
    },
    "ListAliasesRequest":{
      "type":"structure",
      "members":{
        "Limit":{"shape":"LimitType"},
        "Marker":{"shape":"MarkerType"}
      }
    },
    "ListAliasesResponse":{
      "type":"structure",
      "members":{
        "Aliases":{"shape":"AliasList"},
        "NextMarker":{"shape":"MarkerType"},
        "Truncated":{"shape":"BooleanType"}
      }
    },
    "ListGrantsRequest":{
      "type":"structure",
      "required":["KeyId"],
      "members":{
        "KeyId":{"shape":"KeyIdType"},
        "Limit":{"shape":"LimitType"},
        "Marker":{"shape":"MarkerType"}
      }
    },
    "ListGrantsResponse":{
      "type":"structure",
      "members":{
        "Grants":{"shape":"GrantList"},
        "NextMarker":{"shape":"MarkerType"},
        "Truncated":{"shape":"BooleanType"}
      }
    },
    "ListKeyPoliciesRequest":{
      "type":"structure",
      "required":["KeyId"],
      "members":{
        "KeyId":{"shape":"KeyIdType"},
        "Limit":{"shape":"LimitType"},
        "Marker":{"shape":"MarkerType"}
      }
    },
    "ListKeyPoliciesResponse":{
      "type":"structure",
      "members":{
        "PolicyNames":{"shape":"PolicyNameList"},
        "NextMarker":{"shape":"MarkerType"},
        "Truncated":{"shape":"BooleanType"}
      }
    },
    "ListKeysRequest":{
      "type":"structure",
      "members":{
        "Limit":{"shape":"LimitType"},
        "Marker":{"shape":"MarkerType"}
      }
    },
    "ListKeysResponse":{
      "type":"structure",
      "members":{
        "Keys":{"shape":"KeyList"},
        "NextMarker":{"shape":"MarkerType"},
        "Truncated":{"shape":"BooleanType"}
      }
    },
    "MalformedPolicyDocumentException":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessageType"}
      },
      "error":{
        "code":"MalformedPolicyDocument",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "MarkerType":{
      "type":"string",
      "min":1,
      "max":320,
      "pattern":"[\\u0020-\\u00FF]*"
    },
    "NotFoundException":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessageType"}
      },
      "error":{
        "code":"NotFound",
        "httpStatusCode":404,
        "senderFault":true
      },
      "exception":true
    },
    "NumberOfBytesType":{
      "type":"integer",
      "min":1,
      "max":1024
    },
    "PlaintextType":{
      "type":"blob",
      "min":1,
      "max":4096,
      "sensitive":true
    },
    "PolicyNameList":{
      "type":"list",
      "member":{"shape":"PolicyNameType"}
    },
    "PolicyNameType":{
      "type":"string",
      "min":1,
      "max":128,
      "pattern":"[\\w]+"
    },
    "PolicyType":{
      "type":"string",
      "min":1,
      "max":131072,
      "pattern":"[\\u0009\\u000A\\u000D\\u0020-\\u00FF]+"
    },
    "PrincipalIdType":{
      "type":"string",
      "min":1,
      "max":256
    },
    "PutKeyPolicyRequest":{
      "type":"structure",
      "required":[
        "KeyId",
        "PolicyName",
        "Policy"
      ],
      "members":{
        "KeyId":{"shape":"KeyIdType"},
        "PolicyName":{"shape":"PolicyNameType"},
        "Policy":{"shape":"PolicyType"}
      }
    },
    "ReEncryptRequest":{
      "type":"structure",
      "required":[
        "CiphertextBlob",
        "DestinationKeyId"
      ],
      "members":{
        "CiphertextBlob":{"shape":"CiphertextType"},
        "SourceEncryptionContext":{"shape":"EncryptionContextType"},
        "DestinationKeyId":{"shape":"KeyIdType"},
        "DestinationEncryptionContext":{"shape":"EncryptionContextType"},
        "GrantTokens":{"shape":"GrantTokenList"}
      }
    },
    "ReEncryptResponse":{
      "type":"structure",
      "members":{
        "CiphertextBlob":{"shape":"CiphertextType"},
        "SourceKeyId":{"shape":"KeyIdType"},
        "KeyId":{"shape":"KeyIdType"}
      }
    },
    "RetireGrantRequest":{
      "type":"structure",
      "required":["GrantToken"],
      "members":{
        "GrantToken":{"shape":"GrantTokenType"}
      }
    },
    "RevokeGrantRequest":{
      "type":"structure",
      "required":[
        "KeyId",
        "GrantId"
      ],
      "members":{
        "KeyId":{"shape":"KeyIdType"},
        "GrantId":{"shape":"GrantIdType"}
      }
    },
    "UnsupportedOperationException":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessageType"}
      },
      "error":{
        "code":"UnsupportedOperation",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "UpdateKeyDescriptionRequest":{
      "type":"structure",
      "required":[
        "KeyId",
        "Description"
      ],
      "members":{
        "KeyId":{"shape":"KeyIdType"},
        "Description":{"shape":"DescriptionType"}
      }
    }
  }
}
,
"Lambda":
{
  "metadata":{
    "apiVersion":"2014-11-11",
    "endpointPrefix":"lambda",
    "serviceFullName":"AWS Lambda",
    "signatureVersion":"v4",
    "protocol":"rest-json"
  },
  "operations":{
    "AddEventSource":{
      "name":"AddEventSource",
      "http":{
        "method":"POST",
        "requestUri":"/2014-11-13/event-source-mappings/"
      },
      "input":{"shape":"AddEventSourceRequest"},
      "output":{"shape":"EventSourceConfiguration"},
      "errors":[
        {
          "shape":"ServiceException",
          "error":{"httpStatusCode":500},
          "exception":true
        },
        {
          "shape":"InvalidParameterValueException",
          "error":{"httpStatusCode":400},
          "exception":true
        }
      ]
    },
    "DeleteFunction":{
      "name":"DeleteFunction",
      "http":{
        "method":"DELETE",
        "requestUri":"/2014-11-13/functions/{FunctionName}",
        "responseCode":204
      },
      "input":{"shape":"DeleteFunctionRequest"},
      "errors":[
        {
          "shape":"ServiceException",
          "error":{"httpStatusCode":500},
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "error":{"httpStatusCode":404},
          "exception":true
        }
      ]
    },
    "GetEventSource":{
      "name":"GetEventSource",
      "http":{
        "method":"GET",
        "requestUri":"/2014-11-13/event-source-mappings/{UUID}",
        "responseCode":200
      },
      "input":{"shape":"GetEventSourceRequest"},
      "output":{"shape":"EventSourceConfiguration"},
      "errors":[
        {
          "shape":"ServiceException",
          "error":{"httpStatusCode":500},
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "error":{"httpStatusCode":404},
          "exception":true
        },
        {
          "shape":"InvalidParameterValueException",
          "error":{"httpStatusCode":400},
          "exception":true
        }
      ]
    },
    "GetFunction":{
      "name":"GetFunction",
      "http":{
        "method":"GET",
        "requestUri":"/2014-11-13/functions/{FunctionName}",
        "responseCode":200
      },
      "input":{"shape":"GetFunctionRequest"},
      "output":{"shape":"GetFunctionResponse"},
      "errors":[
        {
          "shape":"ServiceException",
          "error":{"httpStatusCode":500},
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "error":{"httpStatusCode":404},
          "exception":true
        }
      ]
    },
    "GetFunctionConfiguration":{
      "name":"GetFunctionConfiguration",
      "http":{
        "method":"GET",
        "requestUri":"/2014-11-13/functions/{FunctionName}/configuration",
        "responseCode":200
      },
      "input":{"shape":"GetFunctionConfigurationRequest"},
      "output":{"shape":"FunctionConfiguration"},
      "errors":[
        {
          "shape":"ServiceException",
          "error":{"httpStatusCode":500},
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "error":{"httpStatusCode":404},
          "exception":true
        }
      ]
    },
    "InvokeAsync":{
      "name":"InvokeAsync",
      "http":{
        "method":"POST",
        "requestUri":"/2014-11-13/functions/{FunctionName}/invoke-async/",
        "responseCode":202
      },
      "input":{"shape":"InvokeAsyncRequest"},
      "output":{"shape":"InvokeAsyncResponse"},
      "errors":[
        {
          "shape":"ServiceException",
          "error":{"httpStatusCode":500},
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "error":{"httpStatusCode":404},
          "exception":true
        },
        {
          "shape":"InvalidRequestContentException",
          "error":{"httpStatusCode":400},
          "exception":true
        }
      ]
    },
    "ListEventSources":{
      "name":"ListEventSources",
      "http":{
        "method":"GET",
        "requestUri":"/2014-11-13/event-source-mappings/",
        "responseCode":200
      },
      "input":{"shape":"ListEventSourcesRequest"},
      "output":{"shape":"ListEventSourcesResponse"},
      "errors":[
        {
          "shape":"ServiceException",
          "error":{"httpStatusCode":500},
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "error":{"httpStatusCode":404},
          "exception":true
        },
        {
          "shape":"InvalidParameterValueException",
          "error":{"httpStatusCode":400},
          "exception":true
        }
      ]
    },
    "ListFunctions":{
      "name":"ListFunctions",
      "http":{
        "method":"GET",
        "requestUri":"/2014-11-13/functions/",
        "responseCode":200
      },
      "input":{"shape":"ListFunctionsRequest"},
      "output":{"shape":"ListFunctionsResponse"},
      "errors":[
        {
          "shape":"ServiceException",
          "error":{"httpStatusCode":500},
          "exception":true
        }
      ]
    },
    "RemoveEventSource":{
      "name":"RemoveEventSource",
      "http":{
        "method":"DELETE",
        "requestUri":"/2014-11-13/event-source-mappings/{UUID}",
        "responseCode":204
      },
      "input":{"shape":"RemoveEventSourceRequest"},
      "errors":[
        {
          "shape":"ServiceException",
          "error":{"httpStatusCode":500},
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "error":{"httpStatusCode":404},
          "exception":true
        },
        {
          "shape":"InvalidParameterValueException",
          "error":{"httpStatusCode":400},
          "exception":true
        }
      ]
    },
    "UpdateFunctionConfiguration":{
      "name":"UpdateFunctionConfiguration",
      "http":{
        "method":"PUT",
        "requestUri":"/2014-11-13/functions/{FunctionName}/configuration",
        "responseCode":200
      },
      "input":{"shape":"UpdateFunctionConfigurationRequest"},
      "output":{"shape":"FunctionConfiguration"},
      "errors":[
        {
          "shape":"ServiceException",
          "error":{"httpStatusCode":500},
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "error":{"httpStatusCode":404},
          "exception":true
        },
        {
          "shape":"InvalidParameterValueException",
          "error":{"httpStatusCode":400},
          "exception":true
        }
      ]
    },
    "UploadFunction":{
      "name":"UploadFunction",
      "http":{
        "method":"PUT",
        "requestUri":"/2014-11-13/functions/{FunctionName}",
        "responseCode":201
      },
      "input":{"shape":"UploadFunctionRequest"},
      "output":{"shape":"FunctionConfiguration"},
      "errors":[
        {
          "shape":"ServiceException",
          "error":{"httpStatusCode":500},
          "exception":true
        },
        {
          "shape":"InvalidParameterValueException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "error":{"httpStatusCode":404},
          "exception":true
        }
      ]
    }
  },
  "shapes":{
    "AddEventSourceRequest":{
      "type":"structure",
      "required":[
        "EventSource",
        "FunctionName",
        "Role"
      ],
      "members":{
        "EventSource":{"shape":"String"},
        "FunctionName":{"shape":"FunctionName"},
        "Role":{"shape":"RoleArn"},
        "BatchSize":{"shape":"Integer"},
        "Parameters":{"shape":"Map"}
      }
    },
    "Blob":{
      "type":"blob",
      "streaming":true
    },
    "DeleteFunctionRequest":{
      "type":"structure",
      "required":["FunctionName"],
      "members":{
        "FunctionName":{
          "shape":"FunctionName",
          "location":"uri",
          "locationName":"FunctionName"
        }
      }
    },
    "Description":{
      "type":"string",
      "min":0,
      "max":256
    },
    "EventSourceConfiguration":{
      "type":"structure",
      "members":{
        "UUID":{"shape":"String"},
        "BatchSize":{"shape":"Integer"},
        "EventSource":{"shape":"String"},
        "FunctionName":{"shape":"FunctionName"},
        "Parameters":{"shape":"Map"},
        "Role":{"shape":"RoleArn"},
        "LastModified":{"shape":"Timestamp"},
        "IsActive":{"shape":"Boolean"},
        "Status":{"shape":"String"}
      }
    },
    "EventSourceList":{
      "type":"list",
      "member":{"shape":"EventSourceConfiguration"}
    },
    "FunctionArn":{
      "type":"string",
      "pattern":"arn:aws:lambda:[a-z]{2}-[a-z]+-\\d{1}:\\d{12}:function:[a-zA-Z0-9-]+(\\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})?"
    },
    "FunctionCodeLocation":{
      "type":"structure",
      "members":{
        "RepositoryType":{"shape":"String"},
        "Location":{"shape":"String"}
      }
    },
    "FunctionConfiguration":{
      "type":"structure",
      "members":{
        "FunctionName":{"shape":"FunctionName"},
        "FunctionARN":{"shape":"FunctionArn"},
        "ConfigurationId":{"shape":"String"},
        "Runtime":{"shape":"Runtime"},
        "Role":{"shape":"RoleArn"},
        "Handler":{"shape":"Handler"},
        "Mode":{"shape":"Mode"},
        "CodeSize":{"shape":"Long"},
        "Description":{"shape":"Description"},
        "Timeout":{"shape":"Timeout"},
        "MemorySize":{"shape":"MemorySize"},
        "LastModified":{"shape":"Timestamp"}
      }
    },
    "FunctionList":{
      "type":"list",
      "member":{"shape":"FunctionConfiguration"}
    },
    "FunctionName":{
      "type":"string",
      "min":1,
      "max":64,
      "pattern":"[a-zA-Z0-9-]+"
    },
    "GetEventSourceRequest":{
      "type":"structure",
      "required":["UUID"],
      "members":{
        "UUID":{
          "shape":"String",
          "location":"uri",
          "locationName":"UUID"
        }
      }
    },
    "GetFunctionConfigurationRequest":{
      "type":"structure",
      "required":["FunctionName"],
      "members":{
        "FunctionName":{
          "shape":"FunctionName",
          "location":"uri",
          "locationName":"FunctionName"
        }
      }
    },
    "GetFunctionRequest":{
      "type":"structure",
      "required":["FunctionName"],
      "members":{
        "FunctionName":{
          "shape":"FunctionName",
          "location":"uri",
          "locationName":"FunctionName"
        }
      }
    },
    "GetFunctionResponse":{
      "type":"structure",
      "members":{
        "Configuration":{"shape":"FunctionConfiguration"},
        "Code":{"shape":"FunctionCodeLocation"}
      }
    },
    "Handler":{
      "type":"string",
      "pattern":"[a-zA-Z0-9./\\-_]+"
    },
    "HttpStatus":{"type":"integer"},
    "Integer":{"type":"integer"},
    "InvalidParameterValueException":{
      "type":"structure",
      "members":{
        "Type":{"shape":"String"},
        "message":{"shape":"String"}
      },
      "error":{"httpStatusCode":400},
      "exception":true
    },
    "InvalidRequestContentException":{
      "type":"structure",
      "members":{
        "Type":{"shape":"String"},
        "message":{"shape":"String"}
      },
      "error":{"httpStatusCode":400},
      "exception":true
    },
    "InvokeAsyncRequest":{
      "type":"structure",
      "required":[
        "FunctionName",
        "InvokeArgs"
      ],
      "members":{
        "FunctionName":{
          "shape":"FunctionName",
          "location":"uri",
          "locationName":"FunctionName"
        },
        "InvokeArgs":{"shape":"Blob"}
      },
      "payload":"InvokeArgs"
    },
    "InvokeAsyncResponse":{
      "type":"structure",
      "members":{
        "Status":{
          "shape":"HttpStatus",
          "location":"statusCode"
        }
      }
    },
    "ListEventSourcesRequest":{
      "type":"structure",
      "members":{
        "EventSourceArn":{
          "shape":"String",
          "location":"querystring",
          "locationName":"EventSource"
        },
        "FunctionName":{
          "shape":"FunctionName",
          "location":"querystring",
          "locationName":"FunctionName"
        },
        "Marker":{
          "shape":"String",
          "location":"querystring",
          "locationName":"Marker"
        },
        "MaxItems":{
          "shape":"MaxListItems",
          "location":"querystring",
          "locationName":"MaxItems"
        }
      }
    },
    "ListEventSourcesResponse":{
      "type":"structure",
      "members":{
        "NextMarker":{"shape":"String"},
        "EventSources":{"shape":"EventSourceList"}
      }
    },
    "ListFunctionsRequest":{
      "type":"structure",
      "members":{
        "Marker":{
          "shape":"String",
          "location":"querystring",
          "locationName":"Marker"
        },
        "MaxItems":{
          "shape":"MaxListItems",
          "location":"querystring",
          "locationName":"MaxItems"
        }
      }
    },
    "ListFunctionsResponse":{
      "type":"structure",
      "members":{
        "NextMarker":{"shape":"String"},
        "Functions":{"shape":"FunctionList"}
      }
    },
    "Long":{"type":"long"},
    "Map":{
      "type":"map",
      "key":{"shape":"String"},
      "value":{"shape":"String"}
    },
    "MaxListItems":{
      "type":"integer",
      "min":1,
      "max":10000
    },
    "MemorySize":{
      "type":"integer",
      "min":64,
      "max":1024
    },
    "Mode":{
      "type":"string",
      "enum":["event"]
    },
    "RemoveEventSourceRequest":{
      "type":"structure",
      "required":["UUID"],
      "members":{
        "UUID":{
          "shape":"String",
          "location":"uri",
          "locationName":"UUID"
        }
      }
    },
    "ResourceNotFoundException":{
      "type":"structure",
      "members":{
        "Type":{"shape":"String"},
        "Message":{"shape":"String"}
      },
      "error":{"httpStatusCode":404},
      "exception":true
    },
    "RoleArn":{
      "type":"string",
      "pattern":"arn:aws:iam::\\d{12}:role/?[a-zA-Z_0-9+=,.@\\-_]+"
    },
    "Runtime":{
      "type":"string",
      "enum":["nodejs"]
    },
    "ServiceException":{
      "type":"structure",
      "members":{
        "Type":{"shape":"String"},
        "Message":{"shape":"String"}
      },
      "error":{"httpStatusCode":500},
      "exception":true
    },
    "String":{"type":"string"},
    "Timeout":{
      "type":"integer",
      "min":1,
      "max":60
    },
    "Timestamp":{"type":"timestamp"},
    "UpdateFunctionConfigurationRequest":{
      "type":"structure",
      "required":["FunctionName"],
      "members":{
        "FunctionName":{
          "shape":"FunctionName",
          "location":"uri",
          "locationName":"FunctionName"
        },
        "Role":{
          "shape":"RoleArn",
          "location":"querystring",
          "locationName":"Role"
        },
        "Handler":{
          "shape":"Handler",
          "location":"querystring",
          "locationName":"Handler"
        },
        "Description":{
          "shape":"Description",
          "location":"querystring",
          "locationName":"Description"
        },
        "Timeout":{
          "shape":"Timeout",
          "location":"querystring",
          "locationName":"Timeout"
        },
        "MemorySize":{
          "shape":"MemorySize",
          "location":"querystring",
          "locationName":"MemorySize"
        }
      }
    },
    "UploadFunctionRequest":{
      "type":"structure",
      "required":[
        "FunctionName",
        "FunctionZip",
        "Runtime",
        "Role",
        "Handler",
        "Mode"
      ],
      "members":{
        "FunctionName":{
          "shape":"FunctionName",
          "location":"uri",
          "locationName":"FunctionName"
        },
        "FunctionZip":{"shape":"Blob"},
        "Runtime":{
          "shape":"Runtime",
          "location":"querystring",
          "locationName":"Runtime"
        },
        "Role":{
          "shape":"RoleArn",
          "location":"querystring",
          "locationName":"Role"
        },
        "Handler":{
          "shape":"Handler",
          "location":"querystring",
          "locationName":"Handler"
        },
        "Mode":{
          "shape":"Mode",
          "location":"querystring",
          "locationName":"Mode"
        },
        "Description":{
          "shape":"Description",
          "location":"querystring",
          "locationName":"Description"
        },
        "Timeout":{
          "shape":"Timeout",
          "location":"querystring",
          "locationName":"Timeout"
        },
        "MemorySize":{
          "shape":"MemorySize",
          "location":"querystring",
          "locationName":"MemorySize"
        }
      },
      "payload":"FunctionZip"
    },
    "Boolean":{"type":"boolean"}
  }
}
,
"OpsWorks":
{
  "metadata":{
    "apiVersion":"2013-02-18",
    "endpointPrefix":"opsworks",
    "jsonVersion":"1.1",
    "serviceFullName":"AWS OpsWorks",
    "signatureVersion":"v4",
    "targetPrefix":"OpsWorks_20130218",
    "protocol":"json"
  },
  "operations":{
    "AssignInstance":{
      "name":"AssignInstance",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"AssignInstanceRequest"},
      "errors":[
        {
          "shape":"ValidationException",
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        }
      ]
    },
    "AssignVolume":{
      "name":"AssignVolume",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"AssignVolumeRequest"},
      "errors":[
        {
          "shape":"ValidationException",
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        }
      ]
    },
    "AssociateElasticIp":{
      "name":"AssociateElasticIp",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"AssociateElasticIpRequest"},
      "errors":[
        {
          "shape":"ValidationException",
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        }
      ]
    },
    "AttachElasticLoadBalancer":{
      "name":"AttachElasticLoadBalancer",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"AttachElasticLoadBalancerRequest"},
      "errors":[
        {
          "shape":"ValidationException",
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        }
      ]
    },
    "CloneStack":{
      "name":"CloneStack",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CloneStackRequest"},
      "output":{"shape":"CloneStackResult"},
      "errors":[
        {
          "shape":"ValidationException",
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        }
      ]
    },
    "CreateApp":{
      "name":"CreateApp",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateAppRequest"},
      "output":{"shape":"CreateAppResult"},
      "errors":[
        {
          "shape":"ValidationException",
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        }
      ]
    },
    "CreateDeployment":{
      "name":"CreateDeployment",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateDeploymentRequest"},
      "output":{"shape":"CreateDeploymentResult"},
      "errors":[
        {
          "shape":"ValidationException",
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        }
      ]
    },
    "CreateInstance":{
      "name":"CreateInstance",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateInstanceRequest"},
      "output":{"shape":"CreateInstanceResult"},
      "errors":[
        {
          "shape":"ValidationException",
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        }
      ]
    },
    "CreateLayer":{
      "name":"CreateLayer",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateLayerRequest"},
      "output":{"shape":"CreateLayerResult"},
      "errors":[
        {
          "shape":"ValidationException",
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        }
      ]
    },
    "CreateStack":{
      "name":"CreateStack",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateStackRequest"},
      "output":{"shape":"CreateStackResult"},
      "errors":[
        {
          "shape":"ValidationException",
          "exception":true
        }
      ]
    },
    "CreateUserProfile":{
      "name":"CreateUserProfile",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateUserProfileRequest"},
      "output":{"shape":"CreateUserProfileResult"},
      "errors":[
        {
          "shape":"ValidationException",
          "exception":true
        }
      ]
    },
    "DeleteApp":{
      "name":"DeleteApp",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteAppRequest"},
      "errors":[
        {
          "shape":"ValidationException",
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        }
      ]
    },
    "DeleteInstance":{
      "name":"DeleteInstance",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteInstanceRequest"},
      "errors":[
        {
          "shape":"ValidationException",
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        }
      ]
    },
    "DeleteLayer":{
      "name":"DeleteLayer",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteLayerRequest"},
      "errors":[
        {
          "shape":"ValidationException",
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        }
      ]
    },
    "DeleteStack":{
      "name":"DeleteStack",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteStackRequest"},
      "errors":[
        {
          "shape":"ValidationException",
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        }
      ]
    },
    "DeleteUserProfile":{
      "name":"DeleteUserProfile",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteUserProfileRequest"},
      "errors":[
        {
          "shape":"ValidationException",
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        }
      ]
    },
    "DeregisterElasticIp":{
      "name":"DeregisterElasticIp",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeregisterElasticIpRequest"},
      "errors":[
        {
          "shape":"ValidationException",
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        }
      ]
    },
    "DeregisterInstance":{
      "name":"DeregisterInstance",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeregisterInstanceRequest"},
      "errors":[
        {
          "shape":"ValidationException",
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        }
      ]
    },
    "DeregisterRdsDbInstance":{
      "name":"DeregisterRdsDbInstance",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeregisterRdsDbInstanceRequest"},
      "errors":[
        {
          "shape":"ValidationException",
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        }
      ]
    },
    "DeregisterVolume":{
      "name":"DeregisterVolume",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeregisterVolumeRequest"},
      "errors":[
        {
          "shape":"ValidationException",
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        }
      ]
    },
    "DescribeApps":{
      "name":"DescribeApps",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeAppsRequest"},
      "output":{"shape":"DescribeAppsResult"},
      "errors":[
        {
          "shape":"ValidationException",
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        }
      ]
    },
    "DescribeCommands":{
      "name":"DescribeCommands",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeCommandsRequest"},
      "output":{"shape":"DescribeCommandsResult"},
      "errors":[
        {
          "shape":"ValidationException",
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        }
      ]
    },
    "DescribeDeployments":{
      "name":"DescribeDeployments",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeDeploymentsRequest"},
      "output":{"shape":"DescribeDeploymentsResult"},
      "errors":[
        {
          "shape":"ValidationException",
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        }
      ]
    },
    "DescribeElasticIps":{
      "name":"DescribeElasticIps",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeElasticIpsRequest"},
      "output":{"shape":"DescribeElasticIpsResult"},
      "errors":[
        {
          "shape":"ValidationException",
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        }
      ]
    },
    "DescribeElasticLoadBalancers":{
      "name":"DescribeElasticLoadBalancers",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeElasticLoadBalancersRequest"},
      "output":{"shape":"DescribeElasticLoadBalancersResult"},
      "errors":[
        {
          "shape":"ValidationException",
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        }
      ]
    },
    "DescribeInstances":{
      "name":"DescribeInstances",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeInstancesRequest"},
      "output":{"shape":"DescribeInstancesResult"},
      "errors":[
        {
          "shape":"ValidationException",
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        }
      ]
    },
    "DescribeLayers":{
      "name":"DescribeLayers",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeLayersRequest"},
      "output":{"shape":"DescribeLayersResult"},
      "errors":[
        {
          "shape":"ValidationException",
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        }
      ]
    },
    "DescribeLoadBasedAutoScaling":{
      "name":"DescribeLoadBasedAutoScaling",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeLoadBasedAutoScalingRequest"},
      "output":{"shape":"DescribeLoadBasedAutoScalingResult"},
      "errors":[
        {
          "shape":"ValidationException",
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        }
      ]
    },
    "DescribeMyUserProfile":{
      "name":"DescribeMyUserProfile",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "output":{"shape":"DescribeMyUserProfileResult"}
    },
    "DescribePermissions":{
      "name":"DescribePermissions",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribePermissionsRequest"},
      "output":{"shape":"DescribePermissionsResult"},
      "errors":[
        {
          "shape":"ValidationException",
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        }
      ]
    },
    "DescribeRaidArrays":{
      "name":"DescribeRaidArrays",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeRaidArraysRequest"},
      "output":{"shape":"DescribeRaidArraysResult"},
      "errors":[
        {
          "shape":"ValidationException",
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        }
      ]
    },
    "DescribeRdsDbInstances":{
      "name":"DescribeRdsDbInstances",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeRdsDbInstancesRequest"},
      "output":{"shape":"DescribeRdsDbInstancesResult"},
      "errors":[
        {
          "shape":"ValidationException",
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        }
      ]
    },
    "DescribeServiceErrors":{
      "name":"DescribeServiceErrors",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeServiceErrorsRequest"},
      "output":{"shape":"DescribeServiceErrorsResult"},
      "errors":[
        {
          "shape":"ValidationException",
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        }
      ]
    },
    "DescribeStackProvisioningParameters":{
      "name":"DescribeStackProvisioningParameters",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeStackProvisioningParametersRequest"},
      "output":{"shape":"DescribeStackProvisioningParametersResult"},
      "errors":[
        {
          "shape":"ValidationException",
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        }
      ]
    },
    "DescribeStackSummary":{
      "name":"DescribeStackSummary",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeStackSummaryRequest"},
      "output":{"shape":"DescribeStackSummaryResult"},
      "errors":[
        {
          "shape":"ValidationException",
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        }
      ]
    },
    "DescribeStacks":{
      "name":"DescribeStacks",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeStacksRequest"},
      "output":{"shape":"DescribeStacksResult"},
      "errors":[
        {
          "shape":"ValidationException",
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        }
      ]
    },
    "DescribeTimeBasedAutoScaling":{
      "name":"DescribeTimeBasedAutoScaling",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeTimeBasedAutoScalingRequest"},
      "output":{"shape":"DescribeTimeBasedAutoScalingResult"},
      "errors":[
        {
          "shape":"ValidationException",
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        }
      ]
    },
    "DescribeUserProfiles":{
      "name":"DescribeUserProfiles",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeUserProfilesRequest"},
      "output":{"shape":"DescribeUserProfilesResult"},
      "errors":[
        {
          "shape":"ValidationException",
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        }
      ]
    },
    "DescribeVolumes":{
      "name":"DescribeVolumes",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeVolumesRequest"},
      "output":{"shape":"DescribeVolumesResult"},
      "errors":[
        {
          "shape":"ValidationException",
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        }
      ]
    },
    "DetachElasticLoadBalancer":{
      "name":"DetachElasticLoadBalancer",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DetachElasticLoadBalancerRequest"},
      "errors":[
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        }
      ]
    },
    "DisassociateElasticIp":{
      "name":"DisassociateElasticIp",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DisassociateElasticIpRequest"},
      "errors":[
        {
          "shape":"ValidationException",
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        }
      ]
    },
    "GetHostnameSuggestion":{
      "name":"GetHostnameSuggestion",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"GetHostnameSuggestionRequest"},
      "output":{"shape":"GetHostnameSuggestionResult"},
      "errors":[
        {
          "shape":"ValidationException",
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        }
      ]
    },
    "RebootInstance":{
      "name":"RebootInstance",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"RebootInstanceRequest"},
      "errors":[
        {
          "shape":"ValidationException",
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        }
      ]
    },
    "RegisterElasticIp":{
      "name":"RegisterElasticIp",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"RegisterElasticIpRequest"},
      "output":{"shape":"RegisterElasticIpResult"},
      "errors":[
        {
          "shape":"ValidationException",
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        }
      ]
    },
    "RegisterInstance":{
      "name":"RegisterInstance",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"RegisterInstanceRequest"},
      "output":{"shape":"RegisterInstanceResult"},
      "errors":[
        {
          "shape":"ValidationException",
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        }
      ]
    },
    "RegisterRdsDbInstance":{
      "name":"RegisterRdsDbInstance",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"RegisterRdsDbInstanceRequest"},
      "errors":[
        {
          "shape":"ValidationException",
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        }
      ]
    },
    "RegisterVolume":{
      "name":"RegisterVolume",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"RegisterVolumeRequest"},
      "output":{"shape":"RegisterVolumeResult"},
      "errors":[
        {
          "shape":"ValidationException",
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        }
      ]
    },
    "SetLoadBasedAutoScaling":{
      "name":"SetLoadBasedAutoScaling",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"SetLoadBasedAutoScalingRequest"},
      "errors":[
        {
          "shape":"ValidationException",
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        }
      ]
    },
    "SetPermission":{
      "name":"SetPermission",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"SetPermissionRequest"},
      "errors":[
        {
          "shape":"ValidationException",
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        }
      ]
    },
    "SetTimeBasedAutoScaling":{
      "name":"SetTimeBasedAutoScaling",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"SetTimeBasedAutoScalingRequest"},
      "errors":[
        {
          "shape":"ValidationException",
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        }
      ]
    },
    "StartInstance":{
      "name":"StartInstance",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"StartInstanceRequest"},
      "errors":[
        {
          "shape":"ValidationException",
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        }
      ]
    },
    "StartStack":{
      "name":"StartStack",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"StartStackRequest"},
      "errors":[
        {
          "shape":"ValidationException",
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        }
      ]
    },
    "StopInstance":{
      "name":"StopInstance",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"StopInstanceRequest"},
      "errors":[
        {
          "shape":"ValidationException",
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        }
      ]
    },
    "StopStack":{
      "name":"StopStack",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"StopStackRequest"},
      "errors":[
        {
          "shape":"ValidationException",
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        }
      ]
    },
    "UnassignInstance":{
      "name":"UnassignInstance",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"UnassignInstanceRequest"},
      "errors":[
        {
          "shape":"ValidationException",
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        }
      ]
    },
    "UnassignVolume":{
      "name":"UnassignVolume",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"UnassignVolumeRequest"},
      "errors":[
        {
          "shape":"ValidationException",
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        }
      ]
    },
    "UpdateApp":{
      "name":"UpdateApp",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"UpdateAppRequest"},
      "errors":[
        {
          "shape":"ValidationException",
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        }
      ]
    },
    "UpdateElasticIp":{
      "name":"UpdateElasticIp",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"UpdateElasticIpRequest"},
      "errors":[
        {
          "shape":"ValidationException",
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        }
      ]
    },
    "UpdateInstance":{
      "name":"UpdateInstance",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"UpdateInstanceRequest"},
      "errors":[
        {
          "shape":"ValidationException",
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        }
      ]
    },
    "UpdateLayer":{
      "name":"UpdateLayer",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"UpdateLayerRequest"},
      "errors":[
        {
          "shape":"ValidationException",
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        }
      ]
    },
    "UpdateMyUserProfile":{
      "name":"UpdateMyUserProfile",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"UpdateMyUserProfileRequest"},
      "errors":[
        {
          "shape":"ValidationException",
          "exception":true
        }
      ]
    },
    "UpdateRdsDbInstance":{
      "name":"UpdateRdsDbInstance",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"UpdateRdsDbInstanceRequest"},
      "errors":[
        {
          "shape":"ValidationException",
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        }
      ]
    },
    "UpdateStack":{
      "name":"UpdateStack",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"UpdateStackRequest"},
      "errors":[
        {
          "shape":"ValidationException",
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        }
      ]
    },
    "UpdateUserProfile":{
      "name":"UpdateUserProfile",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"UpdateUserProfileRequest"},
      "errors":[
        {
          "shape":"ValidationException",
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        }
      ]
    },
    "UpdateVolume":{
      "name":"UpdateVolume",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"UpdateVolumeRequest"},
      "errors":[
        {
          "shape":"ValidationException",
          "exception":true
        },
        {
          "shape":"ResourceNotFoundException",
          "exception":true
        }
      ]
    }
  },
  "shapes":{
    "App":{
      "type":"structure",
      "members":{
        "AppId":{"shape":"String"},
        "StackId":{"shape":"String"},
        "Shortname":{"shape":"String"},
        "Name":{"shape":"String"},
        "Description":{"shape":"String"},
        "DataSources":{"shape":"DataSources"},
        "Type":{"shape":"AppType"},
        "AppSource":{"shape":"Source"},
        "Domains":{"shape":"Strings"},
        "EnableSsl":{"shape":"Boolean"},
        "SslConfiguration":{"shape":"SslConfiguration"},
        "Attributes":{"shape":"AppAttributes"},
        "CreatedAt":{"shape":"String"},
        "Environment":{"shape":"EnvironmentVariables"}
      }
    },
    "AppAttributes":{
      "type":"map",
      "key":{"shape":"AppAttributesKeys"},
      "value":{"shape":"String"}
    },
    "AppAttributesKeys":{
      "type":"string",
      "enum":[
        "DocumentRoot",
        "RailsEnv",
        "AutoBundleOnDeploy"
      ]
    },
    "AppType":{
      "type":"string",
      "enum":[
        "java",
        "rails",
        "php",
        "nodejs",
        "static",
        "other"
      ]
    },
    "Apps":{
      "type":"list",
      "member":{"shape":"App"}
    },
    "Architecture":{
      "type":"string",
      "enum":[
        "x86_64",
        "i386"
      ]
    },
    "AssignInstanceRequest":{
      "type":"structure",
      "required":[
        "InstanceId",
        "LayerIds"
      ],
      "members":{
        "InstanceId":{"shape":"String"},
        "LayerIds":{"shape":"Strings"}
      }
    },
    "AssignVolumeRequest":{
      "type":"structure",
      "required":["VolumeId"],
      "members":{
        "VolumeId":{"shape":"String"},
        "InstanceId":{"shape":"String"}
      }
    },
    "AssociateElasticIpRequest":{
      "type":"structure",
      "required":["ElasticIp"],
      "members":{
        "ElasticIp":{"shape":"String"},
        "InstanceId":{"shape":"String"}
      }
    },
    "AttachElasticLoadBalancerRequest":{
      "type":"structure",
      "required":[
        "ElasticLoadBalancerName",
        "LayerId"
      ],
      "members":{
        "ElasticLoadBalancerName":{"shape":"String"},
        "LayerId":{"shape":"String"}
      }
    },
    "AutoScalingThresholds":{
      "type":"structure",
      "members":{
        "InstanceCount":{"shape":"Integer"},
        "ThresholdsWaitTime":{"shape":"Minute"},
        "IgnoreMetricsTime":{"shape":"Minute"},
        "CpuThreshold":{"shape":"Double"},
        "MemoryThreshold":{"shape":"Double"},
        "LoadThreshold":{"shape":"Double"}
      }
    },
    "AutoScalingType":{
      "type":"string",
      "enum":[
        "load",
        "timer"
      ]
    },
    "Boolean":{
      "type":"boolean",
      "box":true
    },
    "ChefConfiguration":{
      "type":"structure",
      "members":{
        "ManageBerkshelf":{"shape":"Boolean"},
        "BerkshelfVersion":{"shape":"String"}
      }
    },
    "CloneStackRequest":{
      "type":"structure",
      "required":[
        "SourceStackId",
        "ServiceRoleArn"
      ],
      "members":{
        "SourceStackId":{"shape":"String"},
        "Name":{"shape":"String"},
        "Region":{"shape":"String"},
        "VpcId":{"shape":"String"},
        "Attributes":{"shape":"StackAttributes"},
        "ServiceRoleArn":{"shape":"String"},
        "DefaultInstanceProfileArn":{"shape":"String"},
        "DefaultOs":{"shape":"String"},
        "HostnameTheme":{"shape":"String"},
        "DefaultAvailabilityZone":{"shape":"String"},
        "DefaultSubnetId":{"shape":"String"},
        "CustomJson":{"shape":"String"},
        "ConfigurationManager":{"shape":"StackConfigurationManager"},
        "ChefConfiguration":{"shape":"ChefConfiguration"},
        "UseCustomCookbooks":{"shape":"Boolean"},
        "UseOpsworksSecurityGroups":{"shape":"Boolean"},
        "CustomCookbooksSource":{"shape":"Source"},
        "DefaultSshKeyName":{"shape":"String"},
        "ClonePermissions":{"shape":"Boolean"},
        "CloneAppIds":{"shape":"Strings"},
        "DefaultRootDeviceType":{"shape":"RootDeviceType"}
      }
    },
    "CloneStackResult":{
      "type":"structure",
      "members":{
        "StackId":{"shape":"String"}
      }
    },
    "Command":{
      "type":"structure",
      "members":{
        "CommandId":{"shape":"String"},
        "InstanceId":{"shape":"String"},
        "DeploymentId":{"shape":"String"},
        "CreatedAt":{"shape":"DateTime"},
        "AcknowledgedAt":{"shape":"DateTime"},
        "CompletedAt":{"shape":"DateTime"},
        "Status":{"shape":"String"},
        "ExitCode":{"shape":"Integer"},
        "LogUrl":{"shape":"String"},
        "Type":{"shape":"String"}
      }
    },
    "Commands":{
      "type":"list",
      "member":{"shape":"Command"}
    },
    "CreateAppRequest":{
      "type":"structure",
      "required":[
        "StackId",
        "Name",
        "Type"
      ],
      "members":{
        "StackId":{"shape":"String"},
        "Shortname":{"shape":"String"},
        "Name":{"shape":"String"},
        "Description":{"shape":"String"},
        "DataSources":{"shape":"DataSources"},
        "Type":{"shape":"AppType"},
        "AppSource":{"shape":"Source"},
        "Domains":{"shape":"Strings"},
        "EnableSsl":{"shape":"Boolean"},
        "SslConfiguration":{"shape":"SslConfiguration"},
        "Attributes":{"shape":"AppAttributes"},
        "Environment":{"shape":"EnvironmentVariables"}
      }
    },
    "CreateAppResult":{
      "type":"structure",
      "members":{
        "AppId":{"shape":"String"}
      }
    },
    "CreateDeploymentRequest":{
      "type":"structure",
      "required":[
        "StackId",
        "Command"
      ],
      "members":{
        "StackId":{"shape":"String"},
        "AppId":{"shape":"String"},
        "InstanceIds":{"shape":"Strings"},
        "Command":{"shape":"DeploymentCommand"},
        "Comment":{"shape":"String"},
        "CustomJson":{"shape":"String"}
      }
    },
    "CreateDeploymentResult":{
      "type":"structure",
      "members":{
        "DeploymentId":{"shape":"String"}
      }
    },
    "CreateInstanceRequest":{
      "type":"structure",
      "required":[
        "StackId",
        "LayerIds",
        "InstanceType"
      ],
      "members":{
        "StackId":{"shape":"String"},
        "LayerIds":{"shape":"Strings"},
        "InstanceType":{"shape":"String"},
        "AutoScalingType":{"shape":"AutoScalingType"},
        "Hostname":{"shape":"String"},
        "Os":{"shape":"String"},
        "AmiId":{"shape":"String"},
        "SshKeyName":{"shape":"String"},
        "AvailabilityZone":{"shape":"String"},
        "VirtualizationType":{"shape":"String"},
        "SubnetId":{"shape":"String"},
        "Architecture":{"shape":"Architecture"},
        "RootDeviceType":{"shape":"RootDeviceType"},
        "InstallUpdatesOnBoot":{"shape":"Boolean"},
        "EbsOptimized":{"shape":"Boolean"}
      }
    },
    "CreateInstanceResult":{
      "type":"structure",
      "members":{
        "InstanceId":{"shape":"String"}
      }
    },
    "CreateLayerRequest":{
      "type":"structure",
      "required":[
        "StackId",
        "Type",
        "Name",
        "Shortname"
      ],
      "members":{
        "StackId":{"shape":"String"},
        "Type":{"shape":"LayerType"},
        "Name":{"shape":"String"},
        "Shortname":{"shape":"String"},
        "Attributes":{"shape":"LayerAttributes"},
        "CustomInstanceProfileArn":{"shape":"String"},
        "CustomSecurityGroupIds":{"shape":"Strings"},
        "Packages":{"shape":"Strings"},
        "VolumeConfigurations":{"shape":"VolumeConfigurations"},
        "EnableAutoHealing":{"shape":"Boolean"},
        "AutoAssignElasticIps":{"shape":"Boolean"},
        "AutoAssignPublicIps":{"shape":"Boolean"},
        "CustomRecipes":{"shape":"Recipes"},
        "InstallUpdatesOnBoot":{"shape":"Boolean"},
        "UseEbsOptimizedInstances":{"shape":"Boolean"},
        "LifecycleEventConfiguration":{"shape":"LifecycleEventConfiguration"}
      }
    },
    "CreateLayerResult":{
      "type":"structure",
      "members":{
        "LayerId":{"shape":"String"}
      }
    },
    "CreateStackRequest":{
      "type":"structure",
      "required":[
        "Name",
        "Region",
        "ServiceRoleArn",
        "DefaultInstanceProfileArn"
      ],
      "members":{
        "Name":{"shape":"String"},
        "Region":{"shape":"String"},
        "VpcId":{"shape":"String"},
        "Attributes":{"shape":"StackAttributes"},
        "ServiceRoleArn":{"shape":"String"},
        "DefaultInstanceProfileArn":{"shape":"String"},
        "DefaultOs":{"shape":"String"},
        "HostnameTheme":{"shape":"String"},
        "DefaultAvailabilityZone":{"shape":"String"},
        "DefaultSubnetId":{"shape":"String"},
        "CustomJson":{"shape":"String"},
        "ConfigurationManager":{"shape":"StackConfigurationManager"},
        "ChefConfiguration":{"shape":"ChefConfiguration"},
        "UseCustomCookbooks":{"shape":"Boolean"},
        "UseOpsworksSecurityGroups":{"shape":"Boolean"},
        "CustomCookbooksSource":{"shape":"Source"},
        "DefaultSshKeyName":{"shape":"String"},
        "DefaultRootDeviceType":{"shape":"RootDeviceType"}
      }
    },
    "CreateStackResult":{
      "type":"structure",
      "members":{
        "StackId":{"shape":"String"}
      }
    },
    "CreateUserProfileRequest":{
      "type":"structure",
      "required":["IamUserArn"],
      "members":{
        "IamUserArn":{"shape":"String"},
        "SshUsername":{"shape":"String"},
        "SshPublicKey":{"shape":"String"},
        "AllowSelfManagement":{"shape":"Boolean"}
      }
    },
    "CreateUserProfileResult":{
      "type":"structure",
      "members":{
        "IamUserArn":{"shape":"String"}
      }
    },
    "DailyAutoScalingSchedule":{
      "type":"map",
      "key":{"shape":"Hour"},
      "value":{"shape":"Switch"}
    },
    "DataSource":{
      "type":"structure",
      "members":{
        "Type":{"shape":"String"},
        "Arn":{"shape":"String"},
        "DatabaseName":{"shape":"String"}
      }
    },
    "DataSources":{
      "type":"list",
      "member":{"shape":"DataSource"}
    },
    "DateTime":{"type":"string"},
    "DeleteAppRequest":{
      "type":"structure",
      "required":["AppId"],
      "members":{
        "AppId":{"shape":"String"}
      }
    },
    "DeleteInstanceRequest":{
      "type":"structure",
      "required":["InstanceId"],
      "members":{
        "InstanceId":{"shape":"String"},
        "DeleteElasticIp":{"shape":"Boolean"},
        "DeleteVolumes":{"shape":"Boolean"}
      }
    },
    "DeleteLayerRequest":{
      "type":"structure",
      "required":["LayerId"],
      "members":{
        "LayerId":{"shape":"String"}
      }
    },
    "DeleteStackRequest":{
      "type":"structure",
      "required":["StackId"],
      "members":{
        "StackId":{"shape":"String"}
      }
    },
    "DeleteUserProfileRequest":{
      "type":"structure",
      "required":["IamUserArn"],
      "members":{
        "IamUserArn":{"shape":"String"}
      }
    },
    "Deployment":{
      "type":"structure",
      "members":{
        "DeploymentId":{"shape":"String"},
        "StackId":{"shape":"String"},
        "AppId":{"shape":"String"},
        "CreatedAt":{"shape":"DateTime"},
        "CompletedAt":{"shape":"DateTime"},
        "Duration":{"shape":"Integer"},
        "IamUserArn":{"shape":"String"},
        "Comment":{"shape":"String"},
        "Command":{"shape":"DeploymentCommand"},
        "Status":{"shape":"String"},
        "CustomJson":{"shape":"String"},
        "InstanceIds":{"shape":"Strings"}
      }
    },
    "DeploymentCommand":{
      "type":"structure",
      "required":["Name"],
      "members":{
        "Name":{"shape":"DeploymentCommandName"},
        "Args":{"shape":"DeploymentCommandArgs"}
      }
    },
    "DeploymentCommandArgs":{
      "type":"map",
      "key":{"shape":"String"},
      "value":{"shape":"Strings"}
    },
    "DeploymentCommandName":{
      "type":"string",
      "enum":[
        "install_dependencies",
        "update_dependencies",
        "update_custom_cookbooks",
        "execute_recipes",
        "deploy",
        "rollback",
        "start",
        "stop",
        "restart",
        "undeploy"
      ]
    },
    "Deployments":{
      "type":"list",
      "member":{"shape":"Deployment"}
    },
    "DeregisterElasticIpRequest":{
      "type":"structure",
      "required":["ElasticIp"],
      "members":{
        "ElasticIp":{"shape":"String"}
      }
    },
    "DeregisterInstanceRequest":{
      "type":"structure",
      "required":["InstanceId"],
      "members":{
        "InstanceId":{"shape":"String"}
      }
    },
    "DeregisterRdsDbInstanceRequest":{
      "type":"structure",
      "required":["RdsDbInstanceArn"],
      "members":{
        "RdsDbInstanceArn":{"shape":"String"}
      }
    },
    "DeregisterVolumeRequest":{
      "type":"structure",
      "required":["VolumeId"],
      "members":{
        "VolumeId":{"shape":"String"}
      }
    },
    "DescribeAppsRequest":{
      "type":"structure",
      "members":{
        "StackId":{"shape":"String"},
        "AppIds":{"shape":"Strings"}
      }
    },
    "DescribeAppsResult":{
      "type":"structure",
      "members":{
        "Apps":{"shape":"Apps"}
      }
    },
    "DescribeCommandsRequest":{
      "type":"structure",
      "members":{
        "DeploymentId":{"shape":"String"},
        "InstanceId":{"shape":"String"},
        "CommandIds":{"shape":"Strings"}
      }
    },
    "DescribeCommandsResult":{
      "type":"structure",
      "members":{
        "Commands":{"shape":"Commands"}
      }
    },
    "DescribeDeploymentsRequest":{
      "type":"structure",
      "members":{
        "StackId":{"shape":"String"},
        "AppId":{"shape":"String"},
        "DeploymentIds":{"shape":"Strings"}
      }
    },
    "DescribeDeploymentsResult":{
      "type":"structure",
      "members":{
        "Deployments":{"shape":"Deployments"}
      }
    },
    "DescribeElasticIpsRequest":{
      "type":"structure",
      "members":{
        "InstanceId":{"shape":"String"},
        "StackId":{"shape":"String"},
        "Ips":{"shape":"Strings"}
      }
    },
    "DescribeElasticIpsResult":{
      "type":"structure",
      "members":{
        "ElasticIps":{"shape":"ElasticIps"}
      }
    },
    "DescribeElasticLoadBalancersRequest":{
      "type":"structure",
      "members":{
        "StackId":{"shape":"String"},
        "LayerIds":{"shape":"Strings"}
      }
    },
    "DescribeElasticLoadBalancersResult":{
      "type":"structure",
      "members":{
        "ElasticLoadBalancers":{"shape":"ElasticLoadBalancers"}
      }
    },
    "DescribeInstancesRequest":{
      "type":"structure",
      "members":{
        "StackId":{"shape":"String"},
        "LayerId":{"shape":"String"},
        "InstanceIds":{"shape":"Strings"}
      }
    },
    "DescribeInstancesResult":{
      "type":"structure",
      "members":{
        "Instances":{"shape":"Instances"}
      }
    },
    "DescribeLayersRequest":{
      "type":"structure",
      "members":{
        "StackId":{"shape":"String"},
        "LayerIds":{"shape":"Strings"}
      }
    },
    "DescribeLayersResult":{
      "type":"structure",
      "members":{
        "Layers":{"shape":"Layers"}
      }
    },
    "DescribeLoadBasedAutoScalingRequest":{
      "type":"structure",
      "required":["LayerIds"],
      "members":{
        "LayerIds":{"shape":"Strings"}
      }
    },
    "DescribeLoadBasedAutoScalingResult":{
      "type":"structure",
      "members":{
        "LoadBasedAutoScalingConfigurations":{"shape":"LoadBasedAutoScalingConfigurations"}
      }
    },
    "DescribeMyUserProfileResult":{
      "type":"structure",
      "members":{
        "UserProfile":{"shape":"SelfUserProfile"}
      }
    },
    "DescribePermissionsRequest":{
      "type":"structure",
      "members":{
        "IamUserArn":{"shape":"String"},
        "StackId":{"shape":"String"}
      }
    },
    "DescribePermissionsResult":{
      "type":"structure",
      "members":{
        "Permissions":{"shape":"Permissions"}
      }
    },
    "DescribeRaidArraysRequest":{
      "type":"structure",
      "members":{
        "InstanceId":{"shape":"String"},
        "StackId":{"shape":"String"},
        "RaidArrayIds":{"shape":"Strings"}
      }
    },
    "DescribeRaidArraysResult":{
      "type":"structure",
      "members":{
        "RaidArrays":{"shape":"RaidArrays"}
      }
    },
    "DescribeRdsDbInstancesRequest":{
      "type":"structure",
      "required":["StackId"],
      "members":{
        "StackId":{"shape":"String"},
        "RdsDbInstanceArns":{"shape":"Strings"}
      }
    },
    "DescribeRdsDbInstancesResult":{
      "type":"structure",
      "members":{
        "RdsDbInstances":{"shape":"RdsDbInstances"}
      }
    },
    "DescribeServiceErrorsRequest":{
      "type":"structure",
      "members":{
        "StackId":{"shape":"String"},
        "InstanceId":{"shape":"String"},
        "ServiceErrorIds":{"shape":"Strings"}
      }
    },
    "DescribeServiceErrorsResult":{
      "type":"structure",
      "members":{
        "ServiceErrors":{"shape":"ServiceErrors"}
      }
    },
    "DescribeStackProvisioningParametersRequest":{
      "type":"structure",
      "required":["StackId"],
      "members":{
        "StackId":{"shape":"String"}
      }
    },
    "DescribeStackProvisioningParametersResult":{
      "type":"structure",
      "members":{
        "AgentInstallerUrl":{"shape":"String"},
        "Parameters":{"shape":"Parameters"}
      }
    },
    "DescribeStackSummaryRequest":{
      "type":"structure",
      "required":["StackId"],
      "members":{
        "StackId":{"shape":"String"}
      }
    },
    "DescribeStackSummaryResult":{
      "type":"structure",
      "members":{
        "StackSummary":{"shape":"StackSummary"}
      }
    },
    "DescribeStacksRequest":{
      "type":"structure",
      "members":{
        "StackIds":{"shape":"Strings"}
      }
    },
    "DescribeStacksResult":{
      "type":"structure",
      "members":{
        "Stacks":{"shape":"Stacks"}
      }
    },
    "DescribeTimeBasedAutoScalingRequest":{
      "type":"structure",
      "required":["InstanceIds"],
      "members":{
        "InstanceIds":{"shape":"Strings"}
      }
    },
    "DescribeTimeBasedAutoScalingResult":{
      "type":"structure",
      "members":{
        "TimeBasedAutoScalingConfigurations":{"shape":"TimeBasedAutoScalingConfigurations"}
      }
    },
    "DescribeUserProfilesRequest":{
      "type":"structure",
      "members":{
        "IamUserArns":{"shape":"Strings"}
      }
    },
    "DescribeUserProfilesResult":{
      "type":"structure",
      "members":{
        "UserProfiles":{"shape":"UserProfiles"}
      }
    },
    "DescribeVolumesRequest":{
      "type":"structure",
      "members":{
        "InstanceId":{"shape":"String"},
        "StackId":{"shape":"String"},
        "RaidArrayId":{"shape":"String"},
        "VolumeIds":{"shape":"Strings"}
      }
    },
    "DescribeVolumesResult":{
      "type":"structure",
      "members":{
        "Volumes":{"shape":"Volumes"}
      }
    },
    "DetachElasticLoadBalancerRequest":{
      "type":"structure",
      "required":[
        "ElasticLoadBalancerName",
        "LayerId"
      ],
      "members":{
        "ElasticLoadBalancerName":{"shape":"String"},
        "LayerId":{"shape":"String"}
      }
    },
    "DisassociateElasticIpRequest":{
      "type":"structure",
      "required":["ElasticIp"],
      "members":{
        "ElasticIp":{"shape":"String"}
      }
    },
    "Double":{
      "type":"double",
      "box":true
    },
    "ElasticIp":{
      "type":"structure",
      "members":{
        "Ip":{"shape":"String"},
        "Name":{"shape":"String"},
        "Domain":{"shape":"String"},
        "Region":{"shape":"String"},
        "InstanceId":{"shape":"String"}
      }
    },
    "ElasticIps":{
      "type":"list",
      "member":{"shape":"ElasticIp"}
    },
    "ElasticLoadBalancer":{
      "type":"structure",
      "members":{
        "ElasticLoadBalancerName":{"shape":"String"},
        "Region":{"shape":"String"},
        "DnsName":{"shape":"String"},
        "StackId":{"shape":"String"},
        "LayerId":{"shape":"String"},
        "VpcId":{"shape":"String"},
        "AvailabilityZones":{"shape":"Strings"},
        "SubnetIds":{"shape":"Strings"},
        "Ec2InstanceIds":{"shape":"Strings"}
      }
    },
    "ElasticLoadBalancers":{
      "type":"list",
      "member":{"shape":"ElasticLoadBalancer"}
    },
    "EnvironmentVariable":{
      "type":"structure",
      "required":[
        "Key",
        "Value"
      ],
      "members":{
        "Key":{"shape":"String"},
        "Value":{"shape":"String"},
        "Secure":{"shape":"Boolean"}
      }
    },
    "EnvironmentVariables":{
      "type":"list",
      "member":{"shape":"EnvironmentVariable"}
    },
    "GetHostnameSuggestionRequest":{
      "type":"structure",
      "required":["LayerId"],
      "members":{
        "LayerId":{"shape":"String"}
      }
    },
    "GetHostnameSuggestionResult":{
      "type":"structure",
      "members":{
        "LayerId":{"shape":"String"},
        "Hostname":{"shape":"String"}
      }
    },
    "Hour":{"type":"string"},
    "Instance":{
      "type":"structure",
      "members":{
        "InstanceId":{"shape":"String"},
        "Ec2InstanceId":{"shape":"String"},
        "VirtualizationType":{"shape":"VirtualizationType"},
        "Hostname":{"shape":"String"},
        "StackId":{"shape":"String"},
        "LayerIds":{"shape":"Strings"},
        "SecurityGroupIds":{"shape":"Strings"},
        "InstanceType":{"shape":"String"},
        "InstanceProfileArn":{"shape":"String"},
        "Status":{"shape":"String"},
        "Os":{"shape":"String"},
        "AmiId":{"shape":"String"},
        "AvailabilityZone":{"shape":"String"},
        "SubnetId":{"shape":"String"},
        "PublicDns":{"shape":"String"},
        "PrivateDns":{"shape":"String"},
        "PublicIp":{"shape":"String"},
        "PrivateIp":{"shape":"String"},
        "ElasticIp":{"shape":"String"},
        "AutoScalingType":{"shape":"AutoScalingType"},
        "SshKeyName":{"shape":"String"},
        "SshHostRsaKeyFingerprint":{"shape":"String"},
        "SshHostDsaKeyFingerprint":{"shape":"String"},
        "CreatedAt":{"shape":"DateTime"},
        "LastServiceErrorId":{"shape":"String"},
        "Architecture":{"shape":"Architecture"},
        "RootDeviceType":{"shape":"RootDeviceType"},
        "RootDeviceVolumeId":{"shape":"String"},
        "InstallUpdatesOnBoot":{"shape":"Boolean"},
        "EbsOptimized":{"shape":"Boolean"},
        "ReportedOs":{"shape":"ReportedOs"},
        "InfrastructureClass":{"shape":"String"},
        "RegisteredBy":{"shape":"String"}
      }
    },
    "InstanceIdentity":{
      "type":"structure",
      "members":{
        "Document":{"shape":"String"},
        "Signature":{"shape":"String"}
      }
    },
    "Instances":{
      "type":"list",
      "member":{"shape":"Instance"}
    },
    "InstancesCount":{
      "type":"structure",
      "members":{
        "Assigning":{"shape":"Integer"},
        "Booting":{"shape":"Integer"},
        "ConnectionLost":{"shape":"Integer"},
        "Deregistering":{"shape":"Integer"},
        "Online":{"shape":"Integer"},
        "Pending":{"shape":"Integer"},
        "Rebooting":{"shape":"Integer"},
        "Registered":{"shape":"Integer"},
        "Registering":{"shape":"Integer"},
        "Requested":{"shape":"Integer"},
        "RunningSetup":{"shape":"Integer"},
        "SetupFailed":{"shape":"Integer"},
        "ShuttingDown":{"shape":"Integer"},
        "StartFailed":{"shape":"Integer"},
        "Stopped":{"shape":"Integer"},
        "Stopping":{"shape":"Integer"},
        "Terminated":{"shape":"Integer"},
        "Terminating":{"shape":"Integer"},
        "Unassigning":{"shape":"Integer"}
      }
    },
    "Integer":{
      "type":"integer",
      "box":true
    },
    "Layer":{
      "type":"structure",
      "members":{
        "StackId":{"shape":"String"},
        "LayerId":{"shape":"String"},
        "Type":{"shape":"LayerType"},
        "Name":{"shape":"String"},
        "Shortname":{"shape":"String"},
        "Attributes":{"shape":"LayerAttributes"},
        "CustomInstanceProfileArn":{"shape":"String"},
        "CustomSecurityGroupIds":{"shape":"Strings"},
        "DefaultSecurityGroupNames":{"shape":"Strings"},
        "Packages":{"shape":"Strings"},
        "VolumeConfigurations":{"shape":"VolumeConfigurations"},
        "EnableAutoHealing":{"shape":"Boolean"},
        "AutoAssignElasticIps":{"shape":"Boolean"},
        "AutoAssignPublicIps":{"shape":"Boolean"},
        "DefaultRecipes":{"shape":"Recipes"},
        "CustomRecipes":{"shape":"Recipes"},
        "CreatedAt":{"shape":"DateTime"},
        "InstallUpdatesOnBoot":{"shape":"Boolean"},
        "UseEbsOptimizedInstances":{"shape":"Boolean"},
        "LifecycleEventConfiguration":{"shape":"LifecycleEventConfiguration"}
      }
    },
    "LayerAttributes":{
      "type":"map",
      "key":{"shape":"LayerAttributesKeys"},
      "value":{"shape":"String"}
    },
    "LayerAttributesKeys":{
      "type":"string",
      "enum":[
        "EnableHaproxyStats",
        "HaproxyStatsUrl",
        "HaproxyStatsUser",
        "HaproxyStatsPassword",
        "HaproxyHealthCheckUrl",
        "HaproxyHealthCheckMethod",
        "MysqlRootPassword",
        "MysqlRootPasswordUbiquitous",
        "GangliaUrl",
        "GangliaUser",
        "GangliaPassword",
        "MemcachedMemory",
        "NodejsVersion",
        "RubyVersion",
        "RubygemsVersion",
        "ManageBundler",
        "BundlerVersion",
        "RailsStack",
        "PassengerVersion",
        "Jvm",
        "JvmVersion",
        "JvmOptions",
        "JavaAppServer",
        "JavaAppServerVersion"
      ]
    },
    "LayerType":{
      "type":"string",
      "enum":[
        "java-app",
        "lb",
        "web",
        "php-app",
        "rails-app",
        "nodejs-app",
        "memcached",
        "db-master",
        "monitoring-master",
        "custom"
      ]
    },
    "Layers":{
      "type":"list",
      "member":{"shape":"Layer"}
    },
    "LifecycleEventConfiguration":{
      "type":"structure",
      "members":{
        "Shutdown":{"shape":"ShutdownEventConfiguration"}
      }
    },
    "LoadBasedAutoScalingConfiguration":{
      "type":"structure",
      "members":{
        "LayerId":{"shape":"String"},
        "Enable":{"shape":"Boolean"},
        "UpScaling":{"shape":"AutoScalingThresholds"},
        "DownScaling":{"shape":"AutoScalingThresholds"}
      }
    },
    "LoadBasedAutoScalingConfigurations":{
      "type":"list",
      "member":{"shape":"LoadBasedAutoScalingConfiguration"}
    },
    "Minute":{
      "type":"integer",
      "min":1,
      "max":100,
      "box":true
    },
    "Parameters":{
      "type":"map",
      "key":{"shape":"String"},
      "value":{"shape":"String"}
    },
    "Permission":{
      "type":"structure",
      "members":{
        "StackId":{"shape":"String"},
        "IamUserArn":{"shape":"String"},
        "AllowSsh":{"shape":"Boolean"},
        "AllowSudo":{"shape":"Boolean"},
        "Level":{"shape":"String"}
      }
    },
    "Permissions":{
      "type":"list",
      "member":{"shape":"Permission"}
    },
    "RaidArray":{
      "type":"structure",
      "members":{
        "RaidArrayId":{"shape":"String"},
        "InstanceId":{"shape":"String"},
        "Name":{"shape":"String"},
        "RaidLevel":{"shape":"Integer"},
        "NumberOfDisks":{"shape":"Integer"},
        "Size":{"shape":"Integer"},
        "Device":{"shape":"String"},
        "MountPoint":{"shape":"String"},
        "AvailabilityZone":{"shape":"String"},
        "CreatedAt":{"shape":"DateTime"},
        "StackId":{"shape":"String"},
        "VolumeType":{"shape":"String"},
        "Iops":{"shape":"Integer"}
      }
    },
    "RaidArrays":{
      "type":"list",
      "member":{"shape":"RaidArray"}
    },
    "RdsDbInstance":{
      "type":"structure",
      "members":{
        "RdsDbInstanceArn":{"shape":"String"},
        "DbInstanceIdentifier":{"shape":"String"},
        "DbUser":{"shape":"String"},
        "DbPassword":{"shape":"String"},
        "Region":{"shape":"String"},
        "Address":{"shape":"String"},
        "Engine":{"shape":"String"},
        "StackId":{"shape":"String"},
        "MissingOnRds":{"shape":"Boolean"}
      }
    },
    "RdsDbInstances":{
      "type":"list",
      "member":{"shape":"RdsDbInstance"}
    },
    "RebootInstanceRequest":{
      "type":"structure",
      "required":["InstanceId"],
      "members":{
        "InstanceId":{"shape":"String"}
      }
    },
    "Recipes":{
      "type":"structure",
      "members":{
        "Setup":{"shape":"Strings"},
        "Configure":{"shape":"Strings"},
        "Deploy":{"shape":"Strings"},
        "Undeploy":{"shape":"Strings"},
        "Shutdown":{"shape":"Strings"}
      }
    },
    "RegisterElasticIpRequest":{
      "type":"structure",
      "required":[
        "ElasticIp",
        "StackId"
      ],
      "members":{
        "ElasticIp":{"shape":"String"},
        "StackId":{"shape":"String"}
      }
    },
    "RegisterElasticIpResult":{
      "type":"structure",
      "members":{
        "ElasticIp":{"shape":"String"}
      }
    },
    "RegisterInstanceRequest":{
      "type":"structure",
      "required":["StackId"],
      "members":{
        "StackId":{"shape":"String"},
        "Hostname":{"shape":"String"},
        "PublicIp":{"shape":"String"},
        "PrivateIp":{"shape":"String"},
        "RsaPublicKey":{"shape":"String"},
        "RsaPublicKeyFingerprint":{"shape":"String"},
        "InstanceIdentity":{"shape":"InstanceIdentity"}
      }
    },
    "RegisterInstanceResult":{
      "type":"structure",
      "members":{
        "InstanceId":{"shape":"String"}
      }
    },
    "RegisterRdsDbInstanceRequest":{
      "type":"structure",
      "required":[
        "StackId",
        "RdsDbInstanceArn",
        "DbUser",
        "DbPassword"
      ],
      "members":{
        "StackId":{"shape":"String"},
        "RdsDbInstanceArn":{"shape":"String"},
        "DbUser":{"shape":"String"},
        "DbPassword":{"shape":"String"}
      }
    },
    "RegisterVolumeRequest":{
      "type":"structure",
      "required":["StackId"],
      "members":{
        "Ec2VolumeId":{"shape":"String"},
        "StackId":{"shape":"String"}
      }
    },
    "RegisterVolumeResult":{
      "type":"structure",
      "members":{
        "VolumeId":{"shape":"String"}
      }
    },
    "ReportedOs":{
      "type":"structure",
      "members":{
        "Family":{"shape":"String"},
        "Name":{"shape":"String"},
        "Version":{"shape":"String"}
      }
    },
    "ResourceNotFoundException":{
      "type":"structure",
      "members":{
        "message":{"shape":"String"}
      },
      "exception":true
    },
    "RootDeviceType":{
      "type":"string",
      "enum":[
        "ebs",
        "instance-store"
      ]
    },
    "SelfUserProfile":{
      "type":"structure",
      "members":{
        "IamUserArn":{"shape":"String"},
        "Name":{"shape":"String"},
        "SshUsername":{"shape":"String"},
        "SshPublicKey":{"shape":"String"}
      }
    },
    "ServiceError":{
      "type":"structure",
      "members":{
        "ServiceErrorId":{"shape":"String"},
        "StackId":{"shape":"String"},
        "InstanceId":{"shape":"String"},
        "Type":{"shape":"String"},
        "Message":{"shape":"String"},
        "CreatedAt":{"shape":"DateTime"}
      }
    },
    "ServiceErrors":{
      "type":"list",
      "member":{"shape":"ServiceError"}
    },
    "SetLoadBasedAutoScalingRequest":{
      "type":"structure",
      "required":["LayerId"],
      "members":{
        "LayerId":{"shape":"String"},
        "Enable":{"shape":"Boolean"},
        "UpScaling":{"shape":"AutoScalingThresholds"},
        "DownScaling":{"shape":"AutoScalingThresholds"}
      }
    },
    "SetPermissionRequest":{
      "type":"structure",
      "required":[
        "StackId",
        "IamUserArn"
      ],
      "members":{
        "StackId":{"shape":"String"},
        "IamUserArn":{"shape":"String"},
        "AllowSsh":{"shape":"Boolean"},
        "AllowSudo":{"shape":"Boolean"},
        "Level":{"shape":"String"}
      }
    },
    "SetTimeBasedAutoScalingRequest":{
      "type":"structure",
      "required":["InstanceId"],
      "members":{
        "InstanceId":{"shape":"String"},
        "AutoScalingSchedule":{"shape":"WeeklyAutoScalingSchedule"}
      }
    },
    "ShutdownEventConfiguration":{
      "type":"structure",
      "members":{
        "ExecutionTimeout":{"shape":"Integer"},
        "DelayUntilElbConnectionsDrained":{"shape":"Boolean"}
      }
    },
    "Source":{
      "type":"structure",
      "members":{
        "Type":{"shape":"SourceType"},
        "Url":{"shape":"String"},
        "Username":{"shape":"String"},
        "Password":{"shape":"String"},
        "SshKey":{"shape":"String"},
        "Revision":{"shape":"String"}
      }
    },
    "SourceType":{
      "type":"string",
      "enum":[
        "git",
        "svn",
        "archive",
        "s3"
      ]
    },
    "SslConfiguration":{
      "type":"structure",
      "required":[
        "Certificate",
        "PrivateKey"
      ],
      "members":{
        "Certificate":{"shape":"String"},
        "PrivateKey":{"shape":"String"},
        "Chain":{"shape":"String"}
      }
    },
    "Stack":{
      "type":"structure",
      "members":{
        "StackId":{"shape":"String"},
        "Name":{"shape":"String"},
        "Arn":{"shape":"String"},
        "Region":{"shape":"String"},
        "VpcId":{"shape":"String"},
        "Attributes":{"shape":"StackAttributes"},
        "ServiceRoleArn":{"shape":"String"},
        "DefaultInstanceProfileArn":{"shape":"String"},
        "DefaultOs":{"shape":"String"},
        "HostnameTheme":{"shape":"String"},
        "DefaultAvailabilityZone":{"shape":"String"},
        "DefaultSubnetId":{"shape":"String"},
        "CustomJson":{"shape":"String"},
        "ConfigurationManager":{"shape":"StackConfigurationManager"},
        "ChefConfiguration":{"shape":"ChefConfiguration"},
        "UseCustomCookbooks":{"shape":"Boolean"},
        "UseOpsworksSecurityGroups":{"shape":"Boolean"},
        "CustomCookbooksSource":{"shape":"Source"},
        "DefaultSshKeyName":{"shape":"String"},
        "CreatedAt":{"shape":"DateTime"},
        "DefaultRootDeviceType":{"shape":"RootDeviceType"}
      }
    },
    "StackAttributes":{
      "type":"map",
      "key":{"shape":"StackAttributesKeys"},
      "value":{"shape":"String"}
    },
    "StackAttributesKeys":{
      "type":"string",
      "enum":["Color"]
    },
    "StackConfigurationManager":{
      "type":"structure",
      "members":{
        "Name":{"shape":"String"},
        "Version":{"shape":"String"}
      }
    },
    "StackSummary":{
      "type":"structure",
      "members":{
        "StackId":{"shape":"String"},
        "Name":{"shape":"String"},
        "Arn":{"shape":"String"},
        "LayersCount":{"shape":"Integer"},
        "AppsCount":{"shape":"Integer"},
        "InstancesCount":{"shape":"InstancesCount"}
      }
    },
    "Stacks":{
      "type":"list",
      "member":{"shape":"Stack"}
    },
    "StartInstanceRequest":{
      "type":"structure",
      "required":["InstanceId"],
      "members":{
        "InstanceId":{"shape":"String"}
      }
    },
    "StartStackRequest":{
      "type":"structure",
      "required":["StackId"],
      "members":{
        "StackId":{"shape":"String"}
      }
    },
    "StopInstanceRequest":{
      "type":"structure",
      "required":["InstanceId"],
      "members":{
        "InstanceId":{"shape":"String"}
      }
    },
    "StopStackRequest":{
      "type":"structure",
      "required":["StackId"],
      "members":{
        "StackId":{"shape":"String"}
      }
    },
    "String":{"type":"string"},
    "Strings":{
      "type":"list",
      "member":{"shape":"String"}
    },
    "Switch":{"type":"string"},
    "TimeBasedAutoScalingConfiguration":{
      "type":"structure",
      "members":{
        "InstanceId":{"shape":"String"},
        "AutoScalingSchedule":{"shape":"WeeklyAutoScalingSchedule"}
      }
    },
    "TimeBasedAutoScalingConfigurations":{
      "type":"list",
      "member":{"shape":"TimeBasedAutoScalingConfiguration"}
    },
    "UnassignInstanceRequest":{
      "type":"structure",
      "required":["InstanceId"],
      "members":{
        "InstanceId":{"shape":"String"}
      }
    },
    "UnassignVolumeRequest":{
      "type":"structure",
      "required":["VolumeId"],
      "members":{
        "VolumeId":{"shape":"String"}
      }
    },
    "UpdateAppRequest":{
      "type":"structure",
      "required":["AppId"],
      "members":{
        "AppId":{"shape":"String"},
        "Name":{"shape":"String"},
        "Description":{"shape":"String"},
        "DataSources":{"shape":"DataSources"},
        "Type":{"shape":"AppType"},
        "AppSource":{"shape":"Source"},
        "Domains":{"shape":"Strings"},
        "EnableSsl":{"shape":"Boolean"},
        "SslConfiguration":{"shape":"SslConfiguration"},
        "Attributes":{"shape":"AppAttributes"},
        "Environment":{"shape":"EnvironmentVariables"}
      }
    },
    "UpdateElasticIpRequest":{
      "type":"structure",
      "required":["ElasticIp"],
      "members":{
        "ElasticIp":{"shape":"String"},
        "Name":{"shape":"String"}
      }
    },
    "UpdateInstanceRequest":{
      "type":"structure",
      "required":["InstanceId"],
      "members":{
        "InstanceId":{"shape":"String"},
        "LayerIds":{"shape":"Strings"},
        "InstanceType":{"shape":"String"},
        "AutoScalingType":{"shape":"AutoScalingType"},
        "Hostname":{"shape":"String"},
        "Os":{"shape":"String"},
        "AmiId":{"shape":"String"},
        "SshKeyName":{"shape":"String"},
        "Architecture":{"shape":"Architecture"},
        "InstallUpdatesOnBoot":{"shape":"Boolean"},
        "EbsOptimized":{"shape":"Boolean"}
      }
    },
    "UpdateLayerRequest":{
      "type":"structure",
      "required":["LayerId"],
      "members":{
        "LayerId":{"shape":"String"},
        "Name":{"shape":"String"},
        "Shortname":{"shape":"String"},
        "Attributes":{"shape":"LayerAttributes"},
        "CustomInstanceProfileArn":{"shape":"String"},
        "CustomSecurityGroupIds":{"shape":"Strings"},
        "Packages":{"shape":"Strings"},
        "VolumeConfigurations":{"shape":"VolumeConfigurations"},
        "EnableAutoHealing":{"shape":"Boolean"},
        "AutoAssignElasticIps":{"shape":"Boolean"},
        "AutoAssignPublicIps":{"shape":"Boolean"},
        "CustomRecipes":{"shape":"Recipes"},
        "InstallUpdatesOnBoot":{"shape":"Boolean"},
        "UseEbsOptimizedInstances":{"shape":"Boolean"},
        "LifecycleEventConfiguration":{"shape":"LifecycleEventConfiguration"}
      }
    },
    "UpdateMyUserProfileRequest":{
      "type":"structure",
      "members":{
        "SshPublicKey":{"shape":"String"}
      }
    },
    "UpdateRdsDbInstanceRequest":{
      "type":"structure",
      "required":["RdsDbInstanceArn"],
      "members":{
        "RdsDbInstanceArn":{"shape":"String"},
        "DbUser":{"shape":"String"},
        "DbPassword":{"shape":"String"}
      }
    },
    "UpdateStackRequest":{
      "type":"structure",
      "required":["StackId"],
      "members":{
        "StackId":{"shape":"String"},
        "Name":{"shape":"String"},
        "Attributes":{"shape":"StackAttributes"},
        "ServiceRoleArn":{"shape":"String"},
        "DefaultInstanceProfileArn":{"shape":"String"},
        "DefaultOs":{"shape":"String"},
        "HostnameTheme":{"shape":"String"},
        "DefaultAvailabilityZone":{"shape":"String"},
        "DefaultSubnetId":{"shape":"String"},
        "CustomJson":{"shape":"String"},
        "ConfigurationManager":{"shape":"StackConfigurationManager"},
        "ChefConfiguration":{"shape":"ChefConfiguration"},
        "UseCustomCookbooks":{"shape":"Boolean"},
        "CustomCookbooksSource":{"shape":"Source"},
        "DefaultSshKeyName":{"shape":"String"},
        "DefaultRootDeviceType":{"shape":"RootDeviceType"},
        "UseOpsworksSecurityGroups":{"shape":"Boolean"}
      }
    },
    "UpdateUserProfileRequest":{
      "type":"structure",
      "required":["IamUserArn"],
      "members":{
        "IamUserArn":{"shape":"String"},
        "SshUsername":{"shape":"String"},
        "SshPublicKey":{"shape":"String"},
        "AllowSelfManagement":{"shape":"Boolean"}
      }
    },
    "UpdateVolumeRequest":{
      "type":"structure",
      "required":["VolumeId"],
      "members":{
        "VolumeId":{"shape":"String"},
        "Name":{"shape":"String"},
        "MountPoint":{"shape":"String"}
      }
    },
    "UserProfile":{
      "type":"structure",
      "members":{
        "IamUserArn":{"shape":"String"},
        "Name":{"shape":"String"},
        "SshUsername":{"shape":"String"},
        "SshPublicKey":{"shape":"String"},
        "AllowSelfManagement":{"shape":"Boolean"}
      }
    },
    "UserProfiles":{
      "type":"list",
      "member":{"shape":"UserProfile"}
    },
    "ValidationException":{
      "type":"structure",
      "members":{
        "message":{"shape":"String"}
      },
      "exception":true
    },
    "VirtualizationType":{
      "type":"string",
      "enum":[
        "paravirtual",
        "hvm"
      ]
    },
    "Volume":{
      "type":"structure",
      "members":{
        "VolumeId":{"shape":"String"},
        "Ec2VolumeId":{"shape":"String"},
        "Name":{"shape":"String"},
        "RaidArrayId":{"shape":"String"},
        "InstanceId":{"shape":"String"},
        "Status":{"shape":"String"},
        "Size":{"shape":"Integer"},
        "Device":{"shape":"String"},
        "MountPoint":{"shape":"String"},
        "Region":{"shape":"String"},
        "AvailabilityZone":{"shape":"String"},
        "VolumeType":{"shape":"String"},
        "Iops":{"shape":"Integer"}
      }
    },
    "VolumeConfiguration":{
      "type":"structure",
      "required":[
        "MountPoint",
        "NumberOfDisks",
        "Size"
      ],
      "members":{
        "MountPoint":{"shape":"String"},
        "RaidLevel":{"shape":"Integer"},
        "NumberOfDisks":{"shape":"Integer"},
        "Size":{"shape":"Integer"},
        "VolumeType":{"shape":"String"},
        "Iops":{"shape":"Integer"}
      }
    },
    "VolumeConfigurations":{
      "type":"list",
      "member":{"shape":"VolumeConfiguration"}
    },
    "Volumes":{
      "type":"list",
      "member":{"shape":"Volume"}
    },
    "WeeklyAutoScalingSchedule":{
      "type":"structure",
      "members":{
        "Monday":{"shape":"DailyAutoScalingSchedule"},
        "Tuesday":{"shape":"DailyAutoScalingSchedule"},
        "Wednesday":{"shape":"DailyAutoScalingSchedule"},
        "Thursday":{"shape":"DailyAutoScalingSchedule"},
        "Friday":{"shape":"DailyAutoScalingSchedule"},
        "Saturday":{"shape":"DailyAutoScalingSchedule"},
        "Sunday":{"shape":"DailyAutoScalingSchedule"}
      }
    }
  }
}
,
"RDS":
{
  "metadata":{
    "apiVersion":"2014-09-01",
    "endpointPrefix":"rds",
    "serviceAbbreviation":"Amazon RDS",
    "serviceFullName":"Amazon Relational Database Service",
    "signatureVersion":"v4",
    "xmlNamespace":"http://rds.amazonaws.com/doc/2014-09-01/",
    "protocol":"query"
  },
  "operations":{
    "AddSourceIdentifierToSubscription":{
      "name":"AddSourceIdentifierToSubscription",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"AddSourceIdentifierToSubscriptionMessage"},
      "output":{
        "shape":"AddSourceIdentifierToSubscriptionResult",
        "wrapper":true,
        "resultWrapper":"AddSourceIdentifierToSubscriptionResult"
      },
      "errors":[
        {
          "shape":"SubscriptionNotFoundFault",
          "error":{
            "code":"SubscriptionNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"SourceNotFoundFault",
          "error":{
            "code":"SourceNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "AddTagsToResource":{
      "name":"AddTagsToResource",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"AddTagsToResourceMessage"},
      "errors":[
        {
          "shape":"DBInstanceNotFoundFault",
          "error":{
            "code":"DBInstanceNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"DBSnapshotNotFoundFault",
          "error":{
            "code":"DBSnapshotNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "AuthorizeDBSecurityGroupIngress":{
      "name":"AuthorizeDBSecurityGroupIngress",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"AuthorizeDBSecurityGroupIngressMessage"},
      "output":{
        "shape":"AuthorizeDBSecurityGroupIngressResult",
        "wrapper":true,
        "resultWrapper":"AuthorizeDBSecurityGroupIngressResult"
      },
      "errors":[
        {
          "shape":"DBSecurityGroupNotFoundFault",
          "error":{
            "code":"DBSecurityGroupNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidDBSecurityGroupStateFault",
          "error":{
            "code":"InvalidDBSecurityGroupState",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"AuthorizationAlreadyExistsFault",
          "error":{
            "code":"AuthorizationAlreadyExists",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"AuthorizationQuotaExceededFault",
          "error":{
            "code":"AuthorizationQuotaExceeded",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "CopyDBParameterGroup":{
      "name":"CopyDBParameterGroup",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CopyDBParameterGroupMessage"},
      "output":{
        "shape":"CopyDBParameterGroupResult",
        "wrapper":true,
        "resultWrapper":"CopyDBParameterGroupResult"
      },
      "errors":[
        {
          "shape":"DBParameterGroupNotFoundFault",
          "error":{
            "code":"DBParameterGroupNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"DBParameterGroupAlreadyExistsFault",
          "error":{
            "code":"DBParameterGroupAlreadyExists",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"DBParameterGroupQuotaExceededFault",
          "error":{
            "code":"DBParameterGroupQuotaExceeded",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "CopyDBSnapshot":{
      "name":"CopyDBSnapshot",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CopyDBSnapshotMessage"},
      "output":{
        "shape":"CopyDBSnapshotResult",
        "wrapper":true,
        "resultWrapper":"CopyDBSnapshotResult"
      },
      "errors":[
        {
          "shape":"DBSnapshotAlreadyExistsFault",
          "error":{
            "code":"DBSnapshotAlreadyExists",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"DBSnapshotNotFoundFault",
          "error":{
            "code":"DBSnapshotNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidDBSnapshotStateFault",
          "error":{
            "code":"InvalidDBSnapshotState",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"SnapshotQuotaExceededFault",
          "error":{
            "code":"SnapshotQuotaExceeded",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "CopyOptionGroup":{
      "name":"CopyOptionGroup",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CopyOptionGroupMessage"},
      "output":{
        "shape":"CopyOptionGroupResult",
        "wrapper":true,
        "resultWrapper":"CopyOptionGroupResult"
      },
      "errors":[
        {
          "shape":"OptionGroupAlreadyExistsFault",
          "error":{
            "code":"OptionGroupAlreadyExistsFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"OptionGroupNotFoundFault",
          "error":{
            "code":"OptionGroupNotFoundFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"OptionGroupQuotaExceededFault",
          "error":{
            "code":"OptionGroupQuotaExceededFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "CreateDBInstance":{
      "name":"CreateDBInstance",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateDBInstanceMessage"},
      "output":{
        "shape":"CreateDBInstanceResult",
        "wrapper":true,
        "resultWrapper":"CreateDBInstanceResult"
      },
      "errors":[
        {
          "shape":"DBInstanceAlreadyExistsFault",
          "error":{
            "code":"DBInstanceAlreadyExists",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InsufficientDBInstanceCapacityFault",
          "error":{
            "code":"InsufficientDBInstanceCapacity",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"DBParameterGroupNotFoundFault",
          "error":{
            "code":"DBParameterGroupNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"DBSecurityGroupNotFoundFault",
          "error":{
            "code":"DBSecurityGroupNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InstanceQuotaExceededFault",
          "error":{
            "code":"InstanceQuotaExceeded",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"StorageQuotaExceededFault",
          "error":{
            "code":"StorageQuotaExceeded",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"DBSubnetGroupNotFoundFault",
          "error":{
            "code":"DBSubnetGroupNotFoundFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"DBSubnetGroupDoesNotCoverEnoughAZs",
          "error":{
            "code":"DBSubnetGroupDoesNotCoverEnoughAZs",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidSubnet",
          "error":{
            "code":"InvalidSubnet",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidVPCNetworkStateFault",
          "error":{
            "code":"InvalidVPCNetworkStateFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"ProvisionedIopsNotAvailableInAZFault",
          "error":{
            "code":"ProvisionedIopsNotAvailableInAZFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"OptionGroupNotFoundFault",
          "error":{
            "code":"OptionGroupNotFoundFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"StorageTypeNotSupportedFault",
          "error":{
            "code":"StorageTypeNotSupported",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"AuthorizationNotFoundFault",
          "error":{
            "code":"AuthorizationNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "CreateDBInstanceReadReplica":{
      "name":"CreateDBInstanceReadReplica",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateDBInstanceReadReplicaMessage"},
      "output":{
        "shape":"CreateDBInstanceReadReplicaResult",
        "wrapper":true,
        "resultWrapper":"CreateDBInstanceReadReplicaResult"
      },
      "errors":[
        {
          "shape":"DBInstanceAlreadyExistsFault",
          "error":{
            "code":"DBInstanceAlreadyExists",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InsufficientDBInstanceCapacityFault",
          "error":{
            "code":"InsufficientDBInstanceCapacity",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"DBParameterGroupNotFoundFault",
          "error":{
            "code":"DBParameterGroupNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"DBSecurityGroupNotFoundFault",
          "error":{
            "code":"DBSecurityGroupNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InstanceQuotaExceededFault",
          "error":{
            "code":"InstanceQuotaExceeded",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"StorageQuotaExceededFault",
          "error":{
            "code":"StorageQuotaExceeded",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"DBInstanceNotFoundFault",
          "error":{
            "code":"DBInstanceNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidDBInstanceStateFault",
          "error":{
            "code":"InvalidDBInstanceState",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"DBSubnetGroupNotFoundFault",
          "error":{
            "code":"DBSubnetGroupNotFoundFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"DBSubnetGroupDoesNotCoverEnoughAZs",
          "error":{
            "code":"DBSubnetGroupDoesNotCoverEnoughAZs",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidSubnet",
          "error":{
            "code":"InvalidSubnet",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidVPCNetworkStateFault",
          "error":{
            "code":"InvalidVPCNetworkStateFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"ProvisionedIopsNotAvailableInAZFault",
          "error":{
            "code":"ProvisionedIopsNotAvailableInAZFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"OptionGroupNotFoundFault",
          "error":{
            "code":"OptionGroupNotFoundFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"DBSubnetGroupNotAllowedFault",
          "error":{
            "code":"DBSubnetGroupNotAllowedFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidDBSubnetGroupFault",
          "error":{
            "code":"InvalidDBSubnetGroupFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"StorageTypeNotSupportedFault",
          "error":{
            "code":"StorageTypeNotSupported",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "CreateDBParameterGroup":{
      "name":"CreateDBParameterGroup",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateDBParameterGroupMessage"},
      "output":{
        "shape":"CreateDBParameterGroupResult",
        "wrapper":true,
        "resultWrapper":"CreateDBParameterGroupResult"
      },
      "errors":[
        {
          "shape":"DBParameterGroupQuotaExceededFault",
          "error":{
            "code":"DBParameterGroupQuotaExceeded",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"DBParameterGroupAlreadyExistsFault",
          "error":{
            "code":"DBParameterGroupAlreadyExists",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "CreateDBSecurityGroup":{
      "name":"CreateDBSecurityGroup",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateDBSecurityGroupMessage"},
      "output":{
        "shape":"CreateDBSecurityGroupResult",
        "wrapper":true,
        "resultWrapper":"CreateDBSecurityGroupResult"
      },
      "errors":[
        {
          "shape":"DBSecurityGroupAlreadyExistsFault",
          "error":{
            "code":"DBSecurityGroupAlreadyExists",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"DBSecurityGroupQuotaExceededFault",
          "error":{
            "code":"QuotaExceeded.DBSecurityGroup",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"DBSecurityGroupNotSupportedFault",
          "error":{
            "code":"DBSecurityGroupNotSupported",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "CreateDBSnapshot":{
      "name":"CreateDBSnapshot",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateDBSnapshotMessage"},
      "output":{
        "shape":"CreateDBSnapshotResult",
        "wrapper":true,
        "resultWrapper":"CreateDBSnapshotResult"
      },
      "errors":[
        {
          "shape":"DBSnapshotAlreadyExistsFault",
          "error":{
            "code":"DBSnapshotAlreadyExists",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidDBInstanceStateFault",
          "error":{
            "code":"InvalidDBInstanceState",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"DBInstanceNotFoundFault",
          "error":{
            "code":"DBInstanceNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"SnapshotQuotaExceededFault",
          "error":{
            "code":"SnapshotQuotaExceeded",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "CreateDBSubnetGroup":{
      "name":"CreateDBSubnetGroup",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateDBSubnetGroupMessage"},
      "output":{
        "shape":"CreateDBSubnetGroupResult",
        "wrapper":true,
        "resultWrapper":"CreateDBSubnetGroupResult"
      },
      "errors":[
        {
          "shape":"DBSubnetGroupAlreadyExistsFault",
          "error":{
            "code":"DBSubnetGroupAlreadyExists",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"DBSubnetGroupQuotaExceededFault",
          "error":{
            "code":"DBSubnetGroupQuotaExceeded",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"DBSubnetQuotaExceededFault",
          "error":{
            "code":"DBSubnetQuotaExceededFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"DBSubnetGroupDoesNotCoverEnoughAZs",
          "error":{
            "code":"DBSubnetGroupDoesNotCoverEnoughAZs",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidSubnet",
          "error":{
            "code":"InvalidSubnet",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "CreateEventSubscription":{
      "name":"CreateEventSubscription",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateEventSubscriptionMessage"},
      "output":{
        "shape":"CreateEventSubscriptionResult",
        "wrapper":true,
        "resultWrapper":"CreateEventSubscriptionResult"
      },
      "errors":[
        {
          "shape":"EventSubscriptionQuotaExceededFault",
          "error":{
            "code":"EventSubscriptionQuotaExceeded",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"SubscriptionAlreadyExistFault",
          "error":{
            "code":"SubscriptionAlreadyExist",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"SNSInvalidTopicFault",
          "error":{
            "code":"SNSInvalidTopic",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"SNSNoAuthorizationFault",
          "error":{
            "code":"SNSNoAuthorization",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"SNSTopicArnNotFoundFault",
          "error":{
            "code":"SNSTopicArnNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"SubscriptionCategoryNotFoundFault",
          "error":{
            "code":"SubscriptionCategoryNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"SourceNotFoundFault",
          "error":{
            "code":"SourceNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "CreateOptionGroup":{
      "name":"CreateOptionGroup",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateOptionGroupMessage"},
      "output":{
        "shape":"CreateOptionGroupResult",
        "wrapper":true,
        "resultWrapper":"CreateOptionGroupResult"
      },
      "errors":[
        {
          "shape":"OptionGroupAlreadyExistsFault",
          "error":{
            "code":"OptionGroupAlreadyExistsFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"OptionGroupQuotaExceededFault",
          "error":{
            "code":"OptionGroupQuotaExceededFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DeleteDBInstance":{
      "name":"DeleteDBInstance",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteDBInstanceMessage"},
      "output":{
        "shape":"DeleteDBInstanceResult",
        "wrapper":true,
        "resultWrapper":"DeleteDBInstanceResult"
      },
      "errors":[
        {
          "shape":"DBInstanceNotFoundFault",
          "error":{
            "code":"DBInstanceNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidDBInstanceStateFault",
          "error":{
            "code":"InvalidDBInstanceState",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"DBSnapshotAlreadyExistsFault",
          "error":{
            "code":"DBSnapshotAlreadyExists",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"SnapshotQuotaExceededFault",
          "error":{
            "code":"SnapshotQuotaExceeded",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DeleteDBParameterGroup":{
      "name":"DeleteDBParameterGroup",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteDBParameterGroupMessage"},
      "errors":[
        {
          "shape":"InvalidDBParameterGroupStateFault",
          "error":{
            "code":"InvalidDBParameterGroupState",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"DBParameterGroupNotFoundFault",
          "error":{
            "code":"DBParameterGroupNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DeleteDBSecurityGroup":{
      "name":"DeleteDBSecurityGroup",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteDBSecurityGroupMessage"},
      "errors":[
        {
          "shape":"InvalidDBSecurityGroupStateFault",
          "error":{
            "code":"InvalidDBSecurityGroupState",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"DBSecurityGroupNotFoundFault",
          "error":{
            "code":"DBSecurityGroupNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DeleteDBSnapshot":{
      "name":"DeleteDBSnapshot",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteDBSnapshotMessage"},
      "output":{
        "shape":"DeleteDBSnapshotResult",
        "wrapper":true,
        "resultWrapper":"DeleteDBSnapshotResult"
      },
      "errors":[
        {
          "shape":"InvalidDBSnapshotStateFault",
          "error":{
            "code":"InvalidDBSnapshotState",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"DBSnapshotNotFoundFault",
          "error":{
            "code":"DBSnapshotNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DeleteDBSubnetGroup":{
      "name":"DeleteDBSubnetGroup",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteDBSubnetGroupMessage"},
      "errors":[
        {
          "shape":"InvalidDBSubnetGroupStateFault",
          "error":{
            "code":"InvalidDBSubnetGroupStateFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidDBSubnetStateFault",
          "error":{
            "code":"InvalidDBSubnetStateFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"DBSubnetGroupNotFoundFault",
          "error":{
            "code":"DBSubnetGroupNotFoundFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DeleteEventSubscription":{
      "name":"DeleteEventSubscription",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteEventSubscriptionMessage"},
      "output":{
        "shape":"DeleteEventSubscriptionResult",
        "wrapper":true,
        "resultWrapper":"DeleteEventSubscriptionResult"
      },
      "errors":[
        {
          "shape":"SubscriptionNotFoundFault",
          "error":{
            "code":"SubscriptionNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidEventSubscriptionStateFault",
          "error":{
            "code":"InvalidEventSubscriptionState",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DeleteOptionGroup":{
      "name":"DeleteOptionGroup",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteOptionGroupMessage"},
      "errors":[
        {
          "shape":"OptionGroupNotFoundFault",
          "error":{
            "code":"OptionGroupNotFoundFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidOptionGroupStateFault",
          "error":{
            "code":"InvalidOptionGroupStateFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DescribeDBEngineVersions":{
      "name":"DescribeDBEngineVersions",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeDBEngineVersionsMessage"},
      "output":{
        "shape":"DBEngineVersionMessage",
        "resultWrapper":"DescribeDBEngineVersionsResult"
      }
    },
    "DescribeDBInstances":{
      "name":"DescribeDBInstances",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeDBInstancesMessage"},
      "output":{
        "shape":"DBInstanceMessage",
        "resultWrapper":"DescribeDBInstancesResult"
      },
      "errors":[
        {
          "shape":"DBInstanceNotFoundFault",
          "error":{
            "code":"DBInstanceNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DescribeDBLogFiles":{
      "name":"DescribeDBLogFiles",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeDBLogFilesMessage"},
      "output":{
        "shape":"DescribeDBLogFilesResponse",
        "resultWrapper":"DescribeDBLogFilesResult"
      },
      "errors":[
        {
          "shape":"DBInstanceNotFoundFault",
          "error":{
            "code":"DBInstanceNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DescribeDBParameterGroups":{
      "name":"DescribeDBParameterGroups",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeDBParameterGroupsMessage"},
      "output":{
        "shape":"DBParameterGroupsMessage",
        "resultWrapper":"DescribeDBParameterGroupsResult"
      },
      "errors":[
        {
          "shape":"DBParameterGroupNotFoundFault",
          "error":{
            "code":"DBParameterGroupNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DescribeDBParameters":{
      "name":"DescribeDBParameters",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeDBParametersMessage"},
      "output":{
        "shape":"DBParameterGroupDetails",
        "resultWrapper":"DescribeDBParametersResult"
      },
      "errors":[
        {
          "shape":"DBParameterGroupNotFoundFault",
          "error":{
            "code":"DBParameterGroupNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DescribeDBSecurityGroups":{
      "name":"DescribeDBSecurityGroups",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeDBSecurityGroupsMessage"},
      "output":{
        "shape":"DBSecurityGroupMessage",
        "resultWrapper":"DescribeDBSecurityGroupsResult"
      },
      "errors":[
        {
          "shape":"DBSecurityGroupNotFoundFault",
          "error":{
            "code":"DBSecurityGroupNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DescribeDBSnapshots":{
      "name":"DescribeDBSnapshots",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeDBSnapshotsMessage"},
      "output":{
        "shape":"DBSnapshotMessage",
        "resultWrapper":"DescribeDBSnapshotsResult"
      },
      "errors":[
        {
          "shape":"DBSnapshotNotFoundFault",
          "error":{
            "code":"DBSnapshotNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DescribeDBSubnetGroups":{
      "name":"DescribeDBSubnetGroups",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeDBSubnetGroupsMessage"},
      "output":{
        "shape":"DBSubnetGroupMessage",
        "resultWrapper":"DescribeDBSubnetGroupsResult"
      },
      "errors":[
        {
          "shape":"DBSubnetGroupNotFoundFault",
          "error":{
            "code":"DBSubnetGroupNotFoundFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DescribeEngineDefaultParameters":{
      "name":"DescribeEngineDefaultParameters",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeEngineDefaultParametersMessage"},
      "output":{
        "shape":"DescribeEngineDefaultParametersResult",
        "wrapper":true,
        "resultWrapper":"DescribeEngineDefaultParametersResult"
      }
    },
    "DescribeEventCategories":{
      "name":"DescribeEventCategories",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeEventCategoriesMessage"},
      "output":{
        "shape":"EventCategoriesMessage",
        "resultWrapper":"DescribeEventCategoriesResult"
      }
    },
    "DescribeEventSubscriptions":{
      "name":"DescribeEventSubscriptions",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeEventSubscriptionsMessage"},
      "output":{
        "shape":"EventSubscriptionsMessage",
        "resultWrapper":"DescribeEventSubscriptionsResult"
      },
      "errors":[
        {
          "shape":"SubscriptionNotFoundFault",
          "error":{
            "code":"SubscriptionNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DescribeEvents":{
      "name":"DescribeEvents",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeEventsMessage"},
      "output":{
        "shape":"EventsMessage",
        "resultWrapper":"DescribeEventsResult"
      }
    },
    "DescribeOptionGroupOptions":{
      "name":"DescribeOptionGroupOptions",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeOptionGroupOptionsMessage"},
      "output":{
        "shape":"OptionGroupOptionsMessage",
        "resultWrapper":"DescribeOptionGroupOptionsResult"
      }
    },
    "DescribeOptionGroups":{
      "name":"DescribeOptionGroups",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeOptionGroupsMessage"},
      "output":{
        "shape":"OptionGroups",
        "resultWrapper":"DescribeOptionGroupsResult"
      },
      "errors":[
        {
          "shape":"OptionGroupNotFoundFault",
          "error":{
            "code":"OptionGroupNotFoundFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DescribeOrderableDBInstanceOptions":{
      "name":"DescribeOrderableDBInstanceOptions",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeOrderableDBInstanceOptionsMessage"},
      "output":{
        "shape":"OrderableDBInstanceOptionsMessage",
        "resultWrapper":"DescribeOrderableDBInstanceOptionsResult"
      }
    },
    "DescribeReservedDBInstances":{
      "name":"DescribeReservedDBInstances",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeReservedDBInstancesMessage"},
      "output":{
        "shape":"ReservedDBInstanceMessage",
        "resultWrapper":"DescribeReservedDBInstancesResult"
      },
      "errors":[
        {
          "shape":"ReservedDBInstanceNotFoundFault",
          "error":{
            "code":"ReservedDBInstanceNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DescribeReservedDBInstancesOfferings":{
      "name":"DescribeReservedDBInstancesOfferings",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeReservedDBInstancesOfferingsMessage"},
      "output":{
        "shape":"ReservedDBInstancesOfferingMessage",
        "resultWrapper":"DescribeReservedDBInstancesOfferingsResult"
      },
      "errors":[
        {
          "shape":"ReservedDBInstancesOfferingNotFoundFault",
          "error":{
            "code":"ReservedDBInstancesOfferingNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DownloadDBLogFilePortion":{
      "name":"DownloadDBLogFilePortion",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DownloadDBLogFilePortionMessage"},
      "output":{
        "shape":"DownloadDBLogFilePortionDetails",
        "resultWrapper":"DownloadDBLogFilePortionResult"
      },
      "errors":[
        {
          "shape":"DBInstanceNotFoundFault",
          "error":{
            "code":"DBInstanceNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "ListTagsForResource":{
      "name":"ListTagsForResource",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ListTagsForResourceMessage"},
      "output":{
        "shape":"TagListMessage",
        "resultWrapper":"ListTagsForResourceResult"
      },
      "errors":[
        {
          "shape":"DBInstanceNotFoundFault",
          "error":{
            "code":"DBInstanceNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"DBSnapshotNotFoundFault",
          "error":{
            "code":"DBSnapshotNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "ModifyDBInstance":{
      "name":"ModifyDBInstance",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ModifyDBInstanceMessage"},
      "output":{
        "shape":"ModifyDBInstanceResult",
        "wrapper":true,
        "resultWrapper":"ModifyDBInstanceResult"
      },
      "errors":[
        {
          "shape":"InvalidDBInstanceStateFault",
          "error":{
            "code":"InvalidDBInstanceState",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidDBSecurityGroupStateFault",
          "error":{
            "code":"InvalidDBSecurityGroupState",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"DBInstanceAlreadyExistsFault",
          "error":{
            "code":"DBInstanceAlreadyExists",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"DBInstanceNotFoundFault",
          "error":{
            "code":"DBInstanceNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"DBSecurityGroupNotFoundFault",
          "error":{
            "code":"DBSecurityGroupNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"DBParameterGroupNotFoundFault",
          "error":{
            "code":"DBParameterGroupNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InsufficientDBInstanceCapacityFault",
          "error":{
            "code":"InsufficientDBInstanceCapacity",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"StorageQuotaExceededFault",
          "error":{
            "code":"StorageQuotaExceeded",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidVPCNetworkStateFault",
          "error":{
            "code":"InvalidVPCNetworkStateFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"ProvisionedIopsNotAvailableInAZFault",
          "error":{
            "code":"ProvisionedIopsNotAvailableInAZFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"OptionGroupNotFoundFault",
          "error":{
            "code":"OptionGroupNotFoundFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"DBUpgradeDependencyFailureFault",
          "error":{
            "code":"DBUpgradeDependencyFailure",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"StorageTypeNotSupportedFault",
          "error":{
            "code":"StorageTypeNotSupported",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"AuthorizationNotFoundFault",
          "error":{
            "code":"AuthorizationNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "ModifyDBParameterGroup":{
      "name":"ModifyDBParameterGroup",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ModifyDBParameterGroupMessage"},
      "output":{
        "shape":"DBParameterGroupNameMessage",
        "resultWrapper":"ModifyDBParameterGroupResult"
      },
      "errors":[
        {
          "shape":"DBParameterGroupNotFoundFault",
          "error":{
            "code":"DBParameterGroupNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidDBParameterGroupStateFault",
          "error":{
            "code":"InvalidDBParameterGroupState",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "ModifyDBSubnetGroup":{
      "name":"ModifyDBSubnetGroup",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ModifyDBSubnetGroupMessage"},
      "output":{
        "shape":"ModifyDBSubnetGroupResult",
        "wrapper":true,
        "resultWrapper":"ModifyDBSubnetGroupResult"
      },
      "errors":[
        {
          "shape":"DBSubnetGroupNotFoundFault",
          "error":{
            "code":"DBSubnetGroupNotFoundFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"DBSubnetQuotaExceededFault",
          "error":{
            "code":"DBSubnetQuotaExceededFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"SubnetAlreadyInUse",
          "error":{
            "code":"SubnetAlreadyInUse",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"DBSubnetGroupDoesNotCoverEnoughAZs",
          "error":{
            "code":"DBSubnetGroupDoesNotCoverEnoughAZs",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidSubnet",
          "error":{
            "code":"InvalidSubnet",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "ModifyEventSubscription":{
      "name":"ModifyEventSubscription",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ModifyEventSubscriptionMessage"},
      "output":{
        "shape":"ModifyEventSubscriptionResult",
        "wrapper":true,
        "resultWrapper":"ModifyEventSubscriptionResult"
      },
      "errors":[
        {
          "shape":"EventSubscriptionQuotaExceededFault",
          "error":{
            "code":"EventSubscriptionQuotaExceeded",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"SubscriptionNotFoundFault",
          "error":{
            "code":"SubscriptionNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"SNSInvalidTopicFault",
          "error":{
            "code":"SNSInvalidTopic",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"SNSNoAuthorizationFault",
          "error":{
            "code":"SNSNoAuthorization",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"SNSTopicArnNotFoundFault",
          "error":{
            "code":"SNSTopicArnNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"SubscriptionCategoryNotFoundFault",
          "error":{
            "code":"SubscriptionCategoryNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "ModifyOptionGroup":{
      "name":"ModifyOptionGroup",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ModifyOptionGroupMessage"},
      "output":{
        "shape":"ModifyOptionGroupResult",
        "wrapper":true,
        "resultWrapper":"ModifyOptionGroupResult"
      },
      "errors":[
        {
          "shape":"InvalidOptionGroupStateFault",
          "error":{
            "code":"InvalidOptionGroupStateFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"OptionGroupNotFoundFault",
          "error":{
            "code":"OptionGroupNotFoundFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "PromoteReadReplica":{
      "name":"PromoteReadReplica",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"PromoteReadReplicaMessage"},
      "output":{
        "shape":"PromoteReadReplicaResult",
        "wrapper":true,
        "resultWrapper":"PromoteReadReplicaResult"
      },
      "errors":[
        {
          "shape":"InvalidDBInstanceStateFault",
          "error":{
            "code":"InvalidDBInstanceState",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"DBInstanceNotFoundFault",
          "error":{
            "code":"DBInstanceNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "PurchaseReservedDBInstancesOffering":{
      "name":"PurchaseReservedDBInstancesOffering",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"PurchaseReservedDBInstancesOfferingMessage"},
      "output":{
        "shape":"PurchaseReservedDBInstancesOfferingResult",
        "wrapper":true,
        "resultWrapper":"PurchaseReservedDBInstancesOfferingResult"
      },
      "errors":[
        {
          "shape":"ReservedDBInstancesOfferingNotFoundFault",
          "error":{
            "code":"ReservedDBInstancesOfferingNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"ReservedDBInstanceAlreadyExistsFault",
          "error":{
            "code":"ReservedDBInstanceAlreadyExists",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"ReservedDBInstanceQuotaExceededFault",
          "error":{
            "code":"ReservedDBInstanceQuotaExceeded",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "RebootDBInstance":{
      "name":"RebootDBInstance",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"RebootDBInstanceMessage"},
      "output":{
        "shape":"RebootDBInstanceResult",
        "wrapper":true,
        "resultWrapper":"RebootDBInstanceResult"
      },
      "errors":[
        {
          "shape":"InvalidDBInstanceStateFault",
          "error":{
            "code":"InvalidDBInstanceState",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"DBInstanceNotFoundFault",
          "error":{
            "code":"DBInstanceNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "RemoveSourceIdentifierFromSubscription":{
      "name":"RemoveSourceIdentifierFromSubscription",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"RemoveSourceIdentifierFromSubscriptionMessage"},
      "output":{
        "shape":"RemoveSourceIdentifierFromSubscriptionResult",
        "wrapper":true,
        "resultWrapper":"RemoveSourceIdentifierFromSubscriptionResult"
      },
      "errors":[
        {
          "shape":"SubscriptionNotFoundFault",
          "error":{
            "code":"SubscriptionNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"SourceNotFoundFault",
          "error":{
            "code":"SourceNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "RemoveTagsFromResource":{
      "name":"RemoveTagsFromResource",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"RemoveTagsFromResourceMessage"},
      "errors":[
        {
          "shape":"DBInstanceNotFoundFault",
          "error":{
            "code":"DBInstanceNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"DBSnapshotNotFoundFault",
          "error":{
            "code":"DBSnapshotNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "ResetDBParameterGroup":{
      "name":"ResetDBParameterGroup",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ResetDBParameterGroupMessage"},
      "output":{
        "shape":"DBParameterGroupNameMessage",
        "resultWrapper":"ResetDBParameterGroupResult"
      },
      "errors":[
        {
          "shape":"InvalidDBParameterGroupStateFault",
          "error":{
            "code":"InvalidDBParameterGroupState",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"DBParameterGroupNotFoundFault",
          "error":{
            "code":"DBParameterGroupNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "RestoreDBInstanceFromDBSnapshot":{
      "name":"RestoreDBInstanceFromDBSnapshot",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"RestoreDBInstanceFromDBSnapshotMessage"},
      "output":{
        "shape":"RestoreDBInstanceFromDBSnapshotResult",
        "wrapper":true,
        "resultWrapper":"RestoreDBInstanceFromDBSnapshotResult"
      },
      "errors":[
        {
          "shape":"DBInstanceAlreadyExistsFault",
          "error":{
            "code":"DBInstanceAlreadyExists",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"DBSnapshotNotFoundFault",
          "error":{
            "code":"DBSnapshotNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InstanceQuotaExceededFault",
          "error":{
            "code":"InstanceQuotaExceeded",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InsufficientDBInstanceCapacityFault",
          "error":{
            "code":"InsufficientDBInstanceCapacity",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidDBSnapshotStateFault",
          "error":{
            "code":"InvalidDBSnapshotState",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"StorageQuotaExceededFault",
          "error":{
            "code":"StorageQuotaExceeded",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidVPCNetworkStateFault",
          "error":{
            "code":"InvalidVPCNetworkStateFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidRestoreFault",
          "error":{
            "code":"InvalidRestoreFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"DBSubnetGroupNotFoundFault",
          "error":{
            "code":"DBSubnetGroupNotFoundFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"DBSubnetGroupDoesNotCoverEnoughAZs",
          "error":{
            "code":"DBSubnetGroupDoesNotCoverEnoughAZs",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidSubnet",
          "error":{
            "code":"InvalidSubnet",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"ProvisionedIopsNotAvailableInAZFault",
          "error":{
            "code":"ProvisionedIopsNotAvailableInAZFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"OptionGroupNotFoundFault",
          "error":{
            "code":"OptionGroupNotFoundFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"StorageTypeNotSupportedFault",
          "error":{
            "code":"StorageTypeNotSupported",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"AuthorizationNotFoundFault",
          "error":{
            "code":"AuthorizationNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "RestoreDBInstanceToPointInTime":{
      "name":"RestoreDBInstanceToPointInTime",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"RestoreDBInstanceToPointInTimeMessage"},
      "output":{
        "shape":"RestoreDBInstanceToPointInTimeResult",
        "wrapper":true,
        "resultWrapper":"RestoreDBInstanceToPointInTimeResult"
      },
      "errors":[
        {
          "shape":"DBInstanceAlreadyExistsFault",
          "error":{
            "code":"DBInstanceAlreadyExists",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"DBInstanceNotFoundFault",
          "error":{
            "code":"DBInstanceNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InstanceQuotaExceededFault",
          "error":{
            "code":"InstanceQuotaExceeded",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InsufficientDBInstanceCapacityFault",
          "error":{
            "code":"InsufficientDBInstanceCapacity",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidDBInstanceStateFault",
          "error":{
            "code":"InvalidDBInstanceState",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"PointInTimeRestoreNotEnabledFault",
          "error":{
            "code":"PointInTimeRestoreNotEnabled",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"StorageQuotaExceededFault",
          "error":{
            "code":"StorageQuotaExceeded",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidVPCNetworkStateFault",
          "error":{
            "code":"InvalidVPCNetworkStateFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidRestoreFault",
          "error":{
            "code":"InvalidRestoreFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"DBSubnetGroupNotFoundFault",
          "error":{
            "code":"DBSubnetGroupNotFoundFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"DBSubnetGroupDoesNotCoverEnoughAZs",
          "error":{
            "code":"DBSubnetGroupDoesNotCoverEnoughAZs",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidSubnet",
          "error":{
            "code":"InvalidSubnet",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"ProvisionedIopsNotAvailableInAZFault",
          "error":{
            "code":"ProvisionedIopsNotAvailableInAZFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"OptionGroupNotFoundFault",
          "error":{
            "code":"OptionGroupNotFoundFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"StorageTypeNotSupportedFault",
          "error":{
            "code":"StorageTypeNotSupported",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"AuthorizationNotFoundFault",
          "error":{
            "code":"AuthorizationNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "RevokeDBSecurityGroupIngress":{
      "name":"RevokeDBSecurityGroupIngress",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"RevokeDBSecurityGroupIngressMessage"},
      "output":{
        "shape":"RevokeDBSecurityGroupIngressResult",
        "wrapper":true,
        "resultWrapper":"RevokeDBSecurityGroupIngressResult"
      },
      "errors":[
        {
          "shape":"DBSecurityGroupNotFoundFault",
          "error":{
            "code":"DBSecurityGroupNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"AuthorizationNotFoundFault",
          "error":{
            "code":"AuthorizationNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidDBSecurityGroupStateFault",
          "error":{
            "code":"InvalidDBSecurityGroupState",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    }
  },
  "shapes":{
    "AddSourceIdentifierToSubscriptionMessage":{
      "type":"structure",
      "required":[
        "SubscriptionName",
        "SourceIdentifier"
      ],
      "members":{
        "SubscriptionName":{"shape":"String"},
        "SourceIdentifier":{"shape":"String"}
      }
    },
    "AddTagsToResourceMessage":{
      "type":"structure",
      "required":[
        "ResourceName",
        "Tags"
      ],
      "members":{
        "ResourceName":{"shape":"String"},
        "Tags":{"shape":"TagList"}
      }
    },
    "ApplyMethod":{
      "type":"string",
      "enum":[
        "immediate",
        "pending-reboot"
      ]
    },
    "AuthorizationAlreadyExistsFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"AuthorizationAlreadyExists",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "AuthorizationNotFoundFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"AuthorizationNotFound",
        "httpStatusCode":404,
        "senderFault":true
      },
      "exception":true
    },
    "AuthorizationQuotaExceededFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"AuthorizationQuotaExceeded",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "AuthorizeDBSecurityGroupIngressMessage":{
      "type":"structure",
      "required":["DBSecurityGroupName"],
      "members":{
        "DBSecurityGroupName":{"shape":"String"},
        "CIDRIP":{"shape":"String"},
        "EC2SecurityGroupName":{"shape":"String"},
        "EC2SecurityGroupId":{"shape":"String"},
        "EC2SecurityGroupOwnerId":{"shape":"String"}
      }
    },
    "AvailabilityZone":{
      "type":"structure",
      "members":{
        "Name":{"shape":"String"}
      },
      "wrapper":true
    },
    "AvailabilityZoneList":{
      "type":"list",
      "member":{
        "shape":"AvailabilityZone",
        "locationName":"AvailabilityZone"
      }
    },
    "Boolean":{"type":"boolean"},
    "BooleanOptional":{"type":"boolean"},
    "CharacterSet":{
      "type":"structure",
      "members":{
        "CharacterSetName":{"shape":"String"},
        "CharacterSetDescription":{"shape":"String"}
      }
    },
    "CopyDBParameterGroupMessage":{
      "type":"structure",
      "required":[
        "SourceDBParameterGroupIdentifier",
        "TargetDBParameterGroupIdentifier",
        "TargetDBParameterGroupDescription"
      ],
      "members":{
        "SourceDBParameterGroupIdentifier":{"shape":"String"},
        "TargetDBParameterGroupIdentifier":{"shape":"String"},
        "TargetDBParameterGroupDescription":{"shape":"String"},
        "Tags":{"shape":"TagList"}
      }
    },
    "CopyDBSnapshotMessage":{
      "type":"structure",
      "required":[
        "SourceDBSnapshotIdentifier",
        "TargetDBSnapshotIdentifier"
      ],
      "members":{
        "SourceDBSnapshotIdentifier":{"shape":"String"},
        "TargetDBSnapshotIdentifier":{"shape":"String"},
        "Tags":{"shape":"TagList"}
      }
    },
    "CopyOptionGroupMessage":{
      "type":"structure",
      "required":[
        "SourceOptionGroupIdentifier",
        "TargetOptionGroupIdentifier",
        "TargetOptionGroupDescription"
      ],
      "members":{
        "SourceOptionGroupIdentifier":{"shape":"String"},
        "TargetOptionGroupIdentifier":{"shape":"String"},
        "TargetOptionGroupDescription":{"shape":"String"},
        "Tags":{"shape":"TagList"}
      }
    },
    "CreateDBInstanceMessage":{
      "type":"structure",
      "required":[
        "DBInstanceIdentifier",
        "AllocatedStorage",
        "DBInstanceClass",
        "Engine",
        "MasterUsername",
        "MasterUserPassword"
      ],
      "members":{
        "DBName":{"shape":"String"},
        "DBInstanceIdentifier":{"shape":"String"},
        "AllocatedStorage":{"shape":"IntegerOptional"},
        "DBInstanceClass":{"shape":"String"},
        "Engine":{"shape":"String"},
        "MasterUsername":{"shape":"String"},
        "MasterUserPassword":{"shape":"String"},
        "DBSecurityGroups":{"shape":"DBSecurityGroupNameList"},
        "VpcSecurityGroupIds":{"shape":"VpcSecurityGroupIdList"},
        "AvailabilityZone":{"shape":"String"},
        "DBSubnetGroupName":{"shape":"String"},
        "PreferredMaintenanceWindow":{"shape":"String"},
        "DBParameterGroupName":{"shape":"String"},
        "BackupRetentionPeriod":{"shape":"IntegerOptional"},
        "PreferredBackupWindow":{"shape":"String"},
        "Port":{"shape":"IntegerOptional"},
        "MultiAZ":{"shape":"BooleanOptional"},
        "EngineVersion":{"shape":"String"},
        "AutoMinorVersionUpgrade":{"shape":"BooleanOptional"},
        "LicenseModel":{"shape":"String"},
        "Iops":{"shape":"IntegerOptional"},
        "OptionGroupName":{"shape":"String"},
        "CharacterSetName":{"shape":"String"},
        "PubliclyAccessible":{"shape":"BooleanOptional"},
        "Tags":{"shape":"TagList"},
        "StorageType":{"shape":"String"},
        "TdeCredentialArn":{"shape":"String"},
        "TdeCredentialPassword":{"shape":"String"}
      }
    },
    "CreateDBInstanceReadReplicaMessage":{
      "type":"structure",
      "required":[
        "DBInstanceIdentifier",
        "SourceDBInstanceIdentifier"
      ],
      "members":{
        "DBInstanceIdentifier":{"shape":"String"},
        "SourceDBInstanceIdentifier":{"shape":"String"},
        "DBInstanceClass":{"shape":"String"},
        "AvailabilityZone":{"shape":"String"},
        "Port":{"shape":"IntegerOptional"},
        "AutoMinorVersionUpgrade":{"shape":"BooleanOptional"},
        "Iops":{"shape":"IntegerOptional"},
        "OptionGroupName":{"shape":"String"},
        "PubliclyAccessible":{"shape":"BooleanOptional"},
        "Tags":{"shape":"TagList"},
        "DBSubnetGroupName":{"shape":"String"},
        "StorageType":{"shape":"String"}
      }
    },
    "CreateDBParameterGroupMessage":{
      "type":"structure",
      "required":[
        "DBParameterGroupName",
        "DBParameterGroupFamily",
        "Description"
      ],
      "members":{
        "DBParameterGroupName":{"shape":"String"},
        "DBParameterGroupFamily":{"shape":"String"},
        "Description":{"shape":"String"},
        "Tags":{"shape":"TagList"}
      }
    },
    "CreateDBSecurityGroupMessage":{
      "type":"structure",
      "required":[
        "DBSecurityGroupName",
        "DBSecurityGroupDescription"
      ],
      "members":{
        "DBSecurityGroupName":{"shape":"String"},
        "DBSecurityGroupDescription":{"shape":"String"},
        "Tags":{"shape":"TagList"}
      }
    },
    "CreateDBSnapshotMessage":{
      "type":"structure",
      "required":[
        "DBSnapshotIdentifier",
        "DBInstanceIdentifier"
      ],
      "members":{
        "DBSnapshotIdentifier":{"shape":"String"},
        "DBInstanceIdentifier":{"shape":"String"},
        "Tags":{"shape":"TagList"}
      }
    },
    "CreateDBSubnetGroupMessage":{
      "type":"structure",
      "required":[
        "DBSubnetGroupName",
        "DBSubnetGroupDescription",
        "SubnetIds"
      ],
      "members":{
        "DBSubnetGroupName":{"shape":"String"},
        "DBSubnetGroupDescription":{"shape":"String"},
        "SubnetIds":{"shape":"SubnetIdentifierList"},
        "Tags":{"shape":"TagList"}
      }
    },
    "CreateEventSubscriptionMessage":{
      "type":"structure",
      "required":[
        "SubscriptionName",
        "SnsTopicArn"
      ],
      "members":{
        "SubscriptionName":{"shape":"String"},
        "SnsTopicArn":{"shape":"String"},
        "SourceType":{"shape":"String"},
        "EventCategories":{"shape":"EventCategoriesList"},
        "SourceIds":{"shape":"SourceIdsList"},
        "Enabled":{"shape":"BooleanOptional"},
        "Tags":{"shape":"TagList"}
      }
    },
    "CreateOptionGroupMessage":{
      "type":"structure",
      "required":[
        "OptionGroupName",
        "EngineName",
        "MajorEngineVersion",
        "OptionGroupDescription"
      ],
      "members":{
        "OptionGroupName":{"shape":"String"},
        "EngineName":{"shape":"String"},
        "MajorEngineVersion":{"shape":"String"},
        "OptionGroupDescription":{"shape":"String"},
        "Tags":{"shape":"TagList"}
      }
    },
    "DBEngineVersion":{
      "type":"structure",
      "members":{
        "Engine":{"shape":"String"},
        "EngineVersion":{"shape":"String"},
        "DBParameterGroupFamily":{"shape":"String"},
        "DBEngineDescription":{"shape":"String"},
        "DBEngineVersionDescription":{"shape":"String"},
        "DefaultCharacterSet":{"shape":"CharacterSet"},
        "SupportedCharacterSets":{"shape":"SupportedCharacterSetsList"}
      }
    },
    "DBEngineVersionList":{
      "type":"list",
      "member":{
        "shape":"DBEngineVersion",
        "locationName":"DBEngineVersion"
      }
    },
    "DBEngineVersionMessage":{
      "type":"structure",
      "members":{
        "Marker":{"shape":"String"},
        "DBEngineVersions":{"shape":"DBEngineVersionList"}
      }
    },
    "DBInstance":{
      "type":"structure",
      "members":{
        "DBInstanceIdentifier":{"shape":"String"},
        "DBInstanceClass":{"shape":"String"},
        "Engine":{"shape":"String"},
        "DBInstanceStatus":{"shape":"String"},
        "MasterUsername":{"shape":"String"},
        "DBName":{"shape":"String"},
        "Endpoint":{"shape":"Endpoint"},
        "AllocatedStorage":{"shape":"Integer"},
        "InstanceCreateTime":{"shape":"TStamp"},
        "PreferredBackupWindow":{"shape":"String"},
        "BackupRetentionPeriod":{"shape":"Integer"},
        "DBSecurityGroups":{"shape":"DBSecurityGroupMembershipList"},
        "VpcSecurityGroups":{"shape":"VpcSecurityGroupMembershipList"},
        "DBParameterGroups":{"shape":"DBParameterGroupStatusList"},
        "AvailabilityZone":{"shape":"String"},
        "DBSubnetGroup":{"shape":"DBSubnetGroup"},
        "PreferredMaintenanceWindow":{"shape":"String"},
        "PendingModifiedValues":{"shape":"PendingModifiedValues"},
        "LatestRestorableTime":{"shape":"TStamp"},
        "MultiAZ":{"shape":"Boolean"},
        "EngineVersion":{"shape":"String"},
        "AutoMinorVersionUpgrade":{"shape":"Boolean"},
        "ReadReplicaSourceDBInstanceIdentifier":{"shape":"String"},
        "ReadReplicaDBInstanceIdentifiers":{"shape":"ReadReplicaDBInstanceIdentifierList"},
        "LicenseModel":{"shape":"String"},
        "Iops":{"shape":"IntegerOptional"},
        "OptionGroupMemberships":{"shape":"OptionGroupMembershipList"},
        "CharacterSetName":{"shape":"String"},
        "SecondaryAvailabilityZone":{"shape":"String"},
        "PubliclyAccessible":{"shape":"Boolean"},
        "StatusInfos":{"shape":"DBInstanceStatusInfoList"},
        "StorageType":{"shape":"String"},
        "TdeCredentialArn":{"shape":"String"}
      },
      "wrapper":true
    },
    "DBInstanceAlreadyExistsFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"DBInstanceAlreadyExists",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "DBInstanceList":{
      "type":"list",
      "member":{
        "shape":"DBInstance",
        "locationName":"DBInstance"
      }
    },
    "DBInstanceMessage":{
      "type":"structure",
      "members":{
        "Marker":{"shape":"String"},
        "DBInstances":{"shape":"DBInstanceList"}
      }
    },
    "DBInstanceNotFoundFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"DBInstanceNotFound",
        "httpStatusCode":404,
        "senderFault":true
      },
      "exception":true
    },
    "DBInstanceStatusInfo":{
      "type":"structure",
      "members":{
        "StatusType":{"shape":"String"},
        "Normal":{"shape":"Boolean"},
        "Status":{"shape":"String"},
        "Message":{"shape":"String"}
      }
    },
    "DBInstanceStatusInfoList":{
      "type":"list",
      "member":{
        "shape":"DBInstanceStatusInfo",
        "locationName":"DBInstanceStatusInfo"
      }
    },
    "DBParameterGroup":{
      "type":"structure",
      "members":{
        "DBParameterGroupName":{"shape":"String"},
        "DBParameterGroupFamily":{"shape":"String"},
        "Description":{"shape":"String"}
      },
      "wrapper":true
    },
    "DBParameterGroupAlreadyExistsFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"DBParameterGroupAlreadyExists",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "DBParameterGroupDetails":{
      "type":"structure",
      "members":{
        "Parameters":{"shape":"ParametersList"},
        "Marker":{"shape":"String"}
      }
    },
    "DBParameterGroupList":{
      "type":"list",
      "member":{
        "shape":"DBParameterGroup",
        "locationName":"DBParameterGroup"
      }
    },
    "DBParameterGroupNameMessage":{
      "type":"structure",
      "members":{
        "DBParameterGroupName":{"shape":"String"}
      }
    },
    "DBParameterGroupNotFoundFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"DBParameterGroupNotFound",
        "httpStatusCode":404,
        "senderFault":true
      },
      "exception":true
    },
    "DBParameterGroupQuotaExceededFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"DBParameterGroupQuotaExceeded",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "DBParameterGroupStatus":{
      "type":"structure",
      "members":{
        "DBParameterGroupName":{"shape":"String"},
        "ParameterApplyStatus":{"shape":"String"}
      }
    },
    "DBParameterGroupStatusList":{
      "type":"list",
      "member":{
        "shape":"DBParameterGroupStatus",
        "locationName":"DBParameterGroup"
      }
    },
    "DBParameterGroupsMessage":{
      "type":"structure",
      "members":{
        "Marker":{"shape":"String"},
        "DBParameterGroups":{"shape":"DBParameterGroupList"}
      }
    },
    "DBSecurityGroup":{
      "type":"structure",
      "members":{
        "OwnerId":{"shape":"String"},
        "DBSecurityGroupName":{"shape":"String"},
        "DBSecurityGroupDescription":{"shape":"String"},
        "VpcId":{"shape":"String"},
        "EC2SecurityGroups":{"shape":"EC2SecurityGroupList"},
        "IPRanges":{"shape":"IPRangeList"}
      },
      "wrapper":true
    },
    "DBSecurityGroupAlreadyExistsFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"DBSecurityGroupAlreadyExists",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "DBSecurityGroupMembership":{
      "type":"structure",
      "members":{
        "DBSecurityGroupName":{"shape":"String"},
        "Status":{"shape":"String"}
      }
    },
    "DBSecurityGroupMembershipList":{
      "type":"list",
      "member":{
        "shape":"DBSecurityGroupMembership",
        "locationName":"DBSecurityGroup"
      }
    },
    "DBSecurityGroupMessage":{
      "type":"structure",
      "members":{
        "Marker":{"shape":"String"},
        "DBSecurityGroups":{"shape":"DBSecurityGroups"}
      }
    },
    "DBSecurityGroupNameList":{
      "type":"list",
      "member":{
        "shape":"String",
        "locationName":"DBSecurityGroupName"
      }
    },
    "DBSecurityGroupNotFoundFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"DBSecurityGroupNotFound",
        "httpStatusCode":404,
        "senderFault":true
      },
      "exception":true
    },
    "DBSecurityGroupNotSupportedFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"DBSecurityGroupNotSupported",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "DBSecurityGroupQuotaExceededFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"QuotaExceeded.DBSecurityGroup",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "DBSecurityGroups":{
      "type":"list",
      "member":{
        "shape":"DBSecurityGroup",
        "locationName":"DBSecurityGroup"
      }
    },
    "DBSnapshot":{
      "type":"structure",
      "members":{
        "DBSnapshotIdentifier":{"shape":"String"},
        "DBInstanceIdentifier":{"shape":"String"},
        "SnapshotCreateTime":{"shape":"TStamp"},
        "Engine":{"shape":"String"},
        "AllocatedStorage":{"shape":"Integer"},
        "Status":{"shape":"String"},
        "Port":{"shape":"Integer"},
        "AvailabilityZone":{"shape":"String"},
        "VpcId":{"shape":"String"},
        "InstanceCreateTime":{"shape":"TStamp"},
        "MasterUsername":{"shape":"String"},
        "EngineVersion":{"shape":"String"},
        "LicenseModel":{"shape":"String"},
        "SnapshotType":{"shape":"String"},
        "Iops":{"shape":"IntegerOptional"},
        "OptionGroupName":{"shape":"String"},
        "PercentProgress":{"shape":"Integer"},
        "SourceRegion":{"shape":"String"},
        "StorageType":{"shape":"String"},
        "TdeCredentialArn":{"shape":"String"}
      },
      "wrapper":true
    },
    "DBSnapshotAlreadyExistsFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"DBSnapshotAlreadyExists",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "DBSnapshotList":{
      "type":"list",
      "member":{
        "shape":"DBSnapshot",
        "locationName":"DBSnapshot"
      }
    },
    "DBSnapshotMessage":{
      "type":"structure",
      "members":{
        "Marker":{"shape":"String"},
        "DBSnapshots":{"shape":"DBSnapshotList"}
      }
    },
    "DBSnapshotNotFoundFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"DBSnapshotNotFound",
        "httpStatusCode":404,
        "senderFault":true
      },
      "exception":true
    },
    "DBSubnetGroup":{
      "type":"structure",
      "members":{
        "DBSubnetGroupName":{"shape":"String"},
        "DBSubnetGroupDescription":{"shape":"String"},
        "VpcId":{"shape":"String"},
        "SubnetGroupStatus":{"shape":"String"},
        "Subnets":{"shape":"SubnetList"}
      },
      "wrapper":true
    },
    "DBSubnetGroupAlreadyExistsFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"DBSubnetGroupAlreadyExists",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "DBSubnetGroupDoesNotCoverEnoughAZs":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"DBSubnetGroupDoesNotCoverEnoughAZs",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "DBSubnetGroupMessage":{
      "type":"structure",
      "members":{
        "Marker":{"shape":"String"},
        "DBSubnetGroups":{"shape":"DBSubnetGroups"}
      }
    },
    "DBSubnetGroupNotAllowedFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"DBSubnetGroupNotAllowedFault",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "DBSubnetGroupNotFoundFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"DBSubnetGroupNotFoundFault",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "DBSubnetGroupQuotaExceededFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"DBSubnetGroupQuotaExceeded",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "DBSubnetGroups":{
      "type":"list",
      "member":{
        "shape":"DBSubnetGroup",
        "locationName":"DBSubnetGroup"
      }
    },
    "DBSubnetQuotaExceededFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"DBSubnetQuotaExceededFault",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "DBUpgradeDependencyFailureFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"DBUpgradeDependencyFailure",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "DeleteDBInstanceMessage":{
      "type":"structure",
      "required":["DBInstanceIdentifier"],
      "members":{
        "DBInstanceIdentifier":{"shape":"String"},
        "SkipFinalSnapshot":{"shape":"Boolean"},
        "FinalDBSnapshotIdentifier":{"shape":"String"}
      }
    },
    "DeleteDBParameterGroupMessage":{
      "type":"structure",
      "required":["DBParameterGroupName"],
      "members":{
        "DBParameterGroupName":{"shape":"String"}
      }
    },
    "DeleteDBSecurityGroupMessage":{
      "type":"structure",
      "required":["DBSecurityGroupName"],
      "members":{
        "DBSecurityGroupName":{"shape":"String"}
      }
    },
    "DeleteDBSnapshotMessage":{
      "type":"structure",
      "required":["DBSnapshotIdentifier"],
      "members":{
        "DBSnapshotIdentifier":{"shape":"String"}
      }
    },
    "DeleteDBSubnetGroupMessage":{
      "type":"structure",
      "required":["DBSubnetGroupName"],
      "members":{
        "DBSubnetGroupName":{"shape":"String"}
      }
    },
    "DeleteEventSubscriptionMessage":{
      "type":"structure",
      "required":["SubscriptionName"],
      "members":{
        "SubscriptionName":{"shape":"String"}
      }
    },
    "DeleteOptionGroupMessage":{
      "type":"structure",
      "required":["OptionGroupName"],
      "members":{
        "OptionGroupName":{"shape":"String"}
      }
    },
    "DescribeDBEngineVersionsMessage":{
      "type":"structure",
      "members":{
        "Engine":{"shape":"String"},
        "EngineVersion":{"shape":"String"},
        "DBParameterGroupFamily":{"shape":"String"},
        "Filters":{"shape":"FilterList"},
        "MaxRecords":{"shape":"IntegerOptional"},
        "Marker":{"shape":"String"},
        "DefaultOnly":{"shape":"Boolean"},
        "ListSupportedCharacterSets":{"shape":"BooleanOptional"}
      }
    },
    "DescribeDBInstancesMessage":{
      "type":"structure",
      "members":{
        "DBInstanceIdentifier":{"shape":"String"},
        "Filters":{"shape":"FilterList"},
        "MaxRecords":{"shape":"IntegerOptional"},
        "Marker":{"shape":"String"}
      }
    },
    "DescribeDBLogFilesDetails":{
      "type":"structure",
      "members":{
        "LogFileName":{"shape":"String"},
        "LastWritten":{"shape":"Long"},
        "Size":{"shape":"Long"}
      }
    },
    "DescribeDBLogFilesList":{
      "type":"list",
      "member":{
        "shape":"DescribeDBLogFilesDetails",
        "locationName":"DescribeDBLogFilesDetails"
      }
    },
    "DescribeDBLogFilesMessage":{
      "type":"structure",
      "required":["DBInstanceIdentifier"],
      "members":{
        "DBInstanceIdentifier":{"shape":"String"},
        "FilenameContains":{"shape":"String"},
        "FileLastWritten":{"shape":"Long"},
        "FileSize":{"shape":"Long"},
        "Filters":{"shape":"FilterList"},
        "MaxRecords":{"shape":"IntegerOptional"},
        "Marker":{"shape":"String"}
      }
    },
    "DescribeDBLogFilesResponse":{
      "type":"structure",
      "members":{
        "DescribeDBLogFiles":{"shape":"DescribeDBLogFilesList"},
        "Marker":{"shape":"String"}
      }
    },
    "DescribeDBParameterGroupsMessage":{
      "type":"structure",
      "members":{
        "DBParameterGroupName":{"shape":"String"},
        "Filters":{"shape":"FilterList"},
        "MaxRecords":{"shape":"IntegerOptional"},
        "Marker":{"shape":"String"}
      }
    },
    "DescribeDBParametersMessage":{
      "type":"structure",
      "required":["DBParameterGroupName"],
      "members":{
        "DBParameterGroupName":{"shape":"String"},
        "Source":{"shape":"String"},
        "Filters":{"shape":"FilterList"},
        "MaxRecords":{"shape":"IntegerOptional"},
        "Marker":{"shape":"String"}
      }
    },
    "DescribeDBSecurityGroupsMessage":{
      "type":"structure",
      "members":{
        "DBSecurityGroupName":{"shape":"String"},
        "Filters":{"shape":"FilterList"},
        "MaxRecords":{"shape":"IntegerOptional"},
        "Marker":{"shape":"String"}
      }
    },
    "DescribeDBSnapshotsMessage":{
      "type":"structure",
      "members":{
        "DBInstanceIdentifier":{"shape":"String"},
        "DBSnapshotIdentifier":{"shape":"String"},
        "SnapshotType":{"shape":"String"},
        "Filters":{"shape":"FilterList"},
        "MaxRecords":{"shape":"IntegerOptional"},
        "Marker":{"shape":"String"}
      }
    },
    "DescribeDBSubnetGroupsMessage":{
      "type":"structure",
      "members":{
        "DBSubnetGroupName":{"shape":"String"},
        "Filters":{"shape":"FilterList"},
        "MaxRecords":{"shape":"IntegerOptional"},
        "Marker":{"shape":"String"}
      }
    },
    "DescribeEngineDefaultParametersMessage":{
      "type":"structure",
      "required":["DBParameterGroupFamily"],
      "members":{
        "DBParameterGroupFamily":{"shape":"String"},
        "Filters":{"shape":"FilterList"},
        "MaxRecords":{"shape":"IntegerOptional"},
        "Marker":{"shape":"String"}
      }
    },
    "DescribeEventCategoriesMessage":{
      "type":"structure",
      "members":{
        "SourceType":{"shape":"String"},
        "Filters":{"shape":"FilterList"}
      }
    },
    "DescribeEventSubscriptionsMessage":{
      "type":"structure",
      "members":{
        "SubscriptionName":{"shape":"String"},
        "Filters":{"shape":"FilterList"},
        "MaxRecords":{"shape":"IntegerOptional"},
        "Marker":{"shape":"String"}
      }
    },
    "DescribeEventsMessage":{
      "type":"structure",
      "members":{
        "SourceIdentifier":{"shape":"String"},
        "SourceType":{"shape":"SourceType"},
        "StartTime":{"shape":"TStamp"},
        "EndTime":{"shape":"TStamp"},
        "Duration":{"shape":"IntegerOptional"},
        "EventCategories":{"shape":"EventCategoriesList"},
        "Filters":{"shape":"FilterList"},
        "MaxRecords":{"shape":"IntegerOptional"},
        "Marker":{"shape":"String"}
      }
    },
    "DescribeOptionGroupOptionsMessage":{
      "type":"structure",
      "required":["EngineName"],
      "members":{
        "EngineName":{"shape":"String"},
        "MajorEngineVersion":{"shape":"String"},
        "Filters":{"shape":"FilterList"},
        "MaxRecords":{"shape":"IntegerOptional"},
        "Marker":{"shape":"String"}
      }
    },
    "DescribeOptionGroupsMessage":{
      "type":"structure",
      "members":{
        "OptionGroupName":{"shape":"String"},
        "Filters":{"shape":"FilterList"},
        "Marker":{"shape":"String"},
        "MaxRecords":{"shape":"IntegerOptional"},
        "EngineName":{"shape":"String"},
        "MajorEngineVersion":{"shape":"String"}
      }
    },
    "DescribeOrderableDBInstanceOptionsMessage":{
      "type":"structure",
      "required":["Engine"],
      "members":{
        "Engine":{"shape":"String"},
        "EngineVersion":{"shape":"String"},
        "DBInstanceClass":{"shape":"String"},
        "LicenseModel":{"shape":"String"},
        "Vpc":{"shape":"BooleanOptional"},
        "Filters":{"shape":"FilterList"},
        "MaxRecords":{"shape":"IntegerOptional"},
        "Marker":{"shape":"String"}
      }
    },
    "DescribeReservedDBInstancesMessage":{
      "type":"structure",
      "members":{
        "ReservedDBInstanceId":{"shape":"String"},
        "ReservedDBInstancesOfferingId":{"shape":"String"},
        "DBInstanceClass":{"shape":"String"},
        "Duration":{"shape":"String"},
        "ProductDescription":{"shape":"String"},
        "OfferingType":{"shape":"String"},
        "MultiAZ":{"shape":"BooleanOptional"},
        "Filters":{"shape":"FilterList"},
        "MaxRecords":{"shape":"IntegerOptional"},
        "Marker":{"shape":"String"}
      }
    },
    "DescribeReservedDBInstancesOfferingsMessage":{
      "type":"structure",
      "members":{
        "ReservedDBInstancesOfferingId":{"shape":"String"},
        "DBInstanceClass":{"shape":"String"},
        "Duration":{"shape":"String"},
        "ProductDescription":{"shape":"String"},
        "OfferingType":{"shape":"String"},
        "MultiAZ":{"shape":"BooleanOptional"},
        "Filters":{"shape":"FilterList"},
        "MaxRecords":{"shape":"IntegerOptional"},
        "Marker":{"shape":"String"}
      }
    },
    "Double":{"type":"double"},
    "DownloadDBLogFilePortionDetails":{
      "type":"structure",
      "members":{
        "LogFileData":{"shape":"String"},
        "Marker":{"shape":"String"},
        "AdditionalDataPending":{"shape":"Boolean"}
      }
    },
    "DownloadDBLogFilePortionMessage":{
      "type":"structure",
      "required":[
        "DBInstanceIdentifier",
        "LogFileName"
      ],
      "members":{
        "DBInstanceIdentifier":{"shape":"String"},
        "LogFileName":{"shape":"String"},
        "Marker":{"shape":"String"},
        "NumberOfLines":{"shape":"Integer"}
      }
    },
    "EC2SecurityGroup":{
      "type":"structure",
      "members":{
        "Status":{"shape":"String"},
        "EC2SecurityGroupName":{"shape":"String"},
        "EC2SecurityGroupId":{"shape":"String"},
        "EC2SecurityGroupOwnerId":{"shape":"String"}
      }
    },
    "EC2SecurityGroupList":{
      "type":"list",
      "member":{
        "shape":"EC2SecurityGroup",
        "locationName":"EC2SecurityGroup"
      }
    },
    "Endpoint":{
      "type":"structure",
      "members":{
        "Address":{"shape":"String"},
        "Port":{"shape":"Integer"}
      }
    },
    "EngineDefaults":{
      "type":"structure",
      "members":{
        "DBParameterGroupFamily":{"shape":"String"},
        "Marker":{"shape":"String"},
        "Parameters":{"shape":"ParametersList"}
      },
      "wrapper":true
    },
    "Event":{
      "type":"structure",
      "members":{
        "SourceIdentifier":{"shape":"String"},
        "SourceType":{"shape":"SourceType"},
        "Message":{"shape":"String"},
        "EventCategories":{"shape":"EventCategoriesList"},
        "Date":{"shape":"TStamp"}
      }
    },
    "EventCategoriesList":{
      "type":"list",
      "member":{
        "shape":"String",
        "locationName":"EventCategory"
      }
    },
    "EventCategoriesMap":{
      "type":"structure",
      "members":{
        "SourceType":{"shape":"String"},
        "EventCategories":{"shape":"EventCategoriesList"}
      },
      "wrapper":true
    },
    "EventCategoriesMapList":{
      "type":"list",
      "member":{
        "shape":"EventCategoriesMap",
        "locationName":"EventCategoriesMap"
      }
    },
    "EventCategoriesMessage":{
      "type":"structure",
      "members":{
        "EventCategoriesMapList":{"shape":"EventCategoriesMapList"}
      }
    },
    "EventList":{
      "type":"list",
      "member":{
        "shape":"Event",
        "locationName":"Event"
      }
    },
    "EventSubscription":{
      "type":"structure",
      "members":{
        "CustomerAwsId":{"shape":"String"},
        "CustSubscriptionId":{"shape":"String"},
        "SnsTopicArn":{"shape":"String"},
        "Status":{"shape":"String"},
        "SubscriptionCreationTime":{"shape":"String"},
        "SourceType":{"shape":"String"},
        "SourceIdsList":{"shape":"SourceIdsList"},
        "EventCategoriesList":{"shape":"EventCategoriesList"},
        "Enabled":{"shape":"Boolean"}
      },
      "wrapper":true
    },
    "EventSubscriptionQuotaExceededFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"EventSubscriptionQuotaExceeded",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "EventSubscriptionsList":{
      "type":"list",
      "member":{
        "shape":"EventSubscription",
        "locationName":"EventSubscription"
      }
    },
    "EventSubscriptionsMessage":{
      "type":"structure",
      "members":{
        "Marker":{"shape":"String"},
        "EventSubscriptionsList":{"shape":"EventSubscriptionsList"}
      }
    },
    "EventsMessage":{
      "type":"structure",
      "members":{
        "Marker":{"shape":"String"},
        "Events":{"shape":"EventList"}
      }
    },
    "Filter":{
      "type":"structure",
      "required":[
        "Name",
        "Values"
      ],
      "members":{
        "Name":{"shape":"String"},
        "Values":{"shape":"FilterValueList"}
      }
    },
    "FilterList":{
      "type":"list",
      "member":{
        "shape":"Filter",
        "locationName":"Filter"
      }
    },
    "FilterValueList":{
      "type":"list",
      "member":{
        "shape":"String",
        "locationName":"Value"
      }
    },
    "IPRange":{
      "type":"structure",
      "members":{
        "Status":{"shape":"String"},
        "CIDRIP":{"shape":"String"}
      }
    },
    "IPRangeList":{
      "type":"list",
      "member":{
        "shape":"IPRange",
        "locationName":"IPRange"
      }
    },
    "InstanceQuotaExceededFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"InstanceQuotaExceeded",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "InsufficientDBInstanceCapacityFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"InsufficientDBInstanceCapacity",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "Integer":{"type":"integer"},
    "IntegerOptional":{"type":"integer"},
    "InvalidDBInstanceStateFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"InvalidDBInstanceState",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "InvalidDBParameterGroupStateFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"InvalidDBParameterGroupState",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "InvalidDBSecurityGroupStateFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"InvalidDBSecurityGroupState",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "InvalidDBSnapshotStateFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"InvalidDBSnapshotState",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "InvalidDBSubnetGroupFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"InvalidDBSubnetGroupFault",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "InvalidDBSubnetGroupStateFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"InvalidDBSubnetGroupStateFault",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "InvalidDBSubnetStateFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"InvalidDBSubnetStateFault",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "InvalidEventSubscriptionStateFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"InvalidEventSubscriptionState",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "InvalidOptionGroupStateFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"InvalidOptionGroupStateFault",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "InvalidRestoreFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"InvalidRestoreFault",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "InvalidSubnet":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"InvalidSubnet",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "InvalidVPCNetworkStateFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"InvalidVPCNetworkStateFault",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "KeyList":{
      "type":"list",
      "member":{"shape":"String"}
    },
    "ListTagsForResourceMessage":{
      "type":"structure",
      "required":["ResourceName"],
      "members":{
        "ResourceName":{"shape":"String"},
        "Filters":{"shape":"FilterList"}
      }
    },
    "Long":{"type":"long"},
    "ModifyDBInstanceMessage":{
      "type":"structure",
      "required":["DBInstanceIdentifier"],
      "members":{
        "DBInstanceIdentifier":{"shape":"String"},
        "AllocatedStorage":{"shape":"IntegerOptional"},
        "DBInstanceClass":{"shape":"String"},
        "DBSecurityGroups":{"shape":"DBSecurityGroupNameList"},
        "VpcSecurityGroupIds":{"shape":"VpcSecurityGroupIdList"},
        "ApplyImmediately":{"shape":"Boolean"},
        "MasterUserPassword":{"shape":"String"},
        "DBParameterGroupName":{"shape":"String"},
        "BackupRetentionPeriod":{"shape":"IntegerOptional"},
        "PreferredBackupWindow":{"shape":"String"},
        "PreferredMaintenanceWindow":{"shape":"String"},
        "MultiAZ":{"shape":"BooleanOptional"},
        "EngineVersion":{"shape":"String"},
        "AllowMajorVersionUpgrade":{"shape":"Boolean"},
        "AutoMinorVersionUpgrade":{"shape":"BooleanOptional"},
        "Iops":{"shape":"IntegerOptional"},
        "OptionGroupName":{"shape":"String"},
        "NewDBInstanceIdentifier":{"shape":"String"},
        "StorageType":{"shape":"String"},
        "TdeCredentialArn":{"shape":"String"},
        "TdeCredentialPassword":{"shape":"String"}
      }
    },
    "ModifyDBParameterGroupMessage":{
      "type":"structure",
      "required":[
        "DBParameterGroupName",
        "Parameters"
      ],
      "members":{
        "DBParameterGroupName":{"shape":"String"},
        "Parameters":{"shape":"ParametersList"}
      }
    },
    "ModifyDBSubnetGroupMessage":{
      "type":"structure",
      "required":[
        "DBSubnetGroupName",
        "SubnetIds"
      ],
      "members":{
        "DBSubnetGroupName":{"shape":"String"},
        "DBSubnetGroupDescription":{"shape":"String"},
        "SubnetIds":{"shape":"SubnetIdentifierList"}
      }
    },
    "ModifyEventSubscriptionMessage":{
      "type":"structure",
      "required":["SubscriptionName"],
      "members":{
        "SubscriptionName":{"shape":"String"},
        "SnsTopicArn":{"shape":"String"},
        "SourceType":{"shape":"String"},
        "EventCategories":{"shape":"EventCategoriesList"},
        "Enabled":{"shape":"BooleanOptional"}
      }
    },
    "ModifyOptionGroupMessage":{
      "type":"structure",
      "required":["OptionGroupName"],
      "members":{
        "OptionGroupName":{"shape":"String"},
        "OptionsToInclude":{"shape":"OptionConfigurationList"},
        "OptionsToRemove":{"shape":"OptionNamesList"},
        "ApplyImmediately":{"shape":"Boolean"}
      }
    },
    "Option":{
      "type":"structure",
      "members":{
        "OptionName":{"shape":"String"},
        "OptionDescription":{"shape":"String"},
        "Persistent":{"shape":"Boolean"},
        "Permanent":{"shape":"Boolean"},
        "Port":{"shape":"IntegerOptional"},
        "OptionSettings":{"shape":"OptionSettingConfigurationList"},
        "DBSecurityGroupMemberships":{"shape":"DBSecurityGroupMembershipList"},
        "VpcSecurityGroupMemberships":{"shape":"VpcSecurityGroupMembershipList"}
      }
    },
    "OptionConfiguration":{
      "type":"structure",
      "required":["OptionName"],
      "members":{
        "OptionName":{"shape":"String"},
        "Port":{"shape":"IntegerOptional"},
        "DBSecurityGroupMemberships":{"shape":"DBSecurityGroupNameList"},
        "VpcSecurityGroupMemberships":{"shape":"VpcSecurityGroupIdList"},
        "OptionSettings":{"shape":"OptionSettingsList"}
      }
    },
    "OptionConfigurationList":{
      "type":"list",
      "member":{
        "shape":"OptionConfiguration",
        "locationName":"OptionConfiguration"
      }
    },
    "OptionGroup":{
      "type":"structure",
      "members":{
        "OptionGroupName":{"shape":"String"},
        "OptionGroupDescription":{"shape":"String"},
        "EngineName":{"shape":"String"},
        "MajorEngineVersion":{"shape":"String"},
        "Options":{"shape":"OptionsList"},
        "AllowsVpcAndNonVpcInstanceMemberships":{"shape":"Boolean"},
        "VpcId":{"shape":"String"}
      },
      "wrapper":true
    },
    "OptionGroupAlreadyExistsFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"OptionGroupAlreadyExistsFault",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "OptionGroupMembership":{
      "type":"structure",
      "members":{
        "OptionGroupName":{"shape":"String"},
        "Status":{"shape":"String"}
      }
    },
    "OptionGroupMembershipList":{
      "type":"list",
      "member":{
        "shape":"OptionGroupMembership",
        "locationName":"OptionGroupMembership"
      }
    },
    "OptionGroupNotFoundFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"OptionGroupNotFoundFault",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "OptionGroupOption":{
      "type":"structure",
      "members":{
        "Name":{"shape":"String"},
        "Description":{"shape":"String"},
        "EngineName":{"shape":"String"},
        "MajorEngineVersion":{"shape":"String"},
        "MinimumRequiredMinorEngineVersion":{"shape":"String"},
        "PortRequired":{"shape":"Boolean"},
        "DefaultPort":{"shape":"IntegerOptional"},
        "OptionsDependedOn":{"shape":"OptionsDependedOn"},
        "Persistent":{"shape":"Boolean"},
        "Permanent":{"shape":"Boolean"},
        "OptionGroupOptionSettings":{"shape":"OptionGroupOptionSettingsList"}
      }
    },
    "OptionGroupOptionSetting":{
      "type":"structure",
      "members":{
        "SettingName":{"shape":"String"},
        "SettingDescription":{"shape":"String"},
        "DefaultValue":{"shape":"String"},
        "ApplyType":{"shape":"String"},
        "AllowedValues":{"shape":"String"},
        "IsModifiable":{"shape":"Boolean"}
      }
    },
    "OptionGroupOptionSettingsList":{
      "type":"list",
      "member":{
        "shape":"OptionGroupOptionSetting",
        "locationName":"OptionGroupOptionSetting"
      }
    },
    "OptionGroupOptionsList":{
      "type":"list",
      "member":{
        "shape":"OptionGroupOption",
        "locationName":"OptionGroupOption"
      }
    },
    "OptionGroupOptionsMessage":{
      "type":"structure",
      "members":{
        "OptionGroupOptions":{"shape":"OptionGroupOptionsList"},
        "Marker":{"shape":"String"}
      }
    },
    "OptionGroupQuotaExceededFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"OptionGroupQuotaExceededFault",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "OptionGroups":{
      "type":"structure",
      "members":{
        "OptionGroupsList":{"shape":"OptionGroupsList"},
        "Marker":{"shape":"String"}
      }
    },
    "OptionGroupsList":{
      "type":"list",
      "member":{
        "shape":"OptionGroup",
        "locationName":"OptionGroup"
      }
    },
    "OptionNamesList":{
      "type":"list",
      "member":{"shape":"String"}
    },
    "OptionSetting":{
      "type":"structure",
      "members":{
        "Name":{"shape":"String"},
        "Value":{"shape":"String"},
        "DefaultValue":{"shape":"String"},
        "Description":{"shape":"String"},
        "ApplyType":{"shape":"String"},
        "DataType":{"shape":"String"},
        "AllowedValues":{"shape":"String"},
        "IsModifiable":{"shape":"Boolean"},
        "IsCollection":{"shape":"Boolean"}
      }
    },
    "OptionSettingConfigurationList":{
      "type":"list",
      "member":{
        "shape":"OptionSetting",
        "locationName":"OptionSetting"
      }
    },
    "OptionSettingsList":{
      "type":"list",
      "member":{
        "shape":"OptionSetting",
        "locationName":"OptionSetting"
      }
    },
    "OptionsDependedOn":{
      "type":"list",
      "member":{
        "shape":"String",
        "locationName":"OptionName"
      }
    },
    "OptionsList":{
      "type":"list",
      "member":{
        "shape":"Option",
        "locationName":"Option"
      }
    },
    "OrderableDBInstanceOption":{
      "type":"structure",
      "members":{
        "Engine":{"shape":"String"},
        "EngineVersion":{"shape":"String"},
        "DBInstanceClass":{"shape":"String"},
        "LicenseModel":{"shape":"String"},
        "AvailabilityZones":{"shape":"AvailabilityZoneList"},
        "MultiAZCapable":{"shape":"Boolean"},
        "ReadReplicaCapable":{"shape":"Boolean"},
        "Vpc":{"shape":"Boolean"},
        "StorageType":{"shape":"String"},
        "SupportsIops":{"shape":"Boolean"}
      },
      "wrapper":true
    },
    "OrderableDBInstanceOptionsList":{
      "type":"list",
      "member":{
        "shape":"OrderableDBInstanceOption",
        "locationName":"OrderableDBInstanceOption"
      }
    },
    "OrderableDBInstanceOptionsMessage":{
      "type":"structure",
      "members":{
        "OrderableDBInstanceOptions":{"shape":"OrderableDBInstanceOptionsList"},
        "Marker":{"shape":"String"}
      }
    },
    "Parameter":{
      "type":"structure",
      "members":{
        "ParameterName":{"shape":"String"},
        "ParameterValue":{"shape":"String"},
        "Description":{"shape":"String"},
        "Source":{"shape":"String"},
        "ApplyType":{"shape":"String"},
        "DataType":{"shape":"String"},
        "AllowedValues":{"shape":"String"},
        "IsModifiable":{"shape":"Boolean"},
        "MinimumEngineVersion":{"shape":"String"},
        "ApplyMethod":{"shape":"ApplyMethod"}
      }
    },
    "ParametersList":{
      "type":"list",
      "member":{
        "shape":"Parameter",
        "locationName":"Parameter"
      }
    },
    "PendingModifiedValues":{
      "type":"structure",
      "members":{
        "DBInstanceClass":{"shape":"String"},
        "AllocatedStorage":{"shape":"IntegerOptional"},
        "MasterUserPassword":{"shape":"String"},
        "Port":{"shape":"IntegerOptional"},
        "BackupRetentionPeriod":{"shape":"IntegerOptional"},
        "MultiAZ":{"shape":"BooleanOptional"},
        "EngineVersion":{"shape":"String"},
        "Iops":{"shape":"IntegerOptional"},
        "DBInstanceIdentifier":{"shape":"String"},
        "StorageType":{"shape":"String"}
      }
    },
    "PointInTimeRestoreNotEnabledFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"PointInTimeRestoreNotEnabled",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "PromoteReadReplicaMessage":{
      "type":"structure",
      "required":["DBInstanceIdentifier"],
      "members":{
        "DBInstanceIdentifier":{"shape":"String"},
        "BackupRetentionPeriod":{"shape":"IntegerOptional"},
        "PreferredBackupWindow":{"shape":"String"}
      }
    },
    "ProvisionedIopsNotAvailableInAZFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"ProvisionedIopsNotAvailableInAZFault",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "PurchaseReservedDBInstancesOfferingMessage":{
      "type":"structure",
      "required":["ReservedDBInstancesOfferingId"],
      "members":{
        "ReservedDBInstancesOfferingId":{"shape":"String"},
        "ReservedDBInstanceId":{"shape":"String"},
        "DBInstanceCount":{"shape":"IntegerOptional"},
        "Tags":{"shape":"TagList"}
      }
    },
    "ReadReplicaDBInstanceIdentifierList":{
      "type":"list",
      "member":{
        "shape":"String",
        "locationName":"ReadReplicaDBInstanceIdentifier"
      }
    },
    "RebootDBInstanceMessage":{
      "type":"structure",
      "required":["DBInstanceIdentifier"],
      "members":{
        "DBInstanceIdentifier":{"shape":"String"},
        "ForceFailover":{"shape":"BooleanOptional"}
      }
    },
    "RecurringCharge":{
      "type":"structure",
      "members":{
        "RecurringChargeAmount":{"shape":"Double"},
        "RecurringChargeFrequency":{"shape":"String"}
      },
      "wrapper":true
    },
    "RecurringChargeList":{
      "type":"list",
      "member":{
        "shape":"RecurringCharge",
        "locationName":"RecurringCharge"
      }
    },
    "RemoveSourceIdentifierFromSubscriptionMessage":{
      "type":"structure",
      "required":[
        "SubscriptionName",
        "SourceIdentifier"
      ],
      "members":{
        "SubscriptionName":{"shape":"String"},
        "SourceIdentifier":{"shape":"String"}
      }
    },
    "RemoveTagsFromResourceMessage":{
      "type":"structure",
      "required":[
        "ResourceName",
        "TagKeys"
      ],
      "members":{
        "ResourceName":{"shape":"String"},
        "TagKeys":{"shape":"KeyList"}
      }
    },
    "ReservedDBInstance":{
      "type":"structure",
      "members":{
        "ReservedDBInstanceId":{"shape":"String"},
        "ReservedDBInstancesOfferingId":{"shape":"String"},
        "DBInstanceClass":{"shape":"String"},
        "StartTime":{"shape":"TStamp"},
        "Duration":{"shape":"Integer"},
        "FixedPrice":{"shape":"Double"},
        "UsagePrice":{"shape":"Double"},
        "CurrencyCode":{"shape":"String"},
        "DBInstanceCount":{"shape":"Integer"},
        "ProductDescription":{"shape":"String"},
        "OfferingType":{"shape":"String"},
        "MultiAZ":{"shape":"Boolean"},
        "State":{"shape":"String"},
        "RecurringCharges":{"shape":"RecurringChargeList"}
      },
      "wrapper":true
    },
    "ReservedDBInstanceAlreadyExistsFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"ReservedDBInstanceAlreadyExists",
        "httpStatusCode":404,
        "senderFault":true
      },
      "exception":true
    },
    "ReservedDBInstanceList":{
      "type":"list",
      "member":{
        "shape":"ReservedDBInstance",
        "locationName":"ReservedDBInstance"
      }
    },
    "ReservedDBInstanceMessage":{
      "type":"structure",
      "members":{
        "Marker":{"shape":"String"},
        "ReservedDBInstances":{"shape":"ReservedDBInstanceList"}
      }
    },
    "ReservedDBInstanceNotFoundFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"ReservedDBInstanceNotFound",
        "httpStatusCode":404,
        "senderFault":true
      },
      "exception":true
    },
    "ReservedDBInstanceQuotaExceededFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"ReservedDBInstanceQuotaExceeded",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "ReservedDBInstancesOffering":{
      "type":"structure",
      "members":{
        "ReservedDBInstancesOfferingId":{"shape":"String"},
        "DBInstanceClass":{"shape":"String"},
        "Duration":{"shape":"Integer"},
        "FixedPrice":{"shape":"Double"},
        "UsagePrice":{"shape":"Double"},
        "CurrencyCode":{"shape":"String"},
        "ProductDescription":{"shape":"String"},
        "OfferingType":{"shape":"String"},
        "MultiAZ":{"shape":"Boolean"},
        "RecurringCharges":{"shape":"RecurringChargeList"}
      },
      "wrapper":true
    },
    "ReservedDBInstancesOfferingList":{
      "type":"list",
      "member":{
        "shape":"ReservedDBInstancesOffering",
        "locationName":"ReservedDBInstancesOffering"
      }
    },
    "ReservedDBInstancesOfferingMessage":{
      "type":"structure",
      "members":{
        "Marker":{"shape":"String"},
        "ReservedDBInstancesOfferings":{"shape":"ReservedDBInstancesOfferingList"}
      }
    },
    "ReservedDBInstancesOfferingNotFoundFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"ReservedDBInstancesOfferingNotFound",
        "httpStatusCode":404,
        "senderFault":true
      },
      "exception":true
    },
    "ResetDBParameterGroupMessage":{
      "type":"structure",
      "required":["DBParameterGroupName"],
      "members":{
        "DBParameterGroupName":{"shape":"String"},
        "ResetAllParameters":{"shape":"Boolean"},
        "Parameters":{"shape":"ParametersList"}
      }
    },
    "RestoreDBInstanceFromDBSnapshotMessage":{
      "type":"structure",
      "required":[
        "DBInstanceIdentifier",
        "DBSnapshotIdentifier"
      ],
      "members":{
        "DBInstanceIdentifier":{"shape":"String"},
        "DBSnapshotIdentifier":{"shape":"String"},
        "DBInstanceClass":{"shape":"String"},
        "Port":{"shape":"IntegerOptional"},
        "AvailabilityZone":{"shape":"String"},
        "DBSubnetGroupName":{"shape":"String"},
        "MultiAZ":{"shape":"BooleanOptional"},
        "PubliclyAccessible":{"shape":"BooleanOptional"},
        "AutoMinorVersionUpgrade":{"shape":"BooleanOptional"},
        "LicenseModel":{"shape":"String"},
        "DBName":{"shape":"String"},
        "Engine":{"shape":"String"},
        "Iops":{"shape":"IntegerOptional"},
        "OptionGroupName":{"shape":"String"},
        "Tags":{"shape":"TagList"},
        "StorageType":{"shape":"String"},
        "TdeCredentialArn":{"shape":"String"},
        "TdeCredentialPassword":{"shape":"String"}
      }
    },
    "RestoreDBInstanceToPointInTimeMessage":{
      "type":"structure",
      "required":[
        "SourceDBInstanceIdentifier",
        "TargetDBInstanceIdentifier"
      ],
      "members":{
        "SourceDBInstanceIdentifier":{"shape":"String"},
        "TargetDBInstanceIdentifier":{"shape":"String"},
        "RestoreTime":{"shape":"TStamp"},
        "UseLatestRestorableTime":{"shape":"Boolean"},
        "DBInstanceClass":{"shape":"String"},
        "Port":{"shape":"IntegerOptional"},
        "AvailabilityZone":{"shape":"String"},
        "DBSubnetGroupName":{"shape":"String"},
        "MultiAZ":{"shape":"BooleanOptional"},
        "PubliclyAccessible":{"shape":"BooleanOptional"},
        "AutoMinorVersionUpgrade":{"shape":"BooleanOptional"},
        "LicenseModel":{"shape":"String"},
        "DBName":{"shape":"String"},
        "Engine":{"shape":"String"},
        "Iops":{"shape":"IntegerOptional"},
        "OptionGroupName":{"shape":"String"},
        "Tags":{"shape":"TagList"},
        "StorageType":{"shape":"String"},
        "TdeCredentialArn":{"shape":"String"},
        "TdeCredentialPassword":{"shape":"String"}
      }
    },
    "RevokeDBSecurityGroupIngressMessage":{
      "type":"structure",
      "required":["DBSecurityGroupName"],
      "members":{
        "DBSecurityGroupName":{"shape":"String"},
        "CIDRIP":{"shape":"String"},
        "EC2SecurityGroupName":{"shape":"String"},
        "EC2SecurityGroupId":{"shape":"String"},
        "EC2SecurityGroupOwnerId":{"shape":"String"}
      }
    },
    "SNSInvalidTopicFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"SNSInvalidTopic",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "SNSNoAuthorizationFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"SNSNoAuthorization",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "SNSTopicArnNotFoundFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"SNSTopicArnNotFound",
        "httpStatusCode":404,
        "senderFault":true
      },
      "exception":true
    },
    "SnapshotQuotaExceededFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"SnapshotQuotaExceeded",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "SourceIdsList":{
      "type":"list",
      "member":{
        "shape":"String",
        "locationName":"SourceId"
      }
    },
    "SourceNotFoundFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"SourceNotFound",
        "httpStatusCode":404,
        "senderFault":true
      },
      "exception":true
    },
    "SourceType":{
      "type":"string",
      "enum":[
        "db-instance",
        "db-parameter-group",
        "db-security-group",
        "db-snapshot"
      ]
    },
    "StorageQuotaExceededFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"StorageQuotaExceeded",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "StorageTypeNotSupportedFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"StorageTypeNotSupported",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "String":{"type":"string"},
    "Subnet":{
      "type":"structure",
      "members":{
        "SubnetIdentifier":{"shape":"String"},
        "SubnetAvailabilityZone":{"shape":"AvailabilityZone"},
        "SubnetStatus":{"shape":"String"}
      }
    },
    "SubnetAlreadyInUse":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"SubnetAlreadyInUse",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "SubnetIdentifierList":{
      "type":"list",
      "member":{
        "shape":"String",
        "locationName":"SubnetIdentifier"
      }
    },
    "SubnetList":{
      "type":"list",
      "member":{
        "shape":"Subnet",
        "locationName":"Subnet"
      }
    },
    "SubscriptionAlreadyExistFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"SubscriptionAlreadyExist",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "SubscriptionCategoryNotFoundFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"SubscriptionCategoryNotFound",
        "httpStatusCode":404,
        "senderFault":true
      },
      "exception":true
    },
    "SubscriptionNotFoundFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"SubscriptionNotFound",
        "httpStatusCode":404,
        "senderFault":true
      },
      "exception":true
    },
    "SupportedCharacterSetsList":{
      "type":"list",
      "member":{
        "shape":"CharacterSet",
        "locationName":"CharacterSet"
      }
    },
    "TStamp":{"type":"timestamp"},
    "Tag":{
      "type":"structure",
      "members":{
        "Key":{"shape":"String"},
        "Value":{"shape":"String"}
      }
    },
    "TagList":{
      "type":"list",
      "member":{
        "shape":"Tag",
        "locationName":"Tag"
      }
    },
    "TagListMessage":{
      "type":"structure",
      "members":{
        "TagList":{"shape":"TagList"}
      }
    },
    "VpcSecurityGroupIdList":{
      "type":"list",
      "member":{
        "shape":"String",
        "locationName":"VpcSecurityGroupId"
      }
    },
    "VpcSecurityGroupMembership":{
      "type":"structure",
      "members":{
        "VpcSecurityGroupId":{"shape":"String"},
        "Status":{"shape":"String"}
      }
    },
    "VpcSecurityGroupMembershipList":{
      "type":"list",
      "member":{
        "shape":"VpcSecurityGroupMembership",
        "locationName":"VpcSecurityGroupMembership"
      }
    },
    "AddSourceIdentifierToSubscriptionResult":{
      "type":"structure",
      "members":{
        "EventSubscription":{"shape":"EventSubscription"}
      }
    },
    "AuthorizeDBSecurityGroupIngressResult":{
      "type":"structure",
      "members":{
        "DBSecurityGroup":{"shape":"DBSecurityGroup"}
      }
    },
    "CopyDBParameterGroupResult":{
      "type":"structure",
      "members":{
        "DBParameterGroup":{"shape":"DBParameterGroup"}
      }
    },
    "CopyDBSnapshotResult":{
      "type":"structure",
      "members":{
        "DBSnapshot":{"shape":"DBSnapshot"}
      }
    },
    "CopyOptionGroupResult":{
      "type":"structure",
      "members":{
        "OptionGroup":{"shape":"OptionGroup"}
      }
    },
    "CreateDBInstanceResult":{
      "type":"structure",
      "members":{
        "DBInstance":{"shape":"DBInstance"}
      }
    },
    "CreateDBInstanceReadReplicaResult":{
      "type":"structure",
      "members":{
        "DBInstance":{"shape":"DBInstance"}
      }
    },
    "CreateDBParameterGroupResult":{
      "type":"structure",
      "members":{
        "DBParameterGroup":{"shape":"DBParameterGroup"}
      }
    },
    "CreateDBSecurityGroupResult":{
      "type":"structure",
      "members":{
        "DBSecurityGroup":{"shape":"DBSecurityGroup"}
      }
    },
    "CreateDBSnapshotResult":{
      "type":"structure",
      "members":{
        "DBSnapshot":{"shape":"DBSnapshot"}
      }
    },
    "CreateDBSubnetGroupResult":{
      "type":"structure",
      "members":{
        "DBSubnetGroup":{"shape":"DBSubnetGroup"}
      }
    },
    "CreateEventSubscriptionResult":{
      "type":"structure",
      "members":{
        "EventSubscription":{"shape":"EventSubscription"}
      }
    },
    "CreateOptionGroupResult":{
      "type":"structure",
      "members":{
        "OptionGroup":{"shape":"OptionGroup"}
      }
    },
    "DeleteDBInstanceResult":{
      "type":"structure",
      "members":{
        "DBInstance":{"shape":"DBInstance"}
      }
    },
    "DeleteDBSnapshotResult":{
      "type":"structure",
      "members":{
        "DBSnapshot":{"shape":"DBSnapshot"}
      }
    },
    "DeleteEventSubscriptionResult":{
      "type":"structure",
      "members":{
        "EventSubscription":{"shape":"EventSubscription"}
      }
    },
    "DescribeEngineDefaultParametersResult":{
      "type":"structure",
      "members":{
        "EngineDefaults":{"shape":"EngineDefaults"}
      }
    },
    "ModifyDBInstanceResult":{
      "type":"structure",
      "members":{
        "DBInstance":{"shape":"DBInstance"}
      }
    },
    "ModifyDBSubnetGroupResult":{
      "type":"structure",
      "members":{
        "DBSubnetGroup":{"shape":"DBSubnetGroup"}
      }
    },
    "ModifyEventSubscriptionResult":{
      "type":"structure",
      "members":{
        "EventSubscription":{"shape":"EventSubscription"}
      }
    },
    "ModifyOptionGroupResult":{
      "type":"structure",
      "members":{
        "OptionGroup":{"shape":"OptionGroup"}
      }
    },
    "PromoteReadReplicaResult":{
      "type":"structure",
      "members":{
        "DBInstance":{"shape":"DBInstance"}
      }
    },
    "PurchaseReservedDBInstancesOfferingResult":{
      "type":"structure",
      "members":{
        "ReservedDBInstance":{"shape":"ReservedDBInstance"}
      }
    },
    "RebootDBInstanceResult":{
      "type":"structure",
      "members":{
        "DBInstance":{"shape":"DBInstance"}
      }
    },
    "RemoveSourceIdentifierFromSubscriptionResult":{
      "type":"structure",
      "members":{
        "EventSubscription":{"shape":"EventSubscription"}
      }
    },
    "RestoreDBInstanceFromDBSnapshotResult":{
      "type":"structure",
      "members":{
        "DBInstance":{"shape":"DBInstance"}
      }
    },
    "RestoreDBInstanceToPointInTimeResult":{
      "type":"structure",
      "members":{
        "DBInstance":{"shape":"DBInstance"}
      }
    },
    "RevokeDBSecurityGroupIngressResult":{
      "type":"structure",
      "members":{
        "DBSecurityGroup":{"shape":"DBSecurityGroup"}
      }
    }
  }
}
,
"Redshift":
{
  "metadata":{
    "apiVersion":"2012-12-01",
    "endpointPrefix":"redshift",
    "serviceFullName":"Amazon Redshift",
    "signatureVersion":"v4",
    "xmlNamespace":"http://redshift.amazonaws.com/doc/2012-12-01/",
    "protocol":"query"
  },
  "operations":{
    "AuthorizeClusterSecurityGroupIngress":{
      "name":"AuthorizeClusterSecurityGroupIngress",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"AuthorizeClusterSecurityGroupIngressMessage"},
      "output":{
        "shape":"AuthorizeClusterSecurityGroupIngressResult",
        "wrapper":true,
        "resultWrapper":"AuthorizeClusterSecurityGroupIngressResult"
      },
      "errors":[
        {
          "shape":"ClusterSecurityGroupNotFoundFault",
          "error":{
            "code":"ClusterSecurityGroupNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidClusterSecurityGroupStateFault",
          "error":{
            "code":"InvalidClusterSecurityGroupState",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"AuthorizationAlreadyExistsFault",
          "error":{
            "code":"AuthorizationAlreadyExists",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"AuthorizationQuotaExceededFault",
          "error":{
            "code":"AuthorizationQuotaExceeded",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "AuthorizeSnapshotAccess":{
      "name":"AuthorizeSnapshotAccess",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"AuthorizeSnapshotAccessMessage"},
      "output":{
        "shape":"AuthorizeSnapshotAccessResult",
        "wrapper":true,
        "resultWrapper":"AuthorizeSnapshotAccessResult"
      },
      "errors":[
        {
          "shape":"ClusterSnapshotNotFoundFault",
          "error":{
            "code":"ClusterSnapshotNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"AuthorizationAlreadyExistsFault",
          "error":{
            "code":"AuthorizationAlreadyExists",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"AuthorizationQuotaExceededFault",
          "error":{
            "code":"AuthorizationQuotaExceeded",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "CopyClusterSnapshot":{
      "name":"CopyClusterSnapshot",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CopyClusterSnapshotMessage"},
      "output":{
        "shape":"CopyClusterSnapshotResult",
        "wrapper":true,
        "resultWrapper":"CopyClusterSnapshotResult"
      },
      "errors":[
        {
          "shape":"ClusterSnapshotAlreadyExistsFault",
          "error":{
            "code":"ClusterSnapshotAlreadyExists",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"ClusterSnapshotNotFoundFault",
          "error":{
            "code":"ClusterSnapshotNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidClusterSnapshotStateFault",
          "error":{
            "code":"InvalidClusterSnapshotState",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"ClusterSnapshotQuotaExceededFault",
          "error":{
            "code":"ClusterSnapshotQuotaExceeded",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "CreateCluster":{
      "name":"CreateCluster",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateClusterMessage"},
      "output":{
        "shape":"CreateClusterResult",
        "wrapper":true,
        "resultWrapper":"CreateClusterResult"
      },
      "errors":[
        {
          "shape":"ClusterAlreadyExistsFault",
          "error":{
            "code":"ClusterAlreadyExists",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InsufficientClusterCapacityFault",
          "error":{
            "code":"InsufficientClusterCapacity",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"ClusterParameterGroupNotFoundFault",
          "error":{
            "code":"ClusterParameterGroupNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"ClusterSecurityGroupNotFoundFault",
          "error":{
            "code":"ClusterSecurityGroupNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"ClusterQuotaExceededFault",
          "error":{
            "code":"ClusterQuotaExceeded",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"NumberOfNodesQuotaExceededFault",
          "error":{
            "code":"NumberOfNodesQuotaExceeded",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"NumberOfNodesPerClusterLimitExceededFault",
          "error":{
            "code":"NumberOfNodesPerClusterLimitExceeded",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"ClusterSubnetGroupNotFoundFault",
          "error":{
            "code":"ClusterSubnetGroupNotFoundFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidVPCNetworkStateFault",
          "error":{
            "code":"InvalidVPCNetworkStateFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidClusterSubnetGroupStateFault",
          "error":{
            "code":"InvalidClusterSubnetGroupStateFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidSubnet",
          "error":{
            "code":"InvalidSubnet",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"UnauthorizedOperation",
          "error":{
            "code":"UnauthorizedOperation",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"HsmClientCertificateNotFoundFault",
          "error":{
            "code":"HsmClientCertificateNotFoundFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"HsmConfigurationNotFoundFault",
          "error":{
            "code":"HsmConfigurationNotFoundFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidElasticIpFault",
          "error":{
            "code":"InvalidElasticIpFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"TagLimitExceededFault",
          "error":{
            "code":"TagLimitExceededFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidTagFault",
          "error":{
            "code":"InvalidTagFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "CreateClusterParameterGroup":{
      "name":"CreateClusterParameterGroup",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateClusterParameterGroupMessage"},
      "output":{
        "shape":"CreateClusterParameterGroupResult",
        "wrapper":true,
        "resultWrapper":"CreateClusterParameterGroupResult"
      },
      "errors":[
        {
          "shape":"ClusterParameterGroupQuotaExceededFault",
          "error":{
            "code":"ClusterParameterGroupQuotaExceeded",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"ClusterParameterGroupAlreadyExistsFault",
          "error":{
            "code":"ClusterParameterGroupAlreadyExists",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"TagLimitExceededFault",
          "error":{
            "code":"TagLimitExceededFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidTagFault",
          "error":{
            "code":"InvalidTagFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "CreateClusterSecurityGroup":{
      "name":"CreateClusterSecurityGroup",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateClusterSecurityGroupMessage"},
      "output":{
        "shape":"CreateClusterSecurityGroupResult",
        "wrapper":true,
        "resultWrapper":"CreateClusterSecurityGroupResult"
      },
      "errors":[
        {
          "shape":"ClusterSecurityGroupAlreadyExistsFault",
          "error":{
            "code":"ClusterSecurityGroupAlreadyExists",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"ClusterSecurityGroupQuotaExceededFault",
          "error":{
            "code":"QuotaExceeded.ClusterSecurityGroup",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"TagLimitExceededFault",
          "error":{
            "code":"TagLimitExceededFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidTagFault",
          "error":{
            "code":"InvalidTagFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "CreateClusterSnapshot":{
      "name":"CreateClusterSnapshot",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateClusterSnapshotMessage"},
      "output":{
        "shape":"CreateClusterSnapshotResult",
        "wrapper":true,
        "resultWrapper":"CreateClusterSnapshotResult"
      },
      "errors":[
        {
          "shape":"ClusterSnapshotAlreadyExistsFault",
          "error":{
            "code":"ClusterSnapshotAlreadyExists",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidClusterStateFault",
          "error":{
            "code":"InvalidClusterState",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"ClusterNotFoundFault",
          "error":{
            "code":"ClusterNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"ClusterSnapshotQuotaExceededFault",
          "error":{
            "code":"ClusterSnapshotQuotaExceeded",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"TagLimitExceededFault",
          "error":{
            "code":"TagLimitExceededFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidTagFault",
          "error":{
            "code":"InvalidTagFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "CreateClusterSubnetGroup":{
      "name":"CreateClusterSubnetGroup",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateClusterSubnetGroupMessage"},
      "output":{
        "shape":"CreateClusterSubnetGroupResult",
        "wrapper":true,
        "resultWrapper":"CreateClusterSubnetGroupResult"
      },
      "errors":[
        {
          "shape":"ClusterSubnetGroupAlreadyExistsFault",
          "error":{
            "code":"ClusterSubnetGroupAlreadyExists",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"ClusterSubnetGroupQuotaExceededFault",
          "error":{
            "code":"ClusterSubnetGroupQuotaExceeded",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"ClusterSubnetQuotaExceededFault",
          "error":{
            "code":"ClusterSubnetQuotaExceededFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidSubnet",
          "error":{
            "code":"InvalidSubnet",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"UnauthorizedOperation",
          "error":{
            "code":"UnauthorizedOperation",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"TagLimitExceededFault",
          "error":{
            "code":"TagLimitExceededFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidTagFault",
          "error":{
            "code":"InvalidTagFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "CreateEventSubscription":{
      "name":"CreateEventSubscription",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateEventSubscriptionMessage"},
      "output":{
        "shape":"CreateEventSubscriptionResult",
        "wrapper":true,
        "resultWrapper":"CreateEventSubscriptionResult"
      },
      "errors":[
        {
          "shape":"EventSubscriptionQuotaExceededFault",
          "error":{
            "code":"EventSubscriptionQuotaExceeded",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"SubscriptionAlreadyExistFault",
          "error":{
            "code":"SubscriptionAlreadyExist",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"SNSInvalidTopicFault",
          "error":{
            "code":"SNSInvalidTopic",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"SNSNoAuthorizationFault",
          "error":{
            "code":"SNSNoAuthorization",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"SNSTopicArnNotFoundFault",
          "error":{
            "code":"SNSTopicArnNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"SubscriptionEventIdNotFoundFault",
          "error":{
            "code":"SubscriptionEventIdNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"SubscriptionCategoryNotFoundFault",
          "error":{
            "code":"SubscriptionCategoryNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"SubscriptionSeverityNotFoundFault",
          "error":{
            "code":"SubscriptionSeverityNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"SourceNotFoundFault",
          "error":{
            "code":"SourceNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"TagLimitExceededFault",
          "error":{
            "code":"TagLimitExceededFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidTagFault",
          "error":{
            "code":"InvalidTagFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "CreateHsmClientCertificate":{
      "name":"CreateHsmClientCertificate",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateHsmClientCertificateMessage"},
      "output":{
        "shape":"CreateHsmClientCertificateResult",
        "wrapper":true,
        "resultWrapper":"CreateHsmClientCertificateResult"
      },
      "errors":[
        {
          "shape":"HsmClientCertificateAlreadyExistsFault",
          "error":{
            "code":"HsmClientCertificateAlreadyExistsFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"HsmClientCertificateQuotaExceededFault",
          "error":{
            "code":"HsmClientCertificateQuotaExceededFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"TagLimitExceededFault",
          "error":{
            "code":"TagLimitExceededFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidTagFault",
          "error":{
            "code":"InvalidTagFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "CreateHsmConfiguration":{
      "name":"CreateHsmConfiguration",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateHsmConfigurationMessage"},
      "output":{
        "shape":"CreateHsmConfigurationResult",
        "wrapper":true,
        "resultWrapper":"CreateHsmConfigurationResult"
      },
      "errors":[
        {
          "shape":"HsmConfigurationAlreadyExistsFault",
          "error":{
            "code":"HsmConfigurationAlreadyExistsFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"HsmConfigurationQuotaExceededFault",
          "error":{
            "code":"HsmConfigurationQuotaExceededFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"TagLimitExceededFault",
          "error":{
            "code":"TagLimitExceededFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidTagFault",
          "error":{
            "code":"InvalidTagFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "CreateTags":{
      "name":"CreateTags",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateTagsMessage"},
      "errors":[
        {
          "shape":"TagLimitExceededFault",
          "error":{
            "code":"TagLimitExceededFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"ResourceNotFoundFault",
          "error":{
            "code":"ResourceNotFoundFault",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidTagFault",
          "error":{
            "code":"InvalidTagFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DeleteCluster":{
      "name":"DeleteCluster",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteClusterMessage"},
      "output":{
        "shape":"DeleteClusterResult",
        "wrapper":true,
        "resultWrapper":"DeleteClusterResult"
      },
      "errors":[
        {
          "shape":"ClusterNotFoundFault",
          "error":{
            "code":"ClusterNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidClusterStateFault",
          "error":{
            "code":"InvalidClusterState",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"ClusterSnapshotAlreadyExistsFault",
          "error":{
            "code":"ClusterSnapshotAlreadyExists",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"ClusterSnapshotQuotaExceededFault",
          "error":{
            "code":"ClusterSnapshotQuotaExceeded",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DeleteClusterParameterGroup":{
      "name":"DeleteClusterParameterGroup",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteClusterParameterGroupMessage"},
      "errors":[
        {
          "shape":"InvalidClusterParameterGroupStateFault",
          "error":{
            "code":"InvalidClusterParameterGroupState",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"ClusterParameterGroupNotFoundFault",
          "error":{
            "code":"ClusterParameterGroupNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DeleteClusterSecurityGroup":{
      "name":"DeleteClusterSecurityGroup",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteClusterSecurityGroupMessage"},
      "errors":[
        {
          "shape":"InvalidClusterSecurityGroupStateFault",
          "error":{
            "code":"InvalidClusterSecurityGroupState",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"ClusterSecurityGroupNotFoundFault",
          "error":{
            "code":"ClusterSecurityGroupNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DeleteClusterSnapshot":{
      "name":"DeleteClusterSnapshot",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteClusterSnapshotMessage"},
      "output":{
        "shape":"DeleteClusterSnapshotResult",
        "wrapper":true,
        "resultWrapper":"DeleteClusterSnapshotResult"
      },
      "errors":[
        {
          "shape":"InvalidClusterSnapshotStateFault",
          "error":{
            "code":"InvalidClusterSnapshotState",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"ClusterSnapshotNotFoundFault",
          "error":{
            "code":"ClusterSnapshotNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DeleteClusterSubnetGroup":{
      "name":"DeleteClusterSubnetGroup",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteClusterSubnetGroupMessage"},
      "errors":[
        {
          "shape":"InvalidClusterSubnetGroupStateFault",
          "error":{
            "code":"InvalidClusterSubnetGroupStateFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidClusterSubnetStateFault",
          "error":{
            "code":"InvalidClusterSubnetStateFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"ClusterSubnetGroupNotFoundFault",
          "error":{
            "code":"ClusterSubnetGroupNotFoundFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DeleteEventSubscription":{
      "name":"DeleteEventSubscription",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteEventSubscriptionMessage"},
      "errors":[
        {
          "shape":"SubscriptionNotFoundFault",
          "error":{
            "code":"SubscriptionNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidSubscriptionStateFault",
          "error":{
            "code":"InvalidSubscriptionStateFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DeleteHsmClientCertificate":{
      "name":"DeleteHsmClientCertificate",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteHsmClientCertificateMessage"},
      "errors":[
        {
          "shape":"InvalidHsmClientCertificateStateFault",
          "error":{
            "code":"InvalidHsmClientCertificateStateFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"HsmClientCertificateNotFoundFault",
          "error":{
            "code":"HsmClientCertificateNotFoundFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DeleteHsmConfiguration":{
      "name":"DeleteHsmConfiguration",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteHsmConfigurationMessage"},
      "errors":[
        {
          "shape":"InvalidHsmConfigurationStateFault",
          "error":{
            "code":"InvalidHsmConfigurationStateFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"HsmConfigurationNotFoundFault",
          "error":{
            "code":"HsmConfigurationNotFoundFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DeleteTags":{
      "name":"DeleteTags",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteTagsMessage"},
      "errors":[
        {
          "shape":"ResourceNotFoundFault",
          "error":{
            "code":"ResourceNotFoundFault",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DescribeClusterParameterGroups":{
      "name":"DescribeClusterParameterGroups",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeClusterParameterGroupsMessage"},
      "output":{
        "shape":"ClusterParameterGroupsMessage",
        "resultWrapper":"DescribeClusterParameterGroupsResult"
      },
      "errors":[
        {
          "shape":"ClusterParameterGroupNotFoundFault",
          "error":{
            "code":"ClusterParameterGroupNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DescribeClusterParameters":{
      "name":"DescribeClusterParameters",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeClusterParametersMessage"},
      "output":{
        "shape":"ClusterParameterGroupDetails",
        "resultWrapper":"DescribeClusterParametersResult"
      },
      "errors":[
        {
          "shape":"ClusterParameterGroupNotFoundFault",
          "error":{
            "code":"ClusterParameterGroupNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DescribeClusterSecurityGroups":{
      "name":"DescribeClusterSecurityGroups",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeClusterSecurityGroupsMessage"},
      "output":{
        "shape":"ClusterSecurityGroupMessage",
        "resultWrapper":"DescribeClusterSecurityGroupsResult"
      },
      "errors":[
        {
          "shape":"ClusterSecurityGroupNotFoundFault",
          "error":{
            "code":"ClusterSecurityGroupNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DescribeClusterSnapshots":{
      "name":"DescribeClusterSnapshots",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeClusterSnapshotsMessage"},
      "output":{
        "shape":"SnapshotMessage",
        "resultWrapper":"DescribeClusterSnapshotsResult"
      },
      "errors":[
        {
          "shape":"ClusterSnapshotNotFoundFault",
          "error":{
            "code":"ClusterSnapshotNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DescribeClusterSubnetGroups":{
      "name":"DescribeClusterSubnetGroups",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeClusterSubnetGroupsMessage"},
      "output":{
        "shape":"ClusterSubnetGroupMessage",
        "resultWrapper":"DescribeClusterSubnetGroupsResult"
      },
      "errors":[
        {
          "shape":"ClusterSubnetGroupNotFoundFault",
          "error":{
            "code":"ClusterSubnetGroupNotFoundFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DescribeClusterVersions":{
      "name":"DescribeClusterVersions",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeClusterVersionsMessage"},
      "output":{
        "shape":"ClusterVersionsMessage",
        "resultWrapper":"DescribeClusterVersionsResult"
      }
    },
    "DescribeClusters":{
      "name":"DescribeClusters",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeClustersMessage"},
      "output":{
        "shape":"ClustersMessage",
        "resultWrapper":"DescribeClustersResult"
      },
      "errors":[
        {
          "shape":"ClusterNotFoundFault",
          "error":{
            "code":"ClusterNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DescribeDefaultClusterParameters":{
      "name":"DescribeDefaultClusterParameters",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeDefaultClusterParametersMessage"},
      "output":{
        "shape":"DescribeDefaultClusterParametersResult",
        "wrapper":true,
        "resultWrapper":"DescribeDefaultClusterParametersResult"
      }
    },
    "DescribeEventCategories":{
      "name":"DescribeEventCategories",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeEventCategoriesMessage"},
      "output":{
        "shape":"EventCategoriesMessage",
        "resultWrapper":"DescribeEventCategoriesResult"
      }
    },
    "DescribeEventSubscriptions":{
      "name":"DescribeEventSubscriptions",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeEventSubscriptionsMessage"},
      "output":{
        "shape":"EventSubscriptionsMessage",
        "resultWrapper":"DescribeEventSubscriptionsResult"
      },
      "errors":[
        {
          "shape":"SubscriptionNotFoundFault",
          "error":{
            "code":"SubscriptionNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DescribeEvents":{
      "name":"DescribeEvents",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeEventsMessage"},
      "output":{
        "shape":"EventsMessage",
        "resultWrapper":"DescribeEventsResult"
      }
    },
    "DescribeHsmClientCertificates":{
      "name":"DescribeHsmClientCertificates",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeHsmClientCertificatesMessage"},
      "output":{
        "shape":"HsmClientCertificateMessage",
        "resultWrapper":"DescribeHsmClientCertificatesResult"
      },
      "errors":[
        {
          "shape":"HsmClientCertificateNotFoundFault",
          "error":{
            "code":"HsmClientCertificateNotFoundFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DescribeHsmConfigurations":{
      "name":"DescribeHsmConfigurations",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeHsmConfigurationsMessage"},
      "output":{
        "shape":"HsmConfigurationMessage",
        "resultWrapper":"DescribeHsmConfigurationsResult"
      },
      "errors":[
        {
          "shape":"HsmConfigurationNotFoundFault",
          "error":{
            "code":"HsmConfigurationNotFoundFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DescribeLoggingStatus":{
      "name":"DescribeLoggingStatus",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeLoggingStatusMessage"},
      "output":{
        "shape":"LoggingStatus",
        "resultWrapper":"DescribeLoggingStatusResult"
      },
      "errors":[
        {
          "shape":"ClusterNotFoundFault",
          "error":{
            "code":"ClusterNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DescribeOrderableClusterOptions":{
      "name":"DescribeOrderableClusterOptions",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeOrderableClusterOptionsMessage"},
      "output":{
        "shape":"OrderableClusterOptionsMessage",
        "resultWrapper":"DescribeOrderableClusterOptionsResult"
      }
    },
    "DescribeReservedNodeOfferings":{
      "name":"DescribeReservedNodeOfferings",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeReservedNodeOfferingsMessage"},
      "output":{
        "shape":"ReservedNodeOfferingsMessage",
        "resultWrapper":"DescribeReservedNodeOfferingsResult"
      },
      "errors":[
        {
          "shape":"ReservedNodeOfferingNotFoundFault",
          "error":{
            "code":"ReservedNodeOfferingNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DescribeReservedNodes":{
      "name":"DescribeReservedNodes",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeReservedNodesMessage"},
      "output":{
        "shape":"ReservedNodesMessage",
        "resultWrapper":"DescribeReservedNodesResult"
      },
      "errors":[
        {
          "shape":"ReservedNodeNotFoundFault",
          "error":{
            "code":"ReservedNodeNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DescribeResize":{
      "name":"DescribeResize",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeResizeMessage"},
      "output":{
        "shape":"ResizeProgressMessage",
        "resultWrapper":"DescribeResizeResult"
      },
      "errors":[
        {
          "shape":"ClusterNotFoundFault",
          "error":{
            "code":"ClusterNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"ResizeNotFoundFault",
          "error":{
            "code":"ResizeNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DescribeTags":{
      "name":"DescribeTags",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeTagsMessage"},
      "output":{
        "shape":"TaggedResourceListMessage",
        "resultWrapper":"DescribeTagsResult"
      },
      "errors":[
        {
          "shape":"ResourceNotFoundFault",
          "error":{
            "code":"ResourceNotFoundFault",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DisableLogging":{
      "name":"DisableLogging",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DisableLoggingMessage"},
      "output":{
        "shape":"LoggingStatus",
        "resultWrapper":"DisableLoggingResult"
      },
      "errors":[
        {
          "shape":"ClusterNotFoundFault",
          "error":{
            "code":"ClusterNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DisableSnapshotCopy":{
      "name":"DisableSnapshotCopy",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DisableSnapshotCopyMessage"},
      "output":{
        "shape":"DisableSnapshotCopyResult",
        "wrapper":true,
        "resultWrapper":"DisableSnapshotCopyResult"
      },
      "errors":[
        {
          "shape":"ClusterNotFoundFault",
          "error":{
            "code":"ClusterNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"SnapshotCopyAlreadyDisabledFault",
          "error":{
            "code":"SnapshotCopyAlreadyDisabledFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidClusterStateFault",
          "error":{
            "code":"InvalidClusterState",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"UnauthorizedOperation",
          "error":{
            "code":"UnauthorizedOperation",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "EnableLogging":{
      "name":"EnableLogging",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"EnableLoggingMessage"},
      "output":{
        "shape":"LoggingStatus",
        "resultWrapper":"EnableLoggingResult"
      },
      "errors":[
        {
          "shape":"ClusterNotFoundFault",
          "error":{
            "code":"ClusterNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"BucketNotFoundFault",
          "error":{
            "code":"BucketNotFoundFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InsufficientS3BucketPolicyFault",
          "error":{
            "code":"InsufficientS3BucketPolicyFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidS3KeyPrefixFault",
          "error":{
            "code":"InvalidS3KeyPrefixFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidS3BucketNameFault",
          "error":{
            "code":"InvalidS3BucketNameFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "EnableSnapshotCopy":{
      "name":"EnableSnapshotCopy",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"EnableSnapshotCopyMessage"},
      "output":{
        "shape":"EnableSnapshotCopyResult",
        "wrapper":true,
        "resultWrapper":"EnableSnapshotCopyResult"
      },
      "errors":[
        {
          "shape":"IncompatibleOrderableOptions",
          "error":{
            "code":"IncompatibleOrderableOptions",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidClusterStateFault",
          "error":{
            "code":"InvalidClusterState",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"ClusterNotFoundFault",
          "error":{
            "code":"ClusterNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"CopyToRegionDisabledFault",
          "error":{
            "code":"CopyToRegionDisabledFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"SnapshotCopyAlreadyEnabledFault",
          "error":{
            "code":"SnapshotCopyAlreadyEnabledFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"UnknownSnapshotCopyRegionFault",
          "error":{
            "code":"UnknownSnapshotCopyRegionFault",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"UnauthorizedOperation",
          "error":{
            "code":"UnauthorizedOperation",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "ModifyCluster":{
      "name":"ModifyCluster",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ModifyClusterMessage"},
      "output":{
        "shape":"ModifyClusterResult",
        "wrapper":true,
        "resultWrapper":"ModifyClusterResult"
      },
      "errors":[
        {
          "shape":"InvalidClusterStateFault",
          "error":{
            "code":"InvalidClusterState",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidClusterSecurityGroupStateFault",
          "error":{
            "code":"InvalidClusterSecurityGroupState",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"ClusterNotFoundFault",
          "error":{
            "code":"ClusterNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"NumberOfNodesQuotaExceededFault",
          "error":{
            "code":"NumberOfNodesQuotaExceeded",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"ClusterSecurityGroupNotFoundFault",
          "error":{
            "code":"ClusterSecurityGroupNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"ClusterParameterGroupNotFoundFault",
          "error":{
            "code":"ClusterParameterGroupNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InsufficientClusterCapacityFault",
          "error":{
            "code":"InsufficientClusterCapacity",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"UnsupportedOptionFault",
          "error":{
            "code":"UnsupportedOptionFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"UnauthorizedOperation",
          "error":{
            "code":"UnauthorizedOperation",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"HsmClientCertificateNotFoundFault",
          "error":{
            "code":"HsmClientCertificateNotFoundFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"HsmConfigurationNotFoundFault",
          "error":{
            "code":"HsmConfigurationNotFoundFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"ClusterAlreadyExistsFault",
          "error":{
            "code":"ClusterAlreadyExists",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "ModifyClusterParameterGroup":{
      "name":"ModifyClusterParameterGroup",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ModifyClusterParameterGroupMessage"},
      "output":{
        "shape":"ClusterParameterGroupNameMessage",
        "resultWrapper":"ModifyClusterParameterGroupResult"
      },
      "errors":[
        {
          "shape":"ClusterParameterGroupNotFoundFault",
          "error":{
            "code":"ClusterParameterGroupNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidClusterParameterGroupStateFault",
          "error":{
            "code":"InvalidClusterParameterGroupState",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "ModifyClusterSubnetGroup":{
      "name":"ModifyClusterSubnetGroup",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ModifyClusterSubnetGroupMessage"},
      "output":{
        "shape":"ModifyClusterSubnetGroupResult",
        "wrapper":true,
        "resultWrapper":"ModifyClusterSubnetGroupResult"
      },
      "errors":[
        {
          "shape":"ClusterSubnetGroupNotFoundFault",
          "error":{
            "code":"ClusterSubnetGroupNotFoundFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"ClusterSubnetQuotaExceededFault",
          "error":{
            "code":"ClusterSubnetQuotaExceededFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"SubnetAlreadyInUse",
          "error":{
            "code":"SubnetAlreadyInUse",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidSubnet",
          "error":{
            "code":"InvalidSubnet",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"UnauthorizedOperation",
          "error":{
            "code":"UnauthorizedOperation",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "ModifyEventSubscription":{
      "name":"ModifyEventSubscription",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ModifyEventSubscriptionMessage"},
      "output":{
        "shape":"ModifyEventSubscriptionResult",
        "wrapper":true,
        "resultWrapper":"ModifyEventSubscriptionResult"
      },
      "errors":[
        {
          "shape":"SubscriptionNotFoundFault",
          "error":{
            "code":"SubscriptionNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"SNSInvalidTopicFault",
          "error":{
            "code":"SNSInvalidTopic",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"SNSNoAuthorizationFault",
          "error":{
            "code":"SNSNoAuthorization",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"SNSTopicArnNotFoundFault",
          "error":{
            "code":"SNSTopicArnNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"SubscriptionEventIdNotFoundFault",
          "error":{
            "code":"SubscriptionEventIdNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"SubscriptionCategoryNotFoundFault",
          "error":{
            "code":"SubscriptionCategoryNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"SubscriptionSeverityNotFoundFault",
          "error":{
            "code":"SubscriptionSeverityNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"SourceNotFoundFault",
          "error":{
            "code":"SourceNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidSubscriptionStateFault",
          "error":{
            "code":"InvalidSubscriptionStateFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "ModifySnapshotCopyRetentionPeriod":{
      "name":"ModifySnapshotCopyRetentionPeriod",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ModifySnapshotCopyRetentionPeriodMessage"},
      "output":{
        "shape":"ModifySnapshotCopyRetentionPeriodResult",
        "wrapper":true,
        "resultWrapper":"ModifySnapshotCopyRetentionPeriodResult"
      },
      "errors":[
        {
          "shape":"ClusterNotFoundFault",
          "error":{
            "code":"ClusterNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"SnapshotCopyDisabledFault",
          "error":{
            "code":"SnapshotCopyDisabledFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"UnauthorizedOperation",
          "error":{
            "code":"UnauthorizedOperation",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidClusterStateFault",
          "error":{
            "code":"InvalidClusterState",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "PurchaseReservedNodeOffering":{
      "name":"PurchaseReservedNodeOffering",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"PurchaseReservedNodeOfferingMessage"},
      "output":{
        "shape":"PurchaseReservedNodeOfferingResult",
        "wrapper":true,
        "resultWrapper":"PurchaseReservedNodeOfferingResult"
      },
      "errors":[
        {
          "shape":"ReservedNodeOfferingNotFoundFault",
          "error":{
            "code":"ReservedNodeOfferingNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"ReservedNodeAlreadyExistsFault",
          "error":{
            "code":"ReservedNodeAlreadyExists",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"ReservedNodeQuotaExceededFault",
          "error":{
            "code":"ReservedNodeQuotaExceeded",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "RebootCluster":{
      "name":"RebootCluster",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"RebootClusterMessage"},
      "output":{
        "shape":"RebootClusterResult",
        "wrapper":true,
        "resultWrapper":"RebootClusterResult"
      },
      "errors":[
        {
          "shape":"InvalidClusterStateFault",
          "error":{
            "code":"InvalidClusterState",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"ClusterNotFoundFault",
          "error":{
            "code":"ClusterNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "ResetClusterParameterGroup":{
      "name":"ResetClusterParameterGroup",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ResetClusterParameterGroupMessage"},
      "output":{
        "shape":"ClusterParameterGroupNameMessage",
        "resultWrapper":"ResetClusterParameterGroupResult"
      },
      "errors":[
        {
          "shape":"InvalidClusterParameterGroupStateFault",
          "error":{
            "code":"InvalidClusterParameterGroupState",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"ClusterParameterGroupNotFoundFault",
          "error":{
            "code":"ClusterParameterGroupNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "RestoreFromClusterSnapshot":{
      "name":"RestoreFromClusterSnapshot",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"RestoreFromClusterSnapshotMessage"},
      "output":{
        "shape":"RestoreFromClusterSnapshotResult",
        "wrapper":true,
        "resultWrapper":"RestoreFromClusterSnapshotResult"
      },
      "errors":[
        {
          "shape":"AccessToSnapshotDeniedFault",
          "error":{
            "code":"AccessToSnapshotDenied",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"ClusterAlreadyExistsFault",
          "error":{
            "code":"ClusterAlreadyExists",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"ClusterSnapshotNotFoundFault",
          "error":{
            "code":"ClusterSnapshotNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"ClusterQuotaExceededFault",
          "error":{
            "code":"ClusterQuotaExceeded",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InsufficientClusterCapacityFault",
          "error":{
            "code":"InsufficientClusterCapacity",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidClusterSnapshotStateFault",
          "error":{
            "code":"InvalidClusterSnapshotState",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidRestoreFault",
          "error":{
            "code":"InvalidRestore",
            "httpStatusCode":406,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"NumberOfNodesQuotaExceededFault",
          "error":{
            "code":"NumberOfNodesQuotaExceeded",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"NumberOfNodesPerClusterLimitExceededFault",
          "error":{
            "code":"NumberOfNodesPerClusterLimitExceeded",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidVPCNetworkStateFault",
          "error":{
            "code":"InvalidVPCNetworkStateFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidClusterSubnetGroupStateFault",
          "error":{
            "code":"InvalidClusterSubnetGroupStateFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidSubnet",
          "error":{
            "code":"InvalidSubnet",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"ClusterSubnetGroupNotFoundFault",
          "error":{
            "code":"ClusterSubnetGroupNotFoundFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"UnauthorizedOperation",
          "error":{
            "code":"UnauthorizedOperation",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"HsmClientCertificateNotFoundFault",
          "error":{
            "code":"HsmClientCertificateNotFoundFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"HsmConfigurationNotFoundFault",
          "error":{
            "code":"HsmConfigurationNotFoundFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidElasticIpFault",
          "error":{
            "code":"InvalidElasticIpFault",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"ClusterParameterGroupNotFoundFault",
          "error":{
            "code":"ClusterParameterGroupNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"ClusterSecurityGroupNotFoundFault",
          "error":{
            "code":"ClusterSecurityGroupNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "RevokeClusterSecurityGroupIngress":{
      "name":"RevokeClusterSecurityGroupIngress",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"RevokeClusterSecurityGroupIngressMessage"},
      "output":{
        "shape":"RevokeClusterSecurityGroupIngressResult",
        "wrapper":true,
        "resultWrapper":"RevokeClusterSecurityGroupIngressResult"
      },
      "errors":[
        {
          "shape":"ClusterSecurityGroupNotFoundFault",
          "error":{
            "code":"ClusterSecurityGroupNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"AuthorizationNotFoundFault",
          "error":{
            "code":"AuthorizationNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidClusterSecurityGroupStateFault",
          "error":{
            "code":"InvalidClusterSecurityGroupState",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "RevokeSnapshotAccess":{
      "name":"RevokeSnapshotAccess",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"RevokeSnapshotAccessMessage"},
      "output":{
        "shape":"RevokeSnapshotAccessResult",
        "wrapper":true,
        "resultWrapper":"RevokeSnapshotAccessResult"
      },
      "errors":[
        {
          "shape":"AccessToSnapshotDeniedFault",
          "error":{
            "code":"AccessToSnapshotDenied",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"AuthorizationNotFoundFault",
          "error":{
            "code":"AuthorizationNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"ClusterSnapshotNotFoundFault",
          "error":{
            "code":"ClusterSnapshotNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "RotateEncryptionKey":{
      "name":"RotateEncryptionKey",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"RotateEncryptionKeyMessage"},
      "output":{
        "shape":"RotateEncryptionKeyResult",
        "wrapper":true,
        "resultWrapper":"RotateEncryptionKeyResult"
      },
      "errors":[
        {
          "shape":"ClusterNotFoundFault",
          "error":{
            "code":"ClusterNotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidClusterStateFault",
          "error":{
            "code":"InvalidClusterState",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    }
  },
  "shapes":{
    "AccessToSnapshotDeniedFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"AccessToSnapshotDenied",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "AccountWithRestoreAccess":{
      "type":"structure",
      "members":{
        "AccountId":{"shape":"String"}
      }
    },
    "AccountsWithRestoreAccessList":{
      "type":"list",
      "member":{
        "shape":"AccountWithRestoreAccess",
        "locationName":"AccountWithRestoreAccess"
      }
    },
    "AuthorizationAlreadyExistsFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"AuthorizationAlreadyExists",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "AuthorizationNotFoundFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"AuthorizationNotFound",
        "httpStatusCode":404,
        "senderFault":true
      },
      "exception":true
    },
    "AuthorizationQuotaExceededFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"AuthorizationQuotaExceeded",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "AuthorizeClusterSecurityGroupIngressMessage":{
      "type":"structure",
      "required":["ClusterSecurityGroupName"],
      "members":{
        "ClusterSecurityGroupName":{"shape":"String"},
        "CIDRIP":{"shape":"String"},
        "EC2SecurityGroupName":{"shape":"String"},
        "EC2SecurityGroupOwnerId":{"shape":"String"}
      }
    },
    "AuthorizeSnapshotAccessMessage":{
      "type":"structure",
      "required":[
        "SnapshotIdentifier",
        "AccountWithRestoreAccess"
      ],
      "members":{
        "SnapshotIdentifier":{"shape":"String"},
        "SnapshotClusterIdentifier":{"shape":"String"},
        "AccountWithRestoreAccess":{"shape":"String"}
      }
    },
    "AvailabilityZone":{
      "type":"structure",
      "members":{
        "Name":{"shape":"String"}
      },
      "wrapper":true
    },
    "AvailabilityZoneList":{
      "type":"list",
      "member":{
        "shape":"AvailabilityZone",
        "locationName":"AvailabilityZone"
      }
    },
    "Boolean":{"type":"boolean"},
    "BooleanOptional":{"type":"boolean"},
    "BucketNotFoundFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"BucketNotFoundFault",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "Cluster":{
      "type":"structure",
      "members":{
        "ClusterIdentifier":{"shape":"String"},
        "NodeType":{"shape":"String"},
        "ClusterStatus":{"shape":"String"},
        "ModifyStatus":{"shape":"String"},
        "MasterUsername":{"shape":"String"},
        "DBName":{"shape":"String"},
        "Endpoint":{"shape":"Endpoint"},
        "ClusterCreateTime":{"shape":"TStamp"},
        "AutomatedSnapshotRetentionPeriod":{"shape":"Integer"},
        "ClusterSecurityGroups":{"shape":"ClusterSecurityGroupMembershipList"},
        "VpcSecurityGroups":{"shape":"VpcSecurityGroupMembershipList"},
        "ClusterParameterGroups":{"shape":"ClusterParameterGroupStatusList"},
        "ClusterSubnetGroupName":{"shape":"String"},
        "VpcId":{"shape":"String"},
        "AvailabilityZone":{"shape":"String"},
        "PreferredMaintenanceWindow":{"shape":"String"},
        "PendingModifiedValues":{"shape":"PendingModifiedValues"},
        "ClusterVersion":{"shape":"String"},
        "AllowVersionUpgrade":{"shape":"Boolean"},
        "NumberOfNodes":{"shape":"Integer"},
        "PubliclyAccessible":{"shape":"Boolean"},
        "Encrypted":{"shape":"Boolean"},
        "RestoreStatus":{"shape":"RestoreStatus"},
        "HsmStatus":{"shape":"HsmStatus"},
        "ClusterSnapshotCopyStatus":{"shape":"ClusterSnapshotCopyStatus"},
        "ClusterPublicKey":{"shape":"String"},
        "ClusterNodes":{"shape":"ClusterNodesList"},
        "ElasticIpStatus":{"shape":"ElasticIpStatus"},
        "ClusterRevisionNumber":{"shape":"String"},
        "Tags":{"shape":"TagList"},
        "KmsKeyId":{"shape":"String"}
      },
      "wrapper":true
    },
    "ClusterAlreadyExistsFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"ClusterAlreadyExists",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "ClusterList":{
      "type":"list",
      "member":{
        "shape":"Cluster",
        "locationName":"Cluster"
      }
    },
    "ClusterNode":{
      "type":"structure",
      "members":{
        "NodeRole":{"shape":"String"},
        "PrivateIPAddress":{"shape":"String"},
        "PublicIPAddress":{"shape":"String"}
      }
    },
    "ClusterNodesList":{
      "type":"list",
      "member":{"shape":"ClusterNode"}
    },
    "ClusterNotFoundFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"ClusterNotFound",
        "httpStatusCode":404,
        "senderFault":true
      },
      "exception":true
    },
    "ClusterParameterGroup":{
      "type":"structure",
      "members":{
        "ParameterGroupName":{"shape":"String"},
        "ParameterGroupFamily":{"shape":"String"},
        "Description":{"shape":"String"},
        "Tags":{"shape":"TagList"}
      },
      "wrapper":true
    },
    "ClusterParameterGroupAlreadyExistsFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"ClusterParameterGroupAlreadyExists",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "ClusterParameterGroupDetails":{
      "type":"structure",
      "members":{
        "Parameters":{"shape":"ParametersList"},
        "Marker":{"shape":"String"}
      }
    },
    "ClusterParameterGroupNameMessage":{
      "type":"structure",
      "members":{
        "ParameterGroupName":{"shape":"String"},
        "ParameterGroupStatus":{"shape":"String"}
      }
    },
    "ClusterParameterGroupNotFoundFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"ClusterParameterGroupNotFound",
        "httpStatusCode":404,
        "senderFault":true
      },
      "exception":true
    },
    "ClusterParameterGroupQuotaExceededFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"ClusterParameterGroupQuotaExceeded",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "ClusterParameterGroupStatus":{
      "type":"structure",
      "members":{
        "ParameterGroupName":{"shape":"String"},
        "ParameterApplyStatus":{"shape":"String"}
      }
    },
    "ClusterParameterGroupStatusList":{
      "type":"list",
      "member":{
        "shape":"ClusterParameterGroupStatus",
        "locationName":"ClusterParameterGroup"
      }
    },
    "ClusterParameterGroupsMessage":{
      "type":"structure",
      "members":{
        "Marker":{"shape":"String"},
        "ParameterGroups":{"shape":"ParameterGroupList"}
      }
    },
    "ClusterQuotaExceededFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"ClusterQuotaExceeded",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "ClusterSecurityGroup":{
      "type":"structure",
      "members":{
        "ClusterSecurityGroupName":{"shape":"String"},
        "Description":{"shape":"String"},
        "EC2SecurityGroups":{"shape":"EC2SecurityGroupList"},
        "IPRanges":{"shape":"IPRangeList"},
        "Tags":{"shape":"TagList"}
      },
      "wrapper":true
    },
    "ClusterSecurityGroupAlreadyExistsFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"ClusterSecurityGroupAlreadyExists",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "ClusterSecurityGroupMembership":{
      "type":"structure",
      "members":{
        "ClusterSecurityGroupName":{"shape":"String"},
        "Status":{"shape":"String"}
      }
    },
    "ClusterSecurityGroupMembershipList":{
      "type":"list",
      "member":{
        "shape":"ClusterSecurityGroupMembership",
        "locationName":"ClusterSecurityGroup"
      }
    },
    "ClusterSecurityGroupMessage":{
      "type":"structure",
      "members":{
        "Marker":{"shape":"String"},
        "ClusterSecurityGroups":{"shape":"ClusterSecurityGroups"}
      }
    },
    "ClusterSecurityGroupNameList":{
      "type":"list",
      "member":{
        "shape":"String",
        "locationName":"ClusterSecurityGroupName"
      }
    },
    "ClusterSecurityGroupNotFoundFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"ClusterSecurityGroupNotFound",
        "httpStatusCode":404,
        "senderFault":true
      },
      "exception":true
    },
    "ClusterSecurityGroupQuotaExceededFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"QuotaExceeded.ClusterSecurityGroup",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "ClusterSecurityGroups":{
      "type":"list",
      "member":{
        "shape":"ClusterSecurityGroup",
        "locationName":"ClusterSecurityGroup"
      }
    },
    "ClusterSnapshotAlreadyExistsFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"ClusterSnapshotAlreadyExists",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "ClusterSnapshotCopyStatus":{
      "type":"structure",
      "members":{
        "DestinationRegion":{"shape":"String"},
        "RetentionPeriod":{"shape":"Long"}
      }
    },
    "ClusterSnapshotNotFoundFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"ClusterSnapshotNotFound",
        "httpStatusCode":404,
        "senderFault":true
      },
      "exception":true
    },
    "ClusterSnapshotQuotaExceededFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"ClusterSnapshotQuotaExceeded",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "ClusterSubnetGroup":{
      "type":"structure",
      "members":{
        "ClusterSubnetGroupName":{"shape":"String"},
        "Description":{"shape":"String"},
        "VpcId":{"shape":"String"},
        "SubnetGroupStatus":{"shape":"String"},
        "Subnets":{"shape":"SubnetList"},
        "Tags":{"shape":"TagList"}
      },
      "wrapper":true
    },
    "ClusterSubnetGroupAlreadyExistsFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"ClusterSubnetGroupAlreadyExists",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "ClusterSubnetGroupMessage":{
      "type":"structure",
      "members":{
        "Marker":{"shape":"String"},
        "ClusterSubnetGroups":{"shape":"ClusterSubnetGroups"}
      }
    },
    "ClusterSubnetGroupNotFoundFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"ClusterSubnetGroupNotFoundFault",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "ClusterSubnetGroupQuotaExceededFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"ClusterSubnetGroupQuotaExceeded",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "ClusterSubnetGroups":{
      "type":"list",
      "member":{
        "shape":"ClusterSubnetGroup",
        "locationName":"ClusterSubnetGroup"
      }
    },
    "ClusterSubnetQuotaExceededFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"ClusterSubnetQuotaExceededFault",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "ClusterVersion":{
      "type":"structure",
      "members":{
        "ClusterVersion":{"shape":"String"},
        "ClusterParameterGroupFamily":{"shape":"String"},
        "Description":{"shape":"String"}
      }
    },
    "ClusterVersionList":{
      "type":"list",
      "member":{
        "shape":"ClusterVersion",
        "locationName":"ClusterVersion"
      }
    },
    "ClusterVersionsMessage":{
      "type":"structure",
      "members":{
        "Marker":{"shape":"String"},
        "ClusterVersions":{"shape":"ClusterVersionList"}
      }
    },
    "ClustersMessage":{
      "type":"structure",
      "members":{
        "Marker":{"shape":"String"},
        "Clusters":{"shape":"ClusterList"}
      }
    },
    "CopyClusterSnapshotMessage":{
      "type":"structure",
      "required":[
        "SourceSnapshotIdentifier",
        "TargetSnapshotIdentifier"
      ],
      "members":{
        "SourceSnapshotIdentifier":{"shape":"String"},
        "SourceSnapshotClusterIdentifier":{"shape":"String"},
        "TargetSnapshotIdentifier":{"shape":"String"}
      }
    },
    "CopyToRegionDisabledFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"CopyToRegionDisabledFault",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "CreateClusterMessage":{
      "type":"structure",
      "required":[
        "ClusterIdentifier",
        "NodeType",
        "MasterUsername",
        "MasterUserPassword"
      ],
      "members":{
        "DBName":{"shape":"String"},
        "ClusterIdentifier":{"shape":"String"},
        "ClusterType":{"shape":"String"},
        "NodeType":{"shape":"String"},
        "MasterUsername":{"shape":"String"},
        "MasterUserPassword":{"shape":"String"},
        "ClusterSecurityGroups":{"shape":"ClusterSecurityGroupNameList"},
        "VpcSecurityGroupIds":{"shape":"VpcSecurityGroupIdList"},
        "ClusterSubnetGroupName":{"shape":"String"},
        "AvailabilityZone":{"shape":"String"},
        "PreferredMaintenanceWindow":{"shape":"String"},
        "ClusterParameterGroupName":{"shape":"String"},
        "AutomatedSnapshotRetentionPeriod":{"shape":"IntegerOptional"},
        "Port":{"shape":"IntegerOptional"},
        "ClusterVersion":{"shape":"String"},
        "AllowVersionUpgrade":{"shape":"BooleanOptional"},
        "NumberOfNodes":{"shape":"IntegerOptional"},
        "PubliclyAccessible":{"shape":"BooleanOptional"},
        "Encrypted":{"shape":"BooleanOptional"},
        "HsmClientCertificateIdentifier":{"shape":"String"},
        "HsmConfigurationIdentifier":{"shape":"String"},
        "ElasticIp":{"shape":"String"},
        "Tags":{"shape":"TagList"},
        "KmsKeyId":{"shape":"String"}
      }
    },
    "CreateClusterParameterGroupMessage":{
      "type":"structure",
      "required":[
        "ParameterGroupName",
        "ParameterGroupFamily",
        "Description"
      ],
      "members":{
        "ParameterGroupName":{"shape":"String"},
        "ParameterGroupFamily":{"shape":"String"},
        "Description":{"shape":"String"},
        "Tags":{"shape":"TagList"}
      }
    },
    "CreateClusterSecurityGroupMessage":{
      "type":"structure",
      "required":[
        "ClusterSecurityGroupName",
        "Description"
      ],
      "members":{
        "ClusterSecurityGroupName":{"shape":"String"},
        "Description":{"shape":"String"},
        "Tags":{"shape":"TagList"}
      }
    },
    "CreateClusterSnapshotMessage":{
      "type":"structure",
      "required":[
        "SnapshotIdentifier",
        "ClusterIdentifier"
      ],
      "members":{
        "SnapshotIdentifier":{"shape":"String"},
        "ClusterIdentifier":{"shape":"String"},
        "Tags":{"shape":"TagList"}
      }
    },
    "CreateClusterSubnetGroupMessage":{
      "type":"structure",
      "required":[
        "ClusterSubnetGroupName",
        "Description",
        "SubnetIds"
      ],
      "members":{
        "ClusterSubnetGroupName":{"shape":"String"},
        "Description":{"shape":"String"},
        "SubnetIds":{"shape":"SubnetIdentifierList"},
        "Tags":{"shape":"TagList"}
      }
    },
    "CreateEventSubscriptionMessage":{
      "type":"structure",
      "required":[
        "SubscriptionName",
        "SnsTopicArn"
      ],
      "members":{
        "SubscriptionName":{"shape":"String"},
        "SnsTopicArn":{"shape":"String"},
        "SourceType":{"shape":"String"},
        "SourceIds":{"shape":"SourceIdsList"},
        "EventCategories":{"shape":"EventCategoriesList"},
        "Severity":{"shape":"String"},
        "Enabled":{"shape":"BooleanOptional"},
        "Tags":{"shape":"TagList"}
      }
    },
    "CreateHsmClientCertificateMessage":{
      "type":"structure",
      "required":["HsmClientCertificateIdentifier"],
      "members":{
        "HsmClientCertificateIdentifier":{"shape":"String"},
        "Tags":{"shape":"TagList"}
      }
    },
    "CreateHsmConfigurationMessage":{
      "type":"structure",
      "required":[
        "HsmConfigurationIdentifier",
        "Description",
        "HsmIpAddress",
        "HsmPartitionName",
        "HsmPartitionPassword",
        "HsmServerPublicCertificate"
      ],
      "members":{
        "HsmConfigurationIdentifier":{"shape":"String"},
        "Description":{"shape":"String"},
        "HsmIpAddress":{"shape":"String"},
        "HsmPartitionName":{"shape":"String"},
        "HsmPartitionPassword":{"shape":"String"},
        "HsmServerPublicCertificate":{"shape":"String"},
        "Tags":{"shape":"TagList"}
      }
    },
    "CreateTagsMessage":{
      "type":"structure",
      "required":[
        "ResourceName",
        "Tags"
      ],
      "members":{
        "ResourceName":{"shape":"String"},
        "Tags":{"shape":"TagList"}
      }
    },
    "DefaultClusterParameters":{
      "type":"structure",
      "members":{
        "ParameterGroupFamily":{"shape":"String"},
        "Marker":{"shape":"String"},
        "Parameters":{"shape":"ParametersList"}
      },
      "wrapper":true
    },
    "DeleteClusterMessage":{
      "type":"structure",
      "required":["ClusterIdentifier"],
      "members":{
        "ClusterIdentifier":{"shape":"String"},
        "SkipFinalClusterSnapshot":{"shape":"Boolean"},
        "FinalClusterSnapshotIdentifier":{"shape":"String"}
      }
    },
    "DeleteClusterParameterGroupMessage":{
      "type":"structure",
      "required":["ParameterGroupName"],
      "members":{
        "ParameterGroupName":{"shape":"String"}
      }
    },
    "DeleteClusterSecurityGroupMessage":{
      "type":"structure",
      "required":["ClusterSecurityGroupName"],
      "members":{
        "ClusterSecurityGroupName":{"shape":"String"}
      }
    },
    "DeleteClusterSnapshotMessage":{
      "type":"structure",
      "required":["SnapshotIdentifier"],
      "members":{
        "SnapshotIdentifier":{"shape":"String"},
        "SnapshotClusterIdentifier":{"shape":"String"}
      }
    },
    "DeleteClusterSubnetGroupMessage":{
      "type":"structure",
      "required":["ClusterSubnetGroupName"],
      "members":{
        "ClusterSubnetGroupName":{"shape":"String"}
      }
    },
    "DeleteEventSubscriptionMessage":{
      "type":"structure",
      "required":["SubscriptionName"],
      "members":{
        "SubscriptionName":{"shape":"String"}
      }
    },
    "DeleteHsmClientCertificateMessage":{
      "type":"structure",
      "required":["HsmClientCertificateIdentifier"],
      "members":{
        "HsmClientCertificateIdentifier":{"shape":"String"}
      }
    },
    "DeleteHsmConfigurationMessage":{
      "type":"structure",
      "required":["HsmConfigurationIdentifier"],
      "members":{
        "HsmConfigurationIdentifier":{"shape":"String"}
      }
    },
    "DeleteTagsMessage":{
      "type":"structure",
      "required":[
        "ResourceName",
        "TagKeys"
      ],
      "members":{
        "ResourceName":{"shape":"String"},
        "TagKeys":{"shape":"TagKeyList"}
      }
    },
    "DescribeClusterParameterGroupsMessage":{
      "type":"structure",
      "members":{
        "ParameterGroupName":{"shape":"String"},
        "MaxRecords":{"shape":"IntegerOptional"},
        "Marker":{"shape":"String"},
        "TagKeys":{"shape":"TagKeyList"},
        "TagValues":{"shape":"TagValueList"}
      }
    },
    "DescribeClusterParametersMessage":{
      "type":"structure",
      "required":["ParameterGroupName"],
      "members":{
        "ParameterGroupName":{"shape":"String"},
        "Source":{"shape":"String"},
        "MaxRecords":{"shape":"IntegerOptional"},
        "Marker":{"shape":"String"}
      }
    },
    "DescribeClusterSecurityGroupsMessage":{
      "type":"structure",
      "members":{
        "ClusterSecurityGroupName":{"shape":"String"},
        "MaxRecords":{"shape":"IntegerOptional"},
        "Marker":{"shape":"String"},
        "TagKeys":{"shape":"TagKeyList"},
        "TagValues":{"shape":"TagValueList"}
      }
    },
    "DescribeClusterSnapshotsMessage":{
      "type":"structure",
      "members":{
        "ClusterIdentifier":{"shape":"String"},
        "SnapshotIdentifier":{"shape":"String"},
        "SnapshotType":{"shape":"String"},
        "StartTime":{"shape":"TStamp"},
        "EndTime":{"shape":"TStamp"},
        "MaxRecords":{"shape":"IntegerOptional"},
        "Marker":{"shape":"String"},
        "OwnerAccount":{"shape":"String"},
        "TagKeys":{"shape":"TagKeyList"},
        "TagValues":{"shape":"TagValueList"}
      }
    },
    "DescribeClusterSubnetGroupsMessage":{
      "type":"structure",
      "members":{
        "ClusterSubnetGroupName":{"shape":"String"},
        "MaxRecords":{"shape":"IntegerOptional"},
        "Marker":{"shape":"String"},
        "TagKeys":{"shape":"TagKeyList"},
        "TagValues":{"shape":"TagValueList"}
      }
    },
    "DescribeClusterVersionsMessage":{
      "type":"structure",
      "members":{
        "ClusterVersion":{"shape":"String"},
        "ClusterParameterGroupFamily":{"shape":"String"},
        "MaxRecords":{"shape":"IntegerOptional"},
        "Marker":{"shape":"String"}
      }
    },
    "DescribeClustersMessage":{
      "type":"structure",
      "members":{
        "ClusterIdentifier":{"shape":"String"},
        "MaxRecords":{"shape":"IntegerOptional"},
        "Marker":{"shape":"String"},
        "TagKeys":{"shape":"TagKeyList"},
        "TagValues":{"shape":"TagValueList"}
      }
    },
    "DescribeDefaultClusterParametersMessage":{
      "type":"structure",
      "required":["ParameterGroupFamily"],
      "members":{
        "ParameterGroupFamily":{"shape":"String"},
        "MaxRecords":{"shape":"IntegerOptional"},
        "Marker":{"shape":"String"}
      }
    },
    "DescribeEventCategoriesMessage":{
      "type":"structure",
      "members":{
        "SourceType":{"shape":"String"}
      }
    },
    "DescribeEventSubscriptionsMessage":{
      "type":"structure",
      "members":{
        "SubscriptionName":{"shape":"String"},
        "MaxRecords":{"shape":"IntegerOptional"},
        "Marker":{"shape":"String"}
      }
    },
    "DescribeEventsMessage":{
      "type":"structure",
      "members":{
        "SourceIdentifier":{"shape":"String"},
        "SourceType":{"shape":"SourceType"},
        "StartTime":{"shape":"TStamp"},
        "EndTime":{"shape":"TStamp"},
        "Duration":{"shape":"IntegerOptional"},
        "MaxRecords":{"shape":"IntegerOptional"},
        "Marker":{"shape":"String"}
      }
    },
    "DescribeHsmClientCertificatesMessage":{
      "type":"structure",
      "members":{
        "HsmClientCertificateIdentifier":{"shape":"String"},
        "MaxRecords":{"shape":"IntegerOptional"},
        "Marker":{"shape":"String"},
        "TagKeys":{"shape":"TagKeyList"},
        "TagValues":{"shape":"TagValueList"}
      }
    },
    "DescribeHsmConfigurationsMessage":{
      "type":"structure",
      "members":{
        "HsmConfigurationIdentifier":{"shape":"String"},
        "MaxRecords":{"shape":"IntegerOptional"},
        "Marker":{"shape":"String"},
        "TagKeys":{"shape":"TagKeyList"},
        "TagValues":{"shape":"TagValueList"}
      }
    },
    "DescribeLoggingStatusMessage":{
      "type":"structure",
      "required":["ClusterIdentifier"],
      "members":{
        "ClusterIdentifier":{"shape":"String"}
      }
    },
    "DescribeOrderableClusterOptionsMessage":{
      "type":"structure",
      "members":{
        "ClusterVersion":{"shape":"String"},
        "NodeType":{"shape":"String"},
        "MaxRecords":{"shape":"IntegerOptional"},
        "Marker":{"shape":"String"}
      }
    },
    "DescribeReservedNodeOfferingsMessage":{
      "type":"structure",
      "members":{
        "ReservedNodeOfferingId":{"shape":"String"},
        "MaxRecords":{"shape":"IntegerOptional"},
        "Marker":{"shape":"String"}
      }
    },
    "DescribeReservedNodesMessage":{
      "type":"structure",
      "members":{
        "ReservedNodeId":{"shape":"String"},
        "MaxRecords":{"shape":"IntegerOptional"},
        "Marker":{"shape":"String"}
      }
    },
    "DescribeResizeMessage":{
      "type":"structure",
      "required":["ClusterIdentifier"],
      "members":{
        "ClusterIdentifier":{"shape":"String"}
      }
    },
    "DescribeTagsMessage":{
      "type":"structure",
      "members":{
        "ResourceName":{"shape":"String"},
        "ResourceType":{"shape":"String"},
        "MaxRecords":{"shape":"IntegerOptional"},
        "Marker":{"shape":"String"},
        "TagKeys":{"shape":"TagKeyList"},
        "TagValues":{"shape":"TagValueList"}
      }
    },
    "DisableLoggingMessage":{
      "type":"structure",
      "required":["ClusterIdentifier"],
      "members":{
        "ClusterIdentifier":{"shape":"String"}
      }
    },
    "DisableSnapshotCopyMessage":{
      "type":"structure",
      "required":["ClusterIdentifier"],
      "members":{
        "ClusterIdentifier":{"shape":"String"}
      }
    },
    "Double":{"type":"double"},
    "DoubleOptional":{"type":"double"},
    "EC2SecurityGroup":{
      "type":"structure",
      "members":{
        "Status":{"shape":"String"},
        "EC2SecurityGroupName":{"shape":"String"},
        "EC2SecurityGroupOwnerId":{"shape":"String"},
        "Tags":{"shape":"TagList"}
      }
    },
    "EC2SecurityGroupList":{
      "type":"list",
      "member":{
        "shape":"EC2SecurityGroup",
        "locationName":"EC2SecurityGroup"
      }
    },
    "ElasticIpStatus":{
      "type":"structure",
      "members":{
        "ElasticIp":{"shape":"String"},
        "Status":{"shape":"String"}
      }
    },
    "EnableLoggingMessage":{
      "type":"structure",
      "required":[
        "ClusterIdentifier",
        "BucketName"
      ],
      "members":{
        "ClusterIdentifier":{"shape":"String"},
        "BucketName":{"shape":"String"},
        "S3KeyPrefix":{"shape":"String"}
      }
    },
    "EnableSnapshotCopyMessage":{
      "type":"structure",
      "required":[
        "ClusterIdentifier",
        "DestinationRegion"
      ],
      "members":{
        "ClusterIdentifier":{"shape":"String"},
        "DestinationRegion":{"shape":"String"},
        "RetentionPeriod":{"shape":"IntegerOptional"}
      }
    },
    "Endpoint":{
      "type":"structure",
      "members":{
        "Address":{"shape":"String"},
        "Port":{"shape":"Integer"}
      }
    },
    "Event":{
      "type":"structure",
      "members":{
        "SourceIdentifier":{"shape":"String"},
        "SourceType":{"shape":"SourceType"},
        "Message":{"shape":"String"},
        "EventCategories":{"shape":"EventCategoriesList"},
        "Severity":{"shape":"String"},
        "Date":{"shape":"TStamp"},
        "EventId":{"shape":"String"}
      }
    },
    "EventCategoriesList":{
      "type":"list",
      "member":{
        "shape":"String",
        "locationName":"EventCategory"
      }
    },
    "EventCategoriesMap":{
      "type":"structure",
      "members":{
        "SourceType":{"shape":"String"},
        "Events":{"shape":"EventInfoMapList"}
      },
      "wrapper":true
    },
    "EventCategoriesMapList":{
      "type":"list",
      "member":{
        "shape":"EventCategoriesMap",
        "locationName":"EventCategoriesMap"
      }
    },
    "EventCategoriesMessage":{
      "type":"structure",
      "members":{
        "EventCategoriesMapList":{"shape":"EventCategoriesMapList"}
      }
    },
    "EventInfoMap":{
      "type":"structure",
      "members":{
        "EventId":{"shape":"String"},
        "EventCategories":{"shape":"EventCategoriesList"},
        "EventDescription":{"shape":"String"},
        "Severity":{"shape":"String"}
      },
      "wrapper":true
    },
    "EventInfoMapList":{
      "type":"list",
      "member":{
        "shape":"EventInfoMap",
        "locationName":"EventInfoMap"
      }
    },
    "EventList":{
      "type":"list",
      "member":{
        "shape":"Event",
        "locationName":"Event"
      }
    },
    "EventSubscription":{
      "type":"structure",
      "members":{
        "CustomerAwsId":{"shape":"String"},
        "CustSubscriptionId":{"shape":"String"},
        "SnsTopicArn":{"shape":"String"},
        "Status":{"shape":"String"},
        "SubscriptionCreationTime":{"shape":"TStamp"},
        "SourceType":{"shape":"String"},
        "SourceIdsList":{"shape":"SourceIdsList"},
        "EventCategoriesList":{"shape":"EventCategoriesList"},
        "Severity":{"shape":"String"},
        "Enabled":{"shape":"Boolean"},
        "Tags":{"shape":"TagList"}
      },
      "wrapper":true
    },
    "EventSubscriptionQuotaExceededFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"EventSubscriptionQuotaExceeded",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "EventSubscriptionsList":{
      "type":"list",
      "member":{
        "shape":"EventSubscription",
        "locationName":"EventSubscription"
      }
    },
    "EventSubscriptionsMessage":{
      "type":"structure",
      "members":{
        "Marker":{"shape":"String"},
        "EventSubscriptionsList":{"shape":"EventSubscriptionsList"}
      }
    },
    "EventsMessage":{
      "type":"structure",
      "members":{
        "Marker":{"shape":"String"},
        "Events":{"shape":"EventList"}
      }
    },
    "HsmClientCertificate":{
      "type":"structure",
      "members":{
        "HsmClientCertificateIdentifier":{"shape":"String"},
        "HsmClientCertificatePublicKey":{"shape":"String"},
        "Tags":{"shape":"TagList"}
      },
      "wrapper":true
    },
    "HsmClientCertificateAlreadyExistsFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"HsmClientCertificateAlreadyExistsFault",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "HsmClientCertificateList":{
      "type":"list",
      "member":{
        "shape":"HsmClientCertificate",
        "locationName":"HsmClientCertificate"
      }
    },
    "HsmClientCertificateMessage":{
      "type":"structure",
      "members":{
        "Marker":{"shape":"String"},
        "HsmClientCertificates":{"shape":"HsmClientCertificateList"}
      }
    },
    "HsmClientCertificateNotFoundFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"HsmClientCertificateNotFoundFault",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "HsmClientCertificateQuotaExceededFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"HsmClientCertificateQuotaExceededFault",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "HsmConfiguration":{
      "type":"structure",
      "members":{
        "HsmConfigurationIdentifier":{"shape":"String"},
        "Description":{"shape":"String"},
        "HsmIpAddress":{"shape":"String"},
        "HsmPartitionName":{"shape":"String"},
        "Tags":{"shape":"TagList"}
      },
      "wrapper":true
    },
    "HsmConfigurationAlreadyExistsFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"HsmConfigurationAlreadyExistsFault",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "HsmConfigurationList":{
      "type":"list",
      "member":{
        "shape":"HsmConfiguration",
        "locationName":"HsmConfiguration"
      }
    },
    "HsmConfigurationMessage":{
      "type":"structure",
      "members":{
        "Marker":{"shape":"String"},
        "HsmConfigurations":{"shape":"HsmConfigurationList"}
      }
    },
    "HsmConfigurationNotFoundFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"HsmConfigurationNotFoundFault",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "HsmConfigurationQuotaExceededFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"HsmConfigurationQuotaExceededFault",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "HsmStatus":{
      "type":"structure",
      "members":{
        "HsmClientCertificateIdentifier":{"shape":"String"},
        "HsmConfigurationIdentifier":{"shape":"String"},
        "Status":{"shape":"String"}
      }
    },
    "IPRange":{
      "type":"structure",
      "members":{
        "Status":{"shape":"String"},
        "CIDRIP":{"shape":"String"},
        "Tags":{"shape":"TagList"}
      }
    },
    "IPRangeList":{
      "type":"list",
      "member":{
        "shape":"IPRange",
        "locationName":"IPRange"
      }
    },
    "ImportTablesCompleted":{
      "type":"list",
      "member":{"shape":"String"}
    },
    "ImportTablesInProgress":{
      "type":"list",
      "member":{"shape":"String"}
    },
    "ImportTablesNotStarted":{
      "type":"list",
      "member":{"shape":"String"}
    },
    "IncompatibleOrderableOptions":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"IncompatibleOrderableOptions",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "InsufficientClusterCapacityFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"InsufficientClusterCapacity",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "InsufficientS3BucketPolicyFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"InsufficientS3BucketPolicyFault",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "Integer":{"type":"integer"},
    "IntegerOptional":{"type":"integer"},
    "InvalidClusterParameterGroupStateFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"InvalidClusterParameterGroupState",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "InvalidClusterSecurityGroupStateFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"InvalidClusterSecurityGroupState",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "InvalidClusterSnapshotStateFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"InvalidClusterSnapshotState",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "InvalidClusterStateFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"InvalidClusterState",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "InvalidClusterSubnetGroupStateFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"InvalidClusterSubnetGroupStateFault",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "InvalidClusterSubnetStateFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"InvalidClusterSubnetStateFault",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "InvalidElasticIpFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"InvalidElasticIpFault",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "InvalidHsmClientCertificateStateFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"InvalidHsmClientCertificateStateFault",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "InvalidHsmConfigurationStateFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"InvalidHsmConfigurationStateFault",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "InvalidRestoreFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"InvalidRestore",
        "httpStatusCode":406,
        "senderFault":true
      },
      "exception":true
    },
    "InvalidS3BucketNameFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"InvalidS3BucketNameFault",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "InvalidS3KeyPrefixFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"InvalidS3KeyPrefixFault",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "InvalidSubnet":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"InvalidSubnet",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "InvalidSubscriptionStateFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"InvalidSubscriptionStateFault",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "InvalidTagFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"InvalidTagFault",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "InvalidVPCNetworkStateFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"InvalidVPCNetworkStateFault",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "LoggingStatus":{
      "type":"structure",
      "members":{
        "LoggingEnabled":{"shape":"Boolean"},
        "BucketName":{"shape":"String"},
        "S3KeyPrefix":{"shape":"String"},
        "LastSuccessfulDeliveryTime":{"shape":"TStamp"},
        "LastFailureTime":{"shape":"TStamp"},
        "LastFailureMessage":{"shape":"String"}
      }
    },
    "Long":{"type":"long"},
    "LongOptional":{"type":"long"},
    "ModifyClusterMessage":{
      "type":"structure",
      "required":["ClusterIdentifier"],
      "members":{
        "ClusterIdentifier":{"shape":"String"},
        "ClusterType":{"shape":"String"},
        "NodeType":{"shape":"String"},
        "NumberOfNodes":{"shape":"IntegerOptional"},
        "ClusterSecurityGroups":{"shape":"ClusterSecurityGroupNameList"},
        "VpcSecurityGroupIds":{"shape":"VpcSecurityGroupIdList"},
        "MasterUserPassword":{"shape":"String"},
        "ClusterParameterGroupName":{"shape":"String"},
        "AutomatedSnapshotRetentionPeriod":{"shape":"IntegerOptional"},
        "PreferredMaintenanceWindow":{"shape":"String"},
        "ClusterVersion":{"shape":"String"},
        "AllowVersionUpgrade":{"shape":"BooleanOptional"},
        "HsmClientCertificateIdentifier":{"shape":"String"},
        "HsmConfigurationIdentifier":{"shape":"String"},
        "NewClusterIdentifier":{"shape":"String"}
      }
    },
    "ModifyClusterParameterGroupMessage":{
      "type":"structure",
      "required":[
        "ParameterGroupName",
        "Parameters"
      ],
      "members":{
        "ParameterGroupName":{"shape":"String"},
        "Parameters":{"shape":"ParametersList"}
      }
    },
    "ModifyClusterSubnetGroupMessage":{
      "type":"structure",
      "required":[
        "ClusterSubnetGroupName",
        "SubnetIds"
      ],
      "members":{
        "ClusterSubnetGroupName":{"shape":"String"},
        "Description":{"shape":"String"},
        "SubnetIds":{"shape":"SubnetIdentifierList"}
      }
    },
    "ModifyEventSubscriptionMessage":{
      "type":"structure",
      "required":["SubscriptionName"],
      "members":{
        "SubscriptionName":{"shape":"String"},
        "SnsTopicArn":{"shape":"String"},
        "SourceType":{"shape":"String"},
        "SourceIds":{"shape":"SourceIdsList"},
        "EventCategories":{"shape":"EventCategoriesList"},
        "Severity":{"shape":"String"},
        "Enabled":{"shape":"BooleanOptional"}
      }
    },
    "ModifySnapshotCopyRetentionPeriodMessage":{
      "type":"structure",
      "required":[
        "ClusterIdentifier",
        "RetentionPeriod"
      ],
      "members":{
        "ClusterIdentifier":{"shape":"String"},
        "RetentionPeriod":{"shape":"Integer"}
      }
    },
    "NumberOfNodesPerClusterLimitExceededFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"NumberOfNodesPerClusterLimitExceeded",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "NumberOfNodesQuotaExceededFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"NumberOfNodesQuotaExceeded",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "OrderableClusterOption":{
      "type":"structure",
      "members":{
        "ClusterVersion":{"shape":"String"},
        "ClusterType":{"shape":"String"},
        "NodeType":{"shape":"String"},
        "AvailabilityZones":{"shape":"AvailabilityZoneList"}
      },
      "wrapper":true
    },
    "OrderableClusterOptionsList":{
      "type":"list",
      "member":{
        "shape":"OrderableClusterOption",
        "locationName":"OrderableClusterOption"
      }
    },
    "OrderableClusterOptionsMessage":{
      "type":"structure",
      "members":{
        "OrderableClusterOptions":{"shape":"OrderableClusterOptionsList"},
        "Marker":{"shape":"String"}
      }
    },
    "Parameter":{
      "type":"structure",
      "members":{
        "ParameterName":{"shape":"String"},
        "ParameterValue":{"shape":"String"},
        "Description":{"shape":"String"},
        "Source":{"shape":"String"},
        "DataType":{"shape":"String"},
        "AllowedValues":{"shape":"String"},
        "IsModifiable":{"shape":"Boolean"},
        "MinimumEngineVersion":{"shape":"String"}
      }
    },
    "ParameterGroupList":{
      "type":"list",
      "member":{
        "shape":"ClusterParameterGroup",
        "locationName":"ClusterParameterGroup"
      }
    },
    "ParametersList":{
      "type":"list",
      "member":{
        "shape":"Parameter",
        "locationName":"Parameter"
      }
    },
    "PendingModifiedValues":{
      "type":"structure",
      "members":{
        "MasterUserPassword":{"shape":"String"},
        "NodeType":{"shape":"String"},
        "NumberOfNodes":{"shape":"IntegerOptional"},
        "ClusterType":{"shape":"String"},
        "ClusterVersion":{"shape":"String"},
        "AutomatedSnapshotRetentionPeriod":{"shape":"IntegerOptional"},
        "ClusterIdentifier":{"shape":"String"}
      }
    },
    "PurchaseReservedNodeOfferingMessage":{
      "type":"structure",
      "required":["ReservedNodeOfferingId"],
      "members":{
        "ReservedNodeOfferingId":{"shape":"String"},
        "NodeCount":{"shape":"IntegerOptional"}
      }
    },
    "RebootClusterMessage":{
      "type":"structure",
      "required":["ClusterIdentifier"],
      "members":{
        "ClusterIdentifier":{"shape":"String"}
      }
    },
    "RecurringCharge":{
      "type":"structure",
      "members":{
        "RecurringChargeAmount":{"shape":"Double"},
        "RecurringChargeFrequency":{"shape":"String"}
      },
      "wrapper":true
    },
    "RecurringChargeList":{
      "type":"list",
      "member":{
        "shape":"RecurringCharge",
        "locationName":"RecurringCharge"
      }
    },
    "ReservedNode":{
      "type":"structure",
      "members":{
        "ReservedNodeId":{"shape":"String"},
        "ReservedNodeOfferingId":{"shape":"String"},
        "NodeType":{"shape":"String"},
        "StartTime":{"shape":"TStamp"},
        "Duration":{"shape":"Integer"},
        "FixedPrice":{"shape":"Double"},
        "UsagePrice":{"shape":"Double"},
        "CurrencyCode":{"shape":"String"},
        "NodeCount":{"shape":"Integer"},
        "State":{"shape":"String"},
        "OfferingType":{"shape":"String"},
        "RecurringCharges":{"shape":"RecurringChargeList"}
      },
      "wrapper":true
    },
    "ReservedNodeAlreadyExistsFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"ReservedNodeAlreadyExists",
        "httpStatusCode":404,
        "senderFault":true
      },
      "exception":true
    },
    "ReservedNodeList":{
      "type":"list",
      "member":{
        "shape":"ReservedNode",
        "locationName":"ReservedNode"
      }
    },
    "ReservedNodeNotFoundFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"ReservedNodeNotFound",
        "httpStatusCode":404,
        "senderFault":true
      },
      "exception":true
    },
    "ReservedNodeOffering":{
      "type":"structure",
      "members":{
        "ReservedNodeOfferingId":{"shape":"String"},
        "NodeType":{"shape":"String"},
        "Duration":{"shape":"Integer"},
        "FixedPrice":{"shape":"Double"},
        "UsagePrice":{"shape":"Double"},
        "CurrencyCode":{"shape":"String"},
        "OfferingType":{"shape":"String"},
        "RecurringCharges":{"shape":"RecurringChargeList"}
      },
      "wrapper":true
    },
    "ReservedNodeOfferingList":{
      "type":"list",
      "member":{
        "shape":"ReservedNodeOffering",
        "locationName":"ReservedNodeOffering"
      }
    },
    "ReservedNodeOfferingNotFoundFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"ReservedNodeOfferingNotFound",
        "httpStatusCode":404,
        "senderFault":true
      },
      "exception":true
    },
    "ReservedNodeOfferingsMessage":{
      "type":"structure",
      "members":{
        "Marker":{"shape":"String"},
        "ReservedNodeOfferings":{"shape":"ReservedNodeOfferingList"}
      }
    },
    "ReservedNodeQuotaExceededFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"ReservedNodeQuotaExceeded",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "ReservedNodesMessage":{
      "type":"structure",
      "members":{
        "Marker":{"shape":"String"},
        "ReservedNodes":{"shape":"ReservedNodeList"}
      }
    },
    "ResetClusterParameterGroupMessage":{
      "type":"structure",
      "required":["ParameterGroupName"],
      "members":{
        "ParameterGroupName":{"shape":"String"},
        "ResetAllParameters":{"shape":"Boolean"},
        "Parameters":{"shape":"ParametersList"}
      }
    },
    "ResizeNotFoundFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"ResizeNotFound",
        "httpStatusCode":404,
        "senderFault":true
      },
      "exception":true
    },
    "ResizeProgressMessage":{
      "type":"structure",
      "members":{
        "TargetNodeType":{"shape":"String"},
        "TargetNumberOfNodes":{"shape":"IntegerOptional"},
        "TargetClusterType":{"shape":"String"},
        "Status":{"shape":"String"},
        "ImportTablesCompleted":{"shape":"ImportTablesCompleted"},
        "ImportTablesInProgress":{"shape":"ImportTablesInProgress"},
        "ImportTablesNotStarted":{"shape":"ImportTablesNotStarted"},
        "AvgResizeRateInMegaBytesPerSecond":{"shape":"DoubleOptional"},
        "TotalResizeDataInMegaBytes":{"shape":"LongOptional"},
        "ProgressInMegaBytes":{"shape":"LongOptional"},
        "ElapsedTimeInSeconds":{"shape":"LongOptional"},
        "EstimatedTimeToCompletionInSeconds":{"shape":"LongOptional"}
      }
    },
    "ResourceNotFoundFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"ResourceNotFoundFault",
        "httpStatusCode":404,
        "senderFault":true
      },
      "exception":true
    },
    "RestoreFromClusterSnapshotMessage":{
      "type":"structure",
      "required":[
        "ClusterIdentifier",
        "SnapshotIdentifier"
      ],
      "members":{
        "ClusterIdentifier":{"shape":"String"},
        "SnapshotIdentifier":{"shape":"String"},
        "SnapshotClusterIdentifier":{"shape":"String"},
        "Port":{"shape":"IntegerOptional"},
        "AvailabilityZone":{"shape":"String"},
        "AllowVersionUpgrade":{"shape":"BooleanOptional"},
        "ClusterSubnetGroupName":{"shape":"String"},
        "PubliclyAccessible":{"shape":"BooleanOptional"},
        "OwnerAccount":{"shape":"String"},
        "HsmClientCertificateIdentifier":{"shape":"String"},
        "HsmConfigurationIdentifier":{"shape":"String"},
        "ElasticIp":{"shape":"String"},
        "ClusterParameterGroupName":{"shape":"String"},
        "ClusterSecurityGroups":{"shape":"ClusterSecurityGroupNameList"},
        "VpcSecurityGroupIds":{"shape":"VpcSecurityGroupIdList"},
        "PreferredMaintenanceWindow":{"shape":"String"},
        "AutomatedSnapshotRetentionPeriod":{"shape":"IntegerOptional"},
        "KmsKeyId":{"shape":"String"}
      }
    },
    "RestoreStatus":{
      "type":"structure",
      "members":{
        "Status":{"shape":"String"},
        "CurrentRestoreRateInMegaBytesPerSecond":{"shape":"Double"},
        "SnapshotSizeInMegaBytes":{"shape":"Long"},
        "ProgressInMegaBytes":{"shape":"Long"},
        "ElapsedTimeInSeconds":{"shape":"Long"},
        "EstimatedTimeToCompletionInSeconds":{"shape":"Long"}
      }
    },
    "RevokeClusterSecurityGroupIngressMessage":{
      "type":"structure",
      "required":["ClusterSecurityGroupName"],
      "members":{
        "ClusterSecurityGroupName":{"shape":"String"},
        "CIDRIP":{"shape":"String"},
        "EC2SecurityGroupName":{"shape":"String"},
        "EC2SecurityGroupOwnerId":{"shape":"String"}
      }
    },
    "RevokeSnapshotAccessMessage":{
      "type":"structure",
      "required":[
        "SnapshotIdentifier",
        "AccountWithRestoreAccess"
      ],
      "members":{
        "SnapshotIdentifier":{"shape":"String"},
        "SnapshotClusterIdentifier":{"shape":"String"},
        "AccountWithRestoreAccess":{"shape":"String"}
      }
    },
    "RotateEncryptionKeyMessage":{
      "type":"structure",
      "required":["ClusterIdentifier"],
      "members":{
        "ClusterIdentifier":{"shape":"String"}
      }
    },
    "SNSInvalidTopicFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"SNSInvalidTopic",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "SNSNoAuthorizationFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"SNSNoAuthorization",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "SNSTopicArnNotFoundFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"SNSTopicArnNotFound",
        "httpStatusCode":404,
        "senderFault":true
      },
      "exception":true
    },
    "Snapshot":{
      "type":"structure",
      "members":{
        "SnapshotIdentifier":{"shape":"String"},
        "ClusterIdentifier":{"shape":"String"},
        "SnapshotCreateTime":{"shape":"TStamp"},
        "Status":{"shape":"String"},
        "Port":{"shape":"Integer"},
        "AvailabilityZone":{"shape":"String"},
        "ClusterCreateTime":{"shape":"TStamp"},
        "MasterUsername":{"shape":"String"},
        "ClusterVersion":{"shape":"String"},
        "SnapshotType":{"shape":"String"},
        "NodeType":{"shape":"String"},
        "NumberOfNodes":{"shape":"Integer"},
        "DBName":{"shape":"String"},
        "VpcId":{"shape":"String"},
        "Encrypted":{"shape":"Boolean"},
        "KmsKeyId":{"shape":"String"},
        "EncryptedWithHSM":{"shape":"Boolean"},
        "AccountsWithRestoreAccess":{"shape":"AccountsWithRestoreAccessList"},
        "OwnerAccount":{"shape":"String"},
        "TotalBackupSizeInMegaBytes":{"shape":"Double"},
        "ActualIncrementalBackupSizeInMegaBytes":{"shape":"Double"},
        "BackupProgressInMegaBytes":{"shape":"Double"},
        "CurrentBackupRateInMegaBytesPerSecond":{"shape":"Double"},
        "EstimatedSecondsToCompletion":{"shape":"Long"},
        "ElapsedTimeInSeconds":{"shape":"Long"},
        "SourceRegion":{"shape":"String"},
        "Tags":{"shape":"TagList"}
      },
      "wrapper":true
    },
    "SnapshotCopyAlreadyDisabledFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"SnapshotCopyAlreadyDisabledFault",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "SnapshotCopyAlreadyEnabledFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"SnapshotCopyAlreadyEnabledFault",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "SnapshotCopyDisabledFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"SnapshotCopyDisabledFault",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "SnapshotList":{
      "type":"list",
      "member":{
        "shape":"Snapshot",
        "locationName":"Snapshot"
      }
    },
    "SnapshotMessage":{
      "type":"structure",
      "members":{
        "Marker":{"shape":"String"},
        "Snapshots":{"shape":"SnapshotList"}
      }
    },
    "SourceIdsList":{
      "type":"list",
      "member":{
        "shape":"String",
        "locationName":"SourceId"
      }
    },
    "SourceNotFoundFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"SourceNotFound",
        "httpStatusCode":404,
        "senderFault":true
      },
      "exception":true
    },
    "SourceType":{
      "type":"string",
      "enum":[
        "cluster",
        "cluster-parameter-group",
        "cluster-security-group",
        "cluster-snapshot"
      ]
    },
    "String":{"type":"string"},
    "Subnet":{
      "type":"structure",
      "members":{
        "SubnetIdentifier":{"shape":"String"},
        "SubnetAvailabilityZone":{"shape":"AvailabilityZone"},
        "SubnetStatus":{"shape":"String"}
      }
    },
    "SubnetAlreadyInUse":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"SubnetAlreadyInUse",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "SubnetIdentifierList":{
      "type":"list",
      "member":{
        "shape":"String",
        "locationName":"SubnetIdentifier"
      }
    },
    "SubnetList":{
      "type":"list",
      "member":{
        "shape":"Subnet",
        "locationName":"Subnet"
      }
    },
    "SubscriptionAlreadyExistFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"SubscriptionAlreadyExist",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "SubscriptionCategoryNotFoundFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"SubscriptionCategoryNotFound",
        "httpStatusCode":404,
        "senderFault":true
      },
      "exception":true
    },
    "SubscriptionEventIdNotFoundFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"SubscriptionEventIdNotFound",
        "httpStatusCode":404,
        "senderFault":true
      },
      "exception":true
    },
    "SubscriptionNotFoundFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"SubscriptionNotFound",
        "httpStatusCode":404,
        "senderFault":true
      },
      "exception":true
    },
    "SubscriptionSeverityNotFoundFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"SubscriptionSeverityNotFound",
        "httpStatusCode":404,
        "senderFault":true
      },
      "exception":true
    },
    "TStamp":{"type":"timestamp"},
    "Tag":{
      "type":"structure",
      "members":{
        "Key":{"shape":"String"},
        "Value":{"shape":"String"}
      }
    },
    "TagKeyList":{
      "type":"list",
      "member":{
        "shape":"String",
        "locationName":"TagKey"
      }
    },
    "TagLimitExceededFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"TagLimitExceededFault",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "TagList":{
      "type":"list",
      "member":{
        "shape":"Tag",
        "locationName":"Tag"
      }
    },
    "TagValueList":{
      "type":"list",
      "member":{
        "shape":"String",
        "locationName":"TagValue"
      }
    },
    "TaggedResource":{
      "type":"structure",
      "members":{
        "Tag":{"shape":"Tag"},
        "ResourceName":{"shape":"String"},
        "ResourceType":{"shape":"String"}
      }
    },
    "TaggedResourceList":{
      "type":"list",
      "member":{
        "shape":"TaggedResource",
        "locationName":"TaggedResource"
      }
    },
    "TaggedResourceListMessage":{
      "type":"structure",
      "members":{
        "TaggedResources":{"shape":"TaggedResourceList"},
        "Marker":{"shape":"String"}
      }
    },
    "UnauthorizedOperation":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"UnauthorizedOperation",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "UnknownSnapshotCopyRegionFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"UnknownSnapshotCopyRegionFault",
        "httpStatusCode":404,
        "senderFault":true
      },
      "exception":true
    },
    "UnsupportedOptionFault":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"UnsupportedOptionFault",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "VpcSecurityGroupIdList":{
      "type":"list",
      "member":{
        "shape":"String",
        "locationName":"VpcSecurityGroupId"
      }
    },
    "VpcSecurityGroupMembership":{
      "type":"structure",
      "members":{
        "VpcSecurityGroupId":{"shape":"String"},
        "Status":{"shape":"String"}
      }
    },
    "VpcSecurityGroupMembershipList":{
      "type":"list",
      "member":{
        "shape":"VpcSecurityGroupMembership",
        "locationName":"VpcSecurityGroup"
      }
    },
    "AuthorizeClusterSecurityGroupIngressResult":{
      "type":"structure",
      "members":{
        "ClusterSecurityGroup":{"shape":"ClusterSecurityGroup"}
      }
    },
    "AuthorizeSnapshotAccessResult":{
      "type":"structure",
      "members":{
        "Snapshot":{"shape":"Snapshot"}
      }
    },
    "CopyClusterSnapshotResult":{
      "type":"structure",
      "members":{
        "Snapshot":{"shape":"Snapshot"}
      }
    },
    "CreateClusterResult":{
      "type":"structure",
      "members":{
        "Cluster":{"shape":"Cluster"}
      }
    },
    "CreateClusterParameterGroupResult":{
      "type":"structure",
      "members":{
        "ClusterParameterGroup":{"shape":"ClusterParameterGroup"}
      }
    },
    "CreateClusterSecurityGroupResult":{
      "type":"structure",
      "members":{
        "ClusterSecurityGroup":{"shape":"ClusterSecurityGroup"}
      }
    },
    "CreateClusterSnapshotResult":{
      "type":"structure",
      "members":{
        "Snapshot":{"shape":"Snapshot"}
      }
    },
    "CreateClusterSubnetGroupResult":{
      "type":"structure",
      "members":{
        "ClusterSubnetGroup":{"shape":"ClusterSubnetGroup"}
      }
    },
    "CreateEventSubscriptionResult":{
      "type":"structure",
      "members":{
        "EventSubscription":{"shape":"EventSubscription"}
      }
    },
    "CreateHsmClientCertificateResult":{
      "type":"structure",
      "members":{
        "HsmClientCertificate":{"shape":"HsmClientCertificate"}
      }
    },
    "CreateHsmConfigurationResult":{
      "type":"structure",
      "members":{
        "HsmConfiguration":{"shape":"HsmConfiguration"}
      }
    },
    "DeleteClusterResult":{
      "type":"structure",
      "members":{
        "Cluster":{"shape":"Cluster"}
      }
    },
    "DeleteClusterSnapshotResult":{
      "type":"structure",
      "members":{
        "Snapshot":{"shape":"Snapshot"}
      }
    },
    "DescribeDefaultClusterParametersResult":{
      "type":"structure",
      "members":{
        "DefaultClusterParameters":{"shape":"DefaultClusterParameters"}
      }
    },
    "DisableSnapshotCopyResult":{
      "type":"structure",
      "members":{
        "Cluster":{"shape":"Cluster"}
      }
    },
    "EnableSnapshotCopyResult":{
      "type":"structure",
      "members":{
        "Cluster":{"shape":"Cluster"}
      }
    },
    "ModifyClusterResult":{
      "type":"structure",
      "members":{
        "Cluster":{"shape":"Cluster"}
      }
    },
    "ModifyClusterSubnetGroupResult":{
      "type":"structure",
      "members":{
        "ClusterSubnetGroup":{"shape":"ClusterSubnetGroup"}
      }
    },
    "ModifyEventSubscriptionResult":{
      "type":"structure",
      "members":{
        "EventSubscription":{"shape":"EventSubscription"}
      }
    },
    "ModifySnapshotCopyRetentionPeriodResult":{
      "type":"structure",
      "members":{
        "Cluster":{"shape":"Cluster"}
      }
    },
    "PurchaseReservedNodeOfferingResult":{
      "type":"structure",
      "members":{
        "ReservedNode":{"shape":"ReservedNode"}
      }
    },
    "RebootClusterResult":{
      "type":"structure",
      "members":{
        "Cluster":{"shape":"Cluster"}
      }
    },
    "RestoreFromClusterSnapshotResult":{
      "type":"structure",
      "members":{
        "Cluster":{"shape":"Cluster"}
      }
    },
    "RevokeClusterSecurityGroupIngressResult":{
      "type":"structure",
      "members":{
        "ClusterSecurityGroup":{"shape":"ClusterSecurityGroup"}
      }
    },
    "RevokeSnapshotAccessResult":{
      "type":"structure",
      "members":{
        "Snapshot":{"shape":"Snapshot"}
      }
    },
    "RotateEncryptionKeyResult":{
      "type":"structure",
      "members":{
        "Cluster":{"shape":"Cluster"}
      }
    }
  }
}
,
"Route53":
{
  "metadata":{
    "apiVersion":"2013-04-01",
    "endpointPrefix":"route53",
    "globalEndpoint":"route53.amazonaws.com",
    "serviceAbbreviation":"Route 53",
    "serviceFullName":"Amazon Route 53",
    "signatureVersion":"v4",
    "protocol":"rest-xml"
  },
  "operations":{
    "AssociateVPCWithHostedZone":{
      "name":"AssociateVPCWithHostedZone",
      "http":{
        "method":"POST",
        "requestUri":"/2013-04-01/hostedzone/{Id}/associatevpc"
      },
      "input":{
        "shape":"AssociateVPCWithHostedZoneRequest",
        "xmlNamespace":{"uri":"https://route53.amazonaws.com/doc/2013-04-01/"},
        "locationName":"AssociateVPCWithHostedZoneRequest"
      },
      "output":{"shape":"AssociateVPCWithHostedZoneResponse"},
      "errors":[
        {
          "shape":"NoSuchHostedZone",
          "error":{"httpStatusCode":404},
          "exception":true
        },
        {
          "shape":"InvalidVPCId",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InvalidInput",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"PublicZoneVPCAssociation",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"ConflictingDomainExists",
          "exception":true
        }
      ]
    },
    "ChangeResourceRecordSets":{
      "name":"ChangeResourceRecordSets",
      "http":{
        "method":"POST",
        "requestUri":"/2013-04-01/hostedzone/{Id}/rrset/"
      },
      "input":{
        "shape":"ChangeResourceRecordSetsRequest",
        "xmlNamespace":{"uri":"https://route53.amazonaws.com/doc/2013-04-01/"},
        "locationName":"ChangeResourceRecordSetsRequest"
      },
      "output":{"shape":"ChangeResourceRecordSetsResponse"},
      "errors":[
        {
          "shape":"NoSuchHostedZone",
          "error":{"httpStatusCode":404},
          "exception":true
        },
        {
          "shape":"NoSuchHealthCheck",
          "error":{"httpStatusCode":404},
          "exception":true
        },
        {
          "shape":"InvalidChangeBatch",
          "exception":true
        },
        {
          "shape":"InvalidInput",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"PriorRequestNotComplete",
          "error":{"httpStatusCode":400},
          "exception":true
        }
      ]
    },
    "ChangeTagsForResource":{
      "name":"ChangeTagsForResource",
      "http":{
        "method":"POST",
        "requestUri":"/2013-04-01/tags/{ResourceType}/{ResourceId}"
      },
      "input":{
        "shape":"ChangeTagsForResourceRequest",
        "xmlNamespace":{"uri":"https://route53.amazonaws.com/doc/2013-04-01/"},
        "locationName":"ChangeTagsForResourceRequest"
      },
      "output":{"shape":"ChangeTagsForResourceResponse"},
      "errors":[
        {
          "shape":"InvalidInput",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"NoSuchHealthCheck",
          "error":{"httpStatusCode":404},
          "exception":true
        },
        {
          "shape":"NoSuchHostedZone",
          "error":{"httpStatusCode":404},
          "exception":true
        },
        {
          "shape":"PriorRequestNotComplete",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"ThrottlingException",
          "error":{"httpStatusCode":400},
          "exception":true
        }
      ]
    },
    "CreateHealthCheck":{
      "name":"CreateHealthCheck",
      "http":{
        "method":"POST",
        "requestUri":"/2013-04-01/healthcheck",
        "responseCode":201
      },
      "input":{
        "shape":"CreateHealthCheckRequest",
        "xmlNamespace":{"uri":"https://route53.amazonaws.com/doc/2013-04-01/"},
        "locationName":"CreateHealthCheckRequest"
      },
      "output":{"shape":"CreateHealthCheckResponse"},
      "errors":[
        {
          "shape":"TooManyHealthChecks",
          "exception":true
        },
        {
          "shape":"HealthCheckAlreadyExists",
          "error":{"httpStatusCode":409},
          "exception":true
        },
        {
          "shape":"InvalidInput",
          "error":{"httpStatusCode":400},
          "exception":true
        }
      ]
    },
    "CreateHostedZone":{
      "name":"CreateHostedZone",
      "http":{
        "method":"POST",
        "requestUri":"/2013-04-01/hostedzone",
        "responseCode":201
      },
      "input":{
        "shape":"CreateHostedZoneRequest",
        "xmlNamespace":{"uri":"https://route53.amazonaws.com/doc/2013-04-01/"},
        "locationName":"CreateHostedZoneRequest"
      },
      "output":{"shape":"CreateHostedZoneResponse"},
      "errors":[
        {
          "shape":"InvalidDomainName",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"HostedZoneAlreadyExists",
          "error":{"httpStatusCode":409},
          "exception":true
        },
        {
          "shape":"TooManyHostedZones",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InvalidVPCId",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InvalidInput",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"DelegationSetNotAvailable",
          "exception":true
        },
        {
          "shape":"ConflictingDomainExists",
          "exception":true
        },
        {
          "shape":"NoSuchDelegationSet",
          "exception":true
        },
        {
          "shape":"DelegationSetNotReusable",
          "exception":true
        }
      ]
    },
    "CreateReusableDelegationSet":{
      "name":"CreateReusableDelegationSet",
      "http":{
        "method":"POST",
        "requestUri":"/2013-04-01/delegationset",
        "responseCode":201
      },
      "input":{
        "shape":"CreateReusableDelegationSetRequest",
        "xmlNamespace":{"uri":"https://route53.amazonaws.com/doc/2013-04-01/"},
        "locationName":"CreateReusableDelegationSetRequest"
      },
      "output":{"shape":"CreateReusableDelegationSetResponse"},
      "errors":[
        {
          "shape":"DelegationSetAlreadyCreated",
          "exception":true
        },
        {
          "shape":"LimitsExceeded",
          "exception":true
        },
        {
          "shape":"HostedZoneNotFound",
          "exception":true
        },
        {
          "shape":"InvalidArgument",
          "exception":true
        },
        {
          "shape":"InvalidInput",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"DelegationSetNotAvailable",
          "exception":true
        },
        {
          "shape":"DelegationSetAlreadyReusable",
          "exception":true
        }
      ]
    },
    "DeleteHealthCheck":{
      "name":"DeleteHealthCheck",
      "http":{
        "method":"DELETE",
        "requestUri":"/2013-04-01/healthcheck/{HealthCheckId}"
      },
      "input":{"shape":"DeleteHealthCheckRequest"},
      "output":{"shape":"DeleteHealthCheckResponse"},
      "errors":[
        {
          "shape":"NoSuchHealthCheck",
          "error":{"httpStatusCode":404},
          "exception":true
        },
        {
          "shape":"HealthCheckInUse",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InvalidInput",
          "error":{"httpStatusCode":400},
          "exception":true
        }
      ]
    },
    "DeleteHostedZone":{
      "name":"DeleteHostedZone",
      "http":{
        "method":"DELETE",
        "requestUri":"/2013-04-01/hostedzone/{Id}"
      },
      "input":{"shape":"DeleteHostedZoneRequest"},
      "output":{"shape":"DeleteHostedZoneResponse"},
      "errors":[
        {
          "shape":"NoSuchHostedZone",
          "error":{"httpStatusCode":404},
          "exception":true
        },
        {
          "shape":"HostedZoneNotEmpty",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"PriorRequestNotComplete",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InvalidInput",
          "error":{"httpStatusCode":400},
          "exception":true
        }
      ]
    },
    "DeleteReusableDelegationSet":{
      "name":"DeleteReusableDelegationSet",
      "http":{
        "method":"DELETE",
        "requestUri":"/2013-04-01/delegationset/{Id}"
      },
      "input":{"shape":"DeleteReusableDelegationSetRequest"},
      "output":{"shape":"DeleteReusableDelegationSetResponse"},
      "errors":[
        {
          "shape":"NoSuchDelegationSet",
          "exception":true
        },
        {
          "shape":"DelegationSetInUse",
          "exception":true
        },
        {
          "shape":"DelegationSetNotReusable",
          "exception":true
        },
        {
          "shape":"InvalidInput",
          "error":{"httpStatusCode":400},
          "exception":true
        }
      ]
    },
    "DisassociateVPCFromHostedZone":{
      "name":"DisassociateVPCFromHostedZone",
      "http":{
        "method":"POST",
        "requestUri":"/2013-04-01/hostedzone/{Id}/disassociatevpc"
      },
      "input":{
        "shape":"DisassociateVPCFromHostedZoneRequest",
        "xmlNamespace":{"uri":"https://route53.amazonaws.com/doc/2013-04-01/"},
        "locationName":"DisassociateVPCFromHostedZoneRequest"
      },
      "output":{"shape":"DisassociateVPCFromHostedZoneResponse"},
      "errors":[
        {
          "shape":"NoSuchHostedZone",
          "error":{"httpStatusCode":404},
          "exception":true
        },
        {
          "shape":"InvalidVPCId",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"VPCAssociationNotFound",
          "error":{"httpStatusCode":404},
          "exception":true
        },
        {
          "shape":"LastVPCAssociation",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InvalidInput",
          "error":{"httpStatusCode":400},
          "exception":true
        }
      ]
    },
    "GetChange":{
      "name":"GetChange",
      "http":{
        "method":"GET",
        "requestUri":"/2013-04-01/change/{Id}"
      },
      "input":{"shape":"GetChangeRequest"},
      "output":{"shape":"GetChangeResponse"},
      "errors":[
        {
          "shape":"NoSuchChange",
          "error":{"httpStatusCode":404},
          "exception":true
        },
        {
          "shape":"InvalidInput",
          "error":{"httpStatusCode":400},
          "exception":true
        }
      ]
    },
    "GetCheckerIpRanges":{
      "name":"GetCheckerIpRanges",
      "http":{
        "method":"GET",
        "requestUri":"/2013-04-01/checkeripranges"
      },
      "input":{"shape":"GetCheckerIpRangesRequest"},
      "output":{"shape":"GetCheckerIpRangesResponse"}
    },
    "GetGeoLocation":{
      "name":"GetGeoLocation",
      "http":{
        "method":"GET",
        "requestUri":"/2013-04-01/geolocation"
      },
      "input":{"shape":"GetGeoLocationRequest"},
      "output":{"shape":"GetGeoLocationResponse"},
      "errors":[
        {
          "shape":"NoSuchGeoLocation",
          "error":{"httpStatusCode":404},
          "exception":true
        },
        {
          "shape":"InvalidInput",
          "error":{"httpStatusCode":400},
          "exception":true
        }
      ]
    },
    "GetHealthCheck":{
      "name":"GetHealthCheck",
      "http":{
        "method":"GET",
        "requestUri":"/2013-04-01/healthcheck/{HealthCheckId}"
      },
      "input":{"shape":"GetHealthCheckRequest"},
      "output":{"shape":"GetHealthCheckResponse"},
      "errors":[
        {
          "shape":"NoSuchHealthCheck",
          "error":{"httpStatusCode":404},
          "exception":true
        },
        {
          "shape":"InvalidInput",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"IncompatibleVersion",
          "error":{"httpStatusCode":400},
          "exception":true
        }
      ]
    },
    "GetHealthCheckCount":{
      "name":"GetHealthCheckCount",
      "http":{
        "method":"GET",
        "requestUri":"/2013-04-01/healthcheckcount"
      },
      "input":{"shape":"GetHealthCheckCountRequest"},
      "output":{"shape":"GetHealthCheckCountResponse"}
    },
    "GetHealthCheckLastFailureReason":{
      "name":"GetHealthCheckLastFailureReason",
      "http":{
        "method":"GET",
        "requestUri":"/2013-04-01/healthcheck/{HealthCheckId}/lastfailurereason"
      },
      "input":{"shape":"GetHealthCheckLastFailureReasonRequest"},
      "output":{"shape":"GetHealthCheckLastFailureReasonResponse"},
      "errors":[
        {
          "shape":"NoSuchHealthCheck",
          "error":{"httpStatusCode":404},
          "exception":true
        }
      ]
    },
    "GetHealthCheckStatus":{
      "name":"GetHealthCheckStatus",
      "http":{
        "method":"GET",
        "requestUri":"/2013-04-01/healthcheck/{HealthCheckId}/status"
      },
      "input":{"shape":"GetHealthCheckStatusRequest"},
      "output":{"shape":"GetHealthCheckStatusResponse"},
      "errors":[
        {
          "shape":"NoSuchHealthCheck",
          "error":{"httpStatusCode":404},
          "exception":true
        }
      ]
    },
    "GetHostedZone":{
      "name":"GetHostedZone",
      "http":{
        "method":"GET",
        "requestUri":"/2013-04-01/hostedzone/{Id}"
      },
      "input":{"shape":"GetHostedZoneRequest"},
      "output":{"shape":"GetHostedZoneResponse"},
      "errors":[
        {
          "shape":"NoSuchHostedZone",
          "error":{"httpStatusCode":404},
          "exception":true
        },
        {
          "shape":"InvalidInput",
          "error":{"httpStatusCode":400},
          "exception":true
        }
      ]
    },
    "GetReusableDelegationSet":{
      "name":"GetReusableDelegationSet",
      "http":{
        "method":"GET",
        "requestUri":"/2013-04-01/delegationset/{Id}"
      },
      "input":{"shape":"GetReusableDelegationSetRequest"},
      "output":{"shape":"GetReusableDelegationSetResponse"},
      "errors":[
        {
          "shape":"NoSuchDelegationSet",
          "exception":true
        },
        {
          "shape":"DelegationSetNotReusable",
          "exception":true
        },
        {
          "shape":"InvalidInput",
          "error":{"httpStatusCode":400},
          "exception":true
        }
      ]
    },
    "ListGeoLocations":{
      "name":"ListGeoLocations",
      "http":{
        "method":"GET",
        "requestUri":"/2013-04-01/geolocations"
      },
      "input":{"shape":"ListGeoLocationsRequest"},
      "output":{"shape":"ListGeoLocationsResponse"},
      "errors":[
        {
          "shape":"InvalidInput",
          "error":{"httpStatusCode":400},
          "exception":true
        }
      ]
    },
    "ListHealthChecks":{
      "name":"ListHealthChecks",
      "http":{
        "method":"GET",
        "requestUri":"/2013-04-01/healthcheck"
      },
      "input":{"shape":"ListHealthChecksRequest"},
      "output":{"shape":"ListHealthChecksResponse"},
      "errors":[
        {
          "shape":"InvalidInput",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"IncompatibleVersion",
          "error":{"httpStatusCode":400},
          "exception":true
        }
      ]
    },
    "ListHostedZones":{
      "name":"ListHostedZones",
      "http":{
        "method":"GET",
        "requestUri":"/2013-04-01/hostedzone"
      },
      "input":{"shape":"ListHostedZonesRequest"},
      "output":{"shape":"ListHostedZonesResponse"},
      "errors":[
        {
          "shape":"InvalidInput",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"NoSuchDelegationSet",
          "exception":true
        },
        {
          "shape":"DelegationSetNotReusable",
          "exception":true
        }
      ]
    },
    "ListResourceRecordSets":{
      "name":"ListResourceRecordSets",
      "http":{
        "method":"GET",
        "requestUri":"/2013-04-01/hostedzone/{Id}/rrset"
      },
      "input":{"shape":"ListResourceRecordSetsRequest"},
      "output":{"shape":"ListResourceRecordSetsResponse"},
      "errors":[
        {
          "shape":"NoSuchHostedZone",
          "error":{"httpStatusCode":404},
          "exception":true
        },
        {
          "shape":"InvalidInput",
          "error":{"httpStatusCode":400},
          "exception":true
        }
      ]
    },
    "ListReusableDelegationSets":{
      "name":"ListReusableDelegationSets",
      "http":{
        "method":"GET",
        "requestUri":"/2013-04-01/delegationset"
      },
      "input":{"shape":"ListReusableDelegationSetsRequest"},
      "output":{"shape":"ListReusableDelegationSetsResponse"},
      "errors":[
        {
          "shape":"InvalidInput",
          "error":{"httpStatusCode":400},
          "exception":true
        }
      ]
    },
    "ListTagsForResource":{
      "name":"ListTagsForResource",
      "http":{
        "method":"GET",
        "requestUri":"/2013-04-01/tags/{ResourceType}/{ResourceId}"
      },
      "input":{"shape":"ListTagsForResourceRequest"},
      "output":{"shape":"ListTagsForResourceResponse"},
      "errors":[
        {
          "shape":"InvalidInput",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"NoSuchHealthCheck",
          "error":{"httpStatusCode":404},
          "exception":true
        },
        {
          "shape":"NoSuchHostedZone",
          "error":{"httpStatusCode":404},
          "exception":true
        },
        {
          "shape":"PriorRequestNotComplete",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"ThrottlingException",
          "error":{"httpStatusCode":400},
          "exception":true
        }
      ]
    },
    "ListTagsForResources":{
      "name":"ListTagsForResources",
      "http":{
        "method":"POST",
        "requestUri":"/2013-04-01/tags/{ResourceType}"
      },
      "input":{
        "shape":"ListTagsForResourcesRequest",
        "xmlNamespace":{"uri":"https://route53.amazonaws.com/doc/2013-04-01/"},
        "locationName":"ListTagsForResourcesRequest"
      },
      "output":{"shape":"ListTagsForResourcesResponse"},
      "errors":[
        {
          "shape":"InvalidInput",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"NoSuchHealthCheck",
          "error":{"httpStatusCode":404},
          "exception":true
        },
        {
          "shape":"NoSuchHostedZone",
          "error":{"httpStatusCode":404},
          "exception":true
        },
        {
          "shape":"PriorRequestNotComplete",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"ThrottlingException",
          "error":{"httpStatusCode":400},
          "exception":true
        }
      ]
    },
    "UpdateHealthCheck":{
      "name":"UpdateHealthCheck",
      "http":{
        "method":"POST",
        "requestUri":"/2013-04-01/healthcheck/{HealthCheckId}"
      },
      "input":{
        "shape":"UpdateHealthCheckRequest",
        "xmlNamespace":{"uri":"https://route53.amazonaws.com/doc/2013-04-01/"},
        "locationName":"UpdateHealthCheckRequest"
      },
      "output":{"shape":"UpdateHealthCheckResponse"},
      "errors":[
        {
          "shape":"NoSuchHealthCheck",
          "error":{"httpStatusCode":404},
          "exception":true
        },
        {
          "shape":"InvalidInput",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"HealthCheckVersionMismatch",
          "error":{"httpStatusCode":409},
          "exception":true
        }
      ]
    },
    "UpdateHostedZoneComment":{
      "name":"UpdateHostedZoneComment",
      "http":{
        "method":"POST",
        "requestUri":"/2013-04-01/hostedzone/{Id}"
      },
      "input":{
        "shape":"UpdateHostedZoneCommentRequest",
        "xmlNamespace":{"uri":"https://route53.amazonaws.com/doc/2013-04-01/"},
        "locationName":"UpdateHostedZoneCommentRequest"
      },
      "output":{"shape":"UpdateHostedZoneCommentResponse"},
      "errors":[
        {
          "shape":"NoSuchHostedZone",
          "error":{"httpStatusCode":404},
          "exception":true
        },
        {
          "shape":"InvalidInput",
          "error":{"httpStatusCode":400},
          "exception":true
        }
      ]
    }
  },
  "shapes":{
    "AliasHealthEnabled":{"type":"boolean"},
    "AliasTarget":{
      "type":"structure",
      "required":[
        "HostedZoneId",
        "DNSName",
        "EvaluateTargetHealth"
      ],
      "members":{
        "HostedZoneId":{"shape":"ResourceId"},
        "DNSName":{"shape":"DNSName"},
        "EvaluateTargetHealth":{"shape":"AliasHealthEnabled"}
      }
    },
    "AssociateVPCComment":{"type":"string"},
    "AssociateVPCWithHostedZoneRequest":{
      "type":"structure",
      "required":[
        "HostedZoneId",
        "VPC"
      ],
      "members":{
        "HostedZoneId":{
          "shape":"ResourceId",
          "location":"uri",
          "locationName":"Id"
        },
        "VPC":{"shape":"VPC"},
        "Comment":{"shape":"AssociateVPCComment"}
      }
    },
    "AssociateVPCWithHostedZoneResponse":{
      "type":"structure",
      "required":["ChangeInfo"],
      "members":{
        "ChangeInfo":{"shape":"ChangeInfo"}
      }
    },
    "Change":{
      "type":"structure",
      "required":[
        "Action",
        "ResourceRecordSet"
      ],
      "members":{
        "Action":{"shape":"ChangeAction"},
        "ResourceRecordSet":{"shape":"ResourceRecordSet"}
      }
    },
    "ChangeAction":{
      "type":"string",
      "enum":[
        "CREATE",
        "DELETE",
        "UPSERT"
      ]
    },
    "ChangeBatch":{
      "type":"structure",
      "required":["Changes"],
      "members":{
        "Comment":{"shape":"ResourceDescription"},
        "Changes":{"shape":"Changes"}
      }
    },
    "ChangeInfo":{
      "type":"structure",
      "required":[
        "Id",
        "Status",
        "SubmittedAt"
      ],
      "members":{
        "Id":{"shape":"ResourceId"},
        "Status":{"shape":"ChangeStatus"},
        "SubmittedAt":{"shape":"TimeStamp"},
        "Comment":{"shape":"ResourceDescription"}
      }
    },
    "ChangeResourceRecordSetsRequest":{
      "type":"structure",
      "required":[
        "HostedZoneId",
        "ChangeBatch"
      ],
      "members":{
        "HostedZoneId":{
          "shape":"ResourceId",
          "location":"uri",
          "locationName":"Id"
        },
        "ChangeBatch":{"shape":"ChangeBatch"}
      }
    },
    "ChangeResourceRecordSetsResponse":{
      "type":"structure",
      "required":["ChangeInfo"],
      "members":{
        "ChangeInfo":{"shape":"ChangeInfo"}
      }
    },
    "ChangeStatus":{
      "type":"string",
      "enum":[
        "PENDING",
        "INSYNC"
      ]
    },
    "ChangeTagsForResourceRequest":{
      "type":"structure",
      "required":[
        "ResourceType",
        "ResourceId"
      ],
      "members":{
        "ResourceType":{
          "shape":"TagResourceType",
          "location":"uri",
          "locationName":"ResourceType"
        },
        "ResourceId":{
          "shape":"TagResourceId",
          "location":"uri",
          "locationName":"ResourceId"
        },
        "AddTags":{"shape":"TagList"},
        "RemoveTagKeys":{"shape":"TagKeyList"}
      }
    },
    "ChangeTagsForResourceResponse":{
      "type":"structure",
      "members":{
      }
    },
    "Changes":{
      "type":"list",
      "member":{
        "shape":"Change",
        "locationName":"Change"
      },
      "min":1
    },
    "CheckerIpRanges":{
      "type":"list",
      "member":{"shape":"IPAddressCidr"}
    },
    "ConflictingDomainExists":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "exception":true
    },
    "CreateHealthCheckRequest":{
      "type":"structure",
      "required":[
        "CallerReference",
        "HealthCheckConfig"
      ],
      "members":{
        "CallerReference":{"shape":"HealthCheckNonce"},
        "HealthCheckConfig":{"shape":"HealthCheckConfig"}
      }
    },
    "CreateHealthCheckResponse":{
      "type":"structure",
      "required":[
        "HealthCheck",
        "Location"
      ],
      "members":{
        "HealthCheck":{"shape":"HealthCheck"},
        "Location":{
          "shape":"ResourceURI",
          "location":"header",
          "locationName":"Location"
        }
      }
    },
    "CreateHostedZoneRequest":{
      "type":"structure",
      "required":[
        "Name",
        "CallerReference"
      ],
      "members":{
        "Name":{"shape":"DNSName"},
        "VPC":{"shape":"VPC"},
        "CallerReference":{"shape":"Nonce"},
        "HostedZoneConfig":{"shape":"HostedZoneConfig"},
        "DelegationSetId":{"shape":"ResourceId"}
      }
    },
    "CreateHostedZoneResponse":{
      "type":"structure",
      "required":[
        "HostedZone",
        "ChangeInfo",
        "DelegationSet",
        "Location"
      ],
      "members":{
        "HostedZone":{"shape":"HostedZone"},
        "ChangeInfo":{"shape":"ChangeInfo"},
        "DelegationSet":{"shape":"DelegationSet"},
        "VPC":{"shape":"VPC"},
        "Location":{
          "shape":"ResourceURI",
          "location":"header",
          "locationName":"Location"
        }
      }
    },
    "CreateReusableDelegationSetRequest":{
      "type":"structure",
      "required":["CallerReference"],
      "members":{
        "CallerReference":{"shape":"Nonce"},
        "HostedZoneId":{"shape":"ResourceId"}
      }
    },
    "CreateReusableDelegationSetResponse":{
      "type":"structure",
      "required":[
        "DelegationSet",
        "Location"
      ],
      "members":{
        "DelegationSet":{"shape":"DelegationSet"},
        "Location":{
          "shape":"ResourceURI",
          "location":"header",
          "locationName":"Location"
        }
      }
    },
    "DNSName":{
      "type":"string",
      "max":1024
    },
    "DelegationSet":{
      "type":"structure",
      "required":["NameServers"],
      "members":{
        "Id":{"shape":"ResourceId"},
        "CallerReference":{"shape":"Nonce"},
        "NameServers":{"shape":"DelegationSetNameServers"}
      }
    },
    "DelegationSetAlreadyCreated":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "exception":true
    },
    "DelegationSetAlreadyReusable":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "exception":true
    },
    "DelegationSetInUse":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "exception":true
    },
    "DelegationSetNameServers":{
      "type":"list",
      "member":{
        "shape":"DNSName",
        "locationName":"NameServer"
      },
      "min":1
    },
    "DelegationSetNotAvailable":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "exception":true
    },
    "DelegationSetNotReusable":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "exception":true
    },
    "DelegationSets":{
      "type":"list",
      "member":{
        "shape":"DelegationSet",
        "locationName":"DelegationSet"
      }
    },
    "DeleteHealthCheckRequest":{
      "type":"structure",
      "required":["HealthCheckId"],
      "members":{
        "HealthCheckId":{
          "shape":"HealthCheckId",
          "location":"uri",
          "locationName":"HealthCheckId"
        }
      }
    },
    "DeleteHealthCheckResponse":{
      "type":"structure",
      "members":{
      }
    },
    "DeleteHostedZoneRequest":{
      "type":"structure",
      "required":["Id"],
      "members":{
        "Id":{
          "shape":"ResourceId",
          "location":"uri",
          "locationName":"Id"
        }
      }
    },
    "DeleteHostedZoneResponse":{
      "type":"structure",
      "required":["ChangeInfo"],
      "members":{
        "ChangeInfo":{"shape":"ChangeInfo"}
      }
    },
    "DeleteReusableDelegationSetRequest":{
      "type":"structure",
      "required":["Id"],
      "members":{
        "Id":{
          "shape":"ResourceId",
          "location":"uri",
          "locationName":"Id"
        }
      }
    },
    "DeleteReusableDelegationSetResponse":{
      "type":"structure",
      "members":{
      }
    },
    "DisassociateVPCComment":{"type":"string"},
    "DisassociateVPCFromHostedZoneRequest":{
      "type":"structure",
      "required":[
        "HostedZoneId",
        "VPC"
      ],
      "members":{
        "HostedZoneId":{
          "shape":"ResourceId",
          "location":"uri",
          "locationName":"Id"
        },
        "VPC":{"shape":"VPC"},
        "Comment":{"shape":"DisassociateVPCComment"}
      }
    },
    "DisassociateVPCFromHostedZoneResponse":{
      "type":"structure",
      "required":["ChangeInfo"],
      "members":{
        "ChangeInfo":{"shape":"ChangeInfo"}
      }
    },
    "ErrorMessage":{"type":"string"},
    "ErrorMessages":{
      "type":"list",
      "member":{
        "shape":"ErrorMessage",
        "locationName":"Message"
      }
    },
    "FailureThreshold":{
      "type":"integer",
      "min":1,
      "max":10
    },
    "FullyQualifiedDomainName":{
      "type":"string",
      "max":255
    },
    "GeoLocation":{
      "type":"structure",
      "members":{
        "ContinentCode":{"shape":"GeoLocationContinentCode"},
        "CountryCode":{"shape":"GeoLocationCountryCode"},
        "SubdivisionCode":{"shape":"GeoLocationSubdivisionCode"}
      }
    },
    "GeoLocationContinentCode":{
      "type":"string",
      "min":2,
      "max":2
    },
    "GeoLocationContinentName":{
      "type":"string",
      "min":1,
      "max":32
    },
    "GeoLocationCountryCode":{
      "type":"string",
      "min":1,
      "max":2
    },
    "GeoLocationCountryName":{
      "type":"string",
      "min":1,
      "max":64
    },
    "GeoLocationDetails":{
      "type":"structure",
      "members":{
        "ContinentCode":{"shape":"GeoLocationContinentCode"},
        "ContinentName":{"shape":"GeoLocationContinentName"},
        "CountryCode":{"shape":"GeoLocationCountryCode"},
        "CountryName":{"shape":"GeoLocationCountryName"},
        "SubdivisionCode":{"shape":"GeoLocationSubdivisionCode"},
        "SubdivisionName":{"shape":"GeoLocationSubdivisionName"}
      }
    },
    "GeoLocationDetailsList":{
      "type":"list",
      "member":{
        "shape":"GeoLocationDetails",
        "locationName":"GeoLocationDetails"
      }
    },
    "GeoLocationSubdivisionCode":{
      "type":"string",
      "min":1,
      "max":3
    },
    "GeoLocationSubdivisionName":{
      "type":"string",
      "min":1,
      "max":64
    },
    "GetChangeRequest":{
      "type":"structure",
      "required":["Id"],
      "members":{
        "Id":{
          "shape":"ResourceId",
          "location":"uri",
          "locationName":"Id"
        }
      }
    },
    "GetChangeResponse":{
      "type":"structure",
      "required":["ChangeInfo"],
      "members":{
        "ChangeInfo":{"shape":"ChangeInfo"}
      }
    },
    "GetCheckerIpRangesRequest":{
      "type":"structure",
      "members":{
      }
    },
    "GetCheckerIpRangesResponse":{
      "type":"structure",
      "required":["CheckerIpRanges"],
      "members":{
        "CheckerIpRanges":{"shape":"CheckerIpRanges"}
      }
    },
    "GetGeoLocationRequest":{
      "type":"structure",
      "members":{
        "ContinentCode":{
          "shape":"GeoLocationContinentCode",
          "location":"querystring",
          "locationName":"continentcode"
        },
        "CountryCode":{
          "shape":"GeoLocationCountryCode",
          "location":"querystring",
          "locationName":"countrycode"
        },
        "SubdivisionCode":{
          "shape":"GeoLocationSubdivisionCode",
          "location":"querystring",
          "locationName":"subdivisioncode"
        }
      }
    },
    "GetGeoLocationResponse":{
      "type":"structure",
      "required":["GeoLocationDetails"],
      "members":{
        "GeoLocationDetails":{"shape":"GeoLocationDetails"}
      }
    },
    "GetHealthCheckCountRequest":{
      "type":"structure",
      "members":{
      }
    },
    "GetHealthCheckCountResponse":{
      "type":"structure",
      "required":["HealthCheckCount"],
      "members":{
        "HealthCheckCount":{"shape":"HealthCheckCount"}
      }
    },
    "GetHealthCheckLastFailureReasonRequest":{
      "type":"structure",
      "required":["HealthCheckId"],
      "members":{
        "HealthCheckId":{
          "shape":"HealthCheckId",
          "location":"uri",
          "locationName":"HealthCheckId"
        }
      }
    },
    "GetHealthCheckLastFailureReasonResponse":{
      "type":"structure",
      "required":["HealthCheckObservations"],
      "members":{
        "HealthCheckObservations":{"shape":"HealthCheckObservations"}
      }
    },
    "GetHealthCheckRequest":{
      "type":"structure",
      "required":["HealthCheckId"],
      "members":{
        "HealthCheckId":{
          "shape":"HealthCheckId",
          "location":"uri",
          "locationName":"HealthCheckId"
        }
      }
    },
    "GetHealthCheckResponse":{
      "type":"structure",
      "required":["HealthCheck"],
      "members":{
        "HealthCheck":{"shape":"HealthCheck"}
      }
    },
    "GetHealthCheckStatusRequest":{
      "type":"structure",
      "required":["HealthCheckId"],
      "members":{
        "HealthCheckId":{
          "shape":"HealthCheckId",
          "location":"uri",
          "locationName":"HealthCheckId"
        }
      }
    },
    "GetHealthCheckStatusResponse":{
      "type":"structure",
      "required":["HealthCheckObservations"],
      "members":{
        "HealthCheckObservations":{"shape":"HealthCheckObservations"}
      }
    },
    "GetHostedZoneRequest":{
      "type":"structure",
      "required":["Id"],
      "members":{
        "Id":{
          "shape":"ResourceId",
          "location":"uri",
          "locationName":"Id"
        }
      }
    },
    "GetHostedZoneResponse":{
      "type":"structure",
      "required":["HostedZone"],
      "members":{
        "HostedZone":{"shape":"HostedZone"},
        "DelegationSet":{"shape":"DelegationSet"},
        "VPCs":{"shape":"VPCs"}
      }
    },
    "GetReusableDelegationSetRequest":{
      "type":"structure",
      "required":["Id"],
      "members":{
        "Id":{
          "shape":"ResourceId",
          "location":"uri",
          "locationName":"Id"
        }
      }
    },
    "GetReusableDelegationSetResponse":{
      "type":"structure",
      "required":["DelegationSet"],
      "members":{
        "DelegationSet":{"shape":"DelegationSet"}
      }
    },
    "HealthCheck":{
      "type":"structure",
      "required":[
        "Id",
        "CallerReference",
        "HealthCheckConfig",
        "HealthCheckVersion"
      ],
      "members":{
        "Id":{"shape":"HealthCheckId"},
        "CallerReference":{"shape":"HealthCheckNonce"},
        "HealthCheckConfig":{"shape":"HealthCheckConfig"},
        "HealthCheckVersion":{"shape":"HealthCheckVersion"}
      }
    },
    "HealthCheckAlreadyExists":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "error":{"httpStatusCode":409},
      "exception":true
    },
    "HealthCheckConfig":{
      "type":"structure",
      "required":["Type"],
      "members":{
        "IPAddress":{"shape":"IPAddress"},
        "Port":{"shape":"Port"},
        "Type":{"shape":"HealthCheckType"},
        "ResourcePath":{"shape":"ResourcePath"},
        "FullyQualifiedDomainName":{"shape":"FullyQualifiedDomainName"},
        "SearchString":{"shape":"SearchString"},
        "RequestInterval":{"shape":"RequestInterval"},
        "FailureThreshold":{"shape":"FailureThreshold"}
      }
    },
    "HealthCheckCount":{"type":"long"},
    "HealthCheckId":{
      "type":"string",
      "max":64
    },
    "HealthCheckInUse":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "error":{"httpStatusCode":400},
      "exception":true
    },
    "HealthCheckNonce":{
      "type":"string",
      "min":1,
      "max":64
    },
    "HealthCheckObservation":{
      "type":"structure",
      "members":{
        "IPAddress":{"shape":"IPAddress"},
        "StatusReport":{"shape":"StatusReport"}
      }
    },
    "HealthCheckObservations":{
      "type":"list",
      "member":{
        "shape":"HealthCheckObservation",
        "locationName":"HealthCheckObservation"
      }
    },
    "HealthCheckType":{
      "type":"string",
      "enum":[
        "HTTP",
        "HTTPS",
        "HTTP_STR_MATCH",
        "HTTPS_STR_MATCH",
        "TCP"
      ]
    },
    "HealthCheckVersion":{
      "type":"long",
      "min":1
    },
    "HealthCheckVersionMismatch":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "error":{"httpStatusCode":409},
      "exception":true
    },
    "HealthChecks":{
      "type":"list",
      "member":{
        "shape":"HealthCheck",
        "locationName":"HealthCheck"
      }
    },
    "HostedZone":{
      "type":"structure",
      "required":[
        "Id",
        "Name",
        "CallerReference"
      ],
      "members":{
        "Id":{"shape":"ResourceId"},
        "Name":{"shape":"DNSName"},
        "CallerReference":{"shape":"Nonce"},
        "Config":{"shape":"HostedZoneConfig"},
        "ResourceRecordSetCount":{"shape":"HostedZoneRRSetCount"}
      }
    },
    "HostedZoneAlreadyExists":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "error":{"httpStatusCode":409},
      "exception":true
    },
    "HostedZoneConfig":{
      "type":"structure",
      "members":{
        "Comment":{"shape":"ResourceDescription"},
        "PrivateZone":{"shape":"IsPrivateZone"}
      }
    },
    "HostedZoneNotEmpty":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "error":{"httpStatusCode":400},
      "exception":true
    },
    "HostedZoneNotFound":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "exception":true
    },
    "HostedZoneRRSetCount":{"type":"long"},
    "HostedZones":{
      "type":"list",
      "member":{
        "shape":"HostedZone",
        "locationName":"HostedZone"
      }
    },
    "IPAddress":{
      "type":"string",
      "max":15,
      "pattern":"^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$"
    },
    "IPAddressCidr":{"type":"string"},
    "IncompatibleVersion":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "error":{"httpStatusCode":400},
      "exception":true
    },
    "InvalidArgument":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "exception":true
    },
    "InvalidChangeBatch":{
      "type":"structure",
      "members":{
        "messages":{"shape":"ErrorMessages"}
      },
      "exception":true
    },
    "InvalidDomainName":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "error":{"httpStatusCode":400},
      "exception":true
    },
    "InvalidInput":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "error":{"httpStatusCode":400},
      "exception":true
    },
    "InvalidVPCId":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "error":{"httpStatusCode":400},
      "exception":true
    },
    "IsPrivateZone":{"type":"boolean"},
    "LastVPCAssociation":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "error":{"httpStatusCode":400},
      "exception":true
    },
    "LimitsExceeded":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "exception":true
    },
    "ListGeoLocationsRequest":{
      "type":"structure",
      "members":{
        "StartContinentCode":{
          "shape":"GeoLocationContinentCode",
          "location":"querystring",
          "locationName":"startcontinentcode"
        },
        "StartCountryCode":{
          "shape":"GeoLocationCountryCode",
          "location":"querystring",
          "locationName":"startcountrycode"
        },
        "StartSubdivisionCode":{
          "shape":"GeoLocationSubdivisionCode",
          "location":"querystring",
          "locationName":"startsubdivisioncode"
        },
        "MaxItems":{
          "shape":"PageMaxItems",
          "location":"querystring",
          "locationName":"maxitems"
        }
      }
    },
    "ListGeoLocationsResponse":{
      "type":"structure",
      "required":[
        "GeoLocationDetailsList",
        "IsTruncated",
        "MaxItems"
      ],
      "members":{
        "GeoLocationDetailsList":{"shape":"GeoLocationDetailsList"},
        "IsTruncated":{"shape":"PageTruncated"},
        "NextContinentCode":{"shape":"GeoLocationContinentCode"},
        "NextCountryCode":{"shape":"GeoLocationCountryCode"},
        "NextSubdivisionCode":{"shape":"GeoLocationSubdivisionCode"},
        "MaxItems":{"shape":"PageMaxItems"}
      }
    },
    "ListHealthChecksRequest":{
      "type":"structure",
      "members":{
        "Marker":{
          "shape":"PageMarker",
          "location":"querystring",
          "locationName":"marker"
        },
        "MaxItems":{
          "shape":"PageMaxItems",
          "location":"querystring",
          "locationName":"maxitems"
        }
      }
    },
    "ListHealthChecksResponse":{
      "type":"structure",
      "required":[
        "HealthChecks",
        "Marker",
        "IsTruncated",
        "MaxItems"
      ],
      "members":{
        "HealthChecks":{"shape":"HealthChecks"},
        "Marker":{"shape":"PageMarker"},
        "IsTruncated":{"shape":"PageTruncated"},
        "NextMarker":{"shape":"PageMarker"},
        "MaxItems":{"shape":"PageMaxItems"}
      }
    },
    "ListHostedZonesRequest":{
      "type":"structure",
      "members":{
        "Marker":{
          "shape":"PageMarker",
          "location":"querystring",
          "locationName":"marker"
        },
        "MaxItems":{
          "shape":"PageMaxItems",
          "location":"querystring",
          "locationName":"maxitems"
        },
        "DelegationSetId":{
          "shape":"ResourceId",
          "location":"querystring",
          "locationName":"delegationsetid"
        }
      }
    },
    "ListHostedZonesResponse":{
      "type":"structure",
      "required":[
        "HostedZones",
        "Marker",
        "IsTruncated",
        "MaxItems"
      ],
      "members":{
        "HostedZones":{"shape":"HostedZones"},
        "Marker":{"shape":"PageMarker"},
        "IsTruncated":{"shape":"PageTruncated"},
        "NextMarker":{"shape":"PageMarker"},
        "MaxItems":{"shape":"PageMaxItems"}
      }
    },
    "ListResourceRecordSetsRequest":{
      "type":"structure",
      "required":["HostedZoneId"],
      "members":{
        "HostedZoneId":{
          "shape":"ResourceId",
          "location":"uri",
          "locationName":"Id"
        },
        "StartRecordName":{
          "shape":"DNSName",
          "location":"querystring",
          "locationName":"name"
        },
        "StartRecordType":{
          "shape":"RRType",
          "location":"querystring",
          "locationName":"type"
        },
        "StartRecordIdentifier":{
          "shape":"ResourceRecordSetIdentifier",
          "location":"querystring",
          "locationName":"identifier"
        },
        "MaxItems":{
          "shape":"PageMaxItems",
          "location":"querystring",
          "locationName":"maxitems"
        }
      }
    },
    "ListResourceRecordSetsResponse":{
      "type":"structure",
      "required":[
        "ResourceRecordSets",
        "IsTruncated",
        "MaxItems"
      ],
      "members":{
        "ResourceRecordSets":{"shape":"ResourceRecordSets"},
        "IsTruncated":{"shape":"PageTruncated"},
        "NextRecordName":{"shape":"DNSName"},
        "NextRecordType":{"shape":"RRType"},
        "NextRecordIdentifier":{"shape":"ResourceRecordSetIdentifier"},
        "MaxItems":{"shape":"PageMaxItems"}
      }
    },
    "ListReusableDelegationSetsRequest":{
      "type":"structure",
      "members":{
        "Marker":{
          "shape":"PageMarker",
          "location":"querystring",
          "locationName":"marker"
        },
        "MaxItems":{
          "shape":"PageMaxItems",
          "location":"querystring",
          "locationName":"maxitems"
        }
      }
    },
    "ListReusableDelegationSetsResponse":{
      "type":"structure",
      "required":[
        "DelegationSets",
        "Marker",
        "IsTruncated",
        "MaxItems"
      ],
      "members":{
        "DelegationSets":{"shape":"DelegationSets"},
        "Marker":{"shape":"PageMarker"},
        "IsTruncated":{"shape":"PageTruncated"},
        "NextMarker":{"shape":"PageMarker"},
        "MaxItems":{"shape":"PageMaxItems"}
      }
    },
    "ListTagsForResourceRequest":{
      "type":"structure",
      "required":[
        "ResourceType",
        "ResourceId"
      ],
      "members":{
        "ResourceType":{
          "shape":"TagResourceType",
          "location":"uri",
          "locationName":"ResourceType"
        },
        "ResourceId":{
          "shape":"TagResourceId",
          "location":"uri",
          "locationName":"ResourceId"
        }
      }
    },
    "ListTagsForResourceResponse":{
      "type":"structure",
      "required":["ResourceTagSet"],
      "members":{
        "ResourceTagSet":{"shape":"ResourceTagSet"}
      }
    },
    "ListTagsForResourcesRequest":{
      "type":"structure",
      "required":[
        "ResourceType",
        "ResourceIds"
      ],
      "members":{
        "ResourceType":{
          "shape":"TagResourceType",
          "location":"uri",
          "locationName":"ResourceType"
        },
        "ResourceIds":{"shape":"TagResourceIdList"}
      }
    },
    "ListTagsForResourcesResponse":{
      "type":"structure",
      "required":["ResourceTagSets"],
      "members":{
        "ResourceTagSets":{"shape":"ResourceTagSetList"}
      }
    },
    "NoSuchChange":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "error":{"httpStatusCode":404},
      "exception":true
    },
    "NoSuchDelegationSet":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "exception":true
    },
    "NoSuchGeoLocation":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "error":{"httpStatusCode":404},
      "exception":true
    },
    "NoSuchHealthCheck":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "error":{"httpStatusCode":404},
      "exception":true
    },
    "NoSuchHostedZone":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "error":{"httpStatusCode":404},
      "exception":true
    },
    "Nonce":{
      "type":"string",
      "min":1,
      "max":128
    },
    "PageMarker":{
      "type":"string",
      "max":64
    },
    "PageMaxItems":{"type":"string"},
    "PageTruncated":{"type":"boolean"},
    "Port":{
      "type":"integer",
      "min":1,
      "max":65535
    },
    "PriorRequestNotComplete":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "error":{"httpStatusCode":400},
      "exception":true
    },
    "PublicZoneVPCAssociation":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "error":{"httpStatusCode":400},
      "exception":true
    },
    "RData":{
      "type":"string",
      "max":4000
    },
    "RRType":{
      "type":"string",
      "enum":[
        "SOA",
        "A",
        "TXT",
        "NS",
        "CNAME",
        "MX",
        "PTR",
        "SRV",
        "SPF",
        "AAAA"
      ]
    },
    "RequestInterval":{
      "type":"integer",
      "min":10,
      "max":30
    },
    "ResourceDescription":{
      "type":"string",
      "max":256
    },
    "ResourceId":{
      "type":"string",
      "max":32
    },
    "ResourcePath":{
      "type":"string",
      "max":255
    },
    "ResourceRecord":{
      "type":"structure",
      "required":["Value"],
      "members":{
        "Value":{"shape":"RData"}
      }
    },
    "ResourceRecordSet":{
      "type":"structure",
      "required":[
        "Name",
        "Type"
      ],
      "members":{
        "Name":{"shape":"DNSName"},
        "Type":{"shape":"RRType"},
        "SetIdentifier":{"shape":"ResourceRecordSetIdentifier"},
        "Weight":{"shape":"ResourceRecordSetWeight"},
        "Region":{"shape":"ResourceRecordSetRegion"},
        "GeoLocation":{"shape":"GeoLocation"},
        "Failover":{"shape":"ResourceRecordSetFailover"},
        "TTL":{"shape":"TTL"},
        "ResourceRecords":{"shape":"ResourceRecords"},
        "AliasTarget":{"shape":"AliasTarget"},
        "HealthCheckId":{"shape":"HealthCheckId"}
      }
    },
    "ResourceRecordSetFailover":{
      "type":"string",
      "enum":[
        "PRIMARY",
        "SECONDARY"
      ]
    },
    "ResourceRecordSetIdentifier":{
      "type":"string",
      "min":1,
      "max":128
    },
    "ResourceRecordSetRegion":{
      "type":"string",
      "enum":[
        "us-east-1",
        "us-west-1",
        "us-west-2",
        "eu-west-1",
        "eu-central-1",
        "ap-southeast-1",
        "ap-southeast-2",
        "ap-northeast-1",
        "sa-east-1",
        "cn-north-1"
      ],
      "min":1,
      "max":64
    },
    "ResourceRecordSetWeight":{
      "type":"long",
      "min":0,
      "max":255
    },
    "ResourceRecordSets":{
      "type":"list",
      "member":{
        "shape":"ResourceRecordSet",
        "locationName":"ResourceRecordSet"
      }
    },
    "ResourceRecords":{
      "type":"list",
      "member":{
        "shape":"ResourceRecord",
        "locationName":"ResourceRecord"
      },
      "min":1
    },
    "ResourceTagSet":{
      "type":"structure",
      "members":{
        "ResourceType":{"shape":"TagResourceType"},
        "ResourceId":{"shape":"TagResourceId"},
        "Tags":{"shape":"TagList"}
      }
    },
    "ResourceTagSetList":{
      "type":"list",
      "member":{
        "shape":"ResourceTagSet",
        "locationName":"ResourceTagSet"
      }
    },
    "ResourceURI":{
      "type":"string",
      "max":1024
    },
    "SearchString":{
      "type":"string",
      "max":255
    },
    "Status":{"type":"string"},
    "StatusReport":{
      "type":"structure",
      "members":{
        "Status":{"shape":"Status"},
        "CheckedTime":{"shape":"TimeStamp"}
      }
    },
    "TTL":{
      "type":"long",
      "min":0,
      "max":2147483647
    },
    "Tag":{
      "type":"structure",
      "members":{
        "Key":{"shape":"TagKey"},
        "Value":{"shape":"TagValue"}
      }
    },
    "TagKey":{
      "type":"string",
      "max":128
    },
    "TagKeyList":{
      "type":"list",
      "member":{
        "shape":"TagKey",
        "locationName":"Key"
      },
      "min":1,
      "max":10
    },
    "TagList":{
      "type":"list",
      "member":{
        "shape":"Tag",
        "locationName":"Tag"
      },
      "min":1,
      "max":10
    },
    "TagResourceId":{
      "type":"string",
      "max":64
    },
    "TagResourceIdList":{
      "type":"list",
      "member":{
        "shape":"TagResourceId",
        "locationName":"ResourceId"
      },
      "min":1,
      "max":10
    },
    "TagResourceType":{
      "type":"string",
      "enum":[
        "healthcheck",
        "hostedzone"
      ]
    },
    "TagValue":{
      "type":"string",
      "max":256
    },
    "ThrottlingException":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "error":{"httpStatusCode":400},
      "exception":true
    },
    "TimeStamp":{"type":"timestamp"},
    "TooManyHealthChecks":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "exception":true
    },
    "TooManyHostedZones":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "error":{"httpStatusCode":400},
      "exception":true
    },
    "UpdateHealthCheckRequest":{
      "type":"structure",
      "required":["HealthCheckId"],
      "members":{
        "HealthCheckId":{
          "shape":"HealthCheckId",
          "location":"uri",
          "locationName":"HealthCheckId"
        },
        "HealthCheckVersion":{"shape":"HealthCheckVersion"},
        "IPAddress":{"shape":"IPAddress"},
        "Port":{"shape":"Port"},
        "ResourcePath":{"shape":"ResourcePath"},
        "FullyQualifiedDomainName":{"shape":"FullyQualifiedDomainName"},
        "SearchString":{"shape":"SearchString"},
        "FailureThreshold":{"shape":"FailureThreshold"}
      }
    },
    "UpdateHealthCheckResponse":{
      "type":"structure",
      "required":["HealthCheck"],
      "members":{
        "HealthCheck":{"shape":"HealthCheck"}
      }
    },
    "UpdateHostedZoneCommentRequest":{
      "type":"structure",
      "required":["Id"],
      "members":{
        "Id":{
          "shape":"ResourceId",
          "location":"uri",
          "locationName":"Id"
        },
        "Comment":{"shape":"ResourceDescription"}
      }
    },
    "UpdateHostedZoneCommentResponse":{
      "type":"structure",
      "required":["HostedZone"],
      "members":{
        "HostedZone":{"shape":"HostedZone"}
      }
    },
    "VPC":{
      "type":"structure",
      "members":{
        "VPCRegion":{"shape":"VPCRegion"},
        "VPCId":{"shape":"VPCId"}
      }
    },
    "VPCAssociationNotFound":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "error":{"httpStatusCode":404},
      "exception":true
    },
    "VPCId":{
      "type":"string",
      "max":1024
    },
    "VPCRegion":{
      "type":"string",
      "enum":[
        "us-east-1",
        "us-west-1",
        "us-west-2",
        "eu-west-1",
        "eu-central-1",
        "ap-southeast-1",
        "ap-southeast-2",
        "ap-northeast-1",
        "sa-east-1",
        "cn-north-1"
      ],
      "min":1,
      "max":64
    },
    "VPCs":{
      "type":"list",
      "member":{
        "shape":"VPC",
        "locationName":"VPC"
      },
      "min":1
    }
  }
}
,
"Route53Domains":
{
  "metadata":{
    "apiVersion":"2014-05-15",
    "endpointPrefix":"route53domains",
    "jsonVersion":"1.1",
    "serviceFullName":"Amazon Route 53 Domains",
    "signatureVersion":"v4",
    "targetPrefix":"Route53Domains_v20140515",
    "protocol":"json"
  },
  "operations":{
    "CheckDomainAvailability":{
      "name":"CheckDomainAvailability",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CheckDomainAvailabilityRequest"},
      "output":{"shape":"CheckDomainAvailabilityResponse"},
      "errors":[
        {
          "shape":"InvalidInput",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"UnsupportedTLD",
          "error":{"httpStatusCode":400},
          "exception":true
        }
      ]
    },
    "DisableDomainAutoRenew":{
      "name":"DisableDomainAutoRenew",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DisableDomainAutoRenewRequest"},
      "output":{"shape":"DisableDomainAutoRenewResponse"},
      "errors":[
        {
          "shape":"InvalidInput",
          "error":{"httpStatusCode":400},
          "exception":true
        }
      ]
    },
    "DisableDomainTransferLock":{
      "name":"DisableDomainTransferLock",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DisableDomainTransferLockRequest"},
      "output":{"shape":"DisableDomainTransferLockResponse"},
      "errors":[
        {
          "shape":"InvalidInput",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"DuplicateRequest",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"TLDRulesViolation",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"OperationLimitExceeded",
          "error":{"httpStatusCode":400},
          "exception":true
        }
      ]
    },
    "EnableDomainAutoRenew":{
      "name":"EnableDomainAutoRenew",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"EnableDomainAutoRenewRequest"},
      "output":{"shape":"EnableDomainAutoRenewResponse"},
      "errors":[
        {
          "shape":"InvalidInput",
          "error":{"httpStatusCode":400},
          "exception":true
        }
      ]
    },
    "EnableDomainTransferLock":{
      "name":"EnableDomainTransferLock",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"EnableDomainTransferLockRequest"},
      "output":{"shape":"EnableDomainTransferLockResponse"},
      "errors":[
        {
          "shape":"InvalidInput",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"DuplicateRequest",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"TLDRulesViolation",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"OperationLimitExceeded",
          "error":{"httpStatusCode":400},
          "exception":true
        }
      ]
    },
    "GetDomainDetail":{
      "name":"GetDomainDetail",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"GetDomainDetailRequest"},
      "output":{"shape":"GetDomainDetailResponse"},
      "errors":[
        {
          "shape":"InvalidInput",
          "error":{"httpStatusCode":400},
          "exception":true
        }
      ]
    },
    "GetOperationDetail":{
      "name":"GetOperationDetail",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"GetOperationDetailRequest"},
      "output":{"shape":"GetOperationDetailResponse"},
      "errors":[
        {
          "shape":"InvalidInput",
          "error":{"httpStatusCode":400},
          "exception":true
        }
      ]
    },
    "ListDomains":{
      "name":"ListDomains",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ListDomainsRequest"},
      "output":{"shape":"ListDomainsResponse"},
      "errors":[
        {
          "shape":"InvalidInput",
          "error":{"httpStatusCode":400},
          "exception":true
        }
      ]
    },
    "ListOperations":{
      "name":"ListOperations",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ListOperationsRequest"},
      "output":{"shape":"ListOperationsResponse"},
      "errors":[
        {
          "shape":"InvalidInput",
          "error":{"httpStatusCode":400},
          "exception":true
        }
      ]
    },
    "RegisterDomain":{
      "name":"RegisterDomain",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"RegisterDomainRequest"},
      "output":{"shape":"RegisterDomainResponse"},
      "errors":[
        {
          "shape":"InvalidInput",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"UnsupportedTLD",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"DuplicateRequest",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"TLDRulesViolation",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"DomainLimitExceeded",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"OperationLimitExceeded",
          "error":{"httpStatusCode":400},
          "exception":true
        }
      ]
    },
    "RetrieveDomainAuthCode":{
      "name":"RetrieveDomainAuthCode",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"RetrieveDomainAuthCodeRequest"},
      "output":{"shape":"RetrieveDomainAuthCodeResponse"},
      "errors":[
        {
          "shape":"InvalidInput",
          "error":{"httpStatusCode":400},
          "exception":true
        }
      ]
    },
    "TransferDomain":{
      "name":"TransferDomain",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"TransferDomainRequest"},
      "output":{"shape":"TransferDomainResponse"},
      "errors":[
        {
          "shape":"InvalidInput",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"UnsupportedTLD",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"DuplicateRequest",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"TLDRulesViolation",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"DomainLimitExceeded",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"OperationLimitExceeded",
          "error":{"httpStatusCode":400},
          "exception":true
        }
      ]
    },
    "UpdateDomainContact":{
      "name":"UpdateDomainContact",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"UpdateDomainContactRequest"},
      "output":{"shape":"UpdateDomainContactResponse"},
      "errors":[
        {
          "shape":"InvalidInput",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"DuplicateRequest",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"TLDRulesViolation",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"OperationLimitExceeded",
          "error":{"httpStatusCode":400},
          "exception":true
        }
      ]
    },
    "UpdateDomainContactPrivacy":{
      "name":"UpdateDomainContactPrivacy",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"UpdateDomainContactPrivacyRequest"},
      "output":{"shape":"UpdateDomainContactPrivacyResponse"},
      "errors":[
        {
          "shape":"InvalidInput",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"DuplicateRequest",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"TLDRulesViolation",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"OperationLimitExceeded",
          "error":{"httpStatusCode":400},
          "exception":true
        }
      ]
    },
    "UpdateDomainNameservers":{
      "name":"UpdateDomainNameservers",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"UpdateDomainNameserversRequest"},
      "output":{"shape":"UpdateDomainNameserversResponse"},
      "errors":[
        {
          "shape":"InvalidInput",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"DuplicateRequest",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"TLDRulesViolation",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"OperationLimitExceeded",
          "error":{"httpStatusCode":400},
          "exception":true
        }
      ]
    }
  },
  "shapes":{
    "AddressLine":{
      "type":"string",
      "max":255
    },
    "Boolean":{"type":"boolean"},
    "CheckDomainAvailabilityRequest":{
      "type":"structure",
      "required":["DomainName"],
      "members":{
        "DomainName":{"shape":"DomainName"},
        "IdnLangCode":{"shape":"LangCode"}
      }
    },
    "CheckDomainAvailabilityResponse":{
      "type":"structure",
      "required":["Availability"],
      "members":{
        "Availability":{"shape":"DomainAvailability"}
      }
    },
    "City":{
      "type":"string",
      "max":255
    },
    "ContactDetail":{
      "type":"structure",
      "members":{
        "FirstName":{"shape":"ContactName"},
        "LastName":{"shape":"ContactName"},
        "ContactType":{"shape":"ContactType"},
        "OrganizationName":{"shape":"ContactName"},
        "AddressLine1":{"shape":"AddressLine"},
        "AddressLine2":{"shape":"AddressLine"},
        "City":{"shape":"City"},
        "State":{"shape":"State"},
        "CountryCode":{"shape":"CountryCode"},
        "ZipCode":{"shape":"ZipCode"},
        "PhoneNumber":{"shape":"ContactNumber"},
        "Email":{"shape":"Email"},
        "Fax":{"shape":"ContactNumber"},
        "ExtraParams":{"shape":"ExtraParamList"}
      },
      "sensitive":true
    },
    "ContactName":{
      "type":"string",
      "max":255
    },
    "ContactNumber":{
      "type":"string",
      "max":30
    },
    "ContactType":{
      "type":"string",
      "enum":[
        "PERSON",
        "COMPANY",
        "ASSOCIATION",
        "PUBLIC_BODY",
        "RESELLER"
      ]
    },
    "CountryCode":{
      "type":"string",
      "enum":[
        "AD",
        "AE",
        "AF",
        "AG",
        "AI",
        "AL",
        "AM",
        "AN",
        "AO",
        "AQ",
        "AR",
        "AS",
        "AT",
        "AU",
        "AW",
        "AZ",
        "BA",
        "BB",
        "BD",
        "BE",
        "BF",
        "BG",
        "BH",
        "BI",
        "BJ",
        "BL",
        "BM",
        "BN",
        "BO",
        "BR",
        "BS",
        "BT",
        "BW",
        "BY",
        "BZ",
        "CA",
        "CC",
        "CD",
        "CF",
        "CG",
        "CH",
        "CI",
        "CK",
        "CL",
        "CM",
        "CN",
        "CO",
        "CR",
        "CU",
        "CV",
        "CX",
        "CY",
        "CZ",
        "DE",
        "DJ",
        "DK",
        "DM",
        "DO",
        "DZ",
        "EC",
        "EE",
        "EG",
        "ER",
        "ES",
        "ET",
        "FI",
        "FJ",
        "FK",
        "FM",
        "FO",
        "FR",
        "GA",
        "GB",
        "GD",
        "GE",
        "GH",
        "GI",
        "GL",
        "GM",
        "GN",
        "GQ",
        "GR",
        "GT",
        "GU",
        "GW",
        "GY",
        "HK",
        "HN",
        "HR",
        "HT",
        "HU",
        "ID",
        "IE",
        "IL",
        "IM",
        "IN",
        "IQ",
        "IR",
        "IS",
        "IT",
        "JM",
        "JO",
        "JP",
        "KE",
        "KG",
        "KH",
        "KI",
        "KM",
        "KN",
        "KP",
        "KR",
        "KW",
        "KY",
        "KZ",
        "LA",
        "LB",
        "LC",
        "LI",
        "LK",
        "LR",
        "LS",
        "LT",
        "LU",
        "LV",
        "LY",
        "MA",
        "MC",
        "MD",
        "ME",
        "MF",
        "MG",
        "MH",
        "MK",
        "ML",
        "MM",
        "MN",
        "MO",
        "MP",
        "MR",
        "MS",
        "MT",
        "MU",
        "MV",
        "MW",
        "MX",
        "MY",
        "MZ",
        "NA",
        "NC",
        "NE",
        "NG",
        "NI",
        "NL",
        "NO",
        "NP",
        "NR",
        "NU",
        "NZ",
        "OM",
        "PA",
        "PE",
        "PF",
        "PG",
        "PH",
        "PK",
        "PL",
        "PM",
        "PN",
        "PR",
        "PT",
        "PW",
        "PY",
        "QA",
        "RO",
        "RS",
        "RU",
        "RW",
        "SA",
        "SB",
        "SC",
        "SD",
        "SE",
        "SG",
        "SH",
        "SI",
        "SK",
        "SL",
        "SM",
        "SN",
        "SO",
        "SR",
        "ST",
        "SV",
        "SY",
        "SZ",
        "TC",
        "TD",
        "TG",
        "TH",
        "TJ",
        "TK",
        "TL",
        "TM",
        "TN",
        "TO",
        "TR",
        "TT",
        "TV",
        "TW",
        "TZ",
        "UA",
        "UG",
        "US",
        "UY",
        "UZ",
        "VA",
        "VC",
        "VE",
        "VG",
        "VI",
        "VN",
        "VU",
        "WF",
        "WS",
        "YE",
        "YT",
        "ZA",
        "ZM",
        "ZW"
      ]
    },
    "DNSSec":{"type":"string"},
    "DisableDomainAutoRenewRequest":{
      "type":"structure",
      "required":["DomainName"],
      "members":{
        "DomainName":{"shape":"DomainName"}
      }
    },
    "DisableDomainAutoRenewResponse":{
      "type":"structure",
      "members":{
      }
    },
    "DisableDomainTransferLockRequest":{
      "type":"structure",
      "required":["DomainName"],
      "members":{
        "DomainName":{"shape":"DomainName"}
      }
    },
    "DisableDomainTransferLockResponse":{
      "type":"structure",
      "required":["OperationId"],
      "members":{
        "OperationId":{"shape":"OperationId"}
      }
    },
    "DomainAuthCode":{
      "type":"string",
      "max":1024,
      "sensitive":true
    },
    "DomainAvailability":{
      "type":"string",
      "enum":[
        "AVAILABLE",
        "AVAILABLE_RESERVED",
        "AVAILABLE_PREORDER",
        "UNAVAILABLE",
        "UNAVAILABLE_PREMIUM",
        "UNAVAILABLE_RESTRICTED",
        "RESERVED"
      ]
    },
    "DomainLimitExceeded":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "error":{"httpStatusCode":400},
      "exception":true
    },
    "DomainName":{
      "type":"string",
      "max":255,
      "pattern":"[a-zA-Z0-9_\\-.]*"
    },
    "DomainStatus":{"type":"string"},
    "DomainStatusList":{
      "type":"list",
      "member":{"shape":"DomainStatus"}
    },
    "DomainSummary":{
      "type":"structure",
      "required":["DomainName"],
      "members":{
        "DomainName":{"shape":"DomainName"},
        "AutoRenew":{"shape":"Boolean"},
        "TransferLock":{"shape":"Boolean"},
        "Expiry":{"shape":"Timestamp"}
      }
    },
    "DomainSummaryList":{
      "type":"list",
      "member":{"shape":"DomainSummary"}
    },
    "DuplicateRequest":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "error":{"httpStatusCode":400},
      "exception":true
    },
    "DurationInYears":{
      "type":"integer",
      "min":1,
      "max":10
    },
    "Email":{
      "type":"string",
      "max":254
    },
    "EnableDomainAutoRenewRequest":{
      "type":"structure",
      "required":["DomainName"],
      "members":{
        "DomainName":{"shape":"DomainName"}
      }
    },
    "EnableDomainAutoRenewResponse":{
      "type":"structure",
      "members":{
      }
    },
    "EnableDomainTransferLockRequest":{
      "type":"structure",
      "required":["DomainName"],
      "members":{
        "DomainName":{"shape":"DomainName"}
      }
    },
    "EnableDomainTransferLockResponse":{
      "type":"structure",
      "required":["OperationId"],
      "members":{
        "OperationId":{"shape":"OperationId"}
      }
    },
    "ErrorMessage":{"type":"string"},
    "ExtraParam":{
      "type":"structure",
      "required":[
        "Name",
        "Value"
      ],
      "members":{
        "Name":{"shape":"ExtraParamName"},
        "Value":{"shape":"ExtraParamValue"}
      }
    },
    "ExtraParamList":{
      "type":"list",
      "member":{"shape":"ExtraParam"}
    },
    "ExtraParamName":{
      "type":"string",
      "enum":[
        "DUNS_NUMBER",
        "BRAND_NUMBER",
        "BIRTH_DEPARTMENT",
        "BIRTH_DATE_IN_YYYY_MM_DD",
        "BIRTH_COUNTRY",
        "BIRTH_CITY",
        "DOCUMENT_NUMBER",
        "AU_ID_NUMBER",
        "AU_ID_TYPE",
        "CA_LEGAL_TYPE",
        "FI_BUSINESS_NUMBER",
        "FI_ID_NUMBER",
        "IT_PIN",
        "RU_PASSPORT_DATA",
        "SE_ID_NUMBER",
        "SG_ID_NUMBER",
        "VAT_NUMBER"
      ]
    },
    "ExtraParamValue":{
      "type":"string",
      "max":2048
    },
    "GetDomainDetailRequest":{
      "type":"structure",
      "required":["DomainName"],
      "members":{
        "DomainName":{"shape":"DomainName"}
      }
    },
    "GetDomainDetailResponse":{
      "type":"structure",
      "required":[
        "DomainName",
        "Nameservers",
        "AdminContact",
        "RegistrantContact",
        "TechContact"
      ],
      "members":{
        "DomainName":{"shape":"DomainName"},
        "Nameservers":{"shape":"NameserverList"},
        "AutoRenew":{"shape":"Boolean"},
        "AdminContact":{"shape":"ContactDetail"},
        "RegistrantContact":{"shape":"ContactDetail"},
        "TechContact":{"shape":"ContactDetail"},
        "AdminPrivacy":{"shape":"Boolean"},
        "RegistrantPrivacy":{"shape":"Boolean"},
        "TechPrivacy":{"shape":"Boolean"},
        "RegistrarName":{"shape":"RegistrarName"},
        "WhoIsServer":{"shape":"RegistrarWhoIsServer"},
        "RegistrarUrl":{"shape":"RegistrarUrl"},
        "AbuseContactEmail":{"shape":"Email"},
        "AbuseContactPhone":{"shape":"ContactNumber"},
        "RegistryDomainId":{"shape":"RegistryDomainId"},
        "CreationDate":{"shape":"Timestamp"},
        "UpdatedDate":{"shape":"Timestamp"},
        "ExpirationDate":{"shape":"Timestamp"},
        "Reseller":{"shape":"Reseller"},
        "DnsSec":{"shape":"DNSSec"},
        "StatusList":{"shape":"DomainStatusList"}
      }
    },
    "GetOperationDetailRequest":{
      "type":"structure",
      "required":["OperationId"],
      "members":{
        "OperationId":{"shape":"OperationId"}
      }
    },
    "GetOperationDetailResponse":{
      "type":"structure",
      "members":{
        "OperationId":{"shape":"OperationId"},
        "Status":{"shape":"OperationStatus"},
        "Message":{"shape":"ErrorMessage"},
        "DomainName":{"shape":"DomainName"},
        "Type":{"shape":"OperationType"},
        "SubmittedDate":{"shape":"Timestamp"}
      }
    },
    "GlueIp":{
      "type":"string",
      "max":45
    },
    "GlueIpList":{
      "type":"list",
      "member":{"shape":"GlueIp"}
    },
    "HostName":{
      "type":"string",
      "max":255,
      "pattern":"[a-zA-Z0-9_\\-.]*"
    },
    "InvalidInput":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "error":{"httpStatusCode":400},
      "exception":true
    },
    "LangCode":{
      "type":"string",
      "max":3
    },
    "ListDomainsRequest":{
      "type":"structure",
      "members":{
        "Marker":{"shape":"PageMarker"},
        "MaxItems":{"shape":"PageMaxItems"}
      }
    },
    "ListDomainsResponse":{
      "type":"structure",
      "required":["Domains"],
      "members":{
        "Domains":{"shape":"DomainSummaryList"},
        "NextPageMarker":{"shape":"PageMarker"}
      }
    },
    "ListOperationsRequest":{
      "type":"structure",
      "members":{
        "Marker":{"shape":"PageMarker"},
        "MaxItems":{"shape":"PageMaxItems"}
      }
    },
    "ListOperationsResponse":{
      "type":"structure",
      "required":["Operations"],
      "members":{
        "Operations":{"shape":"OperationSummaryList"},
        "NextPageMarker":{"shape":"PageMarker"}
      }
    },
    "Nameserver":{
      "type":"structure",
      "required":["Name"],
      "members":{
        "Name":{"shape":"HostName"},
        "GlueIps":{"shape":"GlueIpList"}
      }
    },
    "NameserverList":{
      "type":"list",
      "member":{"shape":"Nameserver"}
    },
    "OperationId":{
      "type":"string",
      "max":255
    },
    "OperationLimitExceeded":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "error":{"httpStatusCode":400},
      "exception":true
    },
    "OperationStatus":{
      "type":"string",
      "enum":[
        "SUBMITTED",
        "IN_PROGRESS",
        "ERROR",
        "SUCCESSFUL",
        "FAILED"
      ]
    },
    "OperationSummary":{
      "type":"structure",
      "required":[
        "OperationId",
        "Status",
        "Type",
        "SubmittedDate"
      ],
      "members":{
        "OperationId":{"shape":"OperationId"},
        "Status":{"shape":"OperationStatus"},
        "Type":{"shape":"OperationType"},
        "SubmittedDate":{"shape":"Timestamp"}
      }
    },
    "OperationSummaryList":{
      "type":"list",
      "member":{"shape":"OperationSummary"}
    },
    "OperationType":{
      "type":"string",
      "enum":[
        "REGISTER_DOMAIN",
        "DELETE_DOMAIN",
        "TRANSFER_IN_DOMAIN",
        "UPDATE_DOMAIN_CONTACT",
        "UPDATE_NAMESERVER",
        "CHANGE_PRIVACY_PROTECTION",
        "DOMAIN_LOCK"
      ]
    },
    "PageMarker":{
      "type":"string",
      "max":4096
    },
    "PageMaxItems":{
      "type":"integer",
      "max":100
    },
    "RegisterDomainRequest":{
      "type":"structure",
      "required":[
        "DomainName",
        "DurationInYears",
        "AdminContact",
        "RegistrantContact",
        "TechContact"
      ],
      "members":{
        "DomainName":{"shape":"DomainName"},
        "IdnLangCode":{"shape":"LangCode"},
        "DurationInYears":{"shape":"DurationInYears"},
        "AutoRenew":{"shape":"Boolean"},
        "AdminContact":{"shape":"ContactDetail"},
        "RegistrantContact":{"shape":"ContactDetail"},
        "TechContact":{"shape":"ContactDetail"},
        "PrivacyProtectAdminContact":{"shape":"Boolean"},
        "PrivacyProtectRegistrantContact":{"shape":"Boolean"},
        "PrivacyProtectTechContact":{"shape":"Boolean"}
      }
    },
    "RegisterDomainResponse":{
      "type":"structure",
      "required":["OperationId"],
      "members":{
        "OperationId":{"shape":"OperationId"}
      }
    },
    "RegistrarName":{"type":"string"},
    "RegistrarUrl":{"type":"string"},
    "RegistrarWhoIsServer":{"type":"string"},
    "RegistryDomainId":{"type":"string"},
    "Reseller":{"type":"string"},
    "RetrieveDomainAuthCodeRequest":{
      "type":"structure",
      "required":["DomainName"],
      "members":{
        "DomainName":{"shape":"DomainName"}
      }
    },
    "RetrieveDomainAuthCodeResponse":{
      "type":"structure",
      "required":["AuthCode"],
      "members":{
        "AuthCode":{"shape":"DomainAuthCode"}
      }
    },
    "State":{
      "type":"string",
      "max":255
    },
    "TLDRulesViolation":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "error":{"httpStatusCode":400},
      "exception":true
    },
    "Timestamp":{"type":"timestamp"},
    "TransferDomainRequest":{
      "type":"structure",
      "required":[
        "DomainName",
        "DurationInYears",
        "Nameservers",
        "AdminContact",
        "RegistrantContact",
        "TechContact"
      ],
      "members":{
        "DomainName":{"shape":"DomainName"},
        "IdnLangCode":{"shape":"LangCode"},
        "DurationInYears":{"shape":"DurationInYears"},
        "Nameservers":{"shape":"NameserverList"},
        "AuthCode":{"shape":"DomainAuthCode"},
        "AutoRenew":{"shape":"Boolean"},
        "AdminContact":{"shape":"ContactDetail"},
        "RegistrantContact":{"shape":"ContactDetail"},
        "TechContact":{"shape":"ContactDetail"},
        "PrivacyProtectAdminContact":{"shape":"Boolean"},
        "PrivacyProtectRegistrantContact":{"shape":"Boolean"},
        "PrivacyProtectTechContact":{"shape":"Boolean"}
      }
    },
    "TransferDomainResponse":{
      "type":"structure",
      "required":["OperationId"],
      "members":{
        "OperationId":{"shape":"OperationId"}
      }
    },
    "UnsupportedTLD":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "error":{"httpStatusCode":400},
      "exception":true
    },
    "UpdateDomainContactPrivacyRequest":{
      "type":"structure",
      "required":["DomainName"],
      "members":{
        "DomainName":{"shape":"DomainName"},
        "AdminPrivacy":{"shape":"Boolean"},
        "RegistrantPrivacy":{"shape":"Boolean"},
        "TechPrivacy":{"shape":"Boolean"}
      }
    },
    "UpdateDomainContactPrivacyResponse":{
      "type":"structure",
      "required":["OperationId"],
      "members":{
        "OperationId":{"shape":"OperationId"}
      }
    },
    "UpdateDomainContactRequest":{
      "type":"structure",
      "required":["DomainName"],
      "members":{
        "DomainName":{"shape":"DomainName"},
        "AdminContact":{"shape":"ContactDetail"},
        "RegistrantContact":{"shape":"ContactDetail"},
        "TechContact":{"shape":"ContactDetail"}
      }
    },
    "UpdateDomainContactResponse":{
      "type":"structure",
      "required":["OperationId"],
      "members":{
        "OperationId":{"shape":"OperationId"}
      }
    },
    "UpdateDomainNameserversRequest":{
      "type":"structure",
      "required":[
        "DomainName",
        "Nameservers"
      ],
      "members":{
        "DomainName":{"shape":"DomainName"},
        "Nameservers":{"shape":"NameserverList"}
      }
    },
    "UpdateDomainNameserversResponse":{
      "type":"structure",
      "required":["OperationId"],
      "members":{
        "OperationId":{"shape":"OperationId"}
      }
    },
    "ZipCode":{
      "type":"string",
      "max":255
    }
  }
}
,
"S3":
{
  "metadata":{
    "apiVersion":"2006-03-01",
    "checksumFormat":"md5",
    "endpointPrefix":"s3",
    "globalEndpoint":"s3.amazonaws.com",
    "serviceAbbreviation":"Amazon S3",
    "serviceFullName":"Amazon Simple Storage Service",
    "timestampFormat":"rfc822",
    "protocol":"rest-xml"
  },
  "operations":{
    "AbortMultipartUpload":{
      "name":"AbortMultipartUpload",
      "http":{
        "method":"DELETE",
        "requestUri":"/{Bucket}/{Key+}"
      },
      "input":{"shape":"AbortMultipartUploadRequest"},
      "errors":[
        {
          "shape":"NoSuchUpload",
          "exception":true
        }
      ],
      "documentationUrl":"http://docs.amazonwebservices.com/AmazonS3/latest/API/mpUploadAbort.html"
    },
    "CompleteMultipartUpload":{
      "name":"CompleteMultipartUpload",
      "http":{
        "method":"POST",
        "requestUri":"/{Bucket}/{Key+}"
      },
      "input":{"shape":"CompleteMultipartUploadRequest"},
      "output":{"shape":"CompleteMultipartUploadOutput"},
      "documentationUrl":"http://docs.amazonwebservices.com/AmazonS3/latest/API/mpUploadComplete.html"
    },
    "CopyObject":{
      "name":"CopyObject",
      "http":{
        "method":"PUT",
        "requestUri":"/{Bucket}/{Key+}"
      },
      "input":{"shape":"CopyObjectRequest"},
      "output":{"shape":"CopyObjectOutput"},
      "errors":[
        {
          "shape":"ObjectNotInActiveTierError",
          "exception":true
        }
      ],
      "documentationUrl":"http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTObjectCOPY.html",
      "alias":"PutObjectCopy"
    },
    "CreateBucket":{
      "name":"CreateBucket",
      "http":{
        "method":"PUT",
        "requestUri":"/{Bucket}"
      },
      "input":{"shape":"CreateBucketRequest"},
      "output":{"shape":"CreateBucketOutput"},
      "errors":[
        {
          "shape":"BucketAlreadyExists",
          "exception":true
        }
      ],
      "documentationUrl":"http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTBucketPUT.html",
      "alias":"PutBucket"
    },
    "CreateMultipartUpload":{
      "name":"CreateMultipartUpload",
      "http":{
        "method":"POST",
        "requestUri":"/{Bucket}/{Key+}?uploads"
      },
      "input":{"shape":"CreateMultipartUploadRequest"},
      "output":{"shape":"CreateMultipartUploadOutput"},
      "documentationUrl":"http://docs.amazonwebservices.com/AmazonS3/latest/API/mpUploadInitiate.html",
      "alias":"InitiateMultipartUpload"
    },
    "DeleteBucket":{
      "name":"DeleteBucket",
      "http":{
        "method":"DELETE",
        "requestUri":"/{Bucket}"
      },
      "input":{"shape":"DeleteBucketRequest"},
      "documentationUrl":"http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTBucketDELETE.html"
    },
    "DeleteBucketCors":{
      "name":"DeleteBucketCors",
      "http":{
        "method":"DELETE",
        "requestUri":"/{Bucket}?cors"
      },
      "input":{"shape":"DeleteBucketCorsRequest"},
      "documentationUrl":"http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTBucketDELETEcors.html"
    },
    "DeleteBucketLifecycle":{
      "name":"DeleteBucketLifecycle",
      "http":{
        "method":"DELETE",
        "requestUri":"/{Bucket}?lifecycle"
      },
      "input":{"shape":"DeleteBucketLifecycleRequest"},
      "documentationUrl":"http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTBucketDELETElifecycle.html"
    },
    "DeleteBucketPolicy":{
      "name":"DeleteBucketPolicy",
      "http":{
        "method":"DELETE",
        "requestUri":"/{Bucket}?policy"
      },
      "input":{"shape":"DeleteBucketPolicyRequest"},
      "documentationUrl":"http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTBucketDELETEpolicy.html"
    },
    "DeleteBucketTagging":{
      "name":"DeleteBucketTagging",
      "http":{
        "method":"DELETE",
        "requestUri":"/{Bucket}?tagging"
      },
      "input":{"shape":"DeleteBucketTaggingRequest"},
      "documentationUrl":"http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTBucketDELETEtagging.html"
    },
    "DeleteBucketWebsite":{
      "name":"DeleteBucketWebsite",
      "http":{
        "method":"DELETE",
        "requestUri":"/{Bucket}?website"
      },
      "input":{"shape":"DeleteBucketWebsiteRequest"},
      "documentationUrl":"http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTBucketDELETEwebsite.html"
    },
    "DeleteObject":{
      "name":"DeleteObject",
      "http":{
        "method":"DELETE",
        "requestUri":"/{Bucket}/{Key+}"
      },
      "input":{"shape":"DeleteObjectRequest"},
      "output":{"shape":"DeleteObjectOutput"},
      "documentationUrl":"http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTObjectDELETE.html"
    },
    "DeleteObjects":{
      "name":"DeleteObjects",
      "http":{
        "method":"POST",
        "requestUri":"/{Bucket}?delete"
      },
      "input":{"shape":"DeleteObjectsRequest"},
      "output":{"shape":"DeleteObjectsOutput"},
      "documentationUrl":"http://docs.amazonwebservices.com/AmazonS3/latest/API/multiobjectdeleteapi.html",
      "alias":"DeleteMultipleObjects"
    },
    "GetBucketAcl":{
      "name":"GetBucketAcl",
      "http":{
        "method":"GET",
        "requestUri":"/{Bucket}?acl"
      },
      "input":{"shape":"GetBucketAclRequest"},
      "output":{"shape":"GetBucketAclOutput"},
      "documentationUrl":"http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTBucketGETacl.html"
    },
    "GetBucketCors":{
      "name":"GetBucketCors",
      "http":{
        "method":"GET",
        "requestUri":"/{Bucket}?cors"
      },
      "input":{"shape":"GetBucketCorsRequest"},
      "output":{"shape":"GetBucketCorsOutput"},
      "documentationUrl":"http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTBucketGETcors.html"
    },
    "GetBucketLifecycle":{
      "name":"GetBucketLifecycle",
      "http":{
        "method":"GET",
        "requestUri":"/{Bucket}?lifecycle"
      },
      "input":{"shape":"GetBucketLifecycleRequest"},
      "output":{"shape":"GetBucketLifecycleOutput"},
      "documentationUrl":"http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTBucketGETlifecycle.html"
    },
    "GetBucketLocation":{
      "name":"GetBucketLocation",
      "http":{
        "method":"GET",
        "requestUri":"/{Bucket}?location"
      },
      "input":{"shape":"GetBucketLocationRequest"},
      "output":{"shape":"GetBucketLocationOutput"},
      "documentationUrl":"http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTBucketGETlocation.html"
    },
    "GetBucketLogging":{
      "name":"GetBucketLogging",
      "http":{
        "method":"GET",
        "requestUri":"/{Bucket}?logging"
      },
      "input":{"shape":"GetBucketLoggingRequest"},
      "output":{"shape":"GetBucketLoggingOutput"},
      "documentationUrl":"http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTBucketGETlogging.html"
    },
    "GetBucketNotification":{
      "name":"GetBucketNotification",
      "http":{
        "method":"GET",
        "requestUri":"/{Bucket}?notification"
      },
      "input":{"shape":"GetBucketNotificationRequest"},
      "output":{"shape":"GetBucketNotificationOutput"},
      "documentationUrl":"http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTBucketGETnotification.html"
    },
    "GetBucketPolicy":{
      "name":"GetBucketPolicy",
      "http":{
        "method":"GET",
        "requestUri":"/{Bucket}?policy"
      },
      "input":{"shape":"GetBucketPolicyRequest"},
      "output":{"shape":"GetBucketPolicyOutput"},
      "documentationUrl":"http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTBucketGETpolicy.html"
    },
    "GetBucketRequestPayment":{
      "name":"GetBucketRequestPayment",
      "http":{
        "method":"GET",
        "requestUri":"/{Bucket}?requestPayment"
      },
      "input":{"shape":"GetBucketRequestPaymentRequest"},
      "output":{"shape":"GetBucketRequestPaymentOutput"},
      "documentationUrl":"http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTrequestPaymentGET.html"
    },
    "GetBucketTagging":{
      "name":"GetBucketTagging",
      "http":{
        "method":"GET",
        "requestUri":"/{Bucket}?tagging"
      },
      "input":{"shape":"GetBucketTaggingRequest"},
      "output":{"shape":"GetBucketTaggingOutput"},
      "documentationUrl":"http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTBucketGETtagging.html"
    },
    "GetBucketVersioning":{
      "name":"GetBucketVersioning",
      "http":{
        "method":"GET",
        "requestUri":"/{Bucket}?versioning"
      },
      "input":{"shape":"GetBucketVersioningRequest"},
      "output":{"shape":"GetBucketVersioningOutput"},
      "documentationUrl":"http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTBucketGETversioningStatus.html"
    },
    "GetBucketWebsite":{
      "name":"GetBucketWebsite",
      "http":{
        "method":"GET",
        "requestUri":"/{Bucket}?website"
      },
      "input":{"shape":"GetBucketWebsiteRequest"},
      "output":{"shape":"GetBucketWebsiteOutput"},
      "documentationUrl":"http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTBucketGETwebsite.html"
    },
    "GetObject":{
      "name":"GetObject",
      "http":{
        "method":"GET",
        "requestUri":"/{Bucket}/{Key+}"
      },
      "input":{"shape":"GetObjectRequest"},
      "output":{"shape":"GetObjectOutput"},
      "errors":[
        {
          "shape":"NoSuchKey",
          "exception":true
        }
      ],
      "documentationUrl":"http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTObjectGET.html"
    },
    "GetObjectAcl":{
      "name":"GetObjectAcl",
      "http":{
        "method":"GET",
        "requestUri":"/{Bucket}/{Key+}?acl"
      },
      "input":{"shape":"GetObjectAclRequest"},
      "output":{"shape":"GetObjectAclOutput"},
      "errors":[
        {
          "shape":"NoSuchKey",
          "exception":true
        }
      ],
      "documentationUrl":"http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTObjectGETacl.html"
    },
    "GetObjectTorrent":{
      "name":"GetObjectTorrent",
      "http":{
        "method":"GET",
        "requestUri":"/{Bucket}/{Key+}?torrent"
      },
      "input":{"shape":"GetObjectTorrentRequest"},
      "output":{"shape":"GetObjectTorrentOutput"},
      "documentationUrl":"http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTObjectGETtorrent.html"
    },
    "HeadBucket":{
      "name":"HeadBucket",
      "http":{
        "method":"HEAD",
        "requestUri":"/{Bucket}"
      },
      "input":{"shape":"HeadBucketRequest"},
      "errors":[
        {
          "shape":"NoSuchBucket",
          "exception":true
        }
      ],
      "documentationUrl":"http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTBucketHEAD.html"
    },
    "HeadObject":{
      "name":"HeadObject",
      "http":{
        "method":"HEAD",
        "requestUri":"/{Bucket}/{Key+}"
      },
      "input":{"shape":"HeadObjectRequest"},
      "output":{"shape":"HeadObjectOutput"},
      "errors":[
        {
          "shape":"NoSuchKey",
          "exception":true
        }
      ],
      "documentationUrl":"http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTObjectHEAD.html"
    },
    "ListBuckets":{
      "name":"ListBuckets",
      "http":{
        "method":"GET",
        "requestUri":"/"
      },
      "output":{"shape":"ListBucketsOutput"},
      "documentationUrl":"http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTServiceGET.html",
      "alias":"GetService"
    },
    "ListMultipartUploads":{
      "name":"ListMultipartUploads",
      "http":{
        "method":"GET",
        "requestUri":"/{Bucket}?uploads"
      },
      "input":{"shape":"ListMultipartUploadsRequest"},
      "output":{"shape":"ListMultipartUploadsOutput"},
      "documentationUrl":"http://docs.amazonwebservices.com/AmazonS3/latest/API/mpUploadListMPUpload.html"
    },
    "ListObjectVersions":{
      "name":"ListObjectVersions",
      "http":{
        "method":"GET",
        "requestUri":"/{Bucket}?versions"
      },
      "input":{"shape":"ListObjectVersionsRequest"},
      "output":{"shape":"ListObjectVersionsOutput"},
      "documentationUrl":"http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTBucketGETVersion.html",
      "alias":"GetBucketObjectVersions"
    },
    "ListObjects":{
      "name":"ListObjects",
      "http":{
        "method":"GET",
        "requestUri":"/{Bucket}"
      },
      "input":{"shape":"ListObjectsRequest"},
      "output":{"shape":"ListObjectsOutput"},
      "errors":[
        {
          "shape":"NoSuchBucket",
          "exception":true
        }
      ],
      "documentationUrl":"http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTBucketGET.html",
      "alias":"GetBucket"
    },
    "ListParts":{
      "name":"ListParts",
      "http":{
        "method":"GET",
        "requestUri":"/{Bucket}/{Key+}"
      },
      "input":{"shape":"ListPartsRequest"},
      "output":{"shape":"ListPartsOutput"},
      "documentationUrl":"http://docs.amazonwebservices.com/AmazonS3/latest/API/mpUploadListParts.html"
    },
    "PutBucketAcl":{
      "name":"PutBucketAcl",
      "http":{
        "method":"PUT",
        "requestUri":"/{Bucket}?acl"
      },
      "input":{"shape":"PutBucketAclRequest"},
      "documentationUrl":"http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTBucketPUTacl.html"
    },
    "PutBucketCors":{
      "name":"PutBucketCors",
      "http":{
        "method":"PUT",
        "requestUri":"/{Bucket}?cors"
      },
      "input":{"shape":"PutBucketCorsRequest"},
      "documentationUrl":"http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTBucketPUTcors.html"
    },
    "PutBucketLifecycle":{
      "name":"PutBucketLifecycle",
      "http":{
        "method":"PUT",
        "requestUri":"/{Bucket}?lifecycle"
      },
      "input":{"shape":"PutBucketLifecycleRequest"},
      "documentationUrl":"http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTBucketPUTlifecycle.html"
    },
    "PutBucketLogging":{
      "name":"PutBucketLogging",
      "http":{
        "method":"PUT",
        "requestUri":"/{Bucket}?logging"
      },
      "input":{"shape":"PutBucketLoggingRequest"},
      "documentationUrl":"http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTBucketPUTlogging.html"
    },
    "PutBucketNotification":{
      "name":"PutBucketNotification",
      "http":{
        "method":"PUT",
        "requestUri":"/{Bucket}?notification"
      },
      "input":{"shape":"PutBucketNotificationRequest"},
      "documentationUrl":"http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTBucketPUTnotification.html"
    },
    "PutBucketPolicy":{
      "name":"PutBucketPolicy",
      "http":{
        "method":"PUT",
        "requestUri":"/{Bucket}?policy"
      },
      "input":{"shape":"PutBucketPolicyRequest"},
      "documentationUrl":"http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTBucketPUTpolicy.html"
    },
    "PutBucketRequestPayment":{
      "name":"PutBucketRequestPayment",
      "http":{
        "method":"PUT",
        "requestUri":"/{Bucket}?requestPayment"
      },
      "input":{"shape":"PutBucketRequestPaymentRequest"},
      "documentationUrl":"http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTrequestPaymentPUT.html"
    },
    "PutBucketTagging":{
      "name":"PutBucketTagging",
      "http":{
        "method":"PUT",
        "requestUri":"/{Bucket}?tagging"
      },
      "input":{"shape":"PutBucketTaggingRequest"},
      "documentationUrl":"http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTBucketPUTtagging.html"
    },
    "PutBucketVersioning":{
      "name":"PutBucketVersioning",
      "http":{
        "method":"PUT",
        "requestUri":"/{Bucket}?versioning"
      },
      "input":{"shape":"PutBucketVersioningRequest"},
      "documentationUrl":"http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTBucketPUTVersioningStatus.html"
    },
    "PutBucketWebsite":{
      "name":"PutBucketWebsite",
      "http":{
        "method":"PUT",
        "requestUri":"/{Bucket}?website"
      },
      "input":{"shape":"PutBucketWebsiteRequest"},
      "documentationUrl":"http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTBucketPUTwebsite.html"
    },
    "PutObject":{
      "name":"PutObject",
      "http":{
        "method":"PUT",
        "requestUri":"/{Bucket}/{Key+}"
      },
      "input":{"shape":"PutObjectRequest"},
      "output":{"shape":"PutObjectOutput"},
      "documentationUrl":"http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTObjectPUT.html"
    },
    "PutObjectAcl":{
      "name":"PutObjectAcl",
      "http":{
        "method":"PUT",
        "requestUri":"/{Bucket}/{Key+}?acl"
      },
      "input":{"shape":"PutObjectAclRequest"},
      "errors":[
        {
          "shape":"NoSuchKey",
          "exception":true
        }
      ],
      "documentationUrl":"http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTObjectPUTacl.html"
    },
    "RestoreObject":{
      "name":"RestoreObject",
      "http":{
        "method":"POST",
        "requestUri":"/{Bucket}/{Key+}?restore"
      },
      "input":{"shape":"RestoreObjectRequest"},
      "errors":[
        {
          "shape":"ObjectAlreadyInActiveTierError",
          "exception":true
        }
      ],
      "documentationUrl":"http://docs.amazonwebservices.com/AmazonS3/latest/API/RESTObjectRestore.html",
      "alias":"PostObjectRestore"
    },
    "UploadPart":{
      "name":"UploadPart",
      "http":{
        "method":"PUT",
        "requestUri":"/{Bucket}/{Key+}"
      },
      "input":{"shape":"UploadPartRequest"},
      "output":{"shape":"UploadPartOutput"},
      "documentationUrl":"http://docs.amazonwebservices.com/AmazonS3/latest/API/mpUploadUploadPart.html"
    },
    "UploadPartCopy":{
      "name":"UploadPartCopy",
      "http":{
        "method":"PUT",
        "requestUri":"/{Bucket}/{Key+}"
      },
      "input":{"shape":"UploadPartCopyRequest"},
      "output":{"shape":"UploadPartCopyOutput"},
      "documentationUrl":"http://docs.amazonwebservices.com/AmazonS3/latest/API/mpUploadUploadPartCopy.html"
    }
  },
  "shapes":{
    "AbortMultipartUploadRequest":{
      "type":"structure",
      "required":[
        "Bucket",
        "Key",
        "UploadId"
      ],
      "members":{
        "Bucket":{
          "shape":"BucketName",
          "location":"uri",
          "locationName":"Bucket"
        },
        "Key":{
          "shape":"ObjectKey",
          "location":"uri",
          "locationName":"Key"
        },
        "UploadId":{
          "shape":"MultipartUploadId",
          "location":"querystring",
          "locationName":"uploadId"
        }
      }
    },
    "AcceptRanges":{"type":"string"},
    "AccessControlPolicy":{
      "type":"structure",
      "members":{
        "Grants":{
          "shape":"Grants",
          "locationName":"AccessControlList"
        },
        "Owner":{"shape":"Owner"}
      }
    },
    "AllowedHeader":{"type":"string"},
    "AllowedHeaders":{
      "type":"list",
      "member":{"shape":"AllowedHeader"},
      "flattened":true
    },
    "AllowedMethod":{"type":"string"},
    "AllowedMethods":{
      "type":"list",
      "member":{"shape":"AllowedMethod"},
      "flattened":true
    },
    "AllowedOrigin":{"type":"string"},
    "AllowedOrigins":{
      "type":"list",
      "member":{"shape":"AllowedOrigin"},
      "flattened":true
    },
    "Body":{"type":"blob"},
    "Bucket":{
      "type":"structure",
      "members":{
        "Name":{"shape":"BucketName"},
        "CreationDate":{"shape":"CreationDate"}
      }
    },
    "BucketAlreadyExists":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "BucketCannedACL":{
      "type":"string",
      "enum":[
        "private",
        "public-read",
        "public-read-write",
        "authenticated-read"
      ]
    },
    "BucketLocationConstraint":{
      "type":"string",
      "enum":[
        "EU",
        "eu-west-1",
        "us-west-1",
        "us-west-2",
        "ap-southeast-1",
        "ap-southeast-2",
        "ap-northeast-1",
        "sa-east-1",
        "",
        "cn-north-1",
        "eu-central-1"
      ]
    },
    "BucketLoggingStatus":{
      "type":"structure",
      "members":{
        "LoggingEnabled":{"shape":"LoggingEnabled"}
      }
    },
    "BucketLogsPermission":{
      "type":"string",
      "enum":[
        "FULL_CONTROL",
        "READ",
        "WRITE"
      ]
    },
    "BucketName":{"type":"string"},
    "BucketVersioningStatus":{
      "type":"string",
      "enum":[
        "Enabled",
        "Suspended"
      ]
    },
    "Buckets":{
      "type":"list",
      "member":{
        "shape":"Bucket",
        "locationName":"Bucket"
      }
    },
    "CORSConfiguration":{
      "type":"structure",
      "members":{
        "CORSRules":{
          "shape":"CORSRules",
          "locationName":"CORSRule"
        }
      }
    },
    "CORSRule":{
      "type":"structure",
      "members":{
        "AllowedHeaders":{
          "shape":"AllowedHeaders",
          "locationName":"AllowedHeader"
        },
        "AllowedMethods":{
          "shape":"AllowedMethods",
          "locationName":"AllowedMethod"
        },
        "AllowedOrigins":{
          "shape":"AllowedOrigins",
          "locationName":"AllowedOrigin"
        },
        "ExposeHeaders":{
          "shape":"ExposeHeaders",
          "locationName":"ExposeHeader"
        },
        "MaxAgeSeconds":{"shape":"MaxAgeSeconds"}
      }
    },
    "CORSRules":{
      "type":"list",
      "member":{"shape":"CORSRule"},
      "flattened":true
    },
    "CacheControl":{"type":"string"},
    "CloudFunction":{"type":"string"},
    "CloudFunctionConfiguration":{
      "type":"structure",
      "members":{
        "Id":{"shape":"NotificationId"},
        "Event":{
          "shape":"Event",
          "deprecated":true
        },
        "Events":{
          "shape":"Events",
          "locationName":"Event"
        },
        "CloudFunction":{"shape":"CloudFunction"},
        "InvocationRole":{"shape":"CloudFunctionInvocationRole"}
      }
    },
    "CloudFunctionInvocationRole":{"type":"string"},
    "Code":{"type":"string"},
    "CommonPrefix":{
      "type":"structure",
      "members":{
        "Prefix":{"shape":"Prefix"}
      }
    },
    "CommonPrefixList":{
      "type":"list",
      "member":{"shape":"CommonPrefix"},
      "flattened":true
    },
    "CompleteMultipartUploadOutput":{
      "type":"structure",
      "members":{
        "Location":{"shape":"Location"},
        "Bucket":{"shape":"BucketName"},
        "Key":{"shape":"ObjectKey"},
        "Expiration":{
          "shape":"Expiration",
          "location":"header",
          "locationName":"x-amz-expiration"
        },
        "ETag":{"shape":"ETag"},
        "ServerSideEncryption":{
          "shape":"ServerSideEncryption",
          "location":"header",
          "locationName":"x-amz-server-side-encryption"
        },
        "VersionId":{
          "shape":"ObjectVersionId",
          "location":"header",
          "locationName":"x-amz-version-id"
        },
        "SSEKMSKeyId":{
          "shape":"SSEKMSKeyId",
          "location":"header",
          "locationName":"x-amz-server-side-encryption-aws-kms-key-id"
        }
      }
    },
    "CompleteMultipartUploadRequest":{
      "type":"structure",
      "required":[
        "Bucket",
        "Key",
        "UploadId"
      ],
      "members":{
        "Bucket":{
          "shape":"BucketName",
          "location":"uri",
          "locationName":"Bucket"
        },
        "Key":{
          "shape":"ObjectKey",
          "location":"uri",
          "locationName":"Key"
        },
        "MultipartUpload":{
          "shape":"CompletedMultipartUpload",
          "locationName":"CompleteMultipartUpload",
          "xmlNamespace":{"uri":"http://s3.amazonaws.com/doc/2006-03-01/"}
        },
        "UploadId":{
          "shape":"MultipartUploadId",
          "location":"querystring",
          "locationName":"uploadId"
        }
      },
      "payload":"MultipartUpload"
    },
    "CompletedMultipartUpload":{
      "type":"structure",
      "members":{
        "Parts":{
          "shape":"CompletedPartList",
          "locationName":"Part"
        }
      }
    },
    "CompletedPart":{
      "type":"structure",
      "members":{
        "ETag":{"shape":"ETag"},
        "PartNumber":{"shape":"PartNumber"}
      }
    },
    "CompletedPartList":{
      "type":"list",
      "member":{"shape":"CompletedPart"},
      "flattened":true
    },
    "Condition":{
      "type":"structure",
      "members":{
        "HttpErrorCodeReturnedEquals":{"shape":"HttpErrorCodeReturnedEquals"},
        "KeyPrefixEquals":{"shape":"KeyPrefixEquals"}
      }
    },
    "ContentDisposition":{"type":"string"},
    "ContentEncoding":{"type":"string"},
    "ContentLanguage":{"type":"string"},
    "ContentLength":{"type":"integer"},
    "ContentMD5":{"type":"string"},
    "ContentType":{"type":"string"},
    "CopyObjectOutput":{
      "type":"structure",
      "members":{
        "CopyObjectResult":{"shape":"CopyObjectResult"},
        "Expiration":{
          "shape":"Expiration",
          "location":"header",
          "locationName":"x-amz-expiration"
        },
        "CopySourceVersionId":{
          "shape":"CopySourceVersionId",
          "location":"header",
          "locationName":"x-amz-copy-source-version-id"
        },
        "ServerSideEncryption":{
          "shape":"ServerSideEncryption",
          "location":"header",
          "locationName":"x-amz-server-side-encryption"
        },
        "SSECustomerAlgorithm":{
          "shape":"SSECustomerAlgorithm",
          "location":"header",
          "locationName":"x-amz-server-side-encryption-customer-algorithm"
        },
        "SSECustomerKeyMD5":{
          "shape":"SSECustomerKeyMD5",
          "location":"header",
          "locationName":"x-amz-server-side-encryption-customer-key-MD5"
        },
        "SSEKMSKeyId":{
          "shape":"SSEKMSKeyId",
          "location":"header",
          "locationName":"x-amz-server-side-encryption-aws-kms-key-id"
        }
      },
      "payload":"CopyObjectResult"
    },
    "CopyObjectRequest":{
      "type":"structure",
      "required":[
        "Bucket",
        "CopySource",
        "Key"
      ],
      "members":{
        "ACL":{
          "shape":"ObjectCannedACL",
          "location":"header",
          "locationName":"x-amz-acl"
        },
        "Bucket":{
          "shape":"BucketName",
          "location":"uri",
          "locationName":"Bucket"
        },
        "CacheControl":{
          "shape":"CacheControl",
          "location":"header",
          "locationName":"Cache-Control"
        },
        "ContentDisposition":{
          "shape":"ContentDisposition",
          "location":"header",
          "locationName":"Content-Disposition"
        },
        "ContentEncoding":{
          "shape":"ContentEncoding",
          "location":"header",
          "locationName":"Content-Encoding"
        },
        "ContentLanguage":{
          "shape":"ContentLanguage",
          "location":"header",
          "locationName":"Content-Language"
        },
        "ContentType":{
          "shape":"ContentType",
          "location":"header",
          "locationName":"Content-Type"
        },
        "CopySource":{
          "shape":"CopySource",
          "location":"header",
          "locationName":"x-amz-copy-source"
        },
        "CopySourceIfMatch":{
          "shape":"CopySourceIfMatch",
          "location":"header",
          "locationName":"x-amz-copy-source-if-match"
        },
        "CopySourceIfModifiedSince":{
          "shape":"CopySourceIfModifiedSince",
          "location":"header",
          "locationName":"x-amz-copy-source-if-modified-since"
        },
        "CopySourceIfNoneMatch":{
          "shape":"CopySourceIfNoneMatch",
          "location":"header",
          "locationName":"x-amz-copy-source-if-none-match"
        },
        "CopySourceIfUnmodifiedSince":{
          "shape":"CopySourceIfUnmodifiedSince",
          "location":"header",
          "locationName":"x-amz-copy-source-if-unmodified-since"
        },
        "Expires":{
          "shape":"Expires",
          "location":"header",
          "locationName":"Expires"
        },
        "GrantFullControl":{
          "shape":"GrantFullControl",
          "location":"header",
          "locationName":"x-amz-grant-full-control"
        },
        "GrantRead":{
          "shape":"GrantRead",
          "location":"header",
          "locationName":"x-amz-grant-read"
        },
        "GrantReadACP":{
          "shape":"GrantReadACP",
          "location":"header",
          "locationName":"x-amz-grant-read-acp"
        },
        "GrantWriteACP":{
          "shape":"GrantWriteACP",
          "location":"header",
          "locationName":"x-amz-grant-write-acp"
        },
        "Key":{
          "shape":"ObjectKey",
          "location":"uri",
          "locationName":"Key"
        },
        "Metadata":{
          "shape":"Metadata",
          "location":"headers",
          "locationName":"x-amz-meta-"
        },
        "MetadataDirective":{
          "shape":"MetadataDirective",
          "location":"header",
          "locationName":"x-amz-metadata-directive"
        },
        "ServerSideEncryption":{
          "shape":"ServerSideEncryption",
          "location":"header",
          "locationName":"x-amz-server-side-encryption"
        },
        "StorageClass":{
          "shape":"StorageClass",
          "location":"header",
          "locationName":"x-amz-storage-class"
        },
        "WebsiteRedirectLocation":{
          "shape":"WebsiteRedirectLocation",
          "location":"header",
          "locationName":"x-amz-website-redirect-location"
        },
        "SSECustomerAlgorithm":{
          "shape":"SSECustomerAlgorithm",
          "location":"header",
          "locationName":"x-amz-server-side-encryption-customer-algorithm"
        },
        "SSECustomerKey":{
          "shape":"SSECustomerKey",
          "location":"header",
          "locationName":"x-amz-server-side-encryption-customer-key"
        },
        "SSECustomerKeyMD5":{
          "shape":"SSECustomerKeyMD5",
          "location":"header",
          "locationName":"x-amz-server-side-encryption-customer-key-MD5"
        },
        "SSEKMSKeyId":{
          "shape":"SSEKMSKeyId",
          "location":"header",
          "locationName":"x-amz-server-side-encryption-aws-kms-key-id"
        },
        "CopySourceSSECustomerAlgorithm":{
          "shape":"CopySourceSSECustomerAlgorithm",
          "location":"header",
          "locationName":"x-amz-copy-source-server-side-encryption-customer-algorithm"
        },
        "CopySourceSSECustomerKey":{
          "shape":"CopySourceSSECustomerKey",
          "location":"header",
          "locationName":"x-amz-copy-source-server-side-encryption-customer-key"
        },
        "CopySourceSSECustomerKeyMD5":{
          "shape":"CopySourceSSECustomerKeyMD5",
          "location":"header",
          "locationName":"x-amz-copy-source-server-side-encryption-customer-key-MD5"
        }
      }
    },
    "CopyObjectResult":{
      "type":"structure",
      "members":{
        "ETag":{"shape":"ETag"},
        "LastModified":{"shape":"LastModified"}
      }
    },
    "CopyPartResult":{
      "type":"structure",
      "members":{
        "ETag":{"shape":"ETag"},
        "LastModified":{"shape":"LastModified"}
      }
    },
    "CopySource":{
      "type":"string",
      "pattern":"\\/.+\\/.+"
    },
    "CopySourceIfMatch":{"type":"string"},
    "CopySourceIfModifiedSince":{"type":"timestamp"},
    "CopySourceIfNoneMatch":{"type":"string"},
    "CopySourceIfUnmodifiedSince":{"type":"timestamp"},
    "CopySourceRange":{"type":"string"},
    "CopySourceSSECustomerAlgorithm":{"type":"string"},
    "CopySourceSSECustomerKey":{
      "type":"string",
      "sensitive":true
    },
    "CopySourceSSECustomerKeyMD5":{"type":"string"},
    "CopySourceVersionId":{"type":"string"},
    "CreateBucketConfiguration":{
      "type":"structure",
      "members":{
        "LocationConstraint":{"shape":"BucketLocationConstraint"}
      }
    },
    "CreateBucketOutput":{
      "type":"structure",
      "members":{
        "Location":{
          "shape":"Location",
          "location":"header",
          "locationName":"Location"
        }
      }
    },
    "CreateBucketRequest":{
      "type":"structure",
      "required":["Bucket"],
      "members":{
        "ACL":{
          "shape":"BucketCannedACL",
          "location":"header",
          "locationName":"x-amz-acl"
        },
        "Bucket":{
          "shape":"BucketName",
          "location":"uri",
          "locationName":"Bucket"
        },
        "CreateBucketConfiguration":{
          "shape":"CreateBucketConfiguration",
          "xmlNamespace":{"uri":"http://s3.amazonaws.com/doc/2006-03-01/"},
          "locationName":"CreateBucketConfiguration"
        },
        "GrantFullControl":{
          "shape":"GrantFullControl",
          "location":"header",
          "locationName":"x-amz-grant-full-control"
        },
        "GrantRead":{
          "shape":"GrantRead",
          "location":"header",
          "locationName":"x-amz-grant-read"
        },
        "GrantReadACP":{
          "shape":"GrantReadACP",
          "location":"header",
          "locationName":"x-amz-grant-read-acp"
        },
        "GrantWrite":{
          "shape":"GrantWrite",
          "location":"header",
          "locationName":"x-amz-grant-write"
        },
        "GrantWriteACP":{
          "shape":"GrantWriteACP",
          "location":"header",
          "locationName":"x-amz-grant-write-acp"
        }
      },
      "payload":"CreateBucketConfiguration"
    },
    "CreateMultipartUploadOutput":{
      "type":"structure",
      "members":{
        "Bucket":{
          "shape":"BucketName",
          "locationName":"Bucket"
        },
        "Key":{"shape":"ObjectKey"},
        "UploadId":{"shape":"MultipartUploadId"},
        "ServerSideEncryption":{
          "shape":"ServerSideEncryption",
          "location":"header",
          "locationName":"x-amz-server-side-encryption"
        },
        "SSECustomerAlgorithm":{
          "shape":"SSECustomerAlgorithm",
          "location":"header",
          "locationName":"x-amz-server-side-encryption-customer-algorithm"
        },
        "SSECustomerKeyMD5":{
          "shape":"SSECustomerKeyMD5",
          "location":"header",
          "locationName":"x-amz-server-side-encryption-customer-key-MD5"
        },
        "SSEKMSKeyId":{
          "shape":"SSEKMSKeyId",
          "location":"header",
          "locationName":"x-amz-server-side-encryption-aws-kms-key-id"
        }
      }
    },
    "CreateMultipartUploadRequest":{
      "type":"structure",
      "required":[
        "Bucket",
        "Key"
      ],
      "members":{
        "ACL":{
          "shape":"ObjectCannedACL",
          "location":"header",
          "locationName":"x-amz-acl"
        },
        "Bucket":{
          "shape":"BucketName",
          "location":"uri",
          "locationName":"Bucket"
        },
        "CacheControl":{
          "shape":"CacheControl",
          "location":"header",
          "locationName":"Cache-Control"
        },
        "ContentDisposition":{
          "shape":"ContentDisposition",
          "location":"header",
          "locationName":"Content-Disposition"
        },
        "ContentEncoding":{
          "shape":"ContentEncoding",
          "location":"header",
          "locationName":"Content-Encoding"
        },
        "ContentLanguage":{
          "shape":"ContentLanguage",
          "location":"header",
          "locationName":"Content-Language"
        },
        "ContentType":{
          "shape":"ContentType",
          "location":"header",
          "locationName":"Content-Type"
        },
        "Expires":{
          "shape":"Expires",
          "location":"header",
          "locationName":"Expires"
        },
        "GrantFullControl":{
          "shape":"GrantFullControl",
          "location":"header",
          "locationName":"x-amz-grant-full-control"
        },
        "GrantRead":{
          "shape":"GrantRead",
          "location":"header",
          "locationName":"x-amz-grant-read"
        },
        "GrantReadACP":{
          "shape":"GrantReadACP",
          "location":"header",
          "locationName":"x-amz-grant-read-acp"
        },
        "GrantWriteACP":{
          "shape":"GrantWriteACP",
          "location":"header",
          "locationName":"x-amz-grant-write-acp"
        },
        "Key":{
          "shape":"ObjectKey",
          "location":"uri",
          "locationName":"Key"
        },
        "Metadata":{
          "shape":"Metadata",
          "location":"headers",
          "locationName":"x-amz-meta-"
        },
        "ServerSideEncryption":{
          "shape":"ServerSideEncryption",
          "location":"header",
          "locationName":"x-amz-server-side-encryption"
        },
        "StorageClass":{
          "shape":"StorageClass",
          "location":"header",
          "locationName":"x-amz-storage-class"
        },
        "WebsiteRedirectLocation":{
          "shape":"WebsiteRedirectLocation",
          "location":"header",
          "locationName":"x-amz-website-redirect-location"
        },
        "SSECustomerAlgorithm":{
          "shape":"SSECustomerAlgorithm",
          "location":"header",
          "locationName":"x-amz-server-side-encryption-customer-algorithm"
        },
        "SSECustomerKey":{
          "shape":"SSECustomerKey",
          "location":"header",
          "locationName":"x-amz-server-side-encryption-customer-key"
        },
        "SSECustomerKeyMD5":{
          "shape":"SSECustomerKeyMD5",
          "location":"header",
          "locationName":"x-amz-server-side-encryption-customer-key-MD5"
        },
        "SSEKMSKeyId":{
          "shape":"SSEKMSKeyId",
          "location":"header",
          "locationName":"x-amz-server-side-encryption-aws-kms-key-id"
        }
      }
    },
    "CreationDate":{"type":"timestamp"},
    "Date":{
      "type":"timestamp",
      "timestampFormat":"iso8601"
    },
    "Days":{"type":"integer"},
    "Delete":{
      "type":"structure",
      "required":["Objects"],
      "members":{
        "Objects":{
          "shape":"ObjectIdentifierList",
          "locationName":"Object"
        },
        "Quiet":{"shape":"Quiet"}
      }
    },
    "DeleteBucketCorsRequest":{
      "type":"structure",
      "required":["Bucket"],
      "members":{
        "Bucket":{
          "shape":"BucketName",
          "location":"uri",
          "locationName":"Bucket"
        }
      }
    },
    "DeleteBucketLifecycleRequest":{
      "type":"structure",
      "required":["Bucket"],
      "members":{
        "Bucket":{
          "shape":"BucketName",
          "location":"uri",
          "locationName":"Bucket"
        }
      }
    },
    "DeleteBucketPolicyRequest":{
      "type":"structure",
      "required":["Bucket"],
      "members":{
        "Bucket":{
          "shape":"BucketName",
          "location":"uri",
          "locationName":"Bucket"
        }
      }
    },
    "DeleteBucketRequest":{
      "type":"structure",
      "required":["Bucket"],
      "members":{
        "Bucket":{
          "shape":"BucketName",
          "location":"uri",
          "locationName":"Bucket"
        }
      }
    },
    "DeleteBucketTaggingRequest":{
      "type":"structure",
      "required":["Bucket"],
      "members":{
        "Bucket":{
          "shape":"BucketName",
          "location":"uri",
          "locationName":"Bucket"
        }
      }
    },
    "DeleteBucketWebsiteRequest":{
      "type":"structure",
      "required":["Bucket"],
      "members":{
        "Bucket":{
          "shape":"BucketName",
          "location":"uri",
          "locationName":"Bucket"
        }
      }
    },
    "DeleteMarker":{"type":"boolean"},
    "DeleteMarkerEntry":{
      "type":"structure",
      "members":{
        "Owner":{"shape":"Owner"},
        "Key":{"shape":"ObjectKey"},
        "VersionId":{"shape":"ObjectVersionId"},
        "IsLatest":{"shape":"IsLatest"},
        "LastModified":{"shape":"LastModified"}
      }
    },
    "DeleteMarkerVersionId":{"type":"string"},
    "DeleteMarkers":{
      "type":"list",
      "member":{"shape":"DeleteMarkerEntry"},
      "flattened":true
    },
    "DeleteObjectOutput":{
      "type":"structure",
      "members":{
        "DeleteMarker":{
          "shape":"DeleteMarker",
          "location":"header",
          "locationName":"x-amz-delete-marker"
        },
        "VersionId":{
          "shape":"ObjectVersionId",
          "location":"header",
          "locationName":"x-amz-version-id"
        }
      }
    },
    "DeleteObjectRequest":{
      "type":"structure",
      "required":[
        "Bucket",
        "Key"
      ],
      "members":{
        "Bucket":{
          "shape":"BucketName",
          "location":"uri",
          "locationName":"Bucket"
        },
        "Key":{
          "shape":"ObjectKey",
          "location":"uri",
          "locationName":"Key"
        },
        "MFA":{
          "shape":"MFA",
          "location":"header",
          "locationName":"x-amz-mfa"
        },
        "VersionId":{
          "shape":"ObjectVersionId",
          "location":"querystring",
          "locationName":"versionId"
        }
      }
    },
    "DeleteObjectsOutput":{
      "type":"structure",
      "members":{
        "Deleted":{"shape":"DeletedObjects"},
        "Errors":{
          "shape":"Errors",
          "locationName":"Error"
        }
      }
    },
    "DeleteObjectsRequest":{
      "type":"structure",
      "required":[
        "Bucket",
        "Delete"
      ],
      "members":{
        "Bucket":{
          "shape":"BucketName",
          "location":"uri",
          "locationName":"Bucket"
        },
        "Delete":{
          "shape":"Delete",
          "xmlNamespace":{"uri":"http://s3.amazonaws.com/doc/2006-03-01/"},
          "locationName":"Delete"
        },
        "MFA":{
          "shape":"MFA",
          "location":"header",
          "locationName":"x-amz-mfa"
        }
      },
      "payload":"Delete"
    },
    "DeletedObject":{
      "type":"structure",
      "members":{
        "Key":{"shape":"ObjectKey"},
        "VersionId":{"shape":"ObjectVersionId"},
        "DeleteMarker":{"shape":"DeleteMarker"},
        "DeleteMarkerVersionId":{"shape":"DeleteMarkerVersionId"}
      }
    },
    "DeletedObjects":{
      "type":"list",
      "member":{"shape":"DeletedObject"},
      "flattened":true
    },
    "Delimiter":{"type":"string"},
    "DisplayName":{"type":"string"},
    "ETag":{"type":"string"},
    "EmailAddress":{"type":"string"},
    "EncodingType":{
      "type":"string",
      "enum":["url"]
    },
    "Error":{
      "type":"structure",
      "members":{
        "Key":{"shape":"ObjectKey"},
        "VersionId":{"shape":"ObjectVersionId"},
        "Code":{"shape":"Code"},
        "Message":{"shape":"Message"}
      }
    },
    "ErrorDocument":{
      "type":"structure",
      "required":["Key"],
      "members":{
        "Key":{"shape":"ObjectKey"}
      }
    },
    "Errors":{
      "type":"list",
      "member":{"shape":"Error"},
      "flattened":true
    },
    "Event":{
      "type":"string",
      "enum":[
        "s3:ReducedRedundancyLostObject",
        "s3:ObjectCreated:Put",
        "s3:ObjectCreated:Post",
        "s3:ObjectCreated:Copy",
        "s3:ObjectCreated:CompleteMultipartUpload"
      ]
    },
    "Events":{
      "type":"list",
      "member":{"shape":"Event"},
      "flattened":true
    },
    "Expiration":{"type":"timestamp"},
    "ExpirationStatus":{
      "type":"string",
      "enum":[
        "Enabled",
        "Disabled"
      ]
    },
    "Expires":{"type":"timestamp"},
    "ExposeHeader":{"type":"string"},
    "ExposeHeaders":{
      "type":"list",
      "member":{"shape":"ExposeHeader"},
      "flattened":true
    },
    "GetBucketAclOutput":{
      "type":"structure",
      "members":{
        "Owner":{"shape":"Owner"},
        "Grants":{
          "shape":"Grants",
          "locationName":"AccessControlList"
        }
      }
    },
    "GetBucketAclRequest":{
      "type":"structure",
      "required":["Bucket"],
      "members":{
        "Bucket":{
          "shape":"BucketName",
          "location":"uri",
          "locationName":"Bucket"
        }
      }
    },
    "GetBucketCorsOutput":{
      "type":"structure",
      "members":{
        "CORSRules":{
          "shape":"CORSRules",
          "locationName":"CORSRule"
        }
      }
    },
    "GetBucketCorsRequest":{
      "type":"structure",
      "required":["Bucket"],
      "members":{
        "Bucket":{
          "shape":"BucketName",
          "location":"uri",
          "locationName":"Bucket"
        }
      }
    },
    "GetBucketLifecycleOutput":{
      "type":"structure",
      "members":{
        "Rules":{
          "shape":"Rules",
          "locationName":"Rule"
        }
      }
    },
    "GetBucketLifecycleRequest":{
      "type":"structure",
      "required":["Bucket"],
      "members":{
        "Bucket":{
          "shape":"BucketName",
          "location":"uri",
          "locationName":"Bucket"
        }
      }
    },
    "GetBucketLocationOutput":{
      "type":"structure",
      "members":{
        "LocationConstraint":{"shape":"BucketLocationConstraint"}
      }
    },
    "GetBucketLocationRequest":{
      "type":"structure",
      "required":["Bucket"],
      "members":{
        "Bucket":{
          "shape":"BucketName",
          "location":"uri",
          "locationName":"Bucket"
        }
      }
    },
    "GetBucketLoggingOutput":{
      "type":"structure",
      "members":{
        "LoggingEnabled":{"shape":"LoggingEnabled"}
      }
    },
    "GetBucketLoggingRequest":{
      "type":"structure",
      "required":["Bucket"],
      "members":{
        "Bucket":{
          "shape":"BucketName",
          "location":"uri",
          "locationName":"Bucket"
        }
      }
    },
    "GetBucketNotificationOutput":{
      "type":"structure",
      "members":{
        "TopicConfiguration":{"shape":"TopicConfiguration"},
        "QueueConfiguration":{"shape":"QueueConfiguration"},
        "CloudFunctionConfiguration":{"shape":"CloudFunctionConfiguration"}
      }
    },
    "GetBucketNotificationRequest":{
      "type":"structure",
      "required":["Bucket"],
      "members":{
        "Bucket":{
          "shape":"BucketName",
          "location":"uri",
          "locationName":"Bucket"
        }
      }
    },
    "GetBucketPolicyOutput":{
      "type":"structure",
      "members":{
        "Policy":{"shape":"Policy"}
      },
      "payload":"Policy"
    },
    "GetBucketPolicyRequest":{
      "type":"structure",
      "required":["Bucket"],
      "members":{
        "Bucket":{
          "shape":"BucketName",
          "location":"uri",
          "locationName":"Bucket"
        }
      }
    },
    "GetBucketRequestPaymentOutput":{
      "type":"structure",
      "members":{
        "Payer":{"shape":"Payer"}
      }
    },
    "GetBucketRequestPaymentRequest":{
      "type":"structure",
      "required":["Bucket"],
      "members":{
        "Bucket":{
          "shape":"BucketName",
          "location":"uri",
          "locationName":"Bucket"
        }
      }
    },
    "GetBucketTaggingOutput":{
      "type":"structure",
      "required":["TagSet"],
      "members":{
        "TagSet":{"shape":"TagSet"}
      }
    },
    "GetBucketTaggingRequest":{
      "type":"structure",
      "required":["Bucket"],
      "members":{
        "Bucket":{
          "shape":"BucketName",
          "location":"uri",
          "locationName":"Bucket"
        }
      }
    },
    "GetBucketVersioningOutput":{
      "type":"structure",
      "members":{
        "Status":{"shape":"BucketVersioningStatus"},
        "MFADelete":{
          "shape":"MFADeleteStatus",
          "locationName":"MfaDelete"
        }
      }
    },
    "GetBucketVersioningRequest":{
      "type":"structure",
      "required":["Bucket"],
      "members":{
        "Bucket":{
          "shape":"BucketName",
          "location":"uri",
          "locationName":"Bucket"
        }
      }
    },
    "GetBucketWebsiteOutput":{
      "type":"structure",
      "members":{
        "RedirectAllRequestsTo":{"shape":"RedirectAllRequestsTo"},
        "IndexDocument":{"shape":"IndexDocument"},
        "ErrorDocument":{"shape":"ErrorDocument"},
        "RoutingRules":{"shape":"RoutingRules"}
      }
    },
    "GetBucketWebsiteRequest":{
      "type":"structure",
      "required":["Bucket"],
      "members":{
        "Bucket":{
          "shape":"BucketName",
          "location":"uri",
          "locationName":"Bucket"
        }
      }
    },
    "GetObjectAclOutput":{
      "type":"structure",
      "members":{
        "Owner":{"shape":"Owner"},
        "Grants":{
          "shape":"Grants",
          "locationName":"AccessControlList"
        }
      }
    },
    "GetObjectAclRequest":{
      "type":"structure",
      "required":[
        "Bucket",
        "Key"
      ],
      "members":{
        "Bucket":{
          "shape":"BucketName",
          "location":"uri",
          "locationName":"Bucket"
        },
        "Key":{
          "shape":"ObjectKey",
          "location":"uri",
          "locationName":"Key"
        },
        "VersionId":{
          "shape":"ObjectVersionId",
          "location":"querystring",
          "locationName":"versionId"
        }
      }
    },
    "GetObjectOutput":{
      "type":"structure",
      "members":{
        "Body":{
          "shape":"Body",
          "streaming":true
        },
        "DeleteMarker":{
          "shape":"DeleteMarker",
          "location":"header",
          "locationName":"x-amz-delete-marker"
        },
        "AcceptRanges":{
          "shape":"AcceptRanges",
          "location":"header",
          "locationName":"accept-ranges"
        },
        "Expiration":{
          "shape":"Expiration",
          "location":"header",
          "locationName":"x-amz-expiration"
        },
        "Restore":{
          "shape":"Restore",
          "location":"header",
          "locationName":"x-amz-restore"
        },
        "LastModified":{
          "shape":"LastModified",
          "location":"header",
          "locationName":"Last-Modified"
        },
        "ContentLength":{
          "shape":"ContentLength",
          "location":"header",
          "locationName":"Content-Length"
        },
        "ETag":{
          "shape":"ETag",
          "location":"header",
          "locationName":"ETag"
        },
        "MissingMeta":{
          "shape":"MissingMeta",
          "location":"header",
          "locationName":"x-amz-missing-meta"
        },
        "VersionId":{
          "shape":"ObjectVersionId",
          "location":"header",
          "locationName":"x-amz-version-id"
        },
        "CacheControl":{
          "shape":"CacheControl",
          "location":"header",
          "locationName":"Cache-Control"
        },
        "ContentDisposition":{
          "shape":"ContentDisposition",
          "location":"header",
          "locationName":"Content-Disposition"
        },
        "ContentEncoding":{
          "shape":"ContentEncoding",
          "location":"header",
          "locationName":"Content-Encoding"
        },
        "ContentLanguage":{
          "shape":"ContentLanguage",
          "location":"header",
          "locationName":"Content-Language"
        },
        "ContentType":{
          "shape":"ContentType",
          "location":"header",
          "locationName":"Content-Type"
        },
        "Expires":{
          "shape":"Expires",
          "location":"header",
          "locationName":"Expires"
        },
        "WebsiteRedirectLocation":{
          "shape":"WebsiteRedirectLocation",
          "location":"header",
          "locationName":"x-amz-website-redirect-location"
        },
        "ServerSideEncryption":{
          "shape":"ServerSideEncryption",
          "location":"header",
          "locationName":"x-amz-server-side-encryption"
        },
        "Metadata":{
          "shape":"Metadata",
          "location":"headers",
          "locationName":"x-amz-meta-"
        },
        "SSECustomerAlgorithm":{
          "shape":"SSECustomerAlgorithm",
          "location":"header",
          "locationName":"x-amz-server-side-encryption-customer-algorithm"
        },
        "SSECustomerKeyMD5":{
          "shape":"SSECustomerKeyMD5",
          "location":"header",
          "locationName":"x-amz-server-side-encryption-customer-key-MD5"
        },
        "SSEKMSKeyId":{
          "shape":"SSEKMSKeyId",
          "location":"header",
          "locationName":"x-amz-server-side-encryption-aws-kms-key-id"
        }
      },
      "payload":"Body"
    },
    "GetObjectRequest":{
      "type":"structure",
      "required":[
        "Bucket",
        "Key"
      ],
      "members":{
        "Bucket":{
          "shape":"BucketName",
          "location":"uri",
          "locationName":"Bucket"
        },
        "IfMatch":{
          "shape":"IfMatch",
          "location":"header",
          "locationName":"If-Match"
        },
        "IfModifiedSince":{
          "shape":"IfModifiedSince",
          "location":"header",
          "locationName":"If-Modified-Since"
        },
        "IfNoneMatch":{
          "shape":"IfNoneMatch",
          "location":"header",
          "locationName":"If-None-Match"
        },
        "IfUnmodifiedSince":{
          "shape":"IfUnmodifiedSince",
          "location":"header",
          "locationName":"If-Unmodified-Since"
        },
        "Key":{
          "shape":"ObjectKey",
          "location":"uri",
          "locationName":"Key"
        },
        "Range":{
          "shape":"Range",
          "location":"header",
          "locationName":"Range"
        },
        "ResponseCacheControl":{
          "shape":"ResponseCacheControl",
          "location":"querystring",
          "locationName":"response-cache-control"
        },
        "ResponseContentDisposition":{
          "shape":"ResponseContentDisposition",
          "location":"querystring",
          "locationName":"response-content-disposition"
        },
        "ResponseContentEncoding":{
          "shape":"ResponseContentEncoding",
          "location":"querystring",
          "locationName":"response-content-encoding"
        },
        "ResponseContentLanguage":{
          "shape":"ResponseContentLanguage",
          "location":"querystring",
          "locationName":"response-content-language"
        },
        "ResponseContentType":{
          "shape":"ResponseContentType",
          "location":"querystring",
          "locationName":"response-content-type"
        },
        "ResponseExpires":{
          "shape":"ResponseExpires",
          "location":"querystring",
          "locationName":"response-expires"
        },
        "VersionId":{
          "shape":"ObjectVersionId",
          "location":"querystring",
          "locationName":"versionId"
        },
        "SSECustomerAlgorithm":{
          "shape":"SSECustomerAlgorithm",
          "location":"header",
          "locationName":"x-amz-server-side-encryption-customer-algorithm"
        },
        "SSECustomerKey":{
          "shape":"SSECustomerKey",
          "location":"header",
          "locationName":"x-amz-server-side-encryption-customer-key"
        },
        "SSECustomerKeyMD5":{
          "shape":"SSECustomerKeyMD5",
          "location":"header",
          "locationName":"x-amz-server-side-encryption-customer-key-MD5"
        }
      }
    },
    "GetObjectTorrentOutput":{
      "type":"structure",
      "members":{
        "Body":{
          "shape":"Body",
          "streaming":true
        }
      },
      "payload":"Body"
    },
    "GetObjectTorrentRequest":{
      "type":"structure",
      "required":[
        "Bucket",
        "Key"
      ],
      "members":{
        "Bucket":{
          "shape":"BucketName",
          "location":"uri",
          "locationName":"Bucket"
        },
        "Key":{
          "shape":"ObjectKey",
          "location":"uri",
          "locationName":"Key"
        }
      }
    },
    "Grant":{
      "type":"structure",
      "members":{
        "Grantee":{"shape":"Grantee"},
        "Permission":{"shape":"Permission"}
      }
    },
    "GrantFullControl":{"type":"string"},
    "GrantRead":{"type":"string"},
    "GrantReadACP":{"type":"string"},
    "GrantWrite":{"type":"string"},
    "GrantWriteACP":{"type":"string"},
    "Grantee":{
      "type":"structure",
      "required":["Type"],
      "members":{
        "DisplayName":{"shape":"DisplayName"},
        "EmailAddress":{"shape":"EmailAddress"},
        "ID":{"shape":"ID"},
        "Type":{
          "shape":"Type",
          "xmlAttribute":true,
          "locationName":"xsi:type"
        },
        "URI":{"shape":"URI"}
      },
      "xmlNamespace":{
        "prefix":"xsi",
        "uri":"http://www.w3.org/2001/XMLSchema-instance"
      }
    },
    "Grants":{
      "type":"list",
      "member":{
        "shape":"Grant",
        "locationName":"Grant"
      }
    },
    "HeadBucketRequest":{
      "type":"structure",
      "required":["Bucket"],
      "members":{
        "Bucket":{
          "shape":"BucketName",
          "location":"uri",
          "locationName":"Bucket"
        }
      }
    },
    "HeadObjectOutput":{
      "type":"structure",
      "members":{
        "DeleteMarker":{
          "shape":"DeleteMarker",
          "location":"header",
          "locationName":"x-amz-delete-marker"
        },
        "AcceptRanges":{
          "shape":"AcceptRanges",
          "location":"header",
          "locationName":"accept-ranges"
        },
        "Expiration":{
          "shape":"Expiration",
          "location":"header",
          "locationName":"x-amz-expiration"
        },
        "Restore":{
          "shape":"Restore",
          "location":"header",
          "locationName":"x-amz-restore"
        },
        "LastModified":{
          "shape":"LastModified",
          "location":"header",
          "locationName":"Last-Modified"
        },
        "ContentLength":{
          "shape":"ContentLength",
          "location":"header",
          "locationName":"Content-Length"
        },
        "ETag":{
          "shape":"ETag",
          "location":"header",
          "locationName":"ETag"
        },
        "MissingMeta":{
          "shape":"MissingMeta",
          "location":"header",
          "locationName":"x-amz-missing-meta"
        },
        "VersionId":{
          "shape":"ObjectVersionId",
          "location":"header",
          "locationName":"x-amz-version-id"
        },
        "CacheControl":{
          "shape":"CacheControl",
          "location":"header",
          "locationName":"Cache-Control"
        },
        "ContentDisposition":{
          "shape":"ContentDisposition",
          "location":"header",
          "locationName":"Content-Disposition"
        },
        "ContentEncoding":{
          "shape":"ContentEncoding",
          "location":"header",
          "locationName":"Content-Encoding"
        },
        "ContentLanguage":{
          "shape":"ContentLanguage",
          "location":"header",
          "locationName":"Content-Language"
        },
        "ContentType":{
          "shape":"ContentType",
          "location":"header",
          "locationName":"Content-Type"
        },
        "Expires":{
          "shape":"Expires",
          "location":"header",
          "locationName":"Expires"
        },
        "WebsiteRedirectLocation":{
          "shape":"WebsiteRedirectLocation",
          "location":"header",
          "locationName":"x-amz-website-redirect-location"
        },
        "ServerSideEncryption":{
          "shape":"ServerSideEncryption",
          "location":"header",
          "locationName":"x-amz-server-side-encryption"
        },
        "Metadata":{
          "shape":"Metadata",
          "location":"headers",
          "locationName":"x-amz-meta-"
        },
        "SSECustomerAlgorithm":{
          "shape":"SSECustomerAlgorithm",
          "location":"header",
          "locationName":"x-amz-server-side-encryption-customer-algorithm"
        },
        "SSECustomerKeyMD5":{
          "shape":"SSECustomerKeyMD5",
          "location":"header",
          "locationName":"x-amz-server-side-encryption-customer-key-MD5"
        },
        "SSEKMSKeyId":{
          "shape":"SSEKMSKeyId",
          "location":"header",
          "locationName":"x-amz-server-side-encryption-aws-kms-key-id"
        }
      }
    },
    "HeadObjectRequest":{
      "type":"structure",
      "required":[
        "Bucket",
        "Key"
      ],
      "members":{
        "Bucket":{
          "shape":"BucketName",
          "location":"uri",
          "locationName":"Bucket"
        },
        "IfMatch":{
          "shape":"IfMatch",
          "location":"header",
          "locationName":"If-Match"
        },
        "IfModifiedSince":{
          "shape":"IfModifiedSince",
          "location":"header",
          "locationName":"If-Modified-Since"
        },
        "IfNoneMatch":{
          "shape":"IfNoneMatch",
          "location":"header",
          "locationName":"If-None-Match"
        },
        "IfUnmodifiedSince":{
          "shape":"IfUnmodifiedSince",
          "location":"header",
          "locationName":"If-Unmodified-Since"
        },
        "Key":{
          "shape":"ObjectKey",
          "location":"uri",
          "locationName":"Key"
        },
        "Range":{
          "shape":"Range",
          "location":"header",
          "locationName":"Range"
        },
        "VersionId":{
          "shape":"ObjectVersionId",
          "location":"querystring",
          "locationName":"versionId"
        },
        "SSECustomerAlgorithm":{
          "shape":"SSECustomerAlgorithm",
          "location":"header",
          "locationName":"x-amz-server-side-encryption-customer-algorithm"
        },
        "SSECustomerKey":{
          "shape":"SSECustomerKey",
          "location":"header",
          "locationName":"x-amz-server-side-encryption-customer-key"
        },
        "SSECustomerKeyMD5":{
          "shape":"SSECustomerKeyMD5",
          "location":"header",
          "locationName":"x-amz-server-side-encryption-customer-key-MD5"
        }
      }
    },
    "HostName":{"type":"string"},
    "HttpErrorCodeReturnedEquals":{"type":"string"},
    "HttpRedirectCode":{"type":"string"},
    "ID":{"type":"string"},
    "IfMatch":{"type":"string"},
    "IfModifiedSince":{"type":"timestamp"},
    "IfNoneMatch":{"type":"string"},
    "IfUnmodifiedSince":{"type":"timestamp"},
    "IndexDocument":{
      "type":"structure",
      "required":["Suffix"],
      "members":{
        "Suffix":{"shape":"Suffix"}
      }
    },
    "Initiated":{"type":"timestamp"},
    "Initiator":{
      "type":"structure",
      "members":{
        "ID":{"shape":"ID"},
        "DisplayName":{"shape":"DisplayName"}
      }
    },
    "IsLatest":{"type":"boolean"},
    "IsTruncated":{"type":"boolean"},
    "KeyMarker":{"type":"string"},
    "KeyPrefixEquals":{"type":"string"},
    "LastModified":{"type":"timestamp"},
    "LifecycleConfiguration":{
      "type":"structure",
      "required":["Rules"],
      "members":{
        "Rules":{
          "shape":"Rules",
          "locationName":"Rule"
        }
      }
    },
    "LifecycleExpiration":{
      "type":"structure",
      "members":{
        "Date":{"shape":"Date"},
        "Days":{"shape":"Days"}
      }
    },
    "ListBucketsOutput":{
      "type":"structure",
      "members":{
        "Buckets":{"shape":"Buckets"},
        "Owner":{"shape":"Owner"}
      }
    },
    "ListMultipartUploadsOutput":{
      "type":"structure",
      "members":{
        "Bucket":{"shape":"BucketName"},
        "KeyMarker":{"shape":"KeyMarker"},
        "UploadIdMarker":{"shape":"UploadIdMarker"},
        "NextKeyMarker":{"shape":"NextKeyMarker"},
        "Prefix":{"shape":"Prefix"},
        "Delimiter":{"shape":"Delimiter"},
        "NextUploadIdMarker":{"shape":"NextUploadIdMarker"},
        "MaxUploads":{"shape":"MaxUploads"},
        "IsTruncated":{"shape":"IsTruncated"},
        "Uploads":{
          "shape":"MultipartUploadList",
          "locationName":"Upload"
        },
        "CommonPrefixes":{"shape":"CommonPrefixList"},
        "EncodingType":{"shape":"EncodingType"}
      }
    },
    "ListMultipartUploadsRequest":{
      "type":"structure",
      "required":["Bucket"],
      "members":{
        "Bucket":{
          "shape":"BucketName",
          "location":"uri",
          "locationName":"Bucket"
        },
        "Delimiter":{
          "shape":"Delimiter",
          "location":"querystring",
          "locationName":"delimiter"
        },
        "EncodingType":{
          "shape":"EncodingType",
          "location":"querystring",
          "locationName":"encoding-type"
        },
        "KeyMarker":{
          "shape":"KeyMarker",
          "location":"querystring",
          "locationName":"key-marker"
        },
        "MaxUploads":{
          "shape":"MaxUploads",
          "location":"querystring",
          "locationName":"max-uploads"
        },
        "Prefix":{
          "shape":"Prefix",
          "location":"querystring",
          "locationName":"prefix"
        },
        "UploadIdMarker":{
          "shape":"UploadIdMarker",
          "location":"querystring",
          "locationName":"upload-id-marker"
        }
      }
    },
    "ListObjectVersionsOutput":{
      "type":"structure",
      "members":{
        "IsTruncated":{"shape":"IsTruncated"},
        "KeyMarker":{"shape":"KeyMarker"},
        "VersionIdMarker":{"shape":"VersionIdMarker"},
        "NextKeyMarker":{"shape":"NextKeyMarker"},
        "NextVersionIdMarker":{"shape":"NextVersionIdMarker"},
        "Versions":{
          "shape":"ObjectVersionList",
          "locationName":"Version"
        },
        "DeleteMarkers":{
          "shape":"DeleteMarkers",
          "locationName":"DeleteMarker"
        },
        "Name":{"shape":"BucketName"},
        "Prefix":{"shape":"Prefix"},
        "Delimiter":{"shape":"Delimiter"},
        "MaxKeys":{"shape":"MaxKeys"},
        "CommonPrefixes":{"shape":"CommonPrefixList"},
        "EncodingType":{"shape":"EncodingType"}
      }
    },
    "ListObjectVersionsRequest":{
      "type":"structure",
      "required":["Bucket"],
      "members":{
        "Bucket":{
          "shape":"BucketName",
          "location":"uri",
          "locationName":"Bucket"
        },
        "Delimiter":{
          "shape":"Delimiter",
          "location":"querystring",
          "locationName":"delimiter"
        },
        "EncodingType":{
          "shape":"EncodingType",
          "location":"querystring",
          "locationName":"encoding-type"
        },
        "KeyMarker":{
          "shape":"KeyMarker",
          "location":"querystring",
          "locationName":"key-marker"
        },
        "MaxKeys":{
          "shape":"MaxKeys",
          "location":"querystring",
          "locationName":"max-keys"
        },
        "Prefix":{
          "shape":"Prefix",
          "location":"querystring",
          "locationName":"prefix"
        },
        "VersionIdMarker":{
          "shape":"VersionIdMarker",
          "location":"querystring",
          "locationName":"version-id-marker"
        }
      }
    },
    "ListObjectsOutput":{
      "type":"structure",
      "members":{
        "IsTruncated":{"shape":"IsTruncated"},
        "Marker":{"shape":"Marker"},
        "NextMarker":{"shape":"NextMarker"},
        "Contents":{"shape":"ObjectList"},
        "Name":{"shape":"BucketName"},
        "Prefix":{"shape":"Prefix"},
        "Delimiter":{"shape":"Delimiter"},
        "MaxKeys":{"shape":"MaxKeys"},
        "CommonPrefixes":{"shape":"CommonPrefixList"},
        "EncodingType":{"shape":"EncodingType"}
      }
    },
    "ListObjectsRequest":{
      "type":"structure",
      "required":["Bucket"],
      "members":{
        "Bucket":{
          "shape":"BucketName",
          "location":"uri",
          "locationName":"Bucket"
        },
        "Delimiter":{
          "shape":"Delimiter",
          "location":"querystring",
          "locationName":"delimiter"
        },
        "EncodingType":{
          "shape":"EncodingType",
          "location":"querystring",
          "locationName":"encoding-type"
        },
        "Marker":{
          "shape":"Marker",
          "location":"querystring",
          "locationName":"marker"
        },
        "MaxKeys":{
          "shape":"MaxKeys",
          "location":"querystring",
          "locationName":"max-keys"
        },
        "Prefix":{
          "shape":"Prefix",
          "location":"querystring",
          "locationName":"prefix"
        }
      }
    },
    "ListPartsOutput":{
      "type":"structure",
      "members":{
        "Bucket":{"shape":"BucketName"},
        "Key":{"shape":"ObjectKey"},
        "UploadId":{"shape":"MultipartUploadId"},
        "PartNumberMarker":{"shape":"PartNumberMarker"},
        "NextPartNumberMarker":{"shape":"NextPartNumberMarker"},
        "MaxParts":{"shape":"MaxParts"},
        "IsTruncated":{"shape":"IsTruncated"},
        "Parts":{
          "shape":"Parts",
          "locationName":"Part"
        },
        "Initiator":{"shape":"Initiator"},
        "Owner":{"shape":"Owner"},
        "StorageClass":{"shape":"StorageClass"}
      }
    },
    "ListPartsRequest":{
      "type":"structure",
      "required":[
        "Bucket",
        "Key",
        "UploadId"
      ],
      "members":{
        "Bucket":{
          "shape":"BucketName",
          "location":"uri",
          "locationName":"Bucket"
        },
        "Key":{
          "shape":"ObjectKey",
          "location":"uri",
          "locationName":"Key"
        },
        "MaxParts":{
          "shape":"MaxParts",
          "location":"querystring",
          "locationName":"max-parts"
        },
        "PartNumberMarker":{
          "shape":"PartNumberMarker",
          "location":"querystring",
          "locationName":"part-number-marker"
        },
        "UploadId":{
          "shape":"MultipartUploadId",
          "location":"querystring",
          "locationName":"uploadId"
        }
      }
    },
    "Location":{"type":"string"},
    "LoggingEnabled":{
      "type":"structure",
      "members":{
        "TargetBucket":{"shape":"TargetBucket"},
        "TargetGrants":{"shape":"TargetGrants"},
        "TargetPrefix":{"shape":"TargetPrefix"}
      }
    },
    "MFA":{"type":"string"},
    "MFADelete":{
      "type":"string",
      "enum":[
        "Enabled",
        "Disabled"
      ]
    },
    "MFADeleteStatus":{
      "type":"string",
      "enum":[
        "Enabled",
        "Disabled"
      ]
    },
    "Marker":{"type":"string"},
    "MaxAgeSeconds":{"type":"integer"},
    "MaxKeys":{"type":"integer"},
    "MaxParts":{"type":"integer"},
    "MaxUploads":{"type":"integer"},
    "Message":{"type":"string"},
    "Metadata":{
      "type":"map",
      "key":{"shape":"MetadataKey"},
      "value":{"shape":"MetadataValue"}
    },
    "MetadataDirective":{
      "type":"string",
      "enum":[
        "COPY",
        "REPLACE"
      ]
    },
    "MetadataKey":{"type":"string"},
    "MetadataValue":{"type":"string"},
    "MissingMeta":{"type":"integer"},
    "MultipartUpload":{
      "type":"structure",
      "members":{
        "UploadId":{"shape":"MultipartUploadId"},
        "Key":{"shape":"ObjectKey"},
        "Initiated":{"shape":"Initiated"},
        "StorageClass":{"shape":"StorageClass"},
        "Owner":{"shape":"Owner"},
        "Initiator":{"shape":"Initiator"}
      }
    },
    "MultipartUploadId":{"type":"string"},
    "MultipartUploadList":{
      "type":"list",
      "member":{"shape":"MultipartUpload"},
      "flattened":true
    },
    "NextKeyMarker":{"type":"string"},
    "NextMarker":{"type":"string"},
    "NextPartNumberMarker":{"type":"integer"},
    "NextUploadIdMarker":{"type":"string"},
    "NextVersionIdMarker":{"type":"string"},
    "NoSuchBucket":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "NoSuchKey":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "NoSuchUpload":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "NoncurrentVersionExpiration":{
      "type":"structure",
      "members":{
        "NoncurrentDays":{"shape":"Days"}
      }
    },
    "NoncurrentVersionTransition":{
      "type":"structure",
      "members":{
        "NoncurrentDays":{"shape":"Days"},
        "StorageClass":{"shape":"TransitionStorageClass"}
      }
    },
    "NotificationConfiguration":{
      "type":"structure",
      "members":{
        "TopicConfiguration":{"shape":"TopicConfiguration"},
        "QueueConfiguration":{"shape":"QueueConfiguration"},
        "CloudFunctionConfiguration":{"shape":"CloudFunctionConfiguration"}
      }
    },
    "NotificationId":{"type":"string"},
    "Object":{
      "type":"structure",
      "members":{
        "Key":{"shape":"ObjectKey"},
        "LastModified":{"shape":"LastModified"},
        "ETag":{"shape":"ETag"},
        "Size":{"shape":"Size"},
        "StorageClass":{"shape":"ObjectStorageClass"},
        "Owner":{"shape":"Owner"}
      }
    },
    "ObjectAlreadyInActiveTierError":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "ObjectCannedACL":{
      "type":"string",
      "enum":[
        "private",
        "public-read",
        "public-read-write",
        "authenticated-read",
        "bucket-owner-read",
        "bucket-owner-full-control"
      ]
    },
    "ObjectIdentifier":{
      "type":"structure",
      "required":["Key"],
      "members":{
        "Key":{"shape":"ObjectKey"},
        "VersionId":{"shape":"ObjectVersionId"}
      }
    },
    "ObjectIdentifierList":{
      "type":"list",
      "member":{"shape":"ObjectIdentifier"},
      "flattened":true
    },
    "ObjectKey":{"type":"string"},
    "ObjectList":{
      "type":"list",
      "member":{"shape":"Object"},
      "flattened":true
    },
    "ObjectNotInActiveTierError":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "ObjectStorageClass":{
      "type":"string",
      "enum":[
        "STANDARD",
        "REDUCED_REDUNDANCY",
        "GLACIER"
      ]
    },
    "ObjectVersion":{
      "type":"structure",
      "members":{
        "ETag":{"shape":"ETag"},
        "Size":{"shape":"Size"},
        "StorageClass":{"shape":"ObjectVersionStorageClass"},
        "Key":{"shape":"ObjectKey"},
        "VersionId":{"shape":"ObjectVersionId"},
        "IsLatest":{"shape":"IsLatest"},
        "LastModified":{"shape":"LastModified"},
        "Owner":{"shape":"Owner"}
      }
    },
    "ObjectVersionId":{"type":"string"},
    "ObjectVersionList":{
      "type":"list",
      "member":{"shape":"ObjectVersion"},
      "flattened":true
    },
    "ObjectVersionStorageClass":{
      "type":"string",
      "enum":["STANDARD"]
    },
    "Owner":{
      "type":"structure",
      "members":{
        "DisplayName":{"shape":"DisplayName"},
        "ID":{"shape":"ID"}
      }
    },
    "Part":{
      "type":"structure",
      "members":{
        "PartNumber":{"shape":"PartNumber"},
        "LastModified":{"shape":"LastModified"},
        "ETag":{"shape":"ETag"},
        "Size":{"shape":"Size"}
      }
    },
    "PartNumber":{"type":"integer"},
    "PartNumberMarker":{"type":"integer"},
    "Parts":{
      "type":"list",
      "member":{"shape":"Part"},
      "flattened":true
    },
    "Payer":{
      "type":"string",
      "enum":[
        "Requester",
        "BucketOwner"
      ]
    },
    "Permission":{
      "type":"string",
      "enum":[
        "FULL_CONTROL",
        "WRITE",
        "WRITE_ACP",
        "READ",
        "READ_ACP"
      ]
    },
    "Policy":{"type":"string"},
    "Prefix":{"type":"string"},
    "Protocol":{
      "type":"string",
      "enum":[
        "http",
        "https"
      ]
    },
    "PutBucketAclRequest":{
      "type":"structure",
      "required":["Bucket"],
      "members":{
        "ACL":{
          "shape":"BucketCannedACL",
          "location":"header",
          "locationName":"x-amz-acl"
        },
        "AccessControlPolicy":{
          "shape":"AccessControlPolicy",
          "xmlNamespace":{"uri":"http://s3.amazonaws.com/doc/2006-03-01/"},
          "locationName":"AccessControlPolicy"
        },
        "Bucket":{
          "shape":"BucketName",
          "location":"uri",
          "locationName":"Bucket"
        },
        "ContentMD5":{
          "shape":"ContentMD5",
          "location":"header",
          "locationName":"Content-MD5"
        },
        "GrantFullControl":{
          "shape":"GrantFullControl",
          "location":"header",
          "locationName":"x-amz-grant-full-control"
        },
        "GrantRead":{
          "shape":"GrantRead",
          "location":"header",
          "locationName":"x-amz-grant-read"
        },
        "GrantReadACP":{
          "shape":"GrantReadACP",
          "location":"header",
          "locationName":"x-amz-grant-read-acp"
        },
        "GrantWrite":{
          "shape":"GrantWrite",
          "location":"header",
          "locationName":"x-amz-grant-write"
        },
        "GrantWriteACP":{
          "shape":"GrantWriteACP",
          "location":"header",
          "locationName":"x-amz-grant-write-acp"
        }
      },
      "payload":"AccessControlPolicy"
    },
    "PutBucketCorsRequest":{
      "type":"structure",
      "required":["Bucket"],
      "members":{
        "Bucket":{
          "shape":"BucketName",
          "location":"uri",
          "locationName":"Bucket"
        },
        "CORSConfiguration":{
          "shape":"CORSConfiguration",
          "xmlNamespace":{"uri":"http://s3.amazonaws.com/doc/2006-03-01/"},
          "locationName":"CORSConfiguration"
        },
        "ContentMD5":{
          "shape":"ContentMD5",
          "location":"header",
          "locationName":"Content-MD5"
        }
      },
      "payload":"CORSConfiguration"
    },
    "PutBucketLifecycleRequest":{
      "type":"structure",
      "required":["Bucket"],
      "members":{
        "Bucket":{
          "shape":"BucketName",
          "location":"uri",
          "locationName":"Bucket"
        },
        "ContentMD5":{
          "shape":"ContentMD5",
          "location":"header",
          "locationName":"Content-MD5"
        },
        "LifecycleConfiguration":{
          "shape":"LifecycleConfiguration",
          "xmlNamespace":{"uri":"http://s3.amazonaws.com/doc/2006-03-01/"},
          "locationName":"LifecycleConfiguration"
        }
      },
      "payload":"LifecycleConfiguration"
    },
    "PutBucketLoggingRequest":{
      "type":"structure",
      "required":[
        "Bucket",
        "BucketLoggingStatus"
      ],
      "members":{
        "Bucket":{
          "shape":"BucketName",
          "location":"uri",
          "locationName":"Bucket"
        },
        "BucketLoggingStatus":{
          "shape":"BucketLoggingStatus",
          "xmlNamespace":{"uri":"http://s3.amazonaws.com/doc/2006-03-01/"},
          "locationName":"BucketLoggingStatus"
        },
        "ContentMD5":{
          "shape":"ContentMD5",
          "location":"header",
          "locationName":"Content-MD5"
        }
      },
      "payload":"BucketLoggingStatus"
    },
    "PutBucketNotificationRequest":{
      "type":"structure",
      "required":[
        "Bucket",
        "NotificationConfiguration"
      ],
      "members":{
        "Bucket":{
          "shape":"BucketName",
          "location":"uri",
          "locationName":"Bucket"
        },
        "ContentMD5":{
          "shape":"ContentMD5",
          "location":"header",
          "locationName":"Content-MD5"
        },
        "NotificationConfiguration":{
          "shape":"NotificationConfiguration",
          "xmlNamespace":{"uri":"http://s3.amazonaws.com/doc/2006-03-01/"},
          "locationName":"NotificationConfiguration"
        }
      },
      "payload":"NotificationConfiguration"
    },
    "PutBucketPolicyRequest":{
      "type":"structure",
      "required":[
        "Bucket",
        "Policy"
      ],
      "members":{
        "Bucket":{
          "shape":"BucketName",
          "location":"uri",
          "locationName":"Bucket"
        },
        "ContentMD5":{
          "shape":"ContentMD5",
          "location":"header",
          "locationName":"Content-MD5"
        },
        "Policy":{"shape":"Policy"}
      },
      "payload":"Policy"
    },
    "PutBucketRequestPaymentRequest":{
      "type":"structure",
      "required":[
        "Bucket",
        "RequestPaymentConfiguration"
      ],
      "members":{
        "Bucket":{
          "shape":"BucketName",
          "location":"uri",
          "locationName":"Bucket"
        },
        "ContentMD5":{
          "shape":"ContentMD5",
          "location":"header",
          "locationName":"Content-MD5"
        },
        "RequestPaymentConfiguration":{
          "shape":"RequestPaymentConfiguration",
          "xmlNamespace":{"uri":"http://s3.amazonaws.com/doc/2006-03-01/"},
          "locationName":"RequestPaymentConfiguration"
        }
      },
      "payload":"RequestPaymentConfiguration"
    },
    "PutBucketTaggingRequest":{
      "type":"structure",
      "required":[
        "Bucket",
        "Tagging"
      ],
      "members":{
        "Bucket":{
          "shape":"BucketName",
          "location":"uri",
          "locationName":"Bucket"
        },
        "ContentMD5":{
          "shape":"ContentMD5",
          "location":"header",
          "locationName":"Content-MD5"
        },
        "Tagging":{
          "shape":"Tagging",
          "xmlNamespace":{"uri":"http://s3.amazonaws.com/doc/2006-03-01/"},
          "locationName":"Tagging"
        }
      },
      "payload":"Tagging"
    },
    "PutBucketVersioningRequest":{
      "type":"structure",
      "required":[
        "Bucket",
        "VersioningConfiguration"
      ],
      "members":{
        "Bucket":{
          "shape":"BucketName",
          "location":"uri",
          "locationName":"Bucket"
        },
        "ContentMD5":{
          "shape":"ContentMD5",
          "location":"header",
          "locationName":"Content-MD5"
        },
        "MFA":{
          "shape":"MFA",
          "location":"header",
          "locationName":"x-amz-mfa"
        },
        "VersioningConfiguration":{
          "shape":"VersioningConfiguration",
          "xmlNamespace":{"uri":"http://s3.amazonaws.com/doc/2006-03-01/"},
          "locationName":"VersioningConfiguration"
        }
      },
      "payload":"VersioningConfiguration"
    },
    "PutBucketWebsiteRequest":{
      "type":"structure",
      "required":[
        "Bucket",
        "WebsiteConfiguration"
      ],
      "members":{
        "Bucket":{
          "shape":"BucketName",
          "location":"uri",
          "locationName":"Bucket"
        },
        "ContentMD5":{
          "shape":"ContentMD5",
          "location":"header",
          "locationName":"Content-MD5"
        },
        "WebsiteConfiguration":{
          "shape":"WebsiteConfiguration",
          "xmlNamespace":{"uri":"http://s3.amazonaws.com/doc/2006-03-01/"},
          "locationName":"WebsiteConfiguration"
        }
      },
      "payload":"WebsiteConfiguration"
    },
    "PutObjectAclRequest":{
      "type":"structure",
      "required":[
        "Bucket",
        "Key"
      ],
      "members":{
        "ACL":{
          "shape":"ObjectCannedACL",
          "location":"header",
          "locationName":"x-amz-acl"
        },
        "AccessControlPolicy":{
          "shape":"AccessControlPolicy",
          "xmlNamespace":{"uri":"http://s3.amazonaws.com/doc/2006-03-01/"},
          "locationName":"AccessControlPolicy"
        },
        "Bucket":{
          "shape":"BucketName",
          "location":"uri",
          "locationName":"Bucket"
        },
        "ContentMD5":{
          "shape":"ContentMD5",
          "location":"header",
          "locationName":"Content-MD5"
        },
        "GrantFullControl":{
          "shape":"GrantFullControl",
          "location":"header",
          "locationName":"x-amz-grant-full-control"
        },
        "GrantRead":{
          "shape":"GrantRead",
          "location":"header",
          "locationName":"x-amz-grant-read"
        },
        "GrantReadACP":{
          "shape":"GrantReadACP",
          "location":"header",
          "locationName":"x-amz-grant-read-acp"
        },
        "GrantWrite":{
          "shape":"GrantWrite",
          "location":"header",
          "locationName":"x-amz-grant-write"
        },
        "GrantWriteACP":{
          "shape":"GrantWriteACP",
          "location":"header",
          "locationName":"x-amz-grant-write-acp"
        },
        "Key":{
          "shape":"ObjectKey",
          "location":"uri",
          "locationName":"Key"
        }
      },
      "payload":"AccessControlPolicy"
    },
    "PutObjectOutput":{
      "type":"structure",
      "members":{
        "Expiration":{
          "shape":"Expiration",
          "location":"header",
          "locationName":"x-amz-expiration"
        },
        "ETag":{
          "shape":"ETag",
          "location":"header",
          "locationName":"ETag"
        },
        "ServerSideEncryption":{
          "shape":"ServerSideEncryption",
          "location":"header",
          "locationName":"x-amz-server-side-encryption"
        },
        "VersionId":{
          "shape":"ObjectVersionId",
          "location":"header",
          "locationName":"x-amz-version-id"
        },
        "SSECustomerAlgorithm":{
          "shape":"SSECustomerAlgorithm",
          "location":"header",
          "locationName":"x-amz-server-side-encryption-customer-algorithm"
        },
        "SSECustomerKeyMD5":{
          "shape":"SSECustomerKeyMD5",
          "location":"header",
          "locationName":"x-amz-server-side-encryption-customer-key-MD5"
        },
        "SSEKMSKeyId":{
          "shape":"SSEKMSKeyId",
          "location":"header",
          "locationName":"x-amz-server-side-encryption-aws-kms-key-id"
        }
      }
    },
    "PutObjectRequest":{
      "type":"structure",
      "required":[
        "Bucket",
        "Key"
      ],
      "members":{
        "ACL":{
          "shape":"ObjectCannedACL",
          "location":"header",
          "locationName":"x-amz-acl"
        },
        "Body":{
          "shape":"Body",
          "streaming":true
        },
        "Bucket":{
          "shape":"BucketName",
          "location":"uri",
          "locationName":"Bucket"
        },
        "CacheControl":{
          "shape":"CacheControl",
          "location":"header",
          "locationName":"Cache-Control"
        },
        "ContentDisposition":{
          "shape":"ContentDisposition",
          "location":"header",
          "locationName":"Content-Disposition"
        },
        "ContentEncoding":{
          "shape":"ContentEncoding",
          "location":"header",
          "locationName":"Content-Encoding"
        },
        "ContentLanguage":{
          "shape":"ContentLanguage",
          "location":"header",
          "locationName":"Content-Language"
        },
        "ContentLength":{
          "shape":"ContentLength",
          "location":"header",
          "locationName":"Content-Length"
        },
        "ContentMD5":{
          "shape":"ContentMD5",
          "location":"header",
          "locationName":"Content-MD5"
        },
        "ContentType":{
          "shape":"ContentType",
          "location":"header",
          "locationName":"Content-Type"
        },
        "Expires":{
          "shape":"Expires",
          "location":"header",
          "locationName":"Expires"
        },
        "GrantFullControl":{
          "shape":"GrantFullControl",
          "location":"header",
          "locationName":"x-amz-grant-full-control"
        },
        "GrantRead":{
          "shape":"GrantRead",
          "location":"header",
          "locationName":"x-amz-grant-read"
        },
        "GrantReadACP":{
          "shape":"GrantReadACP",
          "location":"header",
          "locationName":"x-amz-grant-read-acp"
        },
        "GrantWriteACP":{
          "shape":"GrantWriteACP",
          "location":"header",
          "locationName":"x-amz-grant-write-acp"
        },
        "Key":{
          "shape":"ObjectKey",
          "location":"uri",
          "locationName":"Key"
        },
        "Metadata":{
          "shape":"Metadata",
          "location":"headers",
          "locationName":"x-amz-meta-"
        },
        "ServerSideEncryption":{
          "shape":"ServerSideEncryption",
          "location":"header",
          "locationName":"x-amz-server-side-encryption"
        },
        "StorageClass":{
          "shape":"StorageClass",
          "location":"header",
          "locationName":"x-amz-storage-class"
        },
        "WebsiteRedirectLocation":{
          "shape":"WebsiteRedirectLocation",
          "location":"header",
          "locationName":"x-amz-website-redirect-location"
        },
        "SSECustomerAlgorithm":{
          "shape":"SSECustomerAlgorithm",
          "location":"header",
          "locationName":"x-amz-server-side-encryption-customer-algorithm"
        },
        "SSECustomerKey":{
          "shape":"SSECustomerKey",
          "location":"header",
          "locationName":"x-amz-server-side-encryption-customer-key"
        },
        "SSECustomerKeyMD5":{
          "shape":"SSECustomerKeyMD5",
          "location":"header",
          "locationName":"x-amz-server-side-encryption-customer-key-MD5"
        },
        "SSEKMSKeyId":{
          "shape":"SSEKMSKeyId",
          "location":"header",
          "locationName":"x-amz-server-side-encryption-aws-kms-key-id"
        }
      },
      "payload":"Body"
    },
    "Queue":{"type":"string"},
    "QueueConfiguration":{
      "type":"structure",
      "members":{
        "Id":{"shape":"NotificationId"},
        "Event":{
          "shape":"Event",
          "deprecated":true
        },
        "Events":{
          "shape":"Events",
          "locationName":"Event"
        },
        "Queue":{"shape":"Queue"}
      }
    },
    "Quiet":{"type":"boolean"},
    "Range":{"type":"string"},
    "Redirect":{
      "type":"structure",
      "members":{
        "HostName":{"shape":"HostName"},
        "HttpRedirectCode":{"shape":"HttpRedirectCode"},
        "Protocol":{"shape":"Protocol"},
        "ReplaceKeyPrefixWith":{"shape":"ReplaceKeyPrefixWith"},
        "ReplaceKeyWith":{"shape":"ReplaceKeyWith"}
      }
    },
    "RedirectAllRequestsTo":{
      "type":"structure",
      "required":["HostName"],
      "members":{
        "HostName":{"shape":"HostName"},
        "Protocol":{"shape":"Protocol"}
      }
    },
    "ReplaceKeyPrefixWith":{"type":"string"},
    "ReplaceKeyWith":{"type":"string"},
    "RequestPaymentConfiguration":{
      "type":"structure",
      "required":["Payer"],
      "members":{
        "Payer":{"shape":"Payer"}
      }
    },
    "ResponseCacheControl":{"type":"string"},
    "ResponseContentDisposition":{"type":"string"},
    "ResponseContentEncoding":{"type":"string"},
    "ResponseContentLanguage":{"type":"string"},
    "ResponseContentType":{"type":"string"},
    "ResponseExpires":{"type":"timestamp"},
    "Restore":{"type":"string"},
    "RestoreObjectRequest":{
      "type":"structure",
      "required":[
        "Bucket",
        "Key"
      ],
      "members":{
        "Bucket":{
          "shape":"BucketName",
          "location":"uri",
          "locationName":"Bucket"
        },
        "Key":{
          "shape":"ObjectKey",
          "location":"uri",
          "locationName":"Key"
        },
        "VersionId":{
          "shape":"ObjectVersionId",
          "location":"querystring",
          "locationName":"versionId"
        },
        "RestoreRequest":{
          "shape":"RestoreRequest",
          "xmlNamespace":{"uri":"http://s3.amazonaws.com/doc/2006-03-01/"},
          "locationName":"RestoreRequest"
        }
      },
      "payload":"RestoreRequest"
    },
    "RestoreRequest":{
      "type":"structure",
      "required":["Days"],
      "members":{
        "Days":{"shape":"Days"}
      }
    },
    "RoutingRule":{
      "type":"structure",
      "required":["Redirect"],
      "members":{
        "Condition":{"shape":"Condition"},
        "Redirect":{"shape":"Redirect"}
      }
    },
    "RoutingRules":{
      "type":"list",
      "member":{
        "shape":"RoutingRule",
        "locationName":"RoutingRule"
      }
    },
    "Rule":{
      "type":"structure",
      "required":[
        "Prefix",
        "Status"
      ],
      "members":{
        "Expiration":{"shape":"LifecycleExpiration"},
        "ID":{"shape":"ID"},
        "Prefix":{"shape":"Prefix"},
        "Status":{"shape":"ExpirationStatus"},
        "Transition":{"shape":"Transition"},
        "NoncurrentVersionTransition":{"shape":"NoncurrentVersionTransition"},
        "NoncurrentVersionExpiration":{"shape":"NoncurrentVersionExpiration"}
      }
    },
    "Rules":{
      "type":"list",
      "member":{"shape":"Rule"},
      "flattened":true
    },
    "SSECustomerAlgorithm":{"type":"string"},
    "SSECustomerKey":{
      "type":"string",
      "sensitive":true
    },
    "SSECustomerKeyMD5":{"type":"string"},
    "SSEKMSKeyId":{
      "type":"string",
      "sensitive":true
    },
    "ServerSideEncryption":{
      "type":"string",
      "enum":["AES256"]
    },
    "Size":{"type":"integer"},
    "StorageClass":{
      "type":"string",
      "enum":[
        "STANDARD",
        "REDUCED_REDUNDANCY"
      ]
    },
    "Suffix":{"type":"string"},
    "Tag":{
      "type":"structure",
      "required":[
        "Key",
        "Value"
      ],
      "members":{
        "Key":{"shape":"ObjectKey"},
        "Value":{"shape":"Value"}
      }
    },
    "TagSet":{
      "type":"list",
      "member":{
        "shape":"Tag",
        "locationName":"Tag"
      }
    },
    "Tagging":{
      "type":"structure",
      "required":["TagSet"],
      "members":{
        "TagSet":{"shape":"TagSet"}
      }
    },
    "TargetBucket":{"type":"string"},
    "TargetGrant":{
      "type":"structure",
      "members":{
        "Grantee":{"shape":"Grantee"},
        "Permission":{"shape":"BucketLogsPermission"}
      }
    },
    "TargetGrants":{
      "type":"list",
      "member":{
        "shape":"TargetGrant",
        "locationName":"Grant"
      }
    },
    "TargetPrefix":{"type":"string"},
    "Topic":{"type":"string"},
    "TopicConfiguration":{
      "type":"structure",
      "members":{
        "Id":{"shape":"NotificationId"},
        "Events":{
          "shape":"Events",
          "locationName":"Event"
        },
        "Event":{
          "shape":"Event",
          "deprecated":true
        },
        "Topic":{"shape":"Topic"}
      }
    },
    "Transition":{
      "type":"structure",
      "members":{
        "Date":{"shape":"Date"},
        "Days":{"shape":"Days"},
        "StorageClass":{"shape":"TransitionStorageClass"}
      }
    },
    "TransitionStorageClass":{
      "type":"string",
      "enum":["GLACIER"]
    },
    "Type":{
      "type":"string",
      "enum":[
        "CanonicalUser",
        "AmazonCustomerByEmail",
        "Group"
      ]
    },
    "URI":{"type":"string"},
    "UploadIdMarker":{"type":"string"},
    "UploadPartCopyOutput":{
      "type":"structure",
      "members":{
        "CopySourceVersionId":{
          "shape":"CopySourceVersionId",
          "location":"header",
          "locationName":"x-amz-copy-source-version-id"
        },
        "CopyPartResult":{"shape":"CopyPartResult"},
        "ServerSideEncryption":{
          "shape":"ServerSideEncryption",
          "location":"header",
          "locationName":"x-amz-server-side-encryption"
        },
        "SSECustomerAlgorithm":{
          "shape":"SSECustomerAlgorithm",
          "location":"header",
          "locationName":"x-amz-server-side-encryption-customer-algorithm"
        },
        "SSECustomerKeyMD5":{
          "shape":"SSECustomerKeyMD5",
          "location":"header",
          "locationName":"x-amz-server-side-encryption-customer-key-MD5"
        },
        "SSEKMSKeyId":{
          "shape":"SSEKMSKeyId",
          "location":"header",
          "locationName":"x-amz-server-side-encryption-aws-kms-key-id"
        }
      },
      "payload":"CopyPartResult"
    },
    "UploadPartCopyRequest":{
      "type":"structure",
      "required":[
        "Bucket",
        "CopySource",
        "Key",
        "PartNumber",
        "UploadId"
      ],
      "members":{
        "Bucket":{
          "shape":"BucketName",
          "location":"uri",
          "locationName":"Bucket"
        },
        "CopySource":{
          "shape":"CopySource",
          "location":"header",
          "locationName":"x-amz-copy-source"
        },
        "CopySourceIfMatch":{
          "shape":"CopySourceIfMatch",
          "location":"header",
          "locationName":"x-amz-copy-source-if-match"
        },
        "CopySourceIfModifiedSince":{
          "shape":"CopySourceIfModifiedSince",
          "location":"header",
          "locationName":"x-amz-copy-source-if-modified-since"
        },
        "CopySourceIfNoneMatch":{
          "shape":"CopySourceIfNoneMatch",
          "location":"header",
          "locationName":"x-amz-copy-source-if-none-match"
        },
        "CopySourceIfUnmodifiedSince":{
          "shape":"CopySourceIfUnmodifiedSince",
          "location":"header",
          "locationName":"x-amz-copy-source-if-unmodified-since"
        },
        "CopySourceRange":{
          "shape":"CopySourceRange",
          "location":"header",
          "locationName":"x-amz-copy-source-range"
        },
        "Key":{
          "shape":"ObjectKey",
          "location":"uri",
          "locationName":"Key"
        },
        "PartNumber":{
          "shape":"PartNumber",
          "location":"querystring",
          "locationName":"partNumber"
        },
        "UploadId":{
          "shape":"MultipartUploadId",
          "location":"querystring",
          "locationName":"uploadId"
        },
        "SSECustomerAlgorithm":{
          "shape":"SSECustomerAlgorithm",
          "location":"header",
          "locationName":"x-amz-server-side-encryption-customer-algorithm"
        },
        "SSECustomerKey":{
          "shape":"SSECustomerKey",
          "location":"header",
          "locationName":"x-amz-server-side-encryption-customer-key"
        },
        "SSECustomerKeyMD5":{
          "shape":"SSECustomerKeyMD5",
          "location":"header",
          "locationName":"x-amz-server-side-encryption-customer-key-MD5"
        },
        "CopySourceSSECustomerAlgorithm":{
          "shape":"CopySourceSSECustomerAlgorithm",
          "location":"header",
          "locationName":"x-amz-copy-source-server-side-encryption-customer-algorithm"
        },
        "CopySourceSSECustomerKey":{
          "shape":"CopySourceSSECustomerKey",
          "location":"header",
          "locationName":"x-amz-copy-source-server-side-encryption-customer-key"
        },
        "CopySourceSSECustomerKeyMD5":{
          "shape":"CopySourceSSECustomerKeyMD5",
          "location":"header",
          "locationName":"x-amz-copy-source-server-side-encryption-customer-key-MD5"
        }
      }
    },
    "UploadPartOutput":{
      "type":"structure",
      "members":{
        "ServerSideEncryption":{
          "shape":"ServerSideEncryption",
          "location":"header",
          "locationName":"x-amz-server-side-encryption"
        },
        "ETag":{
          "shape":"ETag",
          "location":"header",
          "locationName":"ETag"
        },
        "SSECustomerAlgorithm":{
          "shape":"SSECustomerAlgorithm",
          "location":"header",
          "locationName":"x-amz-server-side-encryption-customer-algorithm"
        },
        "SSECustomerKeyMD5":{
          "shape":"SSECustomerKeyMD5",
          "location":"header",
          "locationName":"x-amz-server-side-encryption-customer-key-MD5"
        },
        "SSEKMSKeyId":{
          "shape":"SSEKMSKeyId",
          "location":"header",
          "locationName":"x-amz-server-side-encryption-aws-kms-key-id"
        }
      }
    },
    "UploadPartRequest":{
      "type":"structure",
      "required":[
        "Bucket",
        "Key",
        "PartNumber",
        "UploadId"
      ],
      "members":{
        "Body":{
          "shape":"Body",
          "streaming":true
        },
        "Bucket":{
          "shape":"BucketName",
          "location":"uri",
          "locationName":"Bucket"
        },
        "ContentLength":{
          "shape":"ContentLength",
          "location":"header",
          "locationName":"Content-Length"
        },
        "ContentMD5":{
          "shape":"ContentMD5",
          "location":"header",
          "locationName":"Content-MD5"
        },
        "Key":{
          "shape":"ObjectKey",
          "location":"uri",
          "locationName":"Key"
        },
        "PartNumber":{
          "shape":"PartNumber",
          "location":"querystring",
          "locationName":"partNumber"
        },
        "UploadId":{
          "shape":"MultipartUploadId",
          "location":"querystring",
          "locationName":"uploadId"
        },
        "SSECustomerAlgorithm":{
          "shape":"SSECustomerAlgorithm",
          "location":"header",
          "locationName":"x-amz-server-side-encryption-customer-algorithm"
        },
        "SSECustomerKey":{
          "shape":"SSECustomerKey",
          "location":"header",
          "locationName":"x-amz-server-side-encryption-customer-key"
        },
        "SSECustomerKeyMD5":{
          "shape":"SSECustomerKeyMD5",
          "location":"header",
          "locationName":"x-amz-server-side-encryption-customer-key-MD5"
        }
      },
      "payload":"Body"
    },
    "Value":{"type":"string"},
    "VersionIdMarker":{"type":"string"},
    "VersioningConfiguration":{
      "type":"structure",
      "members":{
        "MFADelete":{
          "shape":"MFADelete",
          "locationName":"MfaDelete"
        },
        "Status":{"shape":"BucketVersioningStatus"}
      }
    },
    "WebsiteConfiguration":{
      "type":"structure",
      "members":{
        "ErrorDocument":{"shape":"ErrorDocument"},
        "IndexDocument":{"shape":"IndexDocument"},
        "RedirectAllRequestsTo":{"shape":"RedirectAllRequestsTo"},
        "RoutingRules":{"shape":"RoutingRules"}
      }
    },
    "WebsiteRedirectLocation":{"type":"string"}
  }
}
,
"SES":
{
  "metadata":{
    "apiVersion":"2010-12-01",
    "endpointPrefix":"email",
    "serviceAbbreviation":"Amazon SES",
    "serviceFullName":"Amazon Simple Email Service",
    "signatureVersion":"v4",
    "signingName":"ses",
    "xmlNamespace":"http://ses.amazonaws.com/doc/2010-12-01/",
    "protocol":"query"
  },
  "operations":{
    "DeleteIdentity":{
      "name":"DeleteIdentity",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteIdentityRequest"},
      "output":{
        "shape":"DeleteIdentityResponse",
        "resultWrapper":"DeleteIdentityResult"
      }
    },
    "DeleteVerifiedEmailAddress":{
      "name":"DeleteVerifiedEmailAddress",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteVerifiedEmailAddressRequest"}
    },
    "GetIdentityDkimAttributes":{
      "name":"GetIdentityDkimAttributes",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"GetIdentityDkimAttributesRequest"},
      "output":{
        "shape":"GetIdentityDkimAttributesResponse",
        "resultWrapper":"GetIdentityDkimAttributesResult"
      }
    },
    "GetIdentityNotificationAttributes":{
      "name":"GetIdentityNotificationAttributes",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"GetIdentityNotificationAttributesRequest"},
      "output":{
        "shape":"GetIdentityNotificationAttributesResponse",
        "resultWrapper":"GetIdentityNotificationAttributesResult"
      }
    },
    "GetIdentityVerificationAttributes":{
      "name":"GetIdentityVerificationAttributes",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"GetIdentityVerificationAttributesRequest"},
      "output":{
        "shape":"GetIdentityVerificationAttributesResponse",
        "resultWrapper":"GetIdentityVerificationAttributesResult"
      }
    },
    "GetSendQuota":{
      "name":"GetSendQuota",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "output":{
        "shape":"GetSendQuotaResponse",
        "resultWrapper":"GetSendQuotaResult"
      }
    },
    "GetSendStatistics":{
      "name":"GetSendStatistics",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "output":{
        "shape":"GetSendStatisticsResponse",
        "resultWrapper":"GetSendStatisticsResult"
      }
    },
    "ListIdentities":{
      "name":"ListIdentities",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ListIdentitiesRequest"},
      "output":{
        "shape":"ListIdentitiesResponse",
        "resultWrapper":"ListIdentitiesResult"
      }
    },
    "ListVerifiedEmailAddresses":{
      "name":"ListVerifiedEmailAddresses",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "output":{
        "shape":"ListVerifiedEmailAddressesResponse",
        "resultWrapper":"ListVerifiedEmailAddressesResult"
      }
    },
    "SendEmail":{
      "name":"SendEmail",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"SendEmailRequest"},
      "output":{
        "shape":"SendEmailResponse",
        "resultWrapper":"SendEmailResult"
      },
      "errors":[
        {
          "shape":"MessageRejected",
          "error":{
            "code":"MessageRejected",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "SendRawEmail":{
      "name":"SendRawEmail",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"SendRawEmailRequest"},
      "output":{
        "shape":"SendRawEmailResponse",
        "resultWrapper":"SendRawEmailResult"
      },
      "errors":[
        {
          "shape":"MessageRejected",
          "error":{
            "code":"MessageRejected",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "SetIdentityDkimEnabled":{
      "name":"SetIdentityDkimEnabled",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"SetIdentityDkimEnabledRequest"},
      "output":{
        "shape":"SetIdentityDkimEnabledResponse",
        "resultWrapper":"SetIdentityDkimEnabledResult"
      }
    },
    "SetIdentityFeedbackForwardingEnabled":{
      "name":"SetIdentityFeedbackForwardingEnabled",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"SetIdentityFeedbackForwardingEnabledRequest"},
      "output":{
        "shape":"SetIdentityFeedbackForwardingEnabledResponse",
        "resultWrapper":"SetIdentityFeedbackForwardingEnabledResult"
      }
    },
    "SetIdentityNotificationTopic":{
      "name":"SetIdentityNotificationTopic",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"SetIdentityNotificationTopicRequest"},
      "output":{
        "shape":"SetIdentityNotificationTopicResponse",
        "resultWrapper":"SetIdentityNotificationTopicResult"
      }
    },
    "VerifyDomainDkim":{
      "name":"VerifyDomainDkim",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"VerifyDomainDkimRequest"},
      "output":{
        "shape":"VerifyDomainDkimResponse",
        "resultWrapper":"VerifyDomainDkimResult"
      }
    },
    "VerifyDomainIdentity":{
      "name":"VerifyDomainIdentity",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"VerifyDomainIdentityRequest"},
      "output":{
        "shape":"VerifyDomainIdentityResponse",
        "resultWrapper":"VerifyDomainIdentityResult"
      }
    },
    "VerifyEmailAddress":{
      "name":"VerifyEmailAddress",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"VerifyEmailAddressRequest"}
    },
    "VerifyEmailIdentity":{
      "name":"VerifyEmailIdentity",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"VerifyEmailIdentityRequest"},
      "output":{
        "shape":"VerifyEmailIdentityResponse",
        "resultWrapper":"VerifyEmailIdentityResult"
      }
    }
  },
  "shapes":{
    "Address":{"type":"string"},
    "AddressList":{
      "type":"list",
      "member":{"shape":"Address"}
    },
    "Body":{
      "type":"structure",
      "members":{
        "Text":{"shape":"Content"},
        "Html":{"shape":"Content"}
      }
    },
    "Charset":{"type":"string"},
    "Content":{
      "type":"structure",
      "required":["Data"],
      "members":{
        "Data":{"shape":"MessageData"},
        "Charset":{"shape":"Charset"}
      }
    },
    "Counter":{"type":"long"},
    "DeleteIdentityRequest":{
      "type":"structure",
      "required":["Identity"],
      "members":{
        "Identity":{"shape":"Identity"}
      }
    },
    "DeleteIdentityResponse":{
      "type":"structure",
      "members":{
      }
    },
    "DeleteVerifiedEmailAddressRequest":{
      "type":"structure",
      "required":["EmailAddress"],
      "members":{
        "EmailAddress":{"shape":"Address"}
      }
    },
    "Destination":{
      "type":"structure",
      "members":{
        "ToAddresses":{"shape":"AddressList"},
        "CcAddresses":{"shape":"AddressList"},
        "BccAddresses":{"shape":"AddressList"}
      }
    },
    "DkimAttributes":{
      "type":"map",
      "key":{"shape":"Identity"},
      "value":{"shape":"IdentityDkimAttributes"}
    },
    "Domain":{"type":"string"},
    "Enabled":{"type":"boolean"},
    "GetIdentityDkimAttributesRequest":{
      "type":"structure",
      "required":["Identities"],
      "members":{
        "Identities":{"shape":"IdentityList"}
      }
    },
    "GetIdentityDkimAttributesResponse":{
      "type":"structure",
      "required":["DkimAttributes"],
      "members":{
        "DkimAttributes":{"shape":"DkimAttributes"}
      }
    },
    "GetIdentityNotificationAttributesRequest":{
      "type":"structure",
      "required":["Identities"],
      "members":{
        "Identities":{"shape":"IdentityList"}
      }
    },
    "GetIdentityNotificationAttributesResponse":{
      "type":"structure",
      "required":["NotificationAttributes"],
      "members":{
        "NotificationAttributes":{"shape":"NotificationAttributes"}
      }
    },
    "GetIdentityVerificationAttributesRequest":{
      "type":"structure",
      "required":["Identities"],
      "members":{
        "Identities":{"shape":"IdentityList"}
      }
    },
    "GetIdentityVerificationAttributesResponse":{
      "type":"structure",
      "required":["VerificationAttributes"],
      "members":{
        "VerificationAttributes":{"shape":"VerificationAttributes"}
      }
    },
    "GetSendQuotaResponse":{
      "type":"structure",
      "members":{
        "Max24HourSend":{"shape":"Max24HourSend"},
        "MaxSendRate":{"shape":"MaxSendRate"},
        "SentLast24Hours":{"shape":"SentLast24Hours"}
      }
    },
    "GetSendStatisticsResponse":{
      "type":"structure",
      "members":{
        "SendDataPoints":{"shape":"SendDataPointList"}
      }
    },
    "Identity":{"type":"string"},
    "IdentityDkimAttributes":{
      "type":"structure",
      "required":[
        "DkimEnabled",
        "DkimVerificationStatus"
      ],
      "members":{
        "DkimEnabled":{"shape":"Enabled"},
        "DkimVerificationStatus":{"shape":"VerificationStatus"},
        "DkimTokens":{"shape":"VerificationTokenList"}
      }
    },
    "IdentityList":{
      "type":"list",
      "member":{"shape":"Identity"}
    },
    "IdentityNotificationAttributes":{
      "type":"structure",
      "required":[
        "BounceTopic",
        "ComplaintTopic",
        "DeliveryTopic",
        "ForwardingEnabled"
      ],
      "members":{
        "BounceTopic":{"shape":"NotificationTopic"},
        "ComplaintTopic":{"shape":"NotificationTopic"},
        "DeliveryTopic":{"shape":"NotificationTopic"},
        "ForwardingEnabled":{"shape":"Enabled"}
      }
    },
    "IdentityType":{
      "type":"string",
      "enum":[
        "EmailAddress",
        "Domain"
      ]
    },
    "IdentityVerificationAttributes":{
      "type":"structure",
      "required":["VerificationStatus"],
      "members":{
        "VerificationStatus":{"shape":"VerificationStatus"},
        "VerificationToken":{"shape":"VerificationToken"}
      }
    },
    "ListIdentitiesRequest":{
      "type":"structure",
      "members":{
        "IdentityType":{"shape":"IdentityType"},
        "NextToken":{"shape":"NextToken"},
        "MaxItems":{"shape":"MaxItems"}
      }
    },
    "ListIdentitiesResponse":{
      "type":"structure",
      "required":["Identities"],
      "members":{
        "Identities":{"shape":"IdentityList"},
        "NextToken":{"shape":"NextToken"}
      }
    },
    "ListVerifiedEmailAddressesResponse":{
      "type":"structure",
      "members":{
        "VerifiedEmailAddresses":{"shape":"AddressList"}
      }
    },
    "Max24HourSend":{"type":"double"},
    "MaxItems":{"type":"integer"},
    "MaxSendRate":{"type":"double"},
    "Message":{
      "type":"structure",
      "required":[
        "Subject",
        "Body"
      ],
      "members":{
        "Subject":{"shape":"Content"},
        "Body":{"shape":"Body"}
      }
    },
    "MessageData":{"type":"string"},
    "MessageId":{"type":"string"},
    "MessageRejected":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"MessageRejected",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "NextToken":{"type":"string"},
    "NotificationAttributes":{
      "type":"map",
      "key":{"shape":"Identity"},
      "value":{"shape":"IdentityNotificationAttributes"}
    },
    "NotificationTopic":{"type":"string"},
    "NotificationType":{
      "type":"string",
      "enum":[
        "Bounce",
        "Complaint",
        "Delivery"
      ]
    },
    "RawMessage":{
      "type":"structure",
      "required":["Data"],
      "members":{
        "Data":{"shape":"RawMessageData"}
      }
    },
    "RawMessageData":{"type":"blob"},
    "SendDataPoint":{
      "type":"structure",
      "members":{
        "Timestamp":{"shape":"Timestamp"},
        "DeliveryAttempts":{"shape":"Counter"},
        "Bounces":{"shape":"Counter"},
        "Complaints":{"shape":"Counter"},
        "Rejects":{"shape":"Counter"}
      }
    },
    "SendDataPointList":{
      "type":"list",
      "member":{"shape":"SendDataPoint"}
    },
    "SendEmailRequest":{
      "type":"structure",
      "required":[
        "Source",
        "Destination",
        "Message"
      ],
      "members":{
        "Source":{"shape":"Address"},
        "Destination":{"shape":"Destination"},
        "Message":{"shape":"Message"},
        "ReplyToAddresses":{"shape":"AddressList"},
        "ReturnPath":{"shape":"Address"}
      }
    },
    "SendEmailResponse":{
      "type":"structure",
      "required":["MessageId"],
      "members":{
        "MessageId":{"shape":"MessageId"}
      }
    },
    "SendRawEmailRequest":{
      "type":"structure",
      "required":["RawMessage"],
      "members":{
        "Source":{"shape":"Address"},
        "Destinations":{"shape":"AddressList"},
        "RawMessage":{"shape":"RawMessage"}
      }
    },
    "SendRawEmailResponse":{
      "type":"structure",
      "required":["MessageId"],
      "members":{
        "MessageId":{"shape":"MessageId"}
      }
    },
    "SentLast24Hours":{"type":"double"},
    "SetIdentityDkimEnabledRequest":{
      "type":"structure",
      "required":[
        "Identity",
        "DkimEnabled"
      ],
      "members":{
        "Identity":{"shape":"Identity"},
        "DkimEnabled":{"shape":"Enabled"}
      }
    },
    "SetIdentityDkimEnabledResponse":{
      "type":"structure",
      "members":{
      }
    },
    "SetIdentityFeedbackForwardingEnabledRequest":{
      "type":"structure",
      "required":[
        "Identity",
        "ForwardingEnabled"
      ],
      "members":{
        "Identity":{"shape":"Identity"},
        "ForwardingEnabled":{"shape":"Enabled"}
      }
    },
    "SetIdentityFeedbackForwardingEnabledResponse":{
      "type":"structure",
      "members":{
      }
    },
    "SetIdentityNotificationTopicRequest":{
      "type":"structure",
      "required":[
        "Identity",
        "NotificationType"
      ],
      "members":{
        "Identity":{"shape":"Identity"},
        "NotificationType":{"shape":"NotificationType"},
        "SnsTopic":{"shape":"NotificationTopic"}
      }
    },
    "SetIdentityNotificationTopicResponse":{
      "type":"structure",
      "members":{
      }
    },
    "Timestamp":{"type":"timestamp"},
    "VerificationAttributes":{
      "type":"map",
      "key":{"shape":"Identity"},
      "value":{"shape":"IdentityVerificationAttributes"}
    },
    "VerificationStatus":{
      "type":"string",
      "enum":[
        "Pending",
        "Success",
        "Failed",
        "TemporaryFailure",
        "NotStarted"
      ]
    },
    "VerificationToken":{"type":"string"},
    "VerificationTokenList":{
      "type":"list",
      "member":{"shape":"VerificationToken"}
    },
    "VerifyDomainDkimRequest":{
      "type":"structure",
      "required":["Domain"],
      "members":{
        "Domain":{"shape":"Domain"}
      }
    },
    "VerifyDomainDkimResponse":{
      "type":"structure",
      "required":["DkimTokens"],
      "members":{
        "DkimTokens":{"shape":"VerificationTokenList"}
      }
    },
    "VerifyDomainIdentityRequest":{
      "type":"structure",
      "required":["Domain"],
      "members":{
        "Domain":{"shape":"Domain"}
      }
    },
    "VerifyDomainIdentityResponse":{
      "type":"structure",
      "required":["VerificationToken"],
      "members":{
        "VerificationToken":{"shape":"VerificationToken"}
      }
    },
    "VerifyEmailAddressRequest":{
      "type":"structure",
      "required":["EmailAddress"],
      "members":{
        "EmailAddress":{"shape":"Address"}
      }
    },
    "VerifyEmailIdentityRequest":{
      "type":"structure",
      "required":["EmailAddress"],
      "members":{
        "EmailAddress":{"shape":"Address"}
      }
    },
    "VerifyEmailIdentityResponse":{
      "type":"structure",
      "members":{
      }
    }
  }
}
,
"SimpleDB":
{
  "metadata":{
    "apiVersion":"2009-04-15",
    "endpointPrefix":"sdb",
    "serviceFullName":"Amazon SimpleDB",
    "signatureVersion":"v2",
    "xmlNamespace":"http://sdb.amazonaws.com/doc/2009-04-15/",
    "protocol":"query"
  },
  "operations":{
    "BatchDeleteAttributes":{
      "name":"BatchDeleteAttributes",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"BatchDeleteAttributesRequest"}
    },
    "BatchPutAttributes":{
      "name":"BatchPutAttributes",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"BatchPutAttributesRequest"},
      "errors":[
        {
          "shape":"DuplicateItemName",
          "error":{
            "code":"DuplicateItemName",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidParameterValue",
          "error":{
            "code":"InvalidParameterValue",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"MissingParameter",
          "error":{
            "code":"MissingParameter",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"NoSuchDomain",
          "error":{
            "code":"NoSuchDomain",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"NumberItemAttributesExceeded",
          "error":{
            "code":"NumberItemAttributesExceeded",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"NumberDomainAttributesExceeded",
          "error":{
            "code":"NumberDomainAttributesExceeded",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"NumberDomainBytesExceeded",
          "error":{
            "code":"NumberDomainBytesExceeded",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"NumberSubmittedItemsExceeded",
          "error":{
            "code":"NumberSubmittedItemsExceeded",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"NumberSubmittedAttributesExceeded",
          "error":{
            "code":"NumberSubmittedAttributesExceeded",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "CreateDomain":{
      "name":"CreateDomain",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateDomainRequest"},
      "errors":[
        {
          "shape":"InvalidParameterValue",
          "error":{
            "code":"InvalidParameterValue",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"MissingParameter",
          "error":{
            "code":"MissingParameter",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"NumberDomainsExceeded",
          "error":{
            "code":"NumberDomainsExceeded",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DeleteAttributes":{
      "name":"DeleteAttributes",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteAttributesRequest"},
      "errors":[
        {
          "shape":"InvalidParameterValue",
          "error":{
            "code":"InvalidParameterValue",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"MissingParameter",
          "error":{
            "code":"MissingParameter",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"NoSuchDomain",
          "error":{
            "code":"NoSuchDomain",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"AttributeDoesNotExist",
          "error":{
            "code":"AttributeDoesNotExist",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DeleteDomain":{
      "name":"DeleteDomain",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteDomainRequest"},
      "errors":[
        {
          "shape":"MissingParameter",
          "error":{
            "code":"MissingParameter",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DomainMetadata":{
      "name":"DomainMetadata",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DomainMetadataRequest"},
      "output":{
        "shape":"DomainMetadataResult",
        "resultWrapper":"DomainMetadataResult"
      },
      "errors":[
        {
          "shape":"MissingParameter",
          "error":{
            "code":"MissingParameter",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"NoSuchDomain",
          "error":{
            "code":"NoSuchDomain",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "GetAttributes":{
      "name":"GetAttributes",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"GetAttributesRequest"},
      "output":{
        "shape":"GetAttributesResult",
        "resultWrapper":"GetAttributesResult"
      },
      "errors":[
        {
          "shape":"InvalidParameterValue",
          "error":{
            "code":"InvalidParameterValue",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"MissingParameter",
          "error":{
            "code":"MissingParameter",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"NoSuchDomain",
          "error":{
            "code":"NoSuchDomain",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "ListDomains":{
      "name":"ListDomains",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ListDomainsRequest"},
      "output":{
        "shape":"ListDomainsResult",
        "resultWrapper":"ListDomainsResult"
      },
      "errors":[
        {
          "shape":"InvalidParameterValue",
          "error":{
            "code":"InvalidParameterValue",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidNextToken",
          "error":{
            "code":"InvalidNextToken",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "PutAttributes":{
      "name":"PutAttributes",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"PutAttributesRequest"},
      "errors":[
        {
          "shape":"InvalidParameterValue",
          "error":{
            "code":"InvalidParameterValue",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"MissingParameter",
          "error":{
            "code":"MissingParameter",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"NoSuchDomain",
          "error":{
            "code":"NoSuchDomain",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"NumberDomainAttributesExceeded",
          "error":{
            "code":"NumberDomainAttributesExceeded",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"NumberDomainBytesExceeded",
          "error":{
            "code":"NumberDomainBytesExceeded",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"NumberItemAttributesExceeded",
          "error":{
            "code":"NumberItemAttributesExceeded",
            "httpStatusCode":409,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"AttributeDoesNotExist",
          "error":{
            "code":"AttributeDoesNotExist",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "Select":{
      "name":"Select",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"SelectRequest"},
      "output":{
        "shape":"SelectResult",
        "resultWrapper":"SelectResult"
      },
      "errors":[
        {
          "shape":"InvalidParameterValue",
          "error":{
            "code":"InvalidParameterValue",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidNextToken",
          "error":{
            "code":"InvalidNextToken",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidNumberPredicates",
          "error":{
            "code":"InvalidNumberPredicates",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidNumberValueTests",
          "error":{
            "code":"InvalidNumberValueTests",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidQueryExpression",
          "error":{
            "code":"InvalidQueryExpression",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"MissingParameter",
          "error":{
            "code":"MissingParameter",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"NoSuchDomain",
          "error":{
            "code":"NoSuchDomain",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"RequestTimeout",
          "error":{
            "code":"RequestTimeout",
            "httpStatusCode":408,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"TooManyRequestedAttributes",
          "error":{
            "code":"TooManyRequestedAttributes",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    }
  },
  "shapes":{
    "Attribute":{
      "type":"structure",
      "required":[
        "Name",
        "Value"
      ],
      "members":{
        "Name":{"shape":"String"},
        "AlternateNameEncoding":{"shape":"String"},
        "Value":{"shape":"String"},
        "AlternateValueEncoding":{"shape":"String"}
      }
    },
    "AttributeDoesNotExist":{
      "type":"structure",
      "members":{
        "BoxUsage":{"shape":"Float"}
      },
      "error":{
        "code":"AttributeDoesNotExist",
        "httpStatusCode":404,
        "senderFault":true
      },
      "exception":true
    },
    "AttributeList":{
      "type":"list",
      "member":{
        "shape":"Attribute",
        "locationName":"Attribute"
      },
      "flattened":true
    },
    "AttributeNameList":{
      "type":"list",
      "member":{
        "shape":"String",
        "locationName":"AttributeName"
      },
      "flattened":true
    },
    "BatchDeleteAttributesRequest":{
      "type":"structure",
      "required":[
        "DomainName",
        "Items"
      ],
      "members":{
        "DomainName":{"shape":"String"},
        "Items":{"shape":"DeletableItemList"}
      }
    },
    "BatchPutAttributesRequest":{
      "type":"structure",
      "required":[
        "DomainName",
        "Items"
      ],
      "members":{
        "DomainName":{"shape":"String"},
        "Items":{"shape":"ReplaceableItemList"}
      }
    },
    "Boolean":{"type":"boolean"},
    "CreateDomainRequest":{
      "type":"structure",
      "required":["DomainName"],
      "members":{
        "DomainName":{"shape":"String"}
      }
    },
    "DeletableItem":{
      "type":"structure",
      "required":["Name"],
      "members":{
        "Name":{
          "shape":"String",
          "locationName":"ItemName"
        },
        "Attributes":{"shape":"AttributeList"}
      }
    },
    "DeletableItemList":{
      "type":"list",
      "member":{
        "shape":"DeletableItem",
        "locationName":"Item"
      },
      "flattened":true
    },
    "DeleteAttributesRequest":{
      "type":"structure",
      "required":[
        "DomainName",
        "ItemName"
      ],
      "members":{
        "DomainName":{"shape":"String"},
        "ItemName":{"shape":"String"},
        "Attributes":{"shape":"AttributeList"},
        "Expected":{"shape":"UpdateCondition"}
      }
    },
    "DeleteDomainRequest":{
      "type":"structure",
      "required":["DomainName"],
      "members":{
        "DomainName":{"shape":"String"}
      }
    },
    "DomainMetadataRequest":{
      "type":"structure",
      "required":["DomainName"],
      "members":{
        "DomainName":{"shape":"String"}
      }
    },
    "DomainMetadataResult":{
      "type":"structure",
      "members":{
        "ItemCount":{"shape":"Integer"},
        "ItemNamesSizeBytes":{"shape":"Long"},
        "AttributeNameCount":{"shape":"Integer"},
        "AttributeNamesSizeBytes":{"shape":"Long"},
        "AttributeValueCount":{"shape":"Integer"},
        "AttributeValuesSizeBytes":{"shape":"Long"},
        "Timestamp":{"shape":"Integer"}
      }
    },
    "DomainNameList":{
      "type":"list",
      "member":{
        "shape":"String",
        "locationName":"DomainName"
      },
      "flattened":true
    },
    "DuplicateItemName":{
      "type":"structure",
      "members":{
        "BoxUsage":{"shape":"Float"}
      },
      "error":{
        "code":"DuplicateItemName",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "Float":{"type":"float"},
    "GetAttributesRequest":{
      "type":"structure",
      "required":[
        "DomainName",
        "ItemName"
      ],
      "members":{
        "DomainName":{"shape":"String"},
        "ItemName":{"shape":"String"},
        "AttributeNames":{"shape":"AttributeNameList"},
        "ConsistentRead":{"shape":"Boolean"}
      }
    },
    "GetAttributesResult":{
      "type":"structure",
      "members":{
        "Attributes":{"shape":"AttributeList"}
      }
    },
    "Integer":{"type":"integer"},
    "InvalidNextToken":{
      "type":"structure",
      "members":{
        "BoxUsage":{"shape":"Float"}
      },
      "error":{
        "code":"InvalidNextToken",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "InvalidNumberPredicates":{
      "type":"structure",
      "members":{
        "BoxUsage":{"shape":"Float"}
      },
      "error":{
        "code":"InvalidNumberPredicates",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "InvalidNumberValueTests":{
      "type":"structure",
      "members":{
        "BoxUsage":{"shape":"Float"}
      },
      "error":{
        "code":"InvalidNumberValueTests",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "InvalidParameterValue":{
      "type":"structure",
      "members":{
        "BoxUsage":{"shape":"Float"}
      },
      "error":{
        "code":"InvalidParameterValue",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "InvalidQueryExpression":{
      "type":"structure",
      "members":{
        "BoxUsage":{"shape":"Float"}
      },
      "error":{
        "code":"InvalidQueryExpression",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "Item":{
      "type":"structure",
      "required":[
        "Name",
        "Attributes"
      ],
      "members":{
        "Name":{"shape":"String"},
        "AlternateNameEncoding":{"shape":"String"},
        "Attributes":{"shape":"AttributeList"}
      }
    },
    "ItemList":{
      "type":"list",
      "member":{
        "shape":"Item",
        "locationName":"Item"
      },
      "flattened":true
    },
    "ListDomainsRequest":{
      "type":"structure",
      "members":{
        "MaxNumberOfDomains":{"shape":"Integer"},
        "NextToken":{"shape":"String"}
      }
    },
    "ListDomainsResult":{
      "type":"structure",
      "members":{
        "DomainNames":{"shape":"DomainNameList"},
        "NextToken":{"shape":"String"}
      }
    },
    "Long":{"type":"long"},
    "MissingParameter":{
      "type":"structure",
      "members":{
        "BoxUsage":{"shape":"Float"}
      },
      "error":{
        "code":"MissingParameter",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "NoSuchDomain":{
      "type":"structure",
      "members":{
        "BoxUsage":{"shape":"Float"}
      },
      "error":{
        "code":"NoSuchDomain",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "NumberDomainAttributesExceeded":{
      "type":"structure",
      "members":{
        "BoxUsage":{"shape":"Float"}
      },
      "error":{
        "code":"NumberDomainAttributesExceeded",
        "httpStatusCode":409,
        "senderFault":true
      },
      "exception":true
    },
    "NumberDomainBytesExceeded":{
      "type":"structure",
      "members":{
        "BoxUsage":{"shape":"Float"}
      },
      "error":{
        "code":"NumberDomainBytesExceeded",
        "httpStatusCode":409,
        "senderFault":true
      },
      "exception":true
    },
    "NumberDomainsExceeded":{
      "type":"structure",
      "members":{
        "BoxUsage":{"shape":"Float"}
      },
      "error":{
        "code":"NumberDomainsExceeded",
        "httpStatusCode":409,
        "senderFault":true
      },
      "exception":true
    },
    "NumberItemAttributesExceeded":{
      "type":"structure",
      "members":{
        "BoxUsage":{"shape":"Float"}
      },
      "error":{
        "code":"NumberItemAttributesExceeded",
        "httpStatusCode":409,
        "senderFault":true
      },
      "exception":true
    },
    "NumberSubmittedAttributesExceeded":{
      "type":"structure",
      "members":{
        "BoxUsage":{"shape":"Float"}
      },
      "error":{
        "code":"NumberSubmittedAttributesExceeded",
        "httpStatusCode":409,
        "senderFault":true
      },
      "exception":true
    },
    "NumberSubmittedItemsExceeded":{
      "type":"structure",
      "members":{
        "BoxUsage":{"shape":"Float"}
      },
      "error":{
        "code":"NumberSubmittedItemsExceeded",
        "httpStatusCode":409,
        "senderFault":true
      },
      "exception":true
    },
    "PutAttributesRequest":{
      "type":"structure",
      "required":[
        "DomainName",
        "ItemName",
        "Attributes"
      ],
      "members":{
        "DomainName":{"shape":"String"},
        "ItemName":{"shape":"String"},
        "Attributes":{"shape":"ReplaceableAttributeList"},
        "Expected":{"shape":"UpdateCondition"}
      }
    },
    "ReplaceableAttribute":{
      "type":"structure",
      "required":[
        "Name",
        "Value"
      ],
      "members":{
        "Name":{"shape":"String"},
        "Value":{"shape":"String"},
        "Replace":{"shape":"Boolean"}
      }
    },
    "ReplaceableAttributeList":{
      "type":"list",
      "member":{
        "shape":"ReplaceableAttribute",
        "locationName":"Attribute"
      },
      "flattened":true
    },
    "ReplaceableItem":{
      "type":"structure",
      "required":[
        "Name",
        "Attributes"
      ],
      "members":{
        "Name":{
          "shape":"String",
          "locationName":"ItemName"
        },
        "Attributes":{"shape":"ReplaceableAttributeList"}
      }
    },
    "ReplaceableItemList":{
      "type":"list",
      "member":{
        "shape":"ReplaceableItem",
        "locationName":"Item"
      },
      "flattened":true
    },
    "RequestTimeout":{
      "type":"structure",
      "members":{
        "BoxUsage":{"shape":"Float"}
      },
      "error":{
        "code":"RequestTimeout",
        "httpStatusCode":408,
        "senderFault":true
      },
      "exception":true
    },
    "SelectRequest":{
      "type":"structure",
      "required":["SelectExpression"],
      "members":{
        "SelectExpression":{"shape":"String"},
        "NextToken":{"shape":"String"},
        "ConsistentRead":{"shape":"Boolean"}
      }
    },
    "SelectResult":{
      "type":"structure",
      "members":{
        "Items":{"shape":"ItemList"},
        "NextToken":{"shape":"String"}
      }
    },
    "String":{"type":"string"},
    "TooManyRequestedAttributes":{
      "type":"structure",
      "members":{
        "BoxUsage":{"shape":"Float"}
      },
      "error":{
        "code":"TooManyRequestedAttributes",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "UpdateCondition":{
      "type":"structure",
      "members":{
        "Name":{"shape":"String"},
        "Value":{"shape":"String"},
        "Exists":{"shape":"Boolean"}
      }
    }
  }
}
,
"SNS":
{
  "metadata":{
    "apiVersion":"2010-03-31",
    "endpointPrefix":"sns",
    "serviceAbbreviation":"Amazon SNS",
    "serviceFullName":"Amazon Simple Notification Service",
    "signatureVersion":"v4",
    "xmlNamespace":"http://sns.amazonaws.com/doc/2010-03-31/",
    "protocol":"query"
  },
  "operations":{
    "AddPermission":{
      "name":"AddPermission",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"AddPermissionInput"},
      "errors":[
        {
          "shape":"InvalidParameterException",
          "error":{
            "code":"InvalidParameter",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InternalErrorException",
          "error":{
            "code":"InternalError",
            "httpStatusCode":500
          },
          "exception":true,
          "fault":true
        },
        {
          "shape":"AuthorizationErrorException",
          "error":{
            "code":"AuthorizationError",
            "httpStatusCode":403,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"NotFoundException",
          "error":{
            "code":"NotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "ConfirmSubscription":{
      "name":"ConfirmSubscription",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ConfirmSubscriptionInput"},
      "output":{
        "shape":"ConfirmSubscriptionResponse",
        "resultWrapper":"ConfirmSubscriptionResult"
      },
      "errors":[
        {
          "shape":"SubscriptionLimitExceededException",
          "error":{
            "code":"SubscriptionLimitExceeded",
            "httpStatusCode":403,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidParameterException",
          "error":{
            "code":"InvalidParameter",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"NotFoundException",
          "error":{
            "code":"NotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InternalErrorException",
          "error":{
            "code":"InternalError",
            "httpStatusCode":500
          },
          "exception":true,
          "fault":true
        },
        {
          "shape":"AuthorizationErrorException",
          "error":{
            "code":"AuthorizationError",
            "httpStatusCode":403,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "CreatePlatformApplication":{
      "name":"CreatePlatformApplication",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreatePlatformApplicationInput"},
      "output":{
        "shape":"CreatePlatformApplicationResponse",
        "resultWrapper":"CreatePlatformApplicationResult"
      },
      "errors":[
        {
          "shape":"InvalidParameterException",
          "error":{
            "code":"InvalidParameter",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InternalErrorException",
          "error":{
            "code":"InternalError",
            "httpStatusCode":500
          },
          "exception":true,
          "fault":true
        },
        {
          "shape":"AuthorizationErrorException",
          "error":{
            "code":"AuthorizationError",
            "httpStatusCode":403,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "CreatePlatformEndpoint":{
      "name":"CreatePlatformEndpoint",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreatePlatformEndpointInput"},
      "output":{
        "shape":"CreateEndpointResponse",
        "resultWrapper":"CreatePlatformEndpointResult"
      },
      "errors":[
        {
          "shape":"InvalidParameterException",
          "error":{
            "code":"InvalidParameter",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InternalErrorException",
          "error":{
            "code":"InternalError",
            "httpStatusCode":500
          },
          "exception":true,
          "fault":true
        },
        {
          "shape":"AuthorizationErrorException",
          "error":{
            "code":"AuthorizationError",
            "httpStatusCode":403,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"NotFoundException",
          "error":{
            "code":"NotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "CreateTopic":{
      "name":"CreateTopic",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateTopicInput"},
      "output":{
        "shape":"CreateTopicResponse",
        "resultWrapper":"CreateTopicResult"
      },
      "errors":[
        {
          "shape":"InvalidParameterException",
          "error":{
            "code":"InvalidParameter",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"TopicLimitExceededException",
          "error":{
            "code":"TopicLimitExceeded",
            "httpStatusCode":403,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InternalErrorException",
          "error":{
            "code":"InternalError",
            "httpStatusCode":500
          },
          "exception":true,
          "fault":true
        },
        {
          "shape":"AuthorizationErrorException",
          "error":{
            "code":"AuthorizationError",
            "httpStatusCode":403,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DeleteEndpoint":{
      "name":"DeleteEndpoint",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteEndpointInput"},
      "errors":[
        {
          "shape":"InvalidParameterException",
          "error":{
            "code":"InvalidParameter",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InternalErrorException",
          "error":{
            "code":"InternalError",
            "httpStatusCode":500
          },
          "exception":true,
          "fault":true
        },
        {
          "shape":"AuthorizationErrorException",
          "error":{
            "code":"AuthorizationError",
            "httpStatusCode":403,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DeletePlatformApplication":{
      "name":"DeletePlatformApplication",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeletePlatformApplicationInput"},
      "errors":[
        {
          "shape":"InvalidParameterException",
          "error":{
            "code":"InvalidParameter",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InternalErrorException",
          "error":{
            "code":"InternalError",
            "httpStatusCode":500
          },
          "exception":true,
          "fault":true
        },
        {
          "shape":"AuthorizationErrorException",
          "error":{
            "code":"AuthorizationError",
            "httpStatusCode":403,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DeleteTopic":{
      "name":"DeleteTopic",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteTopicInput"},
      "errors":[
        {
          "shape":"InvalidParameterException",
          "error":{
            "code":"InvalidParameter",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InternalErrorException",
          "error":{
            "code":"InternalError",
            "httpStatusCode":500
          },
          "exception":true,
          "fault":true
        },
        {
          "shape":"AuthorizationErrorException",
          "error":{
            "code":"AuthorizationError",
            "httpStatusCode":403,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"NotFoundException",
          "error":{
            "code":"NotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "GetEndpointAttributes":{
      "name":"GetEndpointAttributes",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"GetEndpointAttributesInput"},
      "output":{
        "shape":"GetEndpointAttributesResponse",
        "resultWrapper":"GetEndpointAttributesResult"
      },
      "errors":[
        {
          "shape":"InvalidParameterException",
          "error":{
            "code":"InvalidParameter",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InternalErrorException",
          "error":{
            "code":"InternalError",
            "httpStatusCode":500
          },
          "exception":true,
          "fault":true
        },
        {
          "shape":"AuthorizationErrorException",
          "error":{
            "code":"AuthorizationError",
            "httpStatusCode":403,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"NotFoundException",
          "error":{
            "code":"NotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "GetPlatformApplicationAttributes":{
      "name":"GetPlatformApplicationAttributes",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"GetPlatformApplicationAttributesInput"},
      "output":{
        "shape":"GetPlatformApplicationAttributesResponse",
        "resultWrapper":"GetPlatformApplicationAttributesResult"
      },
      "errors":[
        {
          "shape":"InvalidParameterException",
          "error":{
            "code":"InvalidParameter",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InternalErrorException",
          "error":{
            "code":"InternalError",
            "httpStatusCode":500
          },
          "exception":true,
          "fault":true
        },
        {
          "shape":"AuthorizationErrorException",
          "error":{
            "code":"AuthorizationError",
            "httpStatusCode":403,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"NotFoundException",
          "error":{
            "code":"NotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "GetSubscriptionAttributes":{
      "name":"GetSubscriptionAttributes",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"GetSubscriptionAttributesInput"},
      "output":{
        "shape":"GetSubscriptionAttributesResponse",
        "resultWrapper":"GetSubscriptionAttributesResult"
      },
      "errors":[
        {
          "shape":"InvalidParameterException",
          "error":{
            "code":"InvalidParameter",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InternalErrorException",
          "error":{
            "code":"InternalError",
            "httpStatusCode":500
          },
          "exception":true,
          "fault":true
        },
        {
          "shape":"NotFoundException",
          "error":{
            "code":"NotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"AuthorizationErrorException",
          "error":{
            "code":"AuthorizationError",
            "httpStatusCode":403,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "GetTopicAttributes":{
      "name":"GetTopicAttributes",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"GetTopicAttributesInput"},
      "output":{
        "shape":"GetTopicAttributesResponse",
        "resultWrapper":"GetTopicAttributesResult"
      },
      "errors":[
        {
          "shape":"InvalidParameterException",
          "error":{
            "code":"InvalidParameter",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InternalErrorException",
          "error":{
            "code":"InternalError",
            "httpStatusCode":500
          },
          "exception":true,
          "fault":true
        },
        {
          "shape":"NotFoundException",
          "error":{
            "code":"NotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"AuthorizationErrorException",
          "error":{
            "code":"AuthorizationError",
            "httpStatusCode":403,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "ListEndpointsByPlatformApplication":{
      "name":"ListEndpointsByPlatformApplication",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ListEndpointsByPlatformApplicationInput"},
      "output":{
        "shape":"ListEndpointsByPlatformApplicationResponse",
        "resultWrapper":"ListEndpointsByPlatformApplicationResult"
      },
      "errors":[
        {
          "shape":"InvalidParameterException",
          "error":{
            "code":"InvalidParameter",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InternalErrorException",
          "error":{
            "code":"InternalError",
            "httpStatusCode":500
          },
          "exception":true,
          "fault":true
        },
        {
          "shape":"AuthorizationErrorException",
          "error":{
            "code":"AuthorizationError",
            "httpStatusCode":403,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"NotFoundException",
          "error":{
            "code":"NotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "ListPlatformApplications":{
      "name":"ListPlatformApplications",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ListPlatformApplicationsInput"},
      "output":{
        "shape":"ListPlatformApplicationsResponse",
        "resultWrapper":"ListPlatformApplicationsResult"
      },
      "errors":[
        {
          "shape":"InvalidParameterException",
          "error":{
            "code":"InvalidParameter",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InternalErrorException",
          "error":{
            "code":"InternalError",
            "httpStatusCode":500
          },
          "exception":true,
          "fault":true
        },
        {
          "shape":"AuthorizationErrorException",
          "error":{
            "code":"AuthorizationError",
            "httpStatusCode":403,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "ListSubscriptions":{
      "name":"ListSubscriptions",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ListSubscriptionsInput"},
      "output":{
        "shape":"ListSubscriptionsResponse",
        "resultWrapper":"ListSubscriptionsResult"
      },
      "errors":[
        {
          "shape":"InvalidParameterException",
          "error":{
            "code":"InvalidParameter",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InternalErrorException",
          "error":{
            "code":"InternalError",
            "httpStatusCode":500
          },
          "exception":true,
          "fault":true
        },
        {
          "shape":"AuthorizationErrorException",
          "error":{
            "code":"AuthorizationError",
            "httpStatusCode":403,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "ListSubscriptionsByTopic":{
      "name":"ListSubscriptionsByTopic",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ListSubscriptionsByTopicInput"},
      "output":{
        "shape":"ListSubscriptionsByTopicResponse",
        "resultWrapper":"ListSubscriptionsByTopicResult"
      },
      "errors":[
        {
          "shape":"InvalidParameterException",
          "error":{
            "code":"InvalidParameter",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InternalErrorException",
          "error":{
            "code":"InternalError",
            "httpStatusCode":500
          },
          "exception":true,
          "fault":true
        },
        {
          "shape":"NotFoundException",
          "error":{
            "code":"NotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"AuthorizationErrorException",
          "error":{
            "code":"AuthorizationError",
            "httpStatusCode":403,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "ListTopics":{
      "name":"ListTopics",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ListTopicsInput"},
      "output":{
        "shape":"ListTopicsResponse",
        "resultWrapper":"ListTopicsResult"
      },
      "errors":[
        {
          "shape":"InvalidParameterException",
          "error":{
            "code":"InvalidParameter",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InternalErrorException",
          "error":{
            "code":"InternalError",
            "httpStatusCode":500
          },
          "exception":true,
          "fault":true
        },
        {
          "shape":"AuthorizationErrorException",
          "error":{
            "code":"AuthorizationError",
            "httpStatusCode":403,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "Publish":{
      "name":"Publish",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"PublishInput"},
      "output":{
        "shape":"PublishResponse",
        "resultWrapper":"PublishResult"
      },
      "errors":[
        {
          "shape":"InvalidParameterException",
          "error":{
            "code":"InvalidParameter",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidParameterValueException",
          "error":{
            "code":"ParameterValueInvalid",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InternalErrorException",
          "error":{
            "code":"InternalError",
            "httpStatusCode":500
          },
          "exception":true,
          "fault":true
        },
        {
          "shape":"NotFoundException",
          "error":{
            "code":"NotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"EndpointDisabledException",
          "error":{
            "code":"EndpointDisabled",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"PlatformApplicationDisabledException",
          "error":{
            "code":"PlatformApplicationDisabled",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"AuthorizationErrorException",
          "error":{
            "code":"AuthorizationError",
            "httpStatusCode":403,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "RemovePermission":{
      "name":"RemovePermission",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"RemovePermissionInput"},
      "errors":[
        {
          "shape":"InvalidParameterException",
          "error":{
            "code":"InvalidParameter",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InternalErrorException",
          "error":{
            "code":"InternalError",
            "httpStatusCode":500
          },
          "exception":true,
          "fault":true
        },
        {
          "shape":"AuthorizationErrorException",
          "error":{
            "code":"AuthorizationError",
            "httpStatusCode":403,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"NotFoundException",
          "error":{
            "code":"NotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "SetEndpointAttributes":{
      "name":"SetEndpointAttributes",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"SetEndpointAttributesInput"},
      "errors":[
        {
          "shape":"InvalidParameterException",
          "error":{
            "code":"InvalidParameter",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InternalErrorException",
          "error":{
            "code":"InternalError",
            "httpStatusCode":500
          },
          "exception":true,
          "fault":true
        },
        {
          "shape":"AuthorizationErrorException",
          "error":{
            "code":"AuthorizationError",
            "httpStatusCode":403,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"NotFoundException",
          "error":{
            "code":"NotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "SetPlatformApplicationAttributes":{
      "name":"SetPlatformApplicationAttributes",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"SetPlatformApplicationAttributesInput"},
      "errors":[
        {
          "shape":"InvalidParameterException",
          "error":{
            "code":"InvalidParameter",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InternalErrorException",
          "error":{
            "code":"InternalError",
            "httpStatusCode":500
          },
          "exception":true,
          "fault":true
        },
        {
          "shape":"AuthorizationErrorException",
          "error":{
            "code":"AuthorizationError",
            "httpStatusCode":403,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"NotFoundException",
          "error":{
            "code":"NotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "SetSubscriptionAttributes":{
      "name":"SetSubscriptionAttributes",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"SetSubscriptionAttributesInput"},
      "errors":[
        {
          "shape":"InvalidParameterException",
          "error":{
            "code":"InvalidParameter",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InternalErrorException",
          "error":{
            "code":"InternalError",
            "httpStatusCode":500
          },
          "exception":true,
          "fault":true
        },
        {
          "shape":"NotFoundException",
          "error":{
            "code":"NotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"AuthorizationErrorException",
          "error":{
            "code":"AuthorizationError",
            "httpStatusCode":403,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "SetTopicAttributes":{
      "name":"SetTopicAttributes",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"SetTopicAttributesInput"},
      "errors":[
        {
          "shape":"InvalidParameterException",
          "error":{
            "code":"InvalidParameter",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InternalErrorException",
          "error":{
            "code":"InternalError",
            "httpStatusCode":500
          },
          "exception":true,
          "fault":true
        },
        {
          "shape":"NotFoundException",
          "error":{
            "code":"NotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"AuthorizationErrorException",
          "error":{
            "code":"AuthorizationError",
            "httpStatusCode":403,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "Subscribe":{
      "name":"Subscribe",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"SubscribeInput"},
      "output":{
        "shape":"SubscribeResponse",
        "resultWrapper":"SubscribeResult"
      },
      "errors":[
        {
          "shape":"SubscriptionLimitExceededException",
          "error":{
            "code":"SubscriptionLimitExceeded",
            "httpStatusCode":403,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidParameterException",
          "error":{
            "code":"InvalidParameter",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InternalErrorException",
          "error":{
            "code":"InternalError",
            "httpStatusCode":500
          },
          "exception":true,
          "fault":true
        },
        {
          "shape":"NotFoundException",
          "error":{
            "code":"NotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"AuthorizationErrorException",
          "error":{
            "code":"AuthorizationError",
            "httpStatusCode":403,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "Unsubscribe":{
      "name":"Unsubscribe",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"UnsubscribeInput"},
      "errors":[
        {
          "shape":"InvalidParameterException",
          "error":{
            "code":"InvalidParameter",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InternalErrorException",
          "error":{
            "code":"InternalError",
            "httpStatusCode":500
          },
          "exception":true,
          "fault":true
        },
        {
          "shape":"AuthorizationErrorException",
          "error":{
            "code":"AuthorizationError",
            "httpStatusCode":403,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"NotFoundException",
          "error":{
            "code":"NotFound",
            "httpStatusCode":404,
            "senderFault":true
          },
          "exception":true
        }
      ]
    }
  },
  "shapes":{
    "ActionsList":{
      "type":"list",
      "member":{"shape":"action"}
    },
    "AddPermissionInput":{
      "type":"structure",
      "required":[
        "TopicArn",
        "Label",
        "AWSAccountId",
        "ActionName"
      ],
      "members":{
        "TopicArn":{"shape":"topicARN"},
        "Label":{"shape":"label"},
        "AWSAccountId":{"shape":"DelegatesList"},
        "ActionName":{"shape":"ActionsList"}
      }
    },
    "AuthorizationErrorException":{
      "type":"structure",
      "members":{
        "message":{"shape":"string"}
      },
      "error":{
        "code":"AuthorizationError",
        "httpStatusCode":403,
        "senderFault":true
      },
      "exception":true
    },
    "Binary":{"type":"blob"},
    "ConfirmSubscriptionInput":{
      "type":"structure",
      "required":[
        "TopicArn",
        "Token"
      ],
      "members":{
        "TopicArn":{"shape":"topicARN"},
        "Token":{"shape":"token"},
        "AuthenticateOnUnsubscribe":{"shape":"authenticateOnUnsubscribe"}
      }
    },
    "ConfirmSubscriptionResponse":{
      "type":"structure",
      "members":{
        "SubscriptionArn":{"shape":"subscriptionARN"}
      }
    },
    "CreateEndpointResponse":{
      "type":"structure",
      "members":{
        "EndpointArn":{"shape":"String"}
      }
    },
    "CreatePlatformApplicationInput":{
      "type":"structure",
      "required":[
        "Name",
        "Platform",
        "Attributes"
      ],
      "members":{
        "Name":{"shape":"String"},
        "Platform":{"shape":"String"},
        "Attributes":{"shape":"MapStringToString"}
      }
    },
    "CreatePlatformApplicationResponse":{
      "type":"structure",
      "members":{
        "PlatformApplicationArn":{"shape":"String"}
      }
    },
    "CreatePlatformEndpointInput":{
      "type":"structure",
      "required":[
        "PlatformApplicationArn",
        "Token"
      ],
      "members":{
        "PlatformApplicationArn":{"shape":"String"},
        "Token":{"shape":"String"},
        "CustomUserData":{"shape":"String"},
        "Attributes":{"shape":"MapStringToString"}
      }
    },
    "CreateTopicInput":{
      "type":"structure",
      "required":["Name"],
      "members":{
        "Name":{"shape":"topicName"}
      }
    },
    "CreateTopicResponse":{
      "type":"structure",
      "members":{
        "TopicArn":{"shape":"topicARN"}
      }
    },
    "DelegatesList":{
      "type":"list",
      "member":{"shape":"delegate"}
    },
    "DeleteEndpointInput":{
      "type":"structure",
      "required":["EndpointArn"],
      "members":{
        "EndpointArn":{"shape":"String"}
      }
    },
    "DeletePlatformApplicationInput":{
      "type":"structure",
      "required":["PlatformApplicationArn"],
      "members":{
        "PlatformApplicationArn":{"shape":"String"}
      }
    },
    "DeleteTopicInput":{
      "type":"structure",
      "required":["TopicArn"],
      "members":{
        "TopicArn":{"shape":"topicARN"}
      }
    },
    "Endpoint":{
      "type":"structure",
      "members":{
        "EndpointArn":{"shape":"String"},
        "Attributes":{"shape":"MapStringToString"}
      }
    },
    "EndpointDisabledException":{
      "type":"structure",
      "members":{
        "message":{"shape":"string"}
      },
      "error":{
        "code":"EndpointDisabled",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "GetEndpointAttributesInput":{
      "type":"structure",
      "required":["EndpointArn"],
      "members":{
        "EndpointArn":{"shape":"String"}
      }
    },
    "GetEndpointAttributesResponse":{
      "type":"structure",
      "members":{
        "Attributes":{"shape":"MapStringToString"}
      }
    },
    "GetPlatformApplicationAttributesInput":{
      "type":"structure",
      "required":["PlatformApplicationArn"],
      "members":{
        "PlatformApplicationArn":{"shape":"String"}
      }
    },
    "GetPlatformApplicationAttributesResponse":{
      "type":"structure",
      "members":{
        "Attributes":{"shape":"MapStringToString"}
      }
    },
    "GetSubscriptionAttributesInput":{
      "type":"structure",
      "required":["SubscriptionArn"],
      "members":{
        "SubscriptionArn":{"shape":"subscriptionARN"}
      }
    },
    "GetSubscriptionAttributesResponse":{
      "type":"structure",
      "members":{
        "Attributes":{"shape":"SubscriptionAttributesMap"}
      }
    },
    "GetTopicAttributesInput":{
      "type":"structure",
      "required":["TopicArn"],
      "members":{
        "TopicArn":{"shape":"topicARN"}
      }
    },
    "GetTopicAttributesResponse":{
      "type":"structure",
      "members":{
        "Attributes":{"shape":"TopicAttributesMap"}
      }
    },
    "InternalErrorException":{
      "type":"structure",
      "members":{
        "message":{"shape":"string"}
      },
      "error":{
        "code":"InternalError",
        "httpStatusCode":500
      },
      "exception":true,
      "fault":true
    },
    "InvalidParameterException":{
      "type":"structure",
      "members":{
        "message":{"shape":"string"}
      },
      "error":{
        "code":"InvalidParameter",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "InvalidParameterValueException":{
      "type":"structure",
      "members":{
        "message":{"shape":"string"}
      },
      "error":{
        "code":"ParameterValueInvalid",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "ListEndpointsByPlatformApplicationInput":{
      "type":"structure",
      "required":["PlatformApplicationArn"],
      "members":{
        "PlatformApplicationArn":{"shape":"String"},
        "NextToken":{"shape":"String"}
      }
    },
    "ListEndpointsByPlatformApplicationResponse":{
      "type":"structure",
      "members":{
        "Endpoints":{"shape":"ListOfEndpoints"},
        "NextToken":{"shape":"String"}
      }
    },
    "ListOfEndpoints":{
      "type":"list",
      "member":{"shape":"Endpoint"}
    },
    "ListOfPlatformApplications":{
      "type":"list",
      "member":{"shape":"PlatformApplication"}
    },
    "ListPlatformApplicationsInput":{
      "type":"structure",
      "members":{
        "NextToken":{"shape":"String"}
      }
    },
    "ListPlatformApplicationsResponse":{
      "type":"structure",
      "members":{
        "PlatformApplications":{"shape":"ListOfPlatformApplications"},
        "NextToken":{"shape":"String"}
      }
    },
    "ListSubscriptionsByTopicInput":{
      "type":"structure",
      "required":["TopicArn"],
      "members":{
        "TopicArn":{"shape":"topicARN"},
        "NextToken":{"shape":"nextToken"}
      }
    },
    "ListSubscriptionsByTopicResponse":{
      "type":"structure",
      "members":{
        "Subscriptions":{"shape":"SubscriptionsList"},
        "NextToken":{"shape":"nextToken"}
      }
    },
    "ListSubscriptionsInput":{
      "type":"structure",
      "members":{
        "NextToken":{"shape":"nextToken"}
      }
    },
    "ListSubscriptionsResponse":{
      "type":"structure",
      "members":{
        "Subscriptions":{"shape":"SubscriptionsList"},
        "NextToken":{"shape":"nextToken"}
      }
    },
    "ListTopicsInput":{
      "type":"structure",
      "members":{
        "NextToken":{"shape":"nextToken"}
      }
    },
    "ListTopicsResponse":{
      "type":"structure",
      "members":{
        "Topics":{"shape":"TopicsList"},
        "NextToken":{"shape":"nextToken"}
      }
    },
    "MapStringToString":{
      "type":"map",
      "key":{"shape":"String"},
      "value":{"shape":"String"}
    },
    "MessageAttributeMap":{
      "type":"map",
      "key":{
        "shape":"String",
        "locationName":"Name"
      },
      "value":{
        "shape":"MessageAttributeValue",
        "locationName":"Value"
      }
    },
    "MessageAttributeValue":{
      "type":"structure",
      "required":["DataType"],
      "members":{
        "DataType":{"shape":"String"},
        "StringValue":{"shape":"String"},
        "BinaryValue":{"shape":"Binary"}
      }
    },
    "NotFoundException":{
      "type":"structure",
      "members":{
        "message":{"shape":"string"}
      },
      "error":{
        "code":"NotFound",
        "httpStatusCode":404,
        "senderFault":true
      },
      "exception":true
    },
    "PlatformApplication":{
      "type":"structure",
      "members":{
        "PlatformApplicationArn":{"shape":"String"},
        "Attributes":{"shape":"MapStringToString"}
      }
    },
    "PlatformApplicationDisabledException":{
      "type":"structure",
      "members":{
        "message":{"shape":"string"}
      },
      "error":{
        "code":"PlatformApplicationDisabled",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "PublishInput":{
      "type":"structure",
      "required":["Message"],
      "members":{
        "TopicArn":{"shape":"topicARN"},
        "TargetArn":{"shape":"String"},
        "Message":{"shape":"message"},
        "Subject":{"shape":"subject"},
        "MessageStructure":{"shape":"messageStructure"},
        "MessageAttributes":{"shape":"MessageAttributeMap"}
      }
    },
    "PublishResponse":{
      "type":"structure",
      "members":{
        "MessageId":{"shape":"messageId"}
      }
    },
    "RemovePermissionInput":{
      "type":"structure",
      "required":[
        "TopicArn",
        "Label"
      ],
      "members":{
        "TopicArn":{"shape":"topicARN"},
        "Label":{"shape":"label"}
      }
    },
    "SetEndpointAttributesInput":{
      "type":"structure",
      "required":[
        "EndpointArn",
        "Attributes"
      ],
      "members":{
        "EndpointArn":{"shape":"String"},
        "Attributes":{"shape":"MapStringToString"}
      }
    },
    "SetPlatformApplicationAttributesInput":{
      "type":"structure",
      "required":[
        "PlatformApplicationArn",
        "Attributes"
      ],
      "members":{
        "PlatformApplicationArn":{"shape":"String"},
        "Attributes":{"shape":"MapStringToString"}
      }
    },
    "SetSubscriptionAttributesInput":{
      "type":"structure",
      "required":[
        "SubscriptionArn",
        "AttributeName"
      ],
      "members":{
        "SubscriptionArn":{"shape":"subscriptionARN"},
        "AttributeName":{"shape":"attributeName"},
        "AttributeValue":{"shape":"attributeValue"}
      }
    },
    "SetTopicAttributesInput":{
      "type":"structure",
      "required":[
        "TopicArn",
        "AttributeName"
      ],
      "members":{
        "TopicArn":{"shape":"topicARN"},
        "AttributeName":{"shape":"attributeName"},
        "AttributeValue":{"shape":"attributeValue"}
      }
    },
    "String":{"type":"string"},
    "SubscribeInput":{
      "type":"structure",
      "required":[
        "TopicArn",
        "Protocol"
      ],
      "members":{
        "TopicArn":{"shape":"topicARN"},
        "Protocol":{"shape":"protocol"},
        "Endpoint":{"shape":"endpoint"}
      }
    },
    "SubscribeResponse":{
      "type":"structure",
      "members":{
        "SubscriptionArn":{"shape":"subscriptionARN"}
      }
    },
    "Subscription":{
      "type":"structure",
      "members":{
        "SubscriptionArn":{"shape":"subscriptionARN"},
        "Owner":{"shape":"account"},
        "Protocol":{"shape":"protocol"},
        "Endpoint":{"shape":"endpoint"},
        "TopicArn":{"shape":"topicARN"}
      }
    },
    "SubscriptionAttributesMap":{
      "type":"map",
      "key":{"shape":"attributeName"},
      "value":{"shape":"attributeValue"}
    },
    "SubscriptionLimitExceededException":{
      "type":"structure",
      "members":{
        "message":{"shape":"string"}
      },
      "error":{
        "code":"SubscriptionLimitExceeded",
        "httpStatusCode":403,
        "senderFault":true
      },
      "exception":true
    },
    "SubscriptionsList":{
      "type":"list",
      "member":{"shape":"Subscription"}
    },
    "Topic":{
      "type":"structure",
      "members":{
        "TopicArn":{"shape":"topicARN"}
      }
    },
    "TopicAttributesMap":{
      "type":"map",
      "key":{"shape":"attributeName"},
      "value":{"shape":"attributeValue"}
    },
    "TopicLimitExceededException":{
      "type":"structure",
      "members":{
        "message":{"shape":"string"}
      },
      "error":{
        "code":"TopicLimitExceeded",
        "httpStatusCode":403,
        "senderFault":true
      },
      "exception":true
    },
    "TopicsList":{
      "type":"list",
      "member":{"shape":"Topic"}
    },
    "UnsubscribeInput":{
      "type":"structure",
      "required":["SubscriptionArn"],
      "members":{
        "SubscriptionArn":{"shape":"subscriptionARN"}
      }
    },
    "account":{"type":"string"},
    "action":{"type":"string"},
    "attributeName":{"type":"string"},
    "attributeValue":{"type":"string"},
    "authenticateOnUnsubscribe":{"type":"string"},
    "delegate":{"type":"string"},
    "endpoint":{"type":"string"},
    "label":{"type":"string"},
    "message":{"type":"string"},
    "messageId":{"type":"string"},
    "messageStructure":{"type":"string"},
    "nextToken":{"type":"string"},
    "protocol":{"type":"string"},
    "string":{"type":"string"},
    "subject":{"type":"string"},
    "subscriptionARN":{"type":"string"},
    "token":{"type":"string"},
    "topicARN":{"type":"string"},
    "topicName":{"type":"string"}
  }
}
,
"SQS":
{
  "metadata":{
    "apiVersion":"2012-11-05",
    "endpointPrefix":"sqs",
    "serviceAbbreviation":"Amazon SQS",
    "serviceFullName":"Amazon Simple Queue Service",
    "signatureVersion":"v4",
    "xmlNamespace":"http://queue.amazonaws.com/doc/2012-11-05/",
    "protocol":"query"
  },
  "operations":{
    "AddPermission":{
      "name":"AddPermission",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"AddPermissionRequest"},
      "errors":[
        {
          "shape":"OverLimit",
          "error":{
            "code":"OverLimit",
            "httpStatusCode":403,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "ChangeMessageVisibility":{
      "name":"ChangeMessageVisibility",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ChangeMessageVisibilityRequest"},
      "errors":[
        {
          "shape":"MessageNotInflight",
          "error":{
            "code":"AWS.SimpleQueueService.MessageNotInflight",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"ReceiptHandleIsInvalid",
          "exception":true
        }
      ]
    },
    "ChangeMessageVisibilityBatch":{
      "name":"ChangeMessageVisibilityBatch",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ChangeMessageVisibilityBatchRequest"},
      "output":{
        "shape":"ChangeMessageVisibilityBatchResult",
        "resultWrapper":"ChangeMessageVisibilityBatchResult"
      },
      "errors":[
        {
          "shape":"TooManyEntriesInBatchRequest",
          "error":{
            "code":"AWS.SimpleQueueService.TooManyEntriesInBatchRequest",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"EmptyBatchRequest",
          "error":{
            "code":"AWS.SimpleQueueService.EmptyBatchRequest",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"BatchEntryIdsNotDistinct",
          "error":{
            "code":"AWS.SimpleQueueService.BatchEntryIdsNotDistinct",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidBatchEntryId",
          "error":{
            "code":"AWS.SimpleQueueService.InvalidBatchEntryId",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "CreateQueue":{
      "name":"CreateQueue",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateQueueRequest"},
      "output":{
        "shape":"CreateQueueResult",
        "resultWrapper":"CreateQueueResult"
      },
      "errors":[
        {
          "shape":"QueueDeletedRecently",
          "error":{
            "code":"AWS.SimpleQueueService.QueueDeletedRecently",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"QueueNameExists",
          "error":{
            "code":"QueueAlreadyExists",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DeleteMessage":{
      "name":"DeleteMessage",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteMessageRequest"},
      "errors":[
        {
          "shape":"InvalidIdFormat",
          "exception":true
        },
        {
          "shape":"ReceiptHandleIsInvalid",
          "exception":true
        }
      ]
    },
    "DeleteMessageBatch":{
      "name":"DeleteMessageBatch",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteMessageBatchRequest"},
      "output":{
        "shape":"DeleteMessageBatchResult",
        "resultWrapper":"DeleteMessageBatchResult"
      },
      "errors":[
        {
          "shape":"TooManyEntriesInBatchRequest",
          "error":{
            "code":"AWS.SimpleQueueService.TooManyEntriesInBatchRequest",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"EmptyBatchRequest",
          "error":{
            "code":"AWS.SimpleQueueService.EmptyBatchRequest",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"BatchEntryIdsNotDistinct",
          "error":{
            "code":"AWS.SimpleQueueService.BatchEntryIdsNotDistinct",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidBatchEntryId",
          "error":{
            "code":"AWS.SimpleQueueService.InvalidBatchEntryId",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DeleteQueue":{
      "name":"DeleteQueue",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteQueueRequest"}
    },
    "GetQueueAttributes":{
      "name":"GetQueueAttributes",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"GetQueueAttributesRequest"},
      "output":{
        "shape":"GetQueueAttributesResult",
        "resultWrapper":"GetQueueAttributesResult"
      },
      "errors":[
        {
          "shape":"InvalidAttributeName",
          "exception":true
        }
      ]
    },
    "GetQueueUrl":{
      "name":"GetQueueUrl",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"GetQueueUrlRequest"},
      "output":{
        "shape":"GetQueueUrlResult",
        "resultWrapper":"GetQueueUrlResult"
      },
      "errors":[
        {
          "shape":"QueueDoesNotExist",
          "error":{
            "code":"AWS.SimpleQueueService.NonExistentQueue",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "ListDeadLetterSourceQueues":{
      "name":"ListDeadLetterSourceQueues",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ListDeadLetterSourceQueuesRequest"},
      "output":{
        "shape":"ListDeadLetterSourceQueuesResult",
        "resultWrapper":"ListDeadLetterSourceQueuesResult"
      },
      "errors":[
        {
          "shape":"QueueDoesNotExist",
          "error":{
            "code":"AWS.SimpleQueueService.NonExistentQueue",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "ListQueues":{
      "name":"ListQueues",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ListQueuesRequest"},
      "output":{
        "shape":"ListQueuesResult",
        "resultWrapper":"ListQueuesResult"
      }
    },
    "PurgeQueue":{
      "name":"PurgeQueue",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"PurgeQueueRequest"},
      "errors":[
        {
          "shape":"QueueDoesNotExist",
          "error":{
            "code":"AWS.SimpleQueueService.NonExistentQueue",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"PurgeQueueInProgress",
          "error":{
            "code":"AWS.SimpleQueueService.PurgeQueueInProgress",
            "httpStatusCode":403,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "ReceiveMessage":{
      "name":"ReceiveMessage",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ReceiveMessageRequest"},
      "output":{
        "shape":"ReceiveMessageResult",
        "resultWrapper":"ReceiveMessageResult"
      },
      "errors":[
        {
          "shape":"OverLimit",
          "error":{
            "code":"OverLimit",
            "httpStatusCode":403,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "RemovePermission":{
      "name":"RemovePermission",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"RemovePermissionRequest"}
    },
    "SendMessage":{
      "name":"SendMessage",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"SendMessageRequest"},
      "output":{
        "shape":"SendMessageResult",
        "resultWrapper":"SendMessageResult"
      },
      "errors":[
        {
          "shape":"InvalidMessageContents",
          "exception":true
        },
        {
          "shape":"UnsupportedOperation",
          "error":{
            "code":"AWS.SimpleQueueService.UnsupportedOperation",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "SendMessageBatch":{
      "name":"SendMessageBatch",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"SendMessageBatchRequest"},
      "output":{
        "shape":"SendMessageBatchResult",
        "resultWrapper":"SendMessageBatchResult"
      },
      "errors":[
        {
          "shape":"TooManyEntriesInBatchRequest",
          "error":{
            "code":"AWS.SimpleQueueService.TooManyEntriesInBatchRequest",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"EmptyBatchRequest",
          "error":{
            "code":"AWS.SimpleQueueService.EmptyBatchRequest",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"BatchEntryIdsNotDistinct",
          "error":{
            "code":"AWS.SimpleQueueService.BatchEntryIdsNotDistinct",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"BatchRequestTooLong",
          "error":{
            "code":"AWS.SimpleQueueService.BatchRequestTooLong",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidBatchEntryId",
          "error":{
            "code":"AWS.SimpleQueueService.InvalidBatchEntryId",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"UnsupportedOperation",
          "error":{
            "code":"AWS.SimpleQueueService.UnsupportedOperation",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "SetQueueAttributes":{
      "name":"SetQueueAttributes",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"SetQueueAttributesRequest"},
      "errors":[
        {
          "shape":"InvalidAttributeName",
          "exception":true
        }
      ]
    }
  },
  "shapes":{
    "AWSAccountIdList":{
      "type":"list",
      "member":{
        "shape":"String",
        "locationName":"AWSAccountId"
      },
      "flattened":true
    },
    "ActionNameList":{
      "type":"list",
      "member":{
        "shape":"String",
        "locationName":"ActionName"
      },
      "flattened":true
    },
    "AddPermissionRequest":{
      "type":"structure",
      "required":[
        "QueueUrl",
        "Label",
        "AWSAccountIds",
        "Actions"
      ],
      "members":{
        "QueueUrl":{"shape":"String"},
        "Label":{"shape":"String"},
        "AWSAccountIds":{"shape":"AWSAccountIdList"},
        "Actions":{"shape":"ActionNameList"}
      }
    },
    "AttributeMap":{
      "type":"map",
      "key":{
        "shape":"QueueAttributeName",
        "locationName":"Name"
      },
      "value":{
        "shape":"String",
        "locationName":"Value"
      },
      "flattened":true,
      "locationName":"Attribute"
    },
    "AttributeNameList":{
      "type":"list",
      "member":{
        "shape":"QueueAttributeName",
        "locationName":"AttributeName"
      },
      "flattened":true
    },
    "BatchEntryIdsNotDistinct":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"AWS.SimpleQueueService.BatchEntryIdsNotDistinct",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "BatchRequestTooLong":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"AWS.SimpleQueueService.BatchRequestTooLong",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "BatchResultErrorEntry":{
      "type":"structure",
      "required":[
        "Id",
        "SenderFault",
        "Code"
      ],
      "members":{
        "Id":{"shape":"String"},
        "SenderFault":{"shape":"Boolean"},
        "Code":{"shape":"String"},
        "Message":{"shape":"String"}
      }
    },
    "BatchResultErrorEntryList":{
      "type":"list",
      "member":{
        "shape":"BatchResultErrorEntry",
        "locationName":"BatchResultErrorEntry"
      },
      "flattened":true
    },
    "Binary":{"type":"blob"},
    "BinaryList":{
      "type":"list",
      "member":{
        "shape":"Binary",
        "locationName":"BinaryListValue"
      }
    },
    "Boolean":{"type":"boolean"},
    "ChangeMessageVisibilityBatchRequest":{
      "type":"structure",
      "required":[
        "QueueUrl",
        "Entries"
      ],
      "members":{
        "QueueUrl":{"shape":"String"},
        "Entries":{"shape":"ChangeMessageVisibilityBatchRequestEntryList"}
      }
    },
    "ChangeMessageVisibilityBatchRequestEntry":{
      "type":"structure",
      "required":[
        "Id",
        "ReceiptHandle"
      ],
      "members":{
        "Id":{"shape":"String"},
        "ReceiptHandle":{"shape":"String"},
        "VisibilityTimeout":{"shape":"Integer"}
      }
    },
    "ChangeMessageVisibilityBatchRequestEntryList":{
      "type":"list",
      "member":{
        "shape":"ChangeMessageVisibilityBatchRequestEntry",
        "locationName":"ChangeMessageVisibilityBatchRequestEntry"
      },
      "flattened":true
    },
    "ChangeMessageVisibilityBatchResult":{
      "type":"structure",
      "required":[
        "Successful",
        "Failed"
      ],
      "members":{
        "Successful":{"shape":"ChangeMessageVisibilityBatchResultEntryList"},
        "Failed":{"shape":"BatchResultErrorEntryList"}
      }
    },
    "ChangeMessageVisibilityBatchResultEntry":{
      "type":"structure",
      "required":["Id"],
      "members":{
        "Id":{"shape":"String"}
      }
    },
    "ChangeMessageVisibilityBatchResultEntryList":{
      "type":"list",
      "member":{
        "shape":"ChangeMessageVisibilityBatchResultEntry",
        "locationName":"ChangeMessageVisibilityBatchResultEntry"
      },
      "flattened":true
    },
    "ChangeMessageVisibilityRequest":{
      "type":"structure",
      "required":[
        "QueueUrl",
        "ReceiptHandle",
        "VisibilityTimeout"
      ],
      "members":{
        "QueueUrl":{"shape":"String"},
        "ReceiptHandle":{"shape":"String"},
        "VisibilityTimeout":{"shape":"Integer"}
      }
    },
    "CreateQueueRequest":{
      "type":"structure",
      "required":["QueueName"],
      "members":{
        "QueueName":{"shape":"String"},
        "Attributes":{
          "shape":"AttributeMap",
          "locationName":"Attribute"
        }
      }
    },
    "CreateQueueResult":{
      "type":"structure",
      "members":{
        "QueueUrl":{"shape":"String"}
      }
    },
    "DeleteMessageBatchRequest":{
      "type":"structure",
      "required":[
        "QueueUrl",
        "Entries"
      ],
      "members":{
        "QueueUrl":{"shape":"String"},
        "Entries":{"shape":"DeleteMessageBatchRequestEntryList"}
      }
    },
    "DeleteMessageBatchRequestEntry":{
      "type":"structure",
      "required":[
        "Id",
        "ReceiptHandle"
      ],
      "members":{
        "Id":{"shape":"String"},
        "ReceiptHandle":{"shape":"String"}
      }
    },
    "DeleteMessageBatchRequestEntryList":{
      "type":"list",
      "member":{
        "shape":"DeleteMessageBatchRequestEntry",
        "locationName":"DeleteMessageBatchRequestEntry"
      },
      "flattened":true
    },
    "DeleteMessageBatchResult":{
      "type":"structure",
      "required":[
        "Successful",
        "Failed"
      ],
      "members":{
        "Successful":{"shape":"DeleteMessageBatchResultEntryList"},
        "Failed":{"shape":"BatchResultErrorEntryList"}
      }
    },
    "DeleteMessageBatchResultEntry":{
      "type":"structure",
      "required":["Id"],
      "members":{
        "Id":{"shape":"String"}
      }
    },
    "DeleteMessageBatchResultEntryList":{
      "type":"list",
      "member":{
        "shape":"DeleteMessageBatchResultEntry",
        "locationName":"DeleteMessageBatchResultEntry"
      },
      "flattened":true
    },
    "DeleteMessageRequest":{
      "type":"structure",
      "required":[
        "QueueUrl",
        "ReceiptHandle"
      ],
      "members":{
        "QueueUrl":{"shape":"String"},
        "ReceiptHandle":{"shape":"String"}
      }
    },
    "DeleteQueueRequest":{
      "type":"structure",
      "required":["QueueUrl"],
      "members":{
        "QueueUrl":{"shape":"String"}
      }
    },
    "EmptyBatchRequest":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"AWS.SimpleQueueService.EmptyBatchRequest",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "GetQueueAttributesRequest":{
      "type":"structure",
      "required":["QueueUrl"],
      "members":{
        "QueueUrl":{"shape":"String"},
        "AttributeNames":{"shape":"AttributeNameList"}
      }
    },
    "GetQueueAttributesResult":{
      "type":"structure",
      "members":{
        "Attributes":{
          "shape":"AttributeMap",
          "locationName":"Attribute"
        }
      }
    },
    "GetQueueUrlRequest":{
      "type":"structure",
      "required":["QueueName"],
      "members":{
        "QueueName":{"shape":"String"},
        "QueueOwnerAWSAccountId":{"shape":"String"}
      }
    },
    "GetQueueUrlResult":{
      "type":"structure",
      "members":{
        "QueueUrl":{"shape":"String"}
      }
    },
    "Integer":{"type":"integer"},
    "InvalidAttributeName":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "InvalidBatchEntryId":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"AWS.SimpleQueueService.InvalidBatchEntryId",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "InvalidIdFormat":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "InvalidMessageContents":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "ListDeadLetterSourceQueuesRequest":{
      "type":"structure",
      "required":["QueueUrl"],
      "members":{
        "QueueUrl":{"shape":"String"}
      }
    },
    "ListDeadLetterSourceQueuesResult":{
      "type":"structure",
      "required":["queueUrls"],
      "members":{
        "queueUrls":{"shape":"QueueUrlList"}
      }
    },
    "ListQueuesRequest":{
      "type":"structure",
      "members":{
        "QueueNamePrefix":{"shape":"String"}
      }
    },
    "ListQueuesResult":{
      "type":"structure",
      "members":{
        "QueueUrls":{"shape":"QueueUrlList"}
      }
    },
    "Message":{
      "type":"structure",
      "members":{
        "MessageId":{"shape":"String"},
        "ReceiptHandle":{"shape":"String"},
        "MD5OfBody":{"shape":"String"},
        "Body":{"shape":"String"},
        "Attributes":{
          "shape":"AttributeMap",
          "locationName":"Attribute"
        },
        "MD5OfMessageAttributes":{"shape":"String"},
        "MessageAttributes":{
          "shape":"MessageAttributeMap",
          "locationName":"MessageAttribute"
        }
      }
    },
    "MessageAttributeMap":{
      "type":"map",
      "key":{
        "shape":"String",
        "locationName":"Name"
      },
      "value":{
        "shape":"MessageAttributeValue",
        "locationName":"Value"
      },
      "flattened":true
    },
    "MessageAttributeName":{"type":"string"},
    "MessageAttributeNameList":{
      "type":"list",
      "member":{
        "shape":"MessageAttributeName",
        "locationName":"MessageAttributeName"
      },
      "flattened":true
    },
    "MessageAttributeValue":{
      "type":"structure",
      "required":["DataType"],
      "members":{
        "StringValue":{"shape":"String"},
        "BinaryValue":{"shape":"Binary"},
        "StringListValues":{
          "shape":"StringList",
          "flattened":true,
          "locationName":"StringListValue"
        },
        "BinaryListValues":{
          "shape":"BinaryList",
          "flattened":true,
          "locationName":"BinaryListValue"
        },
        "DataType":{"shape":"String"}
      }
    },
    "MessageList":{
      "type":"list",
      "member":{
        "shape":"Message",
        "locationName":"Message"
      },
      "flattened":true
    },
    "MessageNotInflight":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"AWS.SimpleQueueService.MessageNotInflight",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "OverLimit":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"OverLimit",
        "httpStatusCode":403,
        "senderFault":true
      },
      "exception":true
    },
    "PurgeQueueInProgress":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"AWS.SimpleQueueService.PurgeQueueInProgress",
        "httpStatusCode":403,
        "senderFault":true
      },
      "exception":true
    },
    "PurgeQueueRequest":{
      "type":"structure",
      "required":["QueueUrl"],
      "members":{
        "QueueUrl":{"shape":"String"}
      }
    },
    "QueueAttributeName":{
      "type":"string",
      "enum":[
        "Policy",
        "VisibilityTimeout",
        "MaximumMessageSize",
        "MessageRetentionPeriod",
        "ApproximateNumberOfMessages",
        "ApproximateNumberOfMessagesNotVisible",
        "CreatedTimestamp",
        "LastModifiedTimestamp",
        "QueueArn",
        "ApproximateNumberOfMessagesDelayed",
        "DelaySeconds",
        "ReceiveMessageWaitTimeSeconds",
        "RedrivePolicy"
      ]
    },
    "QueueDeletedRecently":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"AWS.SimpleQueueService.QueueDeletedRecently",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "QueueDoesNotExist":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"AWS.SimpleQueueService.NonExistentQueue",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "QueueNameExists":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"QueueAlreadyExists",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "QueueUrlList":{
      "type":"list",
      "member":{
        "shape":"String",
        "locationName":"QueueUrl"
      },
      "flattened":true
    },
    "ReceiptHandleIsInvalid":{
      "type":"structure",
      "members":{
      },
      "exception":true
    },
    "ReceiveMessageRequest":{
      "type":"structure",
      "required":["QueueUrl"],
      "members":{
        "QueueUrl":{"shape":"String"},
        "AttributeNames":{"shape":"AttributeNameList"},
        "MessageAttributeNames":{"shape":"MessageAttributeNameList"},
        "MaxNumberOfMessages":{"shape":"Integer"},
        "VisibilityTimeout":{"shape":"Integer"},
        "WaitTimeSeconds":{"shape":"Integer"}
      }
    },
    "ReceiveMessageResult":{
      "type":"structure",
      "members":{
        "Messages":{"shape":"MessageList"}
      }
    },
    "RemovePermissionRequest":{
      "type":"structure",
      "required":[
        "QueueUrl",
        "Label"
      ],
      "members":{
        "QueueUrl":{"shape":"String"},
        "Label":{"shape":"String"}
      }
    },
    "SendMessageBatchRequest":{
      "type":"structure",
      "required":[
        "QueueUrl",
        "Entries"
      ],
      "members":{
        "QueueUrl":{"shape":"String"},
        "Entries":{"shape":"SendMessageBatchRequestEntryList"}
      }
    },
    "SendMessageBatchRequestEntry":{
      "type":"structure",
      "required":[
        "Id",
        "MessageBody"
      ],
      "members":{
        "Id":{"shape":"String"},
        "MessageBody":{"shape":"String"},
        "DelaySeconds":{"shape":"Integer"},
        "MessageAttributes":{
          "shape":"MessageAttributeMap",
          "locationName":"MessageAttribute"
        }
      }
    },
    "SendMessageBatchRequestEntryList":{
      "type":"list",
      "member":{
        "shape":"SendMessageBatchRequestEntry",
        "locationName":"SendMessageBatchRequestEntry"
      },
      "flattened":true
    },
    "SendMessageBatchResult":{
      "type":"structure",
      "required":[
        "Successful",
        "Failed"
      ],
      "members":{
        "Successful":{"shape":"SendMessageBatchResultEntryList"},
        "Failed":{"shape":"BatchResultErrorEntryList"}
      }
    },
    "SendMessageBatchResultEntry":{
      "type":"structure",
      "required":[
        "Id",
        "MessageId",
        "MD5OfMessageBody"
      ],
      "members":{
        "Id":{"shape":"String"},
        "MessageId":{"shape":"String"},
        "MD5OfMessageBody":{"shape":"String"},
        "MD5OfMessageAttributes":{"shape":"String"}
      }
    },
    "SendMessageBatchResultEntryList":{
      "type":"list",
      "member":{
        "shape":"SendMessageBatchResultEntry",
        "locationName":"SendMessageBatchResultEntry"
      },
      "flattened":true
    },
    "SendMessageRequest":{
      "type":"structure",
      "required":[
        "QueueUrl",
        "MessageBody"
      ],
      "members":{
        "QueueUrl":{"shape":"String"},
        "MessageBody":{"shape":"String"},
        "DelaySeconds":{"shape":"Integer"},
        "MessageAttributes":{
          "shape":"MessageAttributeMap",
          "locationName":"MessageAttribute"
        }
      }
    },
    "SendMessageResult":{
      "type":"structure",
      "members":{
        "MD5OfMessageBody":{"shape":"String"},
        "MD5OfMessageAttributes":{"shape":"String"},
        "MessageId":{"shape":"String"}
      }
    },
    "SetQueueAttributesRequest":{
      "type":"structure",
      "required":[
        "QueueUrl",
        "Attributes"
      ],
      "members":{
        "QueueUrl":{"shape":"String"},
        "Attributes":{
          "shape":"AttributeMap",
          "locationName":"Attribute"
        }
      }
    },
    "String":{"type":"string"},
    "StringList":{
      "type":"list",
      "member":{
        "shape":"String",
        "locationName":"StringListValue"
      }
    },
    "TooManyEntriesInBatchRequest":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"AWS.SimpleQueueService.TooManyEntriesInBatchRequest",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "UnsupportedOperation":{
      "type":"structure",
      "members":{
      },
      "error":{
        "code":"AWS.SimpleQueueService.UnsupportedOperation",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    }
  }
}
,
"StorageGateway":
{
  "metadata":{
    "apiVersion":"2013-06-30",
    "endpointPrefix":"storagegateway",
    "jsonVersion":"1.1",
    "serviceFullName":"AWS Storage Gateway",
    "signatureVersion":"v4",
    "targetPrefix":"StorageGateway_20130630",
    "protocol":"json"
  },
  "operations":{
    "ActivateGateway":{
      "name":"ActivateGateway",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ActivateGatewayInput"},
      "output":{"shape":"ActivateGatewayOutput"},
      "errors":[
        {
          "shape":"InvalidGatewayRequestException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InternalServerError",
          "error":{"httpStatusCode":500},
          "exception":true
        }
      ]
    },
    "AddCache":{
      "name":"AddCache",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"AddCacheInput"},
      "output":{"shape":"AddCacheOutput"},
      "errors":[
        {
          "shape":"InvalidGatewayRequestException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InternalServerError",
          "error":{"httpStatusCode":500},
          "exception":true
        }
      ]
    },
    "AddUploadBuffer":{
      "name":"AddUploadBuffer",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"AddUploadBufferInput"},
      "output":{"shape":"AddUploadBufferOutput"},
      "errors":[
        {
          "shape":"InvalidGatewayRequestException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InternalServerError",
          "error":{"httpStatusCode":500},
          "exception":true
        }
      ]
    },
    "AddWorkingStorage":{
      "name":"AddWorkingStorage",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"AddWorkingStorageInput"},
      "output":{"shape":"AddWorkingStorageOutput"},
      "errors":[
        {
          "shape":"InvalidGatewayRequestException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InternalServerError",
          "error":{"httpStatusCode":500},
          "exception":true
        }
      ]
    },
    "CancelArchival":{
      "name":"CancelArchival",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CancelArchivalInput"},
      "output":{"shape":"CancelArchivalOutput"},
      "errors":[
        {
          "shape":"InvalidGatewayRequestException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InternalServerError",
          "error":{"httpStatusCode":500},
          "exception":true
        }
      ]
    },
    "CancelRetrieval":{
      "name":"CancelRetrieval",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CancelRetrievalInput"},
      "output":{"shape":"CancelRetrievalOutput"},
      "errors":[
        {
          "shape":"InvalidGatewayRequestException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InternalServerError",
          "error":{"httpStatusCode":500},
          "exception":true
        }
      ]
    },
    "CreateCachediSCSIVolume":{
      "name":"CreateCachediSCSIVolume",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateCachediSCSIVolumeInput"},
      "output":{"shape":"CreateCachediSCSIVolumeOutput"},
      "errors":[
        {
          "shape":"InvalidGatewayRequestException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InternalServerError",
          "error":{"httpStatusCode":500},
          "exception":true
        }
      ]
    },
    "CreateSnapshot":{
      "name":"CreateSnapshot",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateSnapshotInput"},
      "output":{"shape":"CreateSnapshotOutput"},
      "errors":[
        {
          "shape":"InvalidGatewayRequestException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InternalServerError",
          "error":{"httpStatusCode":500},
          "exception":true
        }
      ]
    },
    "CreateSnapshotFromVolumeRecoveryPoint":{
      "name":"CreateSnapshotFromVolumeRecoveryPoint",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateSnapshotFromVolumeRecoveryPointInput"},
      "output":{"shape":"CreateSnapshotFromVolumeRecoveryPointOutput"},
      "errors":[
        {
          "shape":"InvalidGatewayRequestException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InternalServerError",
          "error":{"httpStatusCode":500},
          "exception":true
        }
      ]
    },
    "CreateStorediSCSIVolume":{
      "name":"CreateStorediSCSIVolume",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateStorediSCSIVolumeInput"},
      "output":{"shape":"CreateStorediSCSIVolumeOutput"},
      "errors":[
        {
          "shape":"InvalidGatewayRequestException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InternalServerError",
          "error":{"httpStatusCode":500},
          "exception":true
        }
      ]
    },
    "CreateTapes":{
      "name":"CreateTapes",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateTapesInput"},
      "output":{"shape":"CreateTapesOutput"},
      "errors":[
        {
          "shape":"InvalidGatewayRequestException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InternalServerError",
          "error":{"httpStatusCode":500},
          "exception":true
        }
      ]
    },
    "DeleteBandwidthRateLimit":{
      "name":"DeleteBandwidthRateLimit",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteBandwidthRateLimitInput"},
      "output":{"shape":"DeleteBandwidthRateLimitOutput"},
      "errors":[
        {
          "shape":"InvalidGatewayRequestException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InternalServerError",
          "error":{"httpStatusCode":500},
          "exception":true
        }
      ]
    },
    "DeleteChapCredentials":{
      "name":"DeleteChapCredentials",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteChapCredentialsInput"},
      "output":{"shape":"DeleteChapCredentialsOutput"},
      "errors":[
        {
          "shape":"InvalidGatewayRequestException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InternalServerError",
          "error":{"httpStatusCode":500},
          "exception":true
        }
      ]
    },
    "DeleteGateway":{
      "name":"DeleteGateway",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteGatewayInput"},
      "output":{"shape":"DeleteGatewayOutput"},
      "errors":[
        {
          "shape":"InvalidGatewayRequestException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InternalServerError",
          "error":{"httpStatusCode":500},
          "exception":true
        }
      ]
    },
    "DeleteSnapshotSchedule":{
      "name":"DeleteSnapshotSchedule",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteSnapshotScheduleInput"},
      "output":{"shape":"DeleteSnapshotScheduleOutput"},
      "errors":[
        {
          "shape":"InvalidGatewayRequestException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InternalServerError",
          "error":{"httpStatusCode":500},
          "exception":true
        }
      ]
    },
    "DeleteTape":{
      "name":"DeleteTape",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteTapeInput"},
      "output":{"shape":"DeleteTapeOutput"},
      "errors":[
        {
          "shape":"InvalidGatewayRequestException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InternalServerError",
          "error":{"httpStatusCode":500},
          "exception":true
        }
      ]
    },
    "DeleteTapeArchive":{
      "name":"DeleteTapeArchive",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteTapeArchiveInput"},
      "output":{"shape":"DeleteTapeArchiveOutput"},
      "errors":[
        {
          "shape":"InvalidGatewayRequestException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InternalServerError",
          "error":{"httpStatusCode":500},
          "exception":true
        }
      ]
    },
    "DeleteVolume":{
      "name":"DeleteVolume",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeleteVolumeInput"},
      "output":{"shape":"DeleteVolumeOutput"},
      "errors":[
        {
          "shape":"InvalidGatewayRequestException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InternalServerError",
          "error":{"httpStatusCode":500},
          "exception":true
        }
      ]
    },
    "DescribeBandwidthRateLimit":{
      "name":"DescribeBandwidthRateLimit",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeBandwidthRateLimitInput"},
      "output":{"shape":"DescribeBandwidthRateLimitOutput"},
      "errors":[
        {
          "shape":"InvalidGatewayRequestException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InternalServerError",
          "error":{"httpStatusCode":500},
          "exception":true
        }
      ]
    },
    "DescribeCache":{
      "name":"DescribeCache",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeCacheInput"},
      "output":{"shape":"DescribeCacheOutput"},
      "errors":[
        {
          "shape":"InvalidGatewayRequestException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InternalServerError",
          "error":{"httpStatusCode":500},
          "exception":true
        }
      ]
    },
    "DescribeCachediSCSIVolumes":{
      "name":"DescribeCachediSCSIVolumes",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeCachediSCSIVolumesInput"},
      "output":{"shape":"DescribeCachediSCSIVolumesOutput"},
      "errors":[
        {
          "shape":"InvalidGatewayRequestException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InternalServerError",
          "error":{"httpStatusCode":500},
          "exception":true
        }
      ]
    },
    "DescribeChapCredentials":{
      "name":"DescribeChapCredentials",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeChapCredentialsInput"},
      "output":{"shape":"DescribeChapCredentialsOutput"},
      "errors":[
        {
          "shape":"InvalidGatewayRequestException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InternalServerError",
          "error":{"httpStatusCode":500},
          "exception":true
        }
      ]
    },
    "DescribeGatewayInformation":{
      "name":"DescribeGatewayInformation",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeGatewayInformationInput"},
      "output":{"shape":"DescribeGatewayInformationOutput"},
      "errors":[
        {
          "shape":"InvalidGatewayRequestException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InternalServerError",
          "error":{"httpStatusCode":500},
          "exception":true
        }
      ]
    },
    "DescribeMaintenanceStartTime":{
      "name":"DescribeMaintenanceStartTime",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeMaintenanceStartTimeInput"},
      "output":{"shape":"DescribeMaintenanceStartTimeOutput"},
      "errors":[
        {
          "shape":"InvalidGatewayRequestException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InternalServerError",
          "error":{"httpStatusCode":500},
          "exception":true
        }
      ]
    },
    "DescribeSnapshotSchedule":{
      "name":"DescribeSnapshotSchedule",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeSnapshotScheduleInput"},
      "output":{"shape":"DescribeSnapshotScheduleOutput"},
      "errors":[
        {
          "shape":"InvalidGatewayRequestException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InternalServerError",
          "error":{"httpStatusCode":500},
          "exception":true
        }
      ]
    },
    "DescribeStorediSCSIVolumes":{
      "name":"DescribeStorediSCSIVolumes",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeStorediSCSIVolumesInput"},
      "output":{"shape":"DescribeStorediSCSIVolumesOutput"},
      "errors":[
        {
          "shape":"InvalidGatewayRequestException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InternalServerError",
          "error":{"httpStatusCode":500},
          "exception":true
        }
      ]
    },
    "DescribeTapeArchives":{
      "name":"DescribeTapeArchives",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeTapeArchivesInput"},
      "output":{"shape":"DescribeTapeArchivesOutput"},
      "errors":[
        {
          "shape":"InvalidGatewayRequestException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InternalServerError",
          "error":{"httpStatusCode":500},
          "exception":true
        }
      ]
    },
    "DescribeTapeRecoveryPoints":{
      "name":"DescribeTapeRecoveryPoints",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeTapeRecoveryPointsInput"},
      "output":{"shape":"DescribeTapeRecoveryPointsOutput"},
      "errors":[
        {
          "shape":"InvalidGatewayRequestException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InternalServerError",
          "error":{"httpStatusCode":500},
          "exception":true
        }
      ]
    },
    "DescribeTapes":{
      "name":"DescribeTapes",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeTapesInput"},
      "output":{"shape":"DescribeTapesOutput"},
      "errors":[
        {
          "shape":"InvalidGatewayRequestException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InternalServerError",
          "error":{"httpStatusCode":500},
          "exception":true
        }
      ]
    },
    "DescribeUploadBuffer":{
      "name":"DescribeUploadBuffer",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeUploadBufferInput"},
      "output":{"shape":"DescribeUploadBufferOutput"},
      "errors":[
        {
          "shape":"InvalidGatewayRequestException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InternalServerError",
          "error":{"httpStatusCode":500},
          "exception":true
        }
      ]
    },
    "DescribeVTLDevices":{
      "name":"DescribeVTLDevices",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeVTLDevicesInput"},
      "output":{"shape":"DescribeVTLDevicesOutput"},
      "errors":[
        {
          "shape":"InvalidGatewayRequestException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InternalServerError",
          "error":{"httpStatusCode":500},
          "exception":true
        }
      ]
    },
    "DescribeWorkingStorage":{
      "name":"DescribeWorkingStorage",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeWorkingStorageInput"},
      "output":{"shape":"DescribeWorkingStorageOutput"},
      "errors":[
        {
          "shape":"InvalidGatewayRequestException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InternalServerError",
          "error":{"httpStatusCode":500},
          "exception":true
        }
      ]
    },
    "DisableGateway":{
      "name":"DisableGateway",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DisableGatewayInput"},
      "output":{"shape":"DisableGatewayOutput"},
      "errors":[
        {
          "shape":"InvalidGatewayRequestException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InternalServerError",
          "error":{"httpStatusCode":500},
          "exception":true
        }
      ]
    },
    "ListGateways":{
      "name":"ListGateways",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ListGatewaysInput"},
      "output":{"shape":"ListGatewaysOutput"},
      "errors":[
        {
          "shape":"InvalidGatewayRequestException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InternalServerError",
          "error":{"httpStatusCode":500},
          "exception":true
        }
      ]
    },
    "ListLocalDisks":{
      "name":"ListLocalDisks",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ListLocalDisksInput"},
      "output":{"shape":"ListLocalDisksOutput"},
      "errors":[
        {
          "shape":"InvalidGatewayRequestException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InternalServerError",
          "error":{"httpStatusCode":500},
          "exception":true
        }
      ]
    },
    "ListVolumeRecoveryPoints":{
      "name":"ListVolumeRecoveryPoints",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ListVolumeRecoveryPointsInput"},
      "output":{"shape":"ListVolumeRecoveryPointsOutput"},
      "errors":[
        {
          "shape":"InvalidGatewayRequestException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InternalServerError",
          "error":{"httpStatusCode":500},
          "exception":true
        }
      ]
    },
    "ListVolumes":{
      "name":"ListVolumes",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ListVolumesInput"},
      "output":{"shape":"ListVolumesOutput"},
      "errors":[
        {
          "shape":"InvalidGatewayRequestException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InternalServerError",
          "error":{"httpStatusCode":500},
          "exception":true
        }
      ]
    },
    "RetrieveTapeArchive":{
      "name":"RetrieveTapeArchive",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"RetrieveTapeArchiveInput"},
      "output":{"shape":"RetrieveTapeArchiveOutput"},
      "errors":[
        {
          "shape":"InvalidGatewayRequestException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InternalServerError",
          "error":{"httpStatusCode":500},
          "exception":true
        }
      ]
    },
    "RetrieveTapeRecoveryPoint":{
      "name":"RetrieveTapeRecoveryPoint",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"RetrieveTapeRecoveryPointInput"},
      "output":{"shape":"RetrieveTapeRecoveryPointOutput"},
      "errors":[
        {
          "shape":"InvalidGatewayRequestException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InternalServerError",
          "error":{"httpStatusCode":500},
          "exception":true
        }
      ]
    },
    "ShutdownGateway":{
      "name":"ShutdownGateway",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ShutdownGatewayInput"},
      "output":{"shape":"ShutdownGatewayOutput"},
      "errors":[
        {
          "shape":"InvalidGatewayRequestException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InternalServerError",
          "error":{"httpStatusCode":500},
          "exception":true
        }
      ]
    },
    "StartGateway":{
      "name":"StartGateway",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"StartGatewayInput"},
      "output":{"shape":"StartGatewayOutput"},
      "errors":[
        {
          "shape":"InvalidGatewayRequestException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InternalServerError",
          "error":{"httpStatusCode":500},
          "exception":true
        }
      ]
    },
    "UpdateBandwidthRateLimit":{
      "name":"UpdateBandwidthRateLimit",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"UpdateBandwidthRateLimitInput"},
      "output":{"shape":"UpdateBandwidthRateLimitOutput"},
      "errors":[
        {
          "shape":"InvalidGatewayRequestException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InternalServerError",
          "error":{"httpStatusCode":500},
          "exception":true
        }
      ]
    },
    "UpdateChapCredentials":{
      "name":"UpdateChapCredentials",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"UpdateChapCredentialsInput"},
      "output":{"shape":"UpdateChapCredentialsOutput"},
      "errors":[
        {
          "shape":"InvalidGatewayRequestException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InternalServerError",
          "error":{"httpStatusCode":500},
          "exception":true
        }
      ]
    },
    "UpdateGatewayInformation":{
      "name":"UpdateGatewayInformation",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"UpdateGatewayInformationInput"},
      "output":{"shape":"UpdateGatewayInformationOutput"},
      "errors":[
        {
          "shape":"InvalidGatewayRequestException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InternalServerError",
          "error":{"httpStatusCode":500},
          "exception":true
        }
      ]
    },
    "UpdateGatewaySoftwareNow":{
      "name":"UpdateGatewaySoftwareNow",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"UpdateGatewaySoftwareNowInput"},
      "output":{"shape":"UpdateGatewaySoftwareNowOutput"},
      "errors":[
        {
          "shape":"InvalidGatewayRequestException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InternalServerError",
          "error":{"httpStatusCode":500},
          "exception":true
        }
      ]
    },
    "UpdateMaintenanceStartTime":{
      "name":"UpdateMaintenanceStartTime",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"UpdateMaintenanceStartTimeInput"},
      "output":{"shape":"UpdateMaintenanceStartTimeOutput"},
      "errors":[
        {
          "shape":"InvalidGatewayRequestException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InternalServerError",
          "error":{"httpStatusCode":500},
          "exception":true
        }
      ]
    },
    "UpdateSnapshotSchedule":{
      "name":"UpdateSnapshotSchedule",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"UpdateSnapshotScheduleInput"},
      "output":{"shape":"UpdateSnapshotScheduleOutput"},
      "errors":[
        {
          "shape":"InvalidGatewayRequestException",
          "error":{"httpStatusCode":400},
          "exception":true
        },
        {
          "shape":"InternalServerError",
          "error":{"httpStatusCode":500},
          "exception":true
        }
      ]
    }
  },
  "shapes":{
    "ActivateGatewayInput":{
      "type":"structure",
      "required":[
        "ActivationKey",
        "GatewayName",
        "GatewayTimezone",
        "GatewayRegion"
      ],
      "members":{
        "ActivationKey":{"shape":"ActivationKey"},
        "GatewayName":{"shape":"GatewayName"},
        "GatewayTimezone":{"shape":"GatewayTimezone"},
        "GatewayRegion":{"shape":"RegionId"},
        "GatewayType":{"shape":"GatewayType"},
        "TapeDriveType":{"shape":"TapeDriveType"},
        "MediumChangerType":{"shape":"MediumChangerType"}
      }
    },
    "ActivateGatewayOutput":{
      "type":"structure",
      "members":{
        "GatewayARN":{"shape":"GatewayARN"}
      }
    },
    "ActivationKey":{
      "type":"string",
      "min":1,
      "max":50
    },
    "AddCacheInput":{
      "type":"structure",
      "required":[
        "GatewayARN",
        "DiskIds"
      ],
      "members":{
        "GatewayARN":{"shape":"GatewayARN"},
        "DiskIds":{"shape":"DiskIds"}
      }
    },
    "AddCacheOutput":{
      "type":"structure",
      "members":{
        "GatewayARN":{"shape":"GatewayARN"}
      }
    },
    "AddUploadBufferInput":{
      "type":"structure",
      "required":[
        "GatewayARN",
        "DiskIds"
      ],
      "members":{
        "GatewayARN":{"shape":"GatewayARN"},
        "DiskIds":{"shape":"DiskIds"}
      }
    },
    "AddUploadBufferOutput":{
      "type":"structure",
      "members":{
        "GatewayARN":{"shape":"GatewayARN"}
      }
    },
    "AddWorkingStorageInput":{
      "type":"structure",
      "required":[
        "GatewayARN",
        "DiskIds"
      ],
      "members":{
        "GatewayARN":{"shape":"GatewayARN"},
        "DiskIds":{"shape":"DiskIds"}
      }
    },
    "AddWorkingStorageOutput":{
      "type":"structure",
      "members":{
        "GatewayARN":{"shape":"GatewayARN"}
      }
    },
    "BandwidthDownloadRateLimit":{
      "type":"long",
      "min":102400
    },
    "BandwidthType":{
      "type":"string",
      "min":3,
      "max":25
    },
    "BandwidthUploadRateLimit":{
      "type":"long",
      "min":51200
    },
    "CachediSCSIVolume":{
      "type":"structure",
      "members":{
        "VolumeARN":{"shape":"VolumeARN"},
        "VolumeId":{"shape":"VolumeId"},
        "VolumeType":{"shape":"VolumeType"},
        "VolumeStatus":{"shape":"VolumeStatus"},
        "VolumeSizeInBytes":{"shape":"long"},
        "VolumeProgress":{"shape":"DoubleObject"},
        "SourceSnapshotId":{"shape":"SnapshotId"},
        "VolumeiSCSIAttributes":{"shape":"VolumeiSCSIAttributes"}
      }
    },
    "CachediSCSIVolumes":{
      "type":"list",
      "member":{"shape":"CachediSCSIVolume"}
    },
    "CancelArchivalInput":{
      "type":"structure",
      "required":[
        "GatewayARN",
        "TapeARN"
      ],
      "members":{
        "GatewayARN":{"shape":"GatewayARN"},
        "TapeARN":{"shape":"TapeARN"}
      }
    },
    "CancelArchivalOutput":{
      "type":"structure",
      "members":{
        "TapeARN":{"shape":"TapeARN"}
      }
    },
    "CancelRetrievalInput":{
      "type":"structure",
      "required":[
        "GatewayARN",
        "TapeARN"
      ],
      "members":{
        "GatewayARN":{"shape":"GatewayARN"},
        "TapeARN":{"shape":"TapeARN"}
      }
    },
    "CancelRetrievalOutput":{
      "type":"structure",
      "members":{
        "TapeARN":{"shape":"TapeARN"}
      }
    },
    "ChapCredentials":{
      "type":"list",
      "member":{"shape":"ChapInfo"}
    },
    "ChapInfo":{
      "type":"structure",
      "members":{
        "TargetARN":{"shape":"TargetARN"},
        "SecretToAuthenticateInitiator":{"shape":"ChapSecret"},
        "InitiatorName":{"shape":"IqnName"},
        "SecretToAuthenticateTarget":{"shape":"ChapSecret"}
      }
    },
    "ChapSecret":{
      "type":"string",
      "min":12,
      "max":16
    },
    "ClientToken":{
      "type":"string",
      "min":5,
      "max":100
    },
    "CreateCachediSCSIVolumeInput":{
      "type":"structure",
      "required":[
        "GatewayARN",
        "VolumeSizeInBytes",
        "TargetName",
        "NetworkInterfaceId",
        "ClientToken"
      ],
      "members":{
        "GatewayARN":{"shape":"GatewayARN"},
        "VolumeSizeInBytes":{"shape":"long"},
        "SnapshotId":{"shape":"SnapshotId"},
        "TargetName":{"shape":"TargetName"},
        "NetworkInterfaceId":{"shape":"NetworkInterfaceId"},
        "ClientToken":{"shape":"ClientToken"}
      }
    },
    "CreateCachediSCSIVolumeOutput":{
      "type":"structure",
      "members":{
        "VolumeARN":{"shape":"VolumeARN"},
        "TargetARN":{"shape":"TargetARN"}
      }
    },
    "CreateSnapshotFromVolumeRecoveryPointInput":{
      "type":"structure",
      "required":[
        "VolumeARN",
        "SnapshotDescription"
      ],
      "members":{
        "VolumeARN":{"shape":"VolumeARN"},
        "SnapshotDescription":{"shape":"SnapshotDescription"}
      }
    },
    "CreateSnapshotFromVolumeRecoveryPointOutput":{
      "type":"structure",
      "members":{
        "SnapshotId":{"shape":"SnapshotId"},
        "VolumeARN":{"shape":"VolumeARN"},
        "VolumeRecoveryPointTime":{"shape":"string"}
      }
    },
    "CreateSnapshotInput":{
      "type":"structure",
      "required":[
        "VolumeARN",
        "SnapshotDescription"
      ],
      "members":{
        "VolumeARN":{"shape":"VolumeARN"},
        "SnapshotDescription":{"shape":"SnapshotDescription"}
      }
    },
    "CreateSnapshotOutput":{
      "type":"structure",
      "members":{
        "VolumeARN":{"shape":"VolumeARN"},
        "SnapshotId":{"shape":"SnapshotId"}
      }
    },
    "CreateStorediSCSIVolumeInput":{
      "type":"structure",
      "required":[
        "GatewayARN",
        "DiskId",
        "PreserveExistingData",
        "TargetName",
        "NetworkInterfaceId"
      ],
      "members":{
        "GatewayARN":{"shape":"GatewayARN"},
        "DiskId":{"shape":"DiskId"},
        "SnapshotId":{"shape":"SnapshotId"},
        "PreserveExistingData":{"shape":"boolean"},
        "TargetName":{"shape":"TargetName"},
        "NetworkInterfaceId":{"shape":"NetworkInterfaceId"}
      }
    },
    "CreateStorediSCSIVolumeOutput":{
      "type":"structure",
      "members":{
        "VolumeARN":{"shape":"VolumeARN"},
        "VolumeSizeInBytes":{"shape":"long"},
        "TargetARN":{"shape":"TargetARN"}
      }
    },
    "CreateTapesInput":{
      "type":"structure",
      "required":[
        "GatewayARN",
        "TapeSizeInBytes",
        "ClientToken",
        "NumTapesToCreate",
        "TapeBarcodePrefix"
      ],
      "members":{
        "GatewayARN":{"shape":"GatewayARN"},
        "TapeSizeInBytes":{"shape":"TapeSize"},
        "ClientToken":{"shape":"ClientToken"},
        "NumTapesToCreate":{"shape":"NumTapesToCreate"},
        "TapeBarcodePrefix":{"shape":"TapeBarcodePrefix"}
      }
    },
    "CreateTapesOutput":{
      "type":"structure",
      "members":{
        "TapeARNs":{"shape":"TapeARNs"}
      }
    },
    "DayOfWeek":{
      "type":"integer",
      "min":0,
      "max":6
    },
    "DeleteBandwidthRateLimitInput":{
      "type":"structure",
      "required":[
        "GatewayARN",
        "BandwidthType"
      ],
      "members":{
        "GatewayARN":{"shape":"GatewayARN"},
        "BandwidthType":{"shape":"BandwidthType"}
      }
    },
    "DeleteBandwidthRateLimitOutput":{
      "type":"structure",
      "members":{
        "GatewayARN":{"shape":"GatewayARN"}
      }
    },
    "DeleteChapCredentialsInput":{
      "type":"structure",
      "required":[
        "TargetARN",
        "InitiatorName"
      ],
      "members":{
        "TargetARN":{"shape":"TargetARN"},
        "InitiatorName":{"shape":"IqnName"}
      }
    },
    "DeleteChapCredentialsOutput":{
      "type":"structure",
      "members":{
        "TargetARN":{"shape":"TargetARN"},
        "InitiatorName":{"shape":"IqnName"}
      }
    },
    "DeleteGatewayInput":{
      "type":"structure",
      "required":["GatewayARN"],
      "members":{
        "GatewayARN":{"shape":"GatewayARN"}
      }
    },
    "DeleteGatewayOutput":{
      "type":"structure",
      "members":{
        "GatewayARN":{"shape":"GatewayARN"}
      }
    },
    "DeleteSnapshotScheduleInput":{
      "type":"structure",
      "required":["VolumeARN"],
      "members":{
        "VolumeARN":{"shape":"VolumeARN"}
      }
    },
    "DeleteSnapshotScheduleOutput":{
      "type":"structure",
      "members":{
        "VolumeARN":{"shape":"VolumeARN"}
      }
    },
    "DeleteTapeArchiveInput":{
      "type":"structure",
      "required":["TapeARN"],
      "members":{
        "TapeARN":{"shape":"TapeARN"}
      }
    },
    "DeleteTapeArchiveOutput":{
      "type":"structure",
      "members":{
        "TapeARN":{"shape":"TapeARN"}
      }
    },
    "DeleteTapeInput":{
      "type":"structure",
      "required":[
        "GatewayARN",
        "TapeARN"
      ],
      "members":{
        "GatewayARN":{"shape":"GatewayARN"},
        "TapeARN":{"shape":"TapeARN"}
      }
    },
    "DeleteTapeOutput":{
      "type":"structure",
      "members":{
        "TapeARN":{"shape":"TapeARN"}
      }
    },
    "DeleteVolumeInput":{
      "type":"structure",
      "required":["VolumeARN"],
      "members":{
        "VolumeARN":{"shape":"VolumeARN"}
      }
    },
    "DeleteVolumeOutput":{
      "type":"structure",
      "members":{
        "VolumeARN":{"shape":"VolumeARN"}
      }
    },
    "DescribeBandwidthRateLimitInput":{
      "type":"structure",
      "required":["GatewayARN"],
      "members":{
        "GatewayARN":{"shape":"GatewayARN"}
      }
    },
    "DescribeBandwidthRateLimitOutput":{
      "type":"structure",
      "members":{
        "GatewayARN":{"shape":"GatewayARN"},
        "AverageUploadRateLimitInBitsPerSec":{"shape":"BandwidthUploadRateLimit"},
        "AverageDownloadRateLimitInBitsPerSec":{"shape":"BandwidthDownloadRateLimit"}
      }
    },
    "DescribeCacheInput":{
      "type":"structure",
      "required":["GatewayARN"],
      "members":{
        "GatewayARN":{"shape":"GatewayARN"}
      }
    },
    "DescribeCacheOutput":{
      "type":"structure",
      "members":{
        "GatewayARN":{"shape":"GatewayARN"},
        "DiskIds":{"shape":"DiskIds"},
        "CacheAllocatedInBytes":{"shape":"long"},
        "CacheUsedPercentage":{"shape":"double"},
        "CacheDirtyPercentage":{"shape":"double"},
        "CacheHitPercentage":{"shape":"double"},
        "CacheMissPercentage":{"shape":"double"}
      }
    },
    "DescribeCachediSCSIVolumesInput":{
      "type":"structure",
      "required":["VolumeARNs"],
      "members":{
        "VolumeARNs":{"shape":"VolumeARNs"}
      }
    },
    "DescribeCachediSCSIVolumesOutput":{
      "type":"structure",
      "members":{
        "CachediSCSIVolumes":{"shape":"CachediSCSIVolumes"}
      }
    },
    "DescribeChapCredentialsInput":{
      "type":"structure",
      "required":["TargetARN"],
      "members":{
        "TargetARN":{"shape":"TargetARN"}
      }
    },
    "DescribeChapCredentialsOutput":{
      "type":"structure",
      "members":{
        "ChapCredentials":{"shape":"ChapCredentials"}
      }
    },
    "DescribeGatewayInformationInput":{
      "type":"structure",
      "required":["GatewayARN"],
      "members":{
        "GatewayARN":{"shape":"GatewayARN"}
      }
    },
    "DescribeGatewayInformationOutput":{
      "type":"structure",
      "members":{
        "GatewayARN":{"shape":"GatewayARN"},
        "GatewayId":{"shape":"GatewayId"},
        "GatewayTimezone":{"shape":"GatewayTimezone"},
        "GatewayState":{"shape":"GatewayState"},
        "GatewayNetworkInterfaces":{"shape":"GatewayNetworkInterfaces"},
        "GatewayType":{"shape":"GatewayType"},
        "NextUpdateAvailabilityDate":{"shape":"NextUpdateAvailabilityDate"}
      }
    },
    "DescribeMaintenanceStartTimeInput":{
      "type":"structure",
      "required":["GatewayARN"],
      "members":{
        "GatewayARN":{"shape":"GatewayARN"}
      }
    },
    "DescribeMaintenanceStartTimeOutput":{
      "type":"structure",
      "members":{
        "GatewayARN":{"shape":"GatewayARN"},
        "HourOfDay":{"shape":"HourOfDay"},
        "MinuteOfHour":{"shape":"MinuteOfHour"},
        "DayOfWeek":{"shape":"DayOfWeek"},
        "Timezone":{"shape":"GatewayTimezone"}
      }
    },
    "DescribeSnapshotScheduleInput":{
      "type":"structure",
      "required":["VolumeARN"],
      "members":{
        "VolumeARN":{"shape":"VolumeARN"}
      }
    },
    "DescribeSnapshotScheduleOutput":{
      "type":"structure",
      "members":{
        "VolumeARN":{"shape":"VolumeARN"},
        "StartAt":{"shape":"HourOfDay"},
        "RecurrenceInHours":{"shape":"RecurrenceInHours"},
        "Description":{"shape":"Description"},
        "Timezone":{"shape":"GatewayTimezone"}
      }
    },
    "DescribeStorediSCSIVolumesInput":{
      "type":"structure",
      "required":["VolumeARNs"],
      "members":{
        "VolumeARNs":{"shape":"VolumeARNs"}
      }
    },
    "DescribeStorediSCSIVolumesOutput":{
      "type":"structure",
      "members":{
        "StorediSCSIVolumes":{"shape":"StorediSCSIVolumes"}
      }
    },
    "DescribeTapeArchivesInput":{
      "type":"structure",
      "members":{
        "TapeARNs":{"shape":"TapeARNs"},
        "Marker":{"shape":"Marker"},
        "Limit":{"shape":"PositiveIntObject"}
      }
    },
    "DescribeTapeArchivesOutput":{
      "type":"structure",
      "members":{
        "TapeArchives":{"shape":"TapeArchives"},
        "Marker":{"shape":"Marker"}
      }
    },
    "DescribeTapeRecoveryPointsInput":{
      "type":"structure",
      "required":["GatewayARN"],
      "members":{
        "GatewayARN":{"shape":"GatewayARN"},
        "Marker":{"shape":"Marker"},
        "Limit":{"shape":"PositiveIntObject"}
      }
    },
    "DescribeTapeRecoveryPointsOutput":{
      "type":"structure",
      "members":{
        "GatewayARN":{"shape":"GatewayARN"},
        "TapeRecoveryPointInfos":{"shape":"TapeRecoveryPointInfos"},
        "Marker":{"shape":"Marker"}
      }
    },
    "DescribeTapesInput":{
      "type":"structure",
      "required":["GatewayARN"],
      "members":{
        "GatewayARN":{"shape":"GatewayARN"},
        "TapeARNs":{"shape":"TapeARNs"},
        "Marker":{"shape":"Marker"},
        "Limit":{"shape":"PositiveIntObject"}
      }
    },
    "DescribeTapesOutput":{
      "type":"structure",
      "members":{
        "Tapes":{"shape":"Tapes"},
        "Marker":{"shape":"Marker"}
      }
    },
    "DescribeUploadBufferInput":{
      "type":"structure",
      "required":["GatewayARN"],
      "members":{
        "GatewayARN":{"shape":"GatewayARN"}
      }
    },
    "DescribeUploadBufferOutput":{
      "type":"structure",
      "members":{
        "GatewayARN":{"shape":"GatewayARN"},
        "DiskIds":{"shape":"DiskIds"},
        "UploadBufferUsedInBytes":{"shape":"long"},
        "UploadBufferAllocatedInBytes":{"shape":"long"}
      }
    },
    "DescribeVTLDevicesInput":{
      "type":"structure",
      "required":["GatewayARN"],
      "members":{
        "GatewayARN":{"shape":"GatewayARN"},
        "VTLDeviceARNs":{"shape":"VTLDeviceARNs"},
        "Marker":{"shape":"Marker"},
        "Limit":{"shape":"PositiveIntObject"}
      }
    },
    "DescribeVTLDevicesOutput":{
      "type":"structure",
      "members":{
        "GatewayARN":{"shape":"GatewayARN"},
        "VTLDevices":{"shape":"VTLDevices"},
        "Marker":{"shape":"Marker"}
      }
    },
    "DescribeWorkingStorageInput":{
      "type":"structure",
      "required":["GatewayARN"],
      "members":{
        "GatewayARN":{"shape":"GatewayARN"}
      }
    },
    "DescribeWorkingStorageOutput":{
      "type":"structure",
      "members":{
        "GatewayARN":{"shape":"GatewayARN"},
        "DiskIds":{"shape":"DiskIds"},
        "WorkingStorageUsedInBytes":{"shape":"long"},
        "WorkingStorageAllocatedInBytes":{"shape":"long"}
      }
    },
    "Description":{
      "type":"string",
      "min":1,
      "max":255
    },
    "DeviceiSCSIAttributes":{
      "type":"structure",
      "members":{
        "TargetARN":{"shape":"TargetARN"},
        "NetworkInterfaceId":{"shape":"NetworkInterfaceId"},
        "NetworkInterfacePort":{"shape":"integer"},
        "ChapEnabled":{"shape":"boolean"}
      }
    },
    "DisableGatewayInput":{
      "type":"structure",
      "required":["GatewayARN"],
      "members":{
        "GatewayARN":{"shape":"GatewayARN"}
      }
    },
    "DisableGatewayOutput":{
      "type":"structure",
      "members":{
        "GatewayARN":{"shape":"GatewayARN"}
      }
    },
    "Disk":{
      "type":"structure",
      "members":{
        "DiskId":{"shape":"DiskId"},
        "DiskPath":{"shape":"string"},
        "DiskNode":{"shape":"string"},
        "DiskSizeInBytes":{"shape":"long"},
        "DiskAllocationType":{"shape":"DiskAllocationType"},
        "DiskAllocationResource":{"shape":"string"}
      }
    },
    "DiskAllocationType":{
      "type":"string",
      "min":3,
      "max":100
    },
    "DiskId":{
      "type":"string",
      "min":1,
      "max":300
    },
    "DiskIds":{
      "type":"list",
      "member":{"shape":"DiskId"}
    },
    "Disks":{
      "type":"list",
      "member":{"shape":"Disk"}
    },
    "DoubleObject":{"type":"double"},
    "ErrorCode":{
      "type":"string",
      "enum":[
        "ActivationKeyExpired",
        "ActivationKeyInvalid",
        "ActivationKeyNotFound",
        "GatewayInternalError",
        "GatewayNotConnected",
        "GatewayNotFound",
        "GatewayProxyNetworkConnectionBusy",
        "AuthenticationFailure",
        "BandwidthThrottleScheduleNotFound",
        "Blocked",
        "CannotExportSnapshot",
        "ChapCredentialNotFound",
        "DiskAlreadyAllocated",
        "DiskDoesNotExist",
        "DiskSizeGreaterThanVolumeMaxSize",
        "DiskSizeLessThanVolumeSize",
        "DiskSizeNotGigAligned",
        "DuplicateCertificateInfo",
        "DuplicateSchedule",
        "EndpointNotFound",
        "IAMNotSupported",
        "InitiatorInvalid",
        "InitiatorNotFound",
        "InternalError",
        "InvalidGateway",
        "InvalidEndpoint",
        "InvalidParameters",
        "InvalidSchedule",
        "LocalStorageLimitExceeded",
        "LunAlreadyAllocated ",
        "LunInvalid",
        "MaximumContentLengthExceeded",
        "MaximumTapeCartridgeCountExceeded",
        "MaximumVolumeCountExceeded",
        "NetworkConfigurationChanged",
        "NoDisksAvailable",
        "NotImplemented",
        "NotSupported",
        "OperationAborted",
        "OutdatedGateway",
        "ParametersNotImplemented",
        "RegionInvalid",
        "RequestTimeout",
        "ServiceUnavailable",
        "SnapshotDeleted",
        "SnapshotIdInvalid",
        "SnapshotInProgress",
        "SnapshotNotFound",
        "SnapshotScheduleNotFound",
        "StagingAreaFull",
        "StorageFailure",
        "TapeCartridgeNotFound",
        "TargetAlreadyExists",
        "TargetInvalid",
        "TargetNotFound",
        "UnauthorizedOperation",
        "VolumeAlreadyExists",
        "VolumeIdInvalid",
        "VolumeInUse",
        "VolumeNotFound",
        "VolumeNotReady"
      ]
    },
    "GatewayARN":{
      "type":"string",
      "min":50,
      "max":500
    },
    "GatewayId":{
      "type":"string",
      "min":12,
      "max":30
    },
    "GatewayInfo":{
      "type":"structure",
      "members":{
        "GatewayARN":{"shape":"GatewayARN"},
        "GatewayType":{"shape":"GatewayType"},
        "GatewayOperationalState":{"shape":"GatewayOperationalState"}
      }
    },
    "GatewayName":{
      "type":"string",
      "min":2,
      "max":255,
      "pattern":"^[ -\\.0-\\[\\]-~]*[!-\\.0-\\[\\]-~][ -\\.0-\\[\\]-~]*$"
    },
    "GatewayNetworkInterfaces":{
      "type":"list",
      "member":{"shape":"NetworkInterface"}
    },
    "GatewayOperationalState":{
      "type":"string",
      "min":2,
      "max":25
    },
    "GatewayState":{
      "type":"string",
      "min":2,
      "max":25
    },
    "GatewayTimezone":{
      "type":"string",
      "min":3,
      "max":10
    },
    "GatewayType":{
      "type":"string",
      "min":2,
      "max":20
    },
    "Gateways":{
      "type":"list",
      "member":{"shape":"GatewayInfo"}
    },
    "HourOfDay":{
      "type":"integer",
      "min":0,
      "max":23
    },
    "InternalServerError":{
      "type":"structure",
      "members":{
        "message":{"shape":"string"},
        "error":{"shape":"StorageGatewayError"}
      },
      "error":{"httpStatusCode":500},
      "exception":true
    },
    "InvalidGatewayRequestException":{
      "type":"structure",
      "members":{
        "message":{"shape":"string"},
        "error":{"shape":"StorageGatewayError"}
      },
      "error":{"httpStatusCode":400},
      "exception":true
    },
    "IqnName":{
      "type":"string",
      "min":1,
      "max":255,
      "pattern":"[0-9a-z:.-]+"
    },
    "ListGatewaysInput":{
      "type":"structure",
      "members":{
        "Marker":{"shape":"Marker"},
        "Limit":{"shape":"PositiveIntObject"}
      }
    },
    "ListGatewaysOutput":{
      "type":"structure",
      "members":{
        "Gateways":{"shape":"Gateways"},
        "Marker":{"shape":"Marker"}
      }
    },
    "ListLocalDisksInput":{
      "type":"structure",
      "required":["GatewayARN"],
      "members":{
        "GatewayARN":{"shape":"GatewayARN"}
      }
    },
    "ListLocalDisksOutput":{
      "type":"structure",
      "members":{
        "GatewayARN":{"shape":"GatewayARN"},
        "Disks":{"shape":"Disks"}
      }
    },
    "ListVolumeRecoveryPointsInput":{
      "type":"structure",
      "required":["GatewayARN"],
      "members":{
        "GatewayARN":{"shape":"GatewayARN"}
      }
    },
    "ListVolumeRecoveryPointsOutput":{
      "type":"structure",
      "members":{
        "GatewayARN":{"shape":"GatewayARN"},
        "VolumeRecoveryPointInfos":{"shape":"VolumeRecoveryPointInfos"}
      }
    },
    "ListVolumesInput":{
      "type":"structure",
      "required":["GatewayARN"],
      "members":{
        "GatewayARN":{"shape":"GatewayARN"},
        "Marker":{"shape":"Marker"},
        "Limit":{"shape":"PositiveIntObject"}
      }
    },
    "ListVolumesOutput":{
      "type":"structure",
      "members":{
        "GatewayARN":{"shape":"GatewayARN"},
        "Marker":{"shape":"Marker"},
        "VolumeInfos":{"shape":"VolumeInfos"}
      }
    },
    "Marker":{
      "type":"string",
      "min":1,
      "max":1000
    },
    "MediumChangerType":{
      "type":"string",
      "min":2,
      "max":50
    },
    "MinuteOfHour":{
      "type":"integer",
      "min":0,
      "max":59
    },
    "NetworkInterface":{
      "type":"structure",
      "members":{
        "Ipv4Address":{"shape":"string"},
        "MacAddress":{"shape":"string"},
        "Ipv6Address":{"shape":"string"}
      }
    },
    "NetworkInterfaceId":{
      "type":"string",
      "pattern":"\\A(25[0-5]|2[0-4]\\d|[0-1]?\\d?\\d)(\\.(25[0-5]|2[0-4]\\d|[0-1]?\\d?\\d)){3}\\z"
    },
    "NextUpdateAvailabilityDate":{
      "type":"string",
      "min":1,
      "max":25
    },
    "NumTapesToCreate":{
      "type":"integer",
      "min":1,
      "max":10
    },
    "PositiveIntObject":{
      "type":"integer",
      "min":1
    },
    "RecurrenceInHours":{
      "type":"integer",
      "min":1,
      "max":24
    },
    "RegionId":{
      "type":"string",
      "min":1,
      "max":25
    },
    "RetrieveTapeArchiveInput":{
      "type":"structure",
      "required":[
        "TapeARN",
        "GatewayARN"
      ],
      "members":{
        "TapeARN":{"shape":"TapeARN"},
        "GatewayARN":{"shape":"GatewayARN"}
      }
    },
    "RetrieveTapeArchiveOutput":{
      "type":"structure",
      "members":{
        "TapeARN":{"shape":"TapeARN"}
      }
    },
    "RetrieveTapeRecoveryPointInput":{
      "type":"structure",
      "required":[
        "TapeARN",
        "GatewayARN"
      ],
      "members":{
        "TapeARN":{"shape":"TapeARN"},
        "GatewayARN":{"shape":"GatewayARN"}
      }
    },
    "RetrieveTapeRecoveryPointOutput":{
      "type":"structure",
      "members":{
        "TapeARN":{"shape":"TapeARN"}
      }
    },
    "ShutdownGatewayInput":{
      "type":"structure",
      "required":["GatewayARN"],
      "members":{
        "GatewayARN":{"shape":"GatewayARN"}
      }
    },
    "ShutdownGatewayOutput":{
      "type":"structure",
      "members":{
        "GatewayARN":{"shape":"GatewayARN"}
      }
    },
    "SnapshotDescription":{
      "type":"string",
      "min":1,
      "max":255
    },
    "SnapshotId":{
      "type":"string",
      "pattern":"\\Asnap-[0-9a-fA-F]{8}\\z"
    },
    "StartGatewayInput":{
      "type":"structure",
      "required":["GatewayARN"],
      "members":{
        "GatewayARN":{"shape":"GatewayARN"}
      }
    },
    "StartGatewayOutput":{
      "type":"structure",
      "members":{
        "GatewayARN":{"shape":"GatewayARN"}
      }
    },
    "StorageGatewayError":{
      "type":"structure",
      "members":{
        "errorCode":{"shape":"ErrorCode"},
        "errorDetails":{"shape":"errorDetails"}
      }
    },
    "StorediSCSIVolume":{
      "type":"structure",
      "members":{
        "VolumeARN":{"shape":"VolumeARN"},
        "VolumeId":{"shape":"VolumeId"},
        "VolumeType":{"shape":"VolumeType"},
        "VolumeStatus":{"shape":"VolumeStatus"},
        "VolumeSizeInBytes":{"shape":"long"},
        "VolumeProgress":{"shape":"DoubleObject"},
        "VolumeDiskId":{"shape":"DiskId"},
        "SourceSnapshotId":{"shape":"SnapshotId"},
        "PreservedExistingData":{"shape":"boolean"},
        "VolumeiSCSIAttributes":{"shape":"VolumeiSCSIAttributes"}
      }
    },
    "StorediSCSIVolumes":{
      "type":"list",
      "member":{"shape":"StorediSCSIVolume"}
    },
    "Tape":{
      "type":"structure",
      "members":{
        "TapeARN":{"shape":"TapeARN"},
        "TapeBarcode":{"shape":"TapeBarcode"},
        "TapeSizeInBytes":{"shape":"TapeSize"},
        "TapeStatus":{"shape":"TapeStatus"},
        "VTLDevice":{"shape":"VTLDeviceARN"},
        "Progress":{"shape":"DoubleObject"}
      }
    },
    "TapeARN":{
      "type":"string",
      "min":50,
      "max":500
    },
    "TapeARNs":{
      "type":"list",
      "member":{"shape":"TapeARN"}
    },
    "TapeArchive":{
      "type":"structure",
      "members":{
        "TapeARN":{"shape":"TapeARN"},
        "TapeBarcode":{"shape":"TapeBarcode"},
        "TapeSizeInBytes":{"shape":"TapeSize"},
        "CompletionTime":{"shape":"Time"},
        "RetrievedTo":{"shape":"GatewayARN"},
        "TapeStatus":{"shape":"TapeArchiveStatus"}
      }
    },
    "TapeArchiveStatus":{"type":"string"},
    "TapeArchives":{
      "type":"list",
      "member":{"shape":"TapeArchive"}
    },
    "TapeBarcode":{
      "type":"string",
      "min":8,
      "max":16,
      "pattern":"^[A-Z0-9]*$"
    },
    "TapeBarcodePrefix":{
      "type":"string",
      "min":1,
      "max":4,
      "pattern":"^[A-Z]*$"
    },
    "TapeDriveType":{
      "type":"string",
      "min":2,
      "max":50
    },
    "TapeRecoveryPointInfo":{
      "type":"structure",
      "members":{
        "TapeARN":{"shape":"TapeARN"},
        "TapeRecoveryPointTime":{"shape":"Time"},
        "TapeSizeInBytes":{"shape":"TapeSize"},
        "TapeStatus":{"shape":"TapeRecoveryPointStatus"}
      }
    },
    "TapeRecoveryPointInfos":{
      "type":"list",
      "member":{"shape":"TapeRecoveryPointInfo"}
    },
    "TapeRecoveryPointStatus":{"type":"string"},
    "TapeSize":{
      "type":"long",
      "min":107374182400,
      "max":2748779069440
    },
    "TapeStatus":{"type":"string"},
    "Tapes":{
      "type":"list",
      "member":{"shape":"Tape"}
    },
    "TargetARN":{
      "type":"string",
      "min":50,
      "max":800
    },
    "TargetName":{
      "type":"string",
      "min":1,
      "max":200,
      "pattern":"^[-\\.;a-z0-9]+$"
    },
    "Time":{"type":"timestamp"},
    "UpdateBandwidthRateLimitInput":{
      "type":"structure",
      "required":["GatewayARN"],
      "members":{
        "GatewayARN":{"shape":"GatewayARN"},
        "AverageUploadRateLimitInBitsPerSec":{"shape":"BandwidthUploadRateLimit"},
        "AverageDownloadRateLimitInBitsPerSec":{"shape":"BandwidthDownloadRateLimit"}
      }
    },
    "UpdateBandwidthRateLimitOutput":{
      "type":"structure",
      "members":{
        "GatewayARN":{"shape":"GatewayARN"}
      }
    },
    "UpdateChapCredentialsInput":{
      "type":"structure",
      "required":[
        "TargetARN",
        "SecretToAuthenticateInitiator",
        "InitiatorName"
      ],
      "members":{
        "TargetARN":{"shape":"TargetARN"},
        "SecretToAuthenticateInitiator":{"shape":"ChapSecret"},
        "InitiatorName":{"shape":"IqnName"},
        "SecretToAuthenticateTarget":{"shape":"ChapSecret"}
      }
    },
    "UpdateChapCredentialsOutput":{
      "type":"structure",
      "members":{
        "TargetARN":{"shape":"TargetARN"},
        "InitiatorName":{"shape":"IqnName"}
      }
    },
    "UpdateGatewayInformationInput":{
      "type":"structure",
      "required":["GatewayARN"],
      "members":{
        "GatewayARN":{"shape":"GatewayARN"},
        "GatewayName":{"shape":"GatewayName"},
        "GatewayTimezone":{"shape":"GatewayTimezone"}
      }
    },
    "UpdateGatewayInformationOutput":{
      "type":"structure",
      "members":{
        "GatewayARN":{"shape":"GatewayARN"}
      }
    },
    "UpdateGatewaySoftwareNowInput":{
      "type":"structure",
      "required":["GatewayARN"],
      "members":{
        "GatewayARN":{"shape":"GatewayARN"}
      }
    },
    "UpdateGatewaySoftwareNowOutput":{
      "type":"structure",
      "members":{
        "GatewayARN":{"shape":"GatewayARN"}
      }
    },
    "UpdateMaintenanceStartTimeInput":{
      "type":"structure",
      "required":[
        "GatewayARN",
        "HourOfDay",
        "MinuteOfHour",
        "DayOfWeek"
      ],
      "members":{
        "GatewayARN":{"shape":"GatewayARN"},
        "HourOfDay":{"shape":"HourOfDay"},
        "MinuteOfHour":{"shape":"MinuteOfHour"},
        "DayOfWeek":{"shape":"DayOfWeek"}
      }
    },
    "UpdateMaintenanceStartTimeOutput":{
      "type":"structure",
      "members":{
        "GatewayARN":{"shape":"GatewayARN"}
      }
    },
    "UpdateSnapshotScheduleInput":{
      "type":"structure",
      "required":[
        "VolumeARN",
        "StartAt",
        "RecurrenceInHours"
      ],
      "members":{
        "VolumeARN":{"shape":"VolumeARN"},
        "StartAt":{"shape":"HourOfDay"},
        "RecurrenceInHours":{"shape":"RecurrenceInHours"},
        "Description":{"shape":"Description"}
      }
    },
    "UpdateSnapshotScheduleOutput":{
      "type":"structure",
      "members":{
        "VolumeARN":{"shape":"VolumeARN"}
      }
    },
    "VTLDevice":{
      "type":"structure",
      "members":{
        "VTLDeviceARN":{"shape":"VTLDeviceARN"},
        "VTLDeviceType":{"shape":"VTLDeviceType"},
        "VTLDeviceVendor":{"shape":"VTLDeviceVendor"},
        "VTLDeviceProductIdentifier":{"shape":"VTLDeviceProductIdentifier"},
        "DeviceiSCSIAttributes":{"shape":"DeviceiSCSIAttributes"}
      }
    },
    "VTLDeviceARN":{
      "type":"string",
      "min":50,
      "max":500
    },
    "VTLDeviceARNs":{
      "type":"list",
      "member":{"shape":"VTLDeviceARN"}
    },
    "VTLDeviceProductIdentifier":{"type":"string"},
    "VTLDeviceType":{"type":"string"},
    "VTLDeviceVendor":{"type":"string"},
    "VTLDevices":{
      "type":"list",
      "member":{"shape":"VTLDevice"}
    },
    "VolumeARN":{
      "type":"string",
      "min":50,
      "max":500
    },
    "VolumeARNs":{
      "type":"list",
      "member":{"shape":"VolumeARN"}
    },
    "VolumeId":{
      "type":"string",
      "min":12,
      "max":30
    },
    "VolumeInfo":{
      "type":"structure",
      "members":{
        "VolumeARN":{"shape":"VolumeARN"},
        "VolumeType":{"shape":"VolumeType"}
      }
    },
    "VolumeInfos":{
      "type":"list",
      "member":{"shape":"VolumeInfo"}
    },
    "VolumeRecoveryPointInfo":{
      "type":"structure",
      "members":{
        "VolumeARN":{"shape":"VolumeARN"},
        "VolumeSizeInBytes":{"shape":"long"},
        "VolumeUsageInBytes":{"shape":"long"},
        "VolumeRecoveryPointTime":{"shape":"string"}
      }
    },
    "VolumeRecoveryPointInfos":{
      "type":"list",
      "member":{"shape":"VolumeRecoveryPointInfo"}
    },
    "VolumeStatus":{
      "type":"string",
      "min":3,
      "max":50
    },
    "VolumeType":{
      "type":"string",
      "min":3,
      "max":100
    },
    "VolumeiSCSIAttributes":{
      "type":"structure",
      "members":{
        "TargetARN":{"shape":"TargetARN"},
        "NetworkInterfaceId":{"shape":"NetworkInterfaceId"},
        "NetworkInterfacePort":{"shape":"integer"},
        "LunNumber":{"shape":"PositiveIntObject"},
        "ChapEnabled":{"shape":"boolean"}
      }
    },
    "boolean":{"type":"boolean"},
    "double":{"type":"double"},
    "errorDetails":{
      "type":"map",
      "key":{"shape":"string"},
      "value":{"shape":"string"}
    },
    "integer":{"type":"integer"},
    "long":{"type":"long"},
    "string":{"type":"string"}
  }
}
,
"STS":
{
  "metadata":{
    "apiVersion":"2011-06-15",
    "endpointPrefix":"sts",
    "globalEndpoint":"sts.amazonaws.com",
    "serviceAbbreviation":"AWS STS",
    "serviceFullName":"AWS Security Token Service",
    "signatureVersion":"v4",
    "xmlNamespace":"https://sts.amazonaws.com/doc/2011-06-15/",
    "protocol":"query"
  },
  "operations":{
    "AssumeRole":{
      "name":"AssumeRole",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"AssumeRoleRequest"},
      "output":{
        "shape":"AssumeRoleResponse",
        "resultWrapper":"AssumeRoleResult"
      },
      "errors":[
        {
          "shape":"MalformedPolicyDocumentException",
          "error":{
            "code":"MalformedPolicyDocument",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"PackedPolicyTooLargeException",
          "error":{
            "code":"PackedPolicyTooLarge",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "AssumeRoleWithSAML":{
      "name":"AssumeRoleWithSAML",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"AssumeRoleWithSAMLRequest"},
      "output":{
        "shape":"AssumeRoleWithSAMLResponse",
        "resultWrapper":"AssumeRoleWithSAMLResult"
      },
      "errors":[
        {
          "shape":"MalformedPolicyDocumentException",
          "error":{
            "code":"MalformedPolicyDocument",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"PackedPolicyTooLargeException",
          "error":{
            "code":"PackedPolicyTooLarge",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"IDPRejectedClaimException",
          "error":{
            "code":"IDPRejectedClaim",
            "httpStatusCode":403,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidIdentityTokenException",
          "error":{
            "code":"InvalidIdentityToken",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"ExpiredTokenException",
          "error":{
            "code":"ExpiredTokenException",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "AssumeRoleWithWebIdentity":{
      "name":"AssumeRoleWithWebIdentity",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"AssumeRoleWithWebIdentityRequest"},
      "output":{
        "shape":"AssumeRoleWithWebIdentityResponse",
        "resultWrapper":"AssumeRoleWithWebIdentityResult"
      },
      "errors":[
        {
          "shape":"MalformedPolicyDocumentException",
          "error":{
            "code":"MalformedPolicyDocument",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"PackedPolicyTooLargeException",
          "error":{
            "code":"PackedPolicyTooLarge",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"IDPRejectedClaimException",
          "error":{
            "code":"IDPRejectedClaim",
            "httpStatusCode":403,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"IDPCommunicationErrorException",
          "error":{
            "code":"IDPCommunicationError",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"InvalidIdentityTokenException",
          "error":{
            "code":"InvalidIdentityToken",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"ExpiredTokenException",
          "error":{
            "code":"ExpiredTokenException",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "DecodeAuthorizationMessage":{
      "name":"DecodeAuthorizationMessage",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DecodeAuthorizationMessageRequest"},
      "output":{
        "shape":"DecodeAuthorizationMessageResponse",
        "resultWrapper":"DecodeAuthorizationMessageResult"
      },
      "errors":[
        {
          "shape":"InvalidAuthorizationMessageException",
          "error":{
            "code":"InvalidAuthorizationMessageException",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "GetFederationToken":{
      "name":"GetFederationToken",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"GetFederationTokenRequest"},
      "output":{
        "shape":"GetFederationTokenResponse",
        "resultWrapper":"GetFederationTokenResult"
      },
      "errors":[
        {
          "shape":"MalformedPolicyDocumentException",
          "error":{
            "code":"MalformedPolicyDocument",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        },
        {
          "shape":"PackedPolicyTooLargeException",
          "error":{
            "code":"PackedPolicyTooLarge",
            "httpStatusCode":400,
            "senderFault":true
          },
          "exception":true
        }
      ]
    },
    "GetSessionToken":{
      "name":"GetSessionToken",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"GetSessionTokenRequest"},
      "output":{
        "shape":"GetSessionTokenResponse",
        "resultWrapper":"GetSessionTokenResult"
      }
    }
  },
  "shapes":{
    "AssumeRoleRequest":{
      "type":"structure",
      "required":[
        "RoleArn",
        "RoleSessionName"
      ],
      "members":{
        "RoleArn":{"shape":"arnType"},
        "RoleSessionName":{"shape":"userNameType"},
        "Policy":{"shape":"sessionPolicyDocumentType"},
        "DurationSeconds":{"shape":"roleDurationSecondsType"},
        "ExternalId":{"shape":"externalIdType"},
        "SerialNumber":{"shape":"serialNumberType"},
        "TokenCode":{"shape":"tokenCodeType"}
      }
    },
    "AssumeRoleResponse":{
      "type":"structure",
      "members":{
        "Credentials":{"shape":"Credentials"},
        "AssumedRoleUser":{"shape":"AssumedRoleUser"},
        "PackedPolicySize":{"shape":"nonNegativeIntegerType"}
      }
    },
    "AssumeRoleWithSAMLRequest":{
      "type":"structure",
      "required":[
        "RoleArn",
        "PrincipalArn",
        "SAMLAssertion"
      ],
      "members":{
        "RoleArn":{"shape":"arnType"},
        "PrincipalArn":{"shape":"arnType"},
        "SAMLAssertion":{"shape":"SAMLAssertionType"},
        "Policy":{"shape":"sessionPolicyDocumentType"},
        "DurationSeconds":{"shape":"durationSecondsType"}
      }
    },
    "AssumeRoleWithSAMLResponse":{
      "type":"structure",
      "members":{
        "Credentials":{"shape":"Credentials"},
        "AssumedRoleUser":{"shape":"AssumedRoleUser"},
        "PackedPolicySize":{"shape":"nonNegativeIntegerType"},
        "Subject":{"shape":"Subject"},
        "SubjectType":{"shape":"SubjectType"},
        "Issuer":{"shape":"Issuer"},
        "Audience":{"shape":"Audience"},
        "NameQualifier":{"shape":"NameQualifier"}
      }
    },
    "AssumeRoleWithWebIdentityRequest":{
      "type":"structure",
      "required":[
        "RoleArn",
        "RoleSessionName",
        "WebIdentityToken"
      ],
      "members":{
        "RoleArn":{"shape":"arnType"},
        "RoleSessionName":{"shape":"userNameType"},
        "WebIdentityToken":{"shape":"clientTokenType"},
        "ProviderId":{"shape":"urlType"},
        "Policy":{"shape":"sessionPolicyDocumentType"},
        "DurationSeconds":{"shape":"durationSecondsType"}
      }
    },
    "AssumeRoleWithWebIdentityResponse":{
      "type":"structure",
      "members":{
        "Credentials":{"shape":"Credentials"},
        "SubjectFromWebIdentityToken":{"shape":"webIdentitySubjectType"},
        "AssumedRoleUser":{"shape":"AssumedRoleUser"},
        "PackedPolicySize":{"shape":"nonNegativeIntegerType"},
        "Provider":{"shape":"Issuer"},
        "Audience":{"shape":"Audience"}
      }
    },
    "AssumedRoleUser":{
      "type":"structure",
      "required":[
        "AssumedRoleId",
        "Arn"
      ],
      "members":{
        "AssumedRoleId":{"shape":"assumedRoleIdType"},
        "Arn":{"shape":"arnType"}
      }
    },
    "Audience":{"type":"string"},
    "Credentials":{
      "type":"structure",
      "required":[
        "AccessKeyId",
        "SecretAccessKey",
        "SessionToken",
        "Expiration"
      ],
      "members":{
        "AccessKeyId":{"shape":"accessKeyIdType"},
        "SecretAccessKey":{"shape":"accessKeySecretType"},
        "SessionToken":{"shape":"tokenType"},
        "Expiration":{"shape":"dateType"}
      }
    },
    "DecodeAuthorizationMessageRequest":{
      "type":"structure",
      "required":["EncodedMessage"],
      "members":{
        "EncodedMessage":{"shape":"encodedMessageType"}
      }
    },
    "DecodeAuthorizationMessageResponse":{
      "type":"structure",
      "members":{
        "DecodedMessage":{"shape":"decodedMessageType"}
      }
    },
    "ExpiredTokenException":{
      "type":"structure",
      "members":{
        "message":{"shape":"expiredIdentityTokenMessage"}
      },
      "error":{
        "code":"ExpiredTokenException",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "FederatedUser":{
      "type":"structure",
      "required":[
        "FederatedUserId",
        "Arn"
      ],
      "members":{
        "FederatedUserId":{"shape":"federatedIdType"},
        "Arn":{"shape":"arnType"}
      }
    },
    "GetFederationTokenRequest":{
      "type":"structure",
      "required":["Name"],
      "members":{
        "Name":{"shape":"userNameType"},
        "Policy":{"shape":"sessionPolicyDocumentType"},
        "DurationSeconds":{"shape":"durationSecondsType"}
      }
    },
    "GetFederationTokenResponse":{
      "type":"structure",
      "members":{
        "Credentials":{"shape":"Credentials"},
        "FederatedUser":{"shape":"FederatedUser"},
        "PackedPolicySize":{"shape":"nonNegativeIntegerType"}
      }
    },
    "GetSessionTokenRequest":{
      "type":"structure",
      "members":{
        "DurationSeconds":{"shape":"durationSecondsType"},
        "SerialNumber":{"shape":"serialNumberType"},
        "TokenCode":{"shape":"tokenCodeType"}
      }
    },
    "GetSessionTokenResponse":{
      "type":"structure",
      "members":{
        "Credentials":{"shape":"Credentials"}
      }
    },
    "IDPCommunicationErrorException":{
      "type":"structure",
      "members":{
        "message":{"shape":"idpCommunicationErrorMessage"}
      },
      "error":{
        "code":"IDPCommunicationError",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "IDPRejectedClaimException":{
      "type":"structure",
      "members":{
        "message":{"shape":"idpRejectedClaimMessage"}
      },
      "error":{
        "code":"IDPRejectedClaim",
        "httpStatusCode":403,
        "senderFault":true
      },
      "exception":true
    },
    "InvalidAuthorizationMessageException":{
      "type":"structure",
      "members":{
        "message":{"shape":"invalidAuthorizationMessage"}
      },
      "error":{
        "code":"InvalidAuthorizationMessageException",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "InvalidIdentityTokenException":{
      "type":"structure",
      "members":{
        "message":{"shape":"invalidIdentityTokenMessage"}
      },
      "error":{
        "code":"InvalidIdentityToken",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "Issuer":{"type":"string"},
    "MalformedPolicyDocumentException":{
      "type":"structure",
      "members":{
        "message":{"shape":"malformedPolicyDocumentMessage"}
      },
      "error":{
        "code":"MalformedPolicyDocument",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "NameQualifier":{"type":"string"},
    "PackedPolicyTooLargeException":{
      "type":"structure",
      "members":{
        "message":{"shape":"packedPolicyTooLargeMessage"}
      },
      "error":{
        "code":"PackedPolicyTooLarge",
        "httpStatusCode":400,
        "senderFault":true
      },
      "exception":true
    },
    "SAMLAssertionType":{
      "type":"string",
      "min":4,
      "max":50000
    },
    "Subject":{"type":"string"},
    "SubjectType":{"type":"string"},
    "accessKeyIdType":{
      "type":"string",
      "min":16,
      "max":32,
      "pattern":"[\\w]*"
    },
    "accessKeySecretType":{"type":"string"},
    "arnType":{
      "type":"string",
      "min":20,
      "max":2048
    },
    "assumedRoleIdType":{
      "type":"string",
      "min":2,
      "max":96,
      "pattern":"[\\w+=,.@:-]*"
    },
    "clientTokenType":{
      "type":"string",
      "min":4,
      "max":2048
    },
    "dateType":{"type":"timestamp"},
    "decodedMessageType":{"type":"string"},
    "durationSecondsType":{
      "type":"integer",
      "min":900,
      "max":129600
    },
    "encodedMessageType":{
      "type":"string",
      "min":1,
      "max":10240
    },
    "expiredIdentityTokenMessage":{"type":"string"},
    "externalIdType":{
      "type":"string",
      "min":2,
      "max":96,
      "pattern":"[\\w+=,.@:-]*"
    },
    "federatedIdType":{
      "type":"string",
      "min":2,
      "max":96,
      "pattern":"[\\w+=,.@\\:-]*"
    },
    "idpCommunicationErrorMessage":{"type":"string"},
    "idpRejectedClaimMessage":{"type":"string"},
    "invalidAuthorizationMessage":{"type":"string"},
    "invalidIdentityTokenMessage":{"type":"string"},
    "malformedPolicyDocumentMessage":{"type":"string"},
    "nonNegativeIntegerType":{
      "type":"integer",
      "min":0
    },
    "packedPolicyTooLargeMessage":{"type":"string"},
    "roleDurationSecondsType":{
      "type":"integer",
      "min":900,
      "max":3600
    },
    "serialNumberType":{
      "type":"string",
      "min":9,
      "max":256,
      "pattern":"[\\w+=/:,.@-]*"
    },
    "sessionPolicyDocumentType":{
      "type":"string",
      "min":1,
      "max":2048,
      "pattern":"[\\u0009\\u000A\\u000D\\u0020-\\u00FF]+"
    },
    "tokenCodeType":{
      "type":"string",
      "min":6,
      "max":6,
      "pattern":"[\\d]*"
    },
    "tokenType":{"type":"string"},
    "urlType":{
      "type":"string",
      "min":4,
      "max":2048
    },
    "userNameType":{
      "type":"string",
      "min":2,
      "max":32,
      "pattern":"[\\w+=,.@-]*"
    },
    "webIdentitySubjectType":{
      "type":"string",
      "min":6,
      "max":255
    }
  }
}
,
"Support":
{
  "metadata":{
    "apiVersion":"2013-04-15",
    "endpointPrefix":"support",
    "jsonVersion":"1.1",
    "serviceFullName":"AWS Support",
    "signatureVersion":"v4",
    "targetPrefix":"AWSSupport_20130415",
    "protocol":"json"
  },
  "operations":{
    "AddAttachmentsToSet":{
      "name":"AddAttachmentsToSet",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"AddAttachmentsToSetRequest"},
      "output":{"shape":"AddAttachmentsToSetResponse"},
      "errors":[
        {
          "shape":"InternalServerError",
          "exception":true,
          "fault":true
        },
        {
          "shape":"AttachmentSetIdNotFound",
          "exception":true
        },
        {
          "shape":"AttachmentSetExpired",
          "exception":true
        },
        {
          "shape":"AttachmentSetSizeLimitExceeded",
          "exception":true
        },
        {
          "shape":"AttachmentLimitExceeded",
          "exception":true
        }
      ]
    },
    "AddCommunicationToCase":{
      "name":"AddCommunicationToCase",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"AddCommunicationToCaseRequest"},
      "output":{"shape":"AddCommunicationToCaseResponse"},
      "errors":[
        {
          "shape":"InternalServerError",
          "exception":true,
          "fault":true
        },
        {
          "shape":"CaseIdNotFound",
          "exception":true
        },
        {
          "shape":"AttachmentSetIdNotFound",
          "exception":true
        },
        {
          "shape":"AttachmentSetExpired",
          "exception":true
        }
      ]
    },
    "CreateCase":{
      "name":"CreateCase",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CreateCaseRequest"},
      "output":{"shape":"CreateCaseResponse"},
      "errors":[
        {
          "shape":"InternalServerError",
          "exception":true,
          "fault":true
        },
        {
          "shape":"CaseCreationLimitExceeded",
          "exception":true
        },
        {
          "shape":"AttachmentSetIdNotFound",
          "exception":true
        },
        {
          "shape":"AttachmentSetExpired",
          "exception":true
        }
      ]
    },
    "DescribeAttachment":{
      "name":"DescribeAttachment",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeAttachmentRequest"},
      "output":{"shape":"DescribeAttachmentResponse"},
      "errors":[
        {
          "shape":"InternalServerError",
          "exception":true,
          "fault":true
        },
        {
          "shape":"DescribeAttachmentLimitExceeded",
          "exception":true
        },
        {
          "shape":"AttachmentIdNotFound",
          "exception":true
        }
      ]
    },
    "DescribeCases":{
      "name":"DescribeCases",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeCasesRequest"},
      "output":{"shape":"DescribeCasesResponse"},
      "errors":[
        {
          "shape":"InternalServerError",
          "exception":true,
          "fault":true
        },
        {
          "shape":"CaseIdNotFound",
          "exception":true
        }
      ]
    },
    "DescribeCommunications":{
      "name":"DescribeCommunications",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeCommunicationsRequest"},
      "output":{"shape":"DescribeCommunicationsResponse"},
      "errors":[
        {
          "shape":"InternalServerError",
          "exception":true,
          "fault":true
        },
        {
          "shape":"CaseIdNotFound",
          "exception":true
        }
      ]
    },
    "DescribeServices":{
      "name":"DescribeServices",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeServicesRequest"},
      "output":{"shape":"DescribeServicesResponse"},
      "errors":[
        {
          "shape":"InternalServerError",
          "exception":true,
          "fault":true
        }
      ]
    },
    "DescribeSeverityLevels":{
      "name":"DescribeSeverityLevels",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeSeverityLevelsRequest"},
      "output":{"shape":"DescribeSeverityLevelsResponse"},
      "errors":[
        {
          "shape":"InternalServerError",
          "exception":true,
          "fault":true
        }
      ]
    },
    "DescribeTrustedAdvisorCheckRefreshStatuses":{
      "name":"DescribeTrustedAdvisorCheckRefreshStatuses",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeTrustedAdvisorCheckRefreshStatusesRequest"},
      "output":{"shape":"DescribeTrustedAdvisorCheckRefreshStatusesResponse"},
      "errors":[
        {
          "shape":"InternalServerError",
          "exception":true,
          "fault":true
        }
      ]
    },
    "DescribeTrustedAdvisorCheckResult":{
      "name":"DescribeTrustedAdvisorCheckResult",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeTrustedAdvisorCheckResultRequest"},
      "output":{"shape":"DescribeTrustedAdvisorCheckResultResponse"},
      "errors":[
        {
          "shape":"InternalServerError",
          "exception":true,
          "fault":true
        }
      ]
    },
    "DescribeTrustedAdvisorCheckSummaries":{
      "name":"DescribeTrustedAdvisorCheckSummaries",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeTrustedAdvisorCheckSummariesRequest"},
      "output":{"shape":"DescribeTrustedAdvisorCheckSummariesResponse"},
      "errors":[
        {
          "shape":"InternalServerError",
          "exception":true,
          "fault":true
        }
      ]
    },
    "DescribeTrustedAdvisorChecks":{
      "name":"DescribeTrustedAdvisorChecks",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeTrustedAdvisorChecksRequest"},
      "output":{"shape":"DescribeTrustedAdvisorChecksResponse"},
      "errors":[
        {
          "shape":"InternalServerError",
          "exception":true,
          "fault":true
        }
      ]
    },
    "RefreshTrustedAdvisorCheck":{
      "name":"RefreshTrustedAdvisorCheck",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"RefreshTrustedAdvisorCheckRequest"},
      "output":{"shape":"RefreshTrustedAdvisorCheckResponse"},
      "errors":[
        {
          "shape":"InternalServerError",
          "exception":true,
          "fault":true
        }
      ]
    },
    "ResolveCase":{
      "name":"ResolveCase",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ResolveCaseRequest"},
      "output":{"shape":"ResolveCaseResponse"},
      "errors":[
        {
          "shape":"InternalServerError",
          "exception":true,
          "fault":true
        },
        {
          "shape":"CaseIdNotFound",
          "exception":true
        }
      ]
    }
  },
  "shapes":{
    "AddAttachmentsToSetRequest":{
      "type":"structure",
      "required":["attachments"],
      "members":{
        "attachmentSetId":{"shape":"AttachmentSetId"},
        "attachments":{"shape":"Attachments"}
      }
    },
    "AddAttachmentsToSetResponse":{
      "type":"structure",
      "members":{
        "attachmentSetId":{"shape":"AttachmentSetId"},
        "expiryTime":{"shape":"ExpiryTime"}
      }
    },
    "AddCommunicationToCaseRequest":{
      "type":"structure",
      "required":["communicationBody"],
      "members":{
        "caseId":{"shape":"CaseId"},
        "communicationBody":{"shape":"CommunicationBody"},
        "ccEmailAddresses":{"shape":"CcEmailAddressList"},
        "attachmentSetId":{"shape":"AttachmentSetId"}
      }
    },
    "AddCommunicationToCaseResponse":{
      "type":"structure",
      "members":{
        "result":{"shape":"Result"}
      }
    },
    "AfterTime":{"type":"string"},
    "Attachment":{
      "type":"structure",
      "members":{
        "fileName":{"shape":"FileName"},
        "data":{"shape":"Data"}
      }
    },
    "AttachmentDetails":{
      "type":"structure",
      "members":{
        "attachmentId":{"shape":"AttachmentId"},
        "fileName":{"shape":"FileName"}
      }
    },
    "AttachmentId":{"type":"string"},
    "AttachmentIdNotFound":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "exception":true
    },
    "AttachmentLimitExceeded":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "exception":true
    },
    "AttachmentSet":{
      "type":"list",
      "member":{"shape":"AttachmentDetails"}
    },
    "AttachmentSetExpired":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "exception":true
    },
    "AttachmentSetId":{"type":"string"},
    "AttachmentSetIdNotFound":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "exception":true
    },
    "AttachmentSetSizeLimitExceeded":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "exception":true
    },
    "Attachments":{
      "type":"list",
      "member":{"shape":"Attachment"}
    },
    "BeforeTime":{"type":"string"},
    "Boolean":{"type":"boolean"},
    "CaseCreationLimitExceeded":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "exception":true
    },
    "CaseDetails":{
      "type":"structure",
      "members":{
        "caseId":{"shape":"CaseId"},
        "displayId":{"shape":"DisplayId"},
        "subject":{"shape":"Subject"},
        "status":{"shape":"Status"},
        "serviceCode":{"shape":"ServiceCode"},
        "categoryCode":{"shape":"CategoryCode"},
        "severityCode":{"shape":"SeverityCode"},
        "submittedBy":{"shape":"SubmittedBy"},
        "timeCreated":{"shape":"TimeCreated"},
        "recentCommunications":{"shape":"RecentCaseCommunications"},
        "ccEmailAddresses":{"shape":"CcEmailAddressList"},
        "language":{"shape":"Language"}
      }
    },
    "CaseId":{"type":"string"},
    "CaseIdList":{
      "type":"list",
      "member":{"shape":"CaseId"},
      "min":0,
      "max":100
    },
    "CaseIdNotFound":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "exception":true
    },
    "CaseList":{
      "type":"list",
      "member":{"shape":"CaseDetails"}
    },
    "CaseStatus":{"type":"string"},
    "Category":{
      "type":"structure",
      "members":{
        "code":{"shape":"CategoryCode"},
        "name":{"shape":"CategoryName"}
      }
    },
    "CategoryCode":{"type":"string"},
    "CategoryList":{
      "type":"list",
      "member":{"shape":"Category"}
    },
    "CategoryName":{"type":"string"},
    "CcEmailAddress":{"type":"string"},
    "CcEmailAddressList":{
      "type":"list",
      "member":{"shape":"CcEmailAddress"}
    },
    "Communication":{
      "type":"structure",
      "members":{
        "caseId":{"shape":"CaseId"},
        "body":{"shape":"CommunicationBody"},
        "submittedBy":{"shape":"SubmittedBy"},
        "timeCreated":{"shape":"TimeCreated"},
        "attachmentSet":{"shape":"AttachmentSet"}
      }
    },
    "CommunicationBody":{"type":"string"},
    "CommunicationList":{
      "type":"list",
      "member":{"shape":"Communication"}
    },
    "CreateCaseRequest":{
      "type":"structure",
      "required":[
        "subject",
        "communicationBody"
      ],
      "members":{
        "subject":{"shape":"Subject"},
        "serviceCode":{"shape":"ServiceCode"},
        "severityCode":{"shape":"SeverityCode"},
        "categoryCode":{"shape":"CategoryCode"},
        "communicationBody":{"shape":"CommunicationBody"},
        "ccEmailAddresses":{"shape":"CcEmailAddressList"},
        "language":{"shape":"Language"},
        "issueType":{"shape":"IssueType"},
        "attachmentSetId":{"shape":"AttachmentSetId"}
      }
    },
    "CreateCaseResponse":{
      "type":"structure",
      "members":{
        "caseId":{"shape":"CaseId"}
      }
    },
    "Data":{"type":"blob"},
    "DescribeAttachmentLimitExceeded":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "exception":true
    },
    "DescribeAttachmentRequest":{
      "type":"structure",
      "required":["attachmentId"],
      "members":{
        "attachmentId":{"shape":"AttachmentId"}
      }
    },
    "DescribeAttachmentResponse":{
      "type":"structure",
      "members":{
        "attachment":{"shape":"Attachment"}
      }
    },
    "DescribeCasesRequest":{
      "type":"structure",
      "members":{
        "caseIdList":{"shape":"CaseIdList"},
        "displayId":{"shape":"DisplayId"},
        "afterTime":{"shape":"AfterTime"},
        "beforeTime":{"shape":"BeforeTime"},
        "includeResolvedCases":{"shape":"IncludeResolvedCases"},
        "nextToken":{"shape":"NextToken"},
        "maxResults":{"shape":"MaxResults"},
        "language":{"shape":"Language"},
        "includeCommunications":{"shape":"IncludeCommunications"}
      }
    },
    "DescribeCasesResponse":{
      "type":"structure",
      "members":{
        "cases":{"shape":"CaseList"},
        "nextToken":{"shape":"NextToken"}
      }
    },
    "DescribeCommunicationsRequest":{
      "type":"structure",
      "required":["caseId"],
      "members":{
        "caseId":{"shape":"CaseId"},
        "beforeTime":{"shape":"BeforeTime"},
        "afterTime":{"shape":"AfterTime"},
        "nextToken":{"shape":"NextToken"},
        "maxResults":{"shape":"MaxResults"}
      }
    },
    "DescribeCommunicationsResponse":{
      "type":"structure",
      "members":{
        "communications":{"shape":"CommunicationList"},
        "nextToken":{"shape":"NextToken"}
      }
    },
    "DescribeServicesRequest":{
      "type":"structure",
      "members":{
        "serviceCodeList":{"shape":"ServiceCodeList"},
        "language":{"shape":"Language"}
      }
    },
    "DescribeServicesResponse":{
      "type":"structure",
      "members":{
        "services":{"shape":"ServiceList"}
      }
    },
    "DescribeSeverityLevelsRequest":{
      "type":"structure",
      "members":{
        "language":{"shape":"Language"}
      }
    },
    "DescribeSeverityLevelsResponse":{
      "type":"structure",
      "members":{
        "severityLevels":{"shape":"SeverityLevelsList"}
      }
    },
    "DescribeTrustedAdvisorCheckRefreshStatusesRequest":{
      "type":"structure",
      "required":["checkIds"],
      "members":{
        "checkIds":{"shape":"StringList"}
      }
    },
    "DescribeTrustedAdvisorCheckRefreshStatusesResponse":{
      "type":"structure",
      "required":["statuses"],
      "members":{
        "statuses":{"shape":"TrustedAdvisorCheckRefreshStatusList"}
      }
    },
    "DescribeTrustedAdvisorCheckResultRequest":{
      "type":"structure",
      "required":["checkId"],
      "members":{
        "checkId":{"shape":"String"},
        "language":{"shape":"String"}
      }
    },
    "DescribeTrustedAdvisorCheckResultResponse":{
      "type":"structure",
      "members":{
        "result":{"shape":"TrustedAdvisorCheckResult"}
      }
    },
    "DescribeTrustedAdvisorCheckSummariesRequest":{
      "type":"structure",
      "required":["checkIds"],
      "members":{
        "checkIds":{"shape":"StringList"}
      }
    },
    "DescribeTrustedAdvisorCheckSummariesResponse":{
      "type":"structure",
      "required":["summaries"],
      "members":{
        "summaries":{"shape":"TrustedAdvisorCheckSummaryList"}
      }
    },
    "DescribeTrustedAdvisorChecksRequest":{
      "type":"structure",
      "required":["language"],
      "members":{
        "language":{"shape":"String"}
      }
    },
    "DescribeTrustedAdvisorChecksResponse":{
      "type":"structure",
      "required":["checks"],
      "members":{
        "checks":{"shape":"TrustedAdvisorCheckList"}
      }
    },
    "DisplayId":{"type":"string"},
    "Double":{"type":"double"},
    "ErrorMessage":{"type":"string"},
    "ExpiryTime":{"type":"string"},
    "FileName":{"type":"string"},
    "IncludeCommunications":{"type":"boolean"},
    "IncludeResolvedCases":{"type":"boolean"},
    "InternalServerError":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "exception":true,
      "fault":true
    },
    "IssueType":{"type":"string"},
    "Language":{"type":"string"},
    "Long":{"type":"long"},
    "MaxResults":{
      "type":"integer",
      "min":10,
      "max":100
    },
    "NextToken":{"type":"string"},
    "RecentCaseCommunications":{
      "type":"structure",
      "members":{
        "communications":{"shape":"CommunicationList"},
        "nextToken":{"shape":"NextToken"}
      }
    },
    "RefreshTrustedAdvisorCheckRequest":{
      "type":"structure",
      "required":["checkId"],
      "members":{
        "checkId":{"shape":"String"}
      }
    },
    "RefreshTrustedAdvisorCheckResponse":{
      "type":"structure",
      "required":["status"],
      "members":{
        "status":{"shape":"TrustedAdvisorCheckRefreshStatus"}
      }
    },
    "ResolveCaseRequest":{
      "type":"structure",
      "members":{
        "caseId":{"shape":"CaseId"}
      }
    },
    "ResolveCaseResponse":{
      "type":"structure",
      "members":{
        "initialCaseStatus":{"shape":"CaseStatus"},
        "finalCaseStatus":{"shape":"CaseStatus"}
      }
    },
    "Result":{"type":"boolean"},
    "Service":{
      "type":"structure",
      "members":{
        "code":{"shape":"ServiceCode"},
        "name":{"shape":"ServiceName"},
        "categories":{"shape":"CategoryList"}
      }
    },
    "ServiceCode":{
      "type":"string",
      "pattern":"[0-9a-z\\-_]+"
    },
    "ServiceCodeList":{
      "type":"list",
      "member":{"shape":"ServiceCode"},
      "min":0,
      "max":100
    },
    "ServiceList":{
      "type":"list",
      "member":{"shape":"Service"}
    },
    "ServiceName":{"type":"string"},
    "SeverityCode":{"type":"string"},
    "SeverityLevel":{
      "type":"structure",
      "members":{
        "code":{"shape":"SeverityLevelCode"},
        "name":{"shape":"SeverityLevelName"}
      }
    },
    "SeverityLevelCode":{"type":"string"},
    "SeverityLevelName":{"type":"string"},
    "SeverityLevelsList":{
      "type":"list",
      "member":{"shape":"SeverityLevel"}
    },
    "Status":{"type":"string"},
    "String":{"type":"string"},
    "StringList":{
      "type":"list",
      "member":{"shape":"String"}
    },
    "Subject":{"type":"string"},
    "SubmittedBy":{"type":"string"},
    "TimeCreated":{"type":"string"},
    "TrustedAdvisorCategorySpecificSummary":{
      "type":"structure",
      "members":{
        "costOptimizing":{"shape":"TrustedAdvisorCostOptimizingSummary"}
      }
    },
    "TrustedAdvisorCheckDescription":{
      "type":"structure",
      "required":[
        "id",
        "name",
        "description",
        "category",
        "metadata"
      ],
      "members":{
        "id":{"shape":"String"},
        "name":{"shape":"String"},
        "description":{"shape":"String"},
        "category":{"shape":"String"},
        "metadata":{"shape":"StringList"}
      }
    },
    "TrustedAdvisorCheckList":{
      "type":"list",
      "member":{"shape":"TrustedAdvisorCheckDescription"}
    },
    "TrustedAdvisorCheckRefreshStatus":{
      "type":"structure",
      "required":[
        "checkId",
        "status",
        "millisUntilNextRefreshable"
      ],
      "members":{
        "checkId":{"shape":"String"},
        "status":{"shape":"String"},
        "millisUntilNextRefreshable":{"shape":"Long"}
      }
    },
    "TrustedAdvisorCheckRefreshStatusList":{
      "type":"list",
      "member":{"shape":"TrustedAdvisorCheckRefreshStatus"}
    },
    "TrustedAdvisorCheckResult":{
      "type":"structure",
      "required":[
        "checkId",
        "timestamp",
        "status",
        "resourcesSummary",
        "categorySpecificSummary",
        "flaggedResources"
      ],
      "members":{
        "checkId":{"shape":"String"},
        "timestamp":{"shape":"String"},
        "status":{"shape":"String"},
        "resourcesSummary":{"shape":"TrustedAdvisorResourcesSummary"},
        "categorySpecificSummary":{"shape":"TrustedAdvisorCategorySpecificSummary"},
        "flaggedResources":{"shape":"TrustedAdvisorResourceDetailList"}
      }
    },
    "TrustedAdvisorCheckSummary":{
      "type":"structure",
      "required":[
        "checkId",
        "timestamp",
        "status",
        "resourcesSummary",
        "categorySpecificSummary"
      ],
      "members":{
        "checkId":{"shape":"String"},
        "timestamp":{"shape":"String"},
        "status":{"shape":"String"},
        "hasFlaggedResources":{"shape":"Boolean"},
        "resourcesSummary":{"shape":"TrustedAdvisorResourcesSummary"},
        "categorySpecificSummary":{"shape":"TrustedAdvisorCategorySpecificSummary"}
      }
    },
    "TrustedAdvisorCheckSummaryList":{
      "type":"list",
      "member":{"shape":"TrustedAdvisorCheckSummary"}
    },
    "TrustedAdvisorCostOptimizingSummary":{
      "type":"structure",
      "required":[
        "estimatedMonthlySavings",
        "estimatedPercentMonthlySavings"
      ],
      "members":{
        "estimatedMonthlySavings":{"shape":"Double"},
        "estimatedPercentMonthlySavings":{"shape":"Double"}
      }
    },
    "TrustedAdvisorResourceDetail":{
      "type":"structure",
      "required":[
        "status",
        "region",
        "resourceId",
        "metadata"
      ],
      "members":{
        "status":{"shape":"String"},
        "region":{"shape":"String"},
        "resourceId":{"shape":"String"},
        "isSuppressed":{"shape":"Boolean"},
        "metadata":{"shape":"StringList"}
      }
    },
    "TrustedAdvisorResourceDetailList":{
      "type":"list",
      "member":{"shape":"TrustedAdvisorResourceDetail"}
    },
    "TrustedAdvisorResourcesSummary":{
      "type":"structure",
      "required":[
        "resourcesProcessed",
        "resourcesFlagged",
        "resourcesIgnored",
        "resourcesSuppressed"
      ],
      "members":{
        "resourcesProcessed":{"shape":"Long"},
        "resourcesFlagged":{"shape":"Long"},
        "resourcesIgnored":{"shape":"Long"},
        "resourcesSuppressed":{"shape":"Long"}
      }
    }
  }
}
,
"SWF":
{
  "metadata":{
    "apiVersion":"2012-01-25",
    "endpointPrefix":"swf",
    "jsonVersion":"1.0",
    "serviceAbbreviation":"Amazon SWF",
    "serviceFullName":"Amazon Simple Workflow Service",
    "signatureVersion":"v4",
    "targetPrefix":"SimpleWorkflowService",
    "timestampFormat":"unixTimestamp",
    "protocol":"json"
  },
  "operations":{
    "CountClosedWorkflowExecutions":{
      "name":"CountClosedWorkflowExecutions",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CountClosedWorkflowExecutionsInput"},
      "output":{"shape":"WorkflowExecutionCount"},
      "errors":[
        {
          "shape":"UnknownResourceFault",
          "exception":true
        },
        {
          "shape":"OperationNotPermittedFault",
          "exception":true
        }
      ]
    },
    "CountOpenWorkflowExecutions":{
      "name":"CountOpenWorkflowExecutions",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CountOpenWorkflowExecutionsInput"},
      "output":{"shape":"WorkflowExecutionCount"},
      "errors":[
        {
          "shape":"UnknownResourceFault",
          "exception":true
        },
        {
          "shape":"OperationNotPermittedFault",
          "exception":true
        }
      ]
    },
    "CountPendingActivityTasks":{
      "name":"CountPendingActivityTasks",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CountPendingActivityTasksInput"},
      "output":{"shape":"PendingTaskCount"},
      "errors":[
        {
          "shape":"UnknownResourceFault",
          "exception":true
        },
        {
          "shape":"OperationNotPermittedFault",
          "exception":true
        }
      ]
    },
    "CountPendingDecisionTasks":{
      "name":"CountPendingDecisionTasks",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"CountPendingDecisionTasksInput"},
      "output":{"shape":"PendingTaskCount"},
      "errors":[
        {
          "shape":"UnknownResourceFault",
          "exception":true
        },
        {
          "shape":"OperationNotPermittedFault",
          "exception":true
        }
      ]
    },
    "DeprecateActivityType":{
      "name":"DeprecateActivityType",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeprecateActivityTypeInput"},
      "errors":[
        {
          "shape":"UnknownResourceFault",
          "exception":true
        },
        {
          "shape":"TypeDeprecatedFault",
          "exception":true
        },
        {
          "shape":"OperationNotPermittedFault",
          "exception":true
        }
      ]
    },
    "DeprecateDomain":{
      "name":"DeprecateDomain",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeprecateDomainInput"},
      "errors":[
        {
          "shape":"UnknownResourceFault",
          "exception":true
        },
        {
          "shape":"DomainDeprecatedFault",
          "exception":true
        },
        {
          "shape":"OperationNotPermittedFault",
          "exception":true
        }
      ]
    },
    "DeprecateWorkflowType":{
      "name":"DeprecateWorkflowType",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DeprecateWorkflowTypeInput"},
      "errors":[
        {
          "shape":"UnknownResourceFault",
          "exception":true
        },
        {
          "shape":"TypeDeprecatedFault",
          "exception":true
        },
        {
          "shape":"OperationNotPermittedFault",
          "exception":true
        }
      ]
    },
    "DescribeActivityType":{
      "name":"DescribeActivityType",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeActivityTypeInput"},
      "output":{"shape":"ActivityTypeDetail"},
      "errors":[
        {
          "shape":"UnknownResourceFault",
          "exception":true
        },
        {
          "shape":"OperationNotPermittedFault",
          "exception":true
        }
      ]
    },
    "DescribeDomain":{
      "name":"DescribeDomain",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeDomainInput"},
      "output":{"shape":"DomainDetail"},
      "errors":[
        {
          "shape":"UnknownResourceFault",
          "exception":true
        },
        {
          "shape":"OperationNotPermittedFault",
          "exception":true
        }
      ]
    },
    "DescribeWorkflowExecution":{
      "name":"DescribeWorkflowExecution",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeWorkflowExecutionInput"},
      "output":{"shape":"WorkflowExecutionDetail"},
      "errors":[
        {
          "shape":"UnknownResourceFault",
          "exception":true
        },
        {
          "shape":"OperationNotPermittedFault",
          "exception":true
        }
      ]
    },
    "DescribeWorkflowType":{
      "name":"DescribeWorkflowType",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"DescribeWorkflowTypeInput"},
      "output":{"shape":"WorkflowTypeDetail"},
      "errors":[
        {
          "shape":"UnknownResourceFault",
          "exception":true
        },
        {
          "shape":"OperationNotPermittedFault",
          "exception":true
        }
      ]
    },
    "GetWorkflowExecutionHistory":{
      "name":"GetWorkflowExecutionHistory",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"GetWorkflowExecutionHistoryInput"},
      "output":{"shape":"History"},
      "errors":[
        {
          "shape":"UnknownResourceFault",
          "exception":true
        },
        {
          "shape":"OperationNotPermittedFault",
          "exception":true
        }
      ]
    },
    "ListActivityTypes":{
      "name":"ListActivityTypes",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ListActivityTypesInput"},
      "output":{"shape":"ActivityTypeInfos"},
      "errors":[
        {
          "shape":"OperationNotPermittedFault",
          "exception":true
        },
        {
          "shape":"UnknownResourceFault",
          "exception":true
        }
      ]
    },
    "ListClosedWorkflowExecutions":{
      "name":"ListClosedWorkflowExecutions",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ListClosedWorkflowExecutionsInput"},
      "output":{"shape":"WorkflowExecutionInfos"},
      "errors":[
        {
          "shape":"UnknownResourceFault",
          "exception":true
        },
        {
          "shape":"OperationNotPermittedFault",
          "exception":true
        }
      ]
    },
    "ListDomains":{
      "name":"ListDomains",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ListDomainsInput"},
      "output":{"shape":"DomainInfos"},
      "errors":[
        {
          "shape":"OperationNotPermittedFault",
          "exception":true
        }
      ]
    },
    "ListOpenWorkflowExecutions":{
      "name":"ListOpenWorkflowExecutions",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ListOpenWorkflowExecutionsInput"},
      "output":{"shape":"WorkflowExecutionInfos"},
      "errors":[
        {
          "shape":"UnknownResourceFault",
          "exception":true
        },
        {
          "shape":"OperationNotPermittedFault",
          "exception":true
        }
      ]
    },
    "ListWorkflowTypes":{
      "name":"ListWorkflowTypes",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"ListWorkflowTypesInput"},
      "output":{"shape":"WorkflowTypeInfos"},
      "errors":[
        {
          "shape":"OperationNotPermittedFault",
          "exception":true
        },
        {
          "shape":"UnknownResourceFault",
          "exception":true
        }
      ]
    },
    "PollForActivityTask":{
      "name":"PollForActivityTask",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"PollForActivityTaskInput"},
      "output":{"shape":"ActivityTask"},
      "errors":[
        {
          "shape":"UnknownResourceFault",
          "exception":true
        },
        {
          "shape":"OperationNotPermittedFault",
          "exception":true
        },
        {
          "shape":"LimitExceededFault",
          "exception":true
        }
      ]
    },
    "PollForDecisionTask":{
      "name":"PollForDecisionTask",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"PollForDecisionTaskInput"},
      "output":{"shape":"DecisionTask"},
      "errors":[
        {
          "shape":"UnknownResourceFault",
          "exception":true
        },
        {
          "shape":"OperationNotPermittedFault",
          "exception":true
        },
        {
          "shape":"LimitExceededFault",
          "exception":true
        }
      ]
    },
    "RecordActivityTaskHeartbeat":{
      "name":"RecordActivityTaskHeartbeat",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"RecordActivityTaskHeartbeatInput"},
      "output":{"shape":"ActivityTaskStatus"},
      "errors":[
        {
          "shape":"UnknownResourceFault",
          "exception":true
        },
        {
          "shape":"OperationNotPermittedFault",
          "exception":true
        }
      ]
    },
    "RegisterActivityType":{
      "name":"RegisterActivityType",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"RegisterActivityTypeInput"},
      "errors":[
        {
          "shape":"TypeAlreadyExistsFault",
          "exception":true
        },
        {
          "shape":"LimitExceededFault",
          "exception":true
        },
        {
          "shape":"UnknownResourceFault",
          "exception":true
        },
        {
          "shape":"OperationNotPermittedFault",
          "exception":true
        }
      ]
    },
    "RegisterDomain":{
      "name":"RegisterDomain",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"RegisterDomainInput"},
      "errors":[
        {
          "shape":"DomainAlreadyExistsFault",
          "exception":true
        },
        {
          "shape":"LimitExceededFault",
          "exception":true
        },
        {
          "shape":"OperationNotPermittedFault",
          "exception":true
        }
      ]
    },
    "RegisterWorkflowType":{
      "name":"RegisterWorkflowType",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"RegisterWorkflowTypeInput"},
      "errors":[
        {
          "shape":"TypeAlreadyExistsFault",
          "exception":true
        },
        {
          "shape":"LimitExceededFault",
          "exception":true
        },
        {
          "shape":"UnknownResourceFault",
          "exception":true
        },
        {
          "shape":"OperationNotPermittedFault",
          "exception":true
        }
      ]
    },
    "RequestCancelWorkflowExecution":{
      "name":"RequestCancelWorkflowExecution",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"RequestCancelWorkflowExecutionInput"},
      "errors":[
        {
          "shape":"UnknownResourceFault",
          "exception":true
        },
        {
          "shape":"OperationNotPermittedFault",
          "exception":true
        }
      ]
    },
    "RespondActivityTaskCanceled":{
      "name":"RespondActivityTaskCanceled",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"RespondActivityTaskCanceledInput"},
      "errors":[
        {
          "shape":"UnknownResourceFault",
          "exception":true
        },
        {
          "shape":"OperationNotPermittedFault",
          "exception":true
        }
      ]
    },
    "RespondActivityTaskCompleted":{
      "name":"RespondActivityTaskCompleted",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"RespondActivityTaskCompletedInput"},
      "errors":[
        {
          "shape":"UnknownResourceFault",
          "exception":true
        },
        {
          "shape":"OperationNotPermittedFault",
          "exception":true
        }
      ]
    },
    "RespondActivityTaskFailed":{
      "name":"RespondActivityTaskFailed",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"RespondActivityTaskFailedInput"},
      "errors":[
        {
          "shape":"UnknownResourceFault",
          "exception":true
        },
        {
          "shape":"OperationNotPermittedFault",
          "exception":true
        }
      ]
    },
    "RespondDecisionTaskCompleted":{
      "name":"RespondDecisionTaskCompleted",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"RespondDecisionTaskCompletedInput"},
      "errors":[
        {
          "shape":"UnknownResourceFault",
          "exception":true
        },
        {
          "shape":"OperationNotPermittedFault",
          "exception":true
        }
      ]
    },
    "SignalWorkflowExecution":{
      "name":"SignalWorkflowExecution",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"SignalWorkflowExecutionInput"},
      "errors":[
        {
          "shape":"UnknownResourceFault",
          "exception":true
        },
        {
          "shape":"OperationNotPermittedFault",
          "exception":true
        }
      ]
    },
    "StartWorkflowExecution":{
      "name":"StartWorkflowExecution",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"StartWorkflowExecutionInput"},
      "output":{"shape":"Run"},
      "errors":[
        {
          "shape":"UnknownResourceFault",
          "exception":true
        },
        {
          "shape":"TypeDeprecatedFault",
          "exception":true
        },
        {
          "shape":"WorkflowExecutionAlreadyStartedFault",
          "exception":true
        },
        {
          "shape":"LimitExceededFault",
          "exception":true
        },
        {
          "shape":"OperationNotPermittedFault",
          "exception":true
        },
        {
          "shape":"DefaultUndefinedFault",
          "exception":true
        }
      ]
    },
    "TerminateWorkflowExecution":{
      "name":"TerminateWorkflowExecution",
      "http":{
        "method":"POST",
        "requestUri":"/"
      },
      "input":{"shape":"TerminateWorkflowExecutionInput"},
      "errors":[
        {
          "shape":"UnknownResourceFault",
          "exception":true
        },
        {
          "shape":"OperationNotPermittedFault",
          "exception":true
        }
      ]
    }
  },
  "shapes":{
    "ActivityId":{
      "type":"string",
      "min":1,
      "max":256
    },
    "ActivityTask":{
      "type":"structure",
      "required":[
        "taskToken",
        "activityId",
        "startedEventId",
        "workflowExecution",
        "activityType"
      ],
      "members":{
        "taskToken":{"shape":"TaskToken"},
        "activityId":{"shape":"ActivityId"},
        "startedEventId":{"shape":"EventId"},
        "workflowExecution":{"shape":"WorkflowExecution"},
        "activityType":{"shape":"ActivityType"},
        "input":{"shape":"Data"}
      }
    },
    "ActivityTaskCancelRequestedEventAttributes":{
      "type":"structure",
      "required":[
        "decisionTaskCompletedEventId",
        "activityId"
      ],
      "members":{
        "decisionTaskCompletedEventId":{"shape":"EventId"},
        "activityId":{"shape":"ActivityId"}
      }
    },
    "ActivityTaskCanceledEventAttributes":{
      "type":"structure",
      "required":[
        "scheduledEventId",
        "startedEventId"
      ],
      "members":{
        "details":{"shape":"Data"},
        "scheduledEventId":{"shape":"EventId"},
        "startedEventId":{"shape":"EventId"},
        "latestCancelRequestedEventId":{"shape":"EventId"}
      }
    },
    "ActivityTaskCompletedEventAttributes":{
      "type":"structure",
      "required":[
        "scheduledEventId",
        "startedEventId"
      ],
      "members":{
        "result":{"shape":"Data"},
        "scheduledEventId":{"shape":"EventId"},
        "startedEventId":{"shape":"EventId"}
      }
    },
    "ActivityTaskFailedEventAttributes":{
      "type":"structure",
      "required":[
        "scheduledEventId",
        "startedEventId"
      ],
      "members":{
        "reason":{"shape":"FailureReason"},
        "details":{"shape":"Data"},
        "scheduledEventId":{"shape":"EventId"},
        "startedEventId":{"shape":"EventId"}
      }
    },
    "ActivityTaskScheduledEventAttributes":{
      "type":"structure",
      "required":[
        "activityType",
        "activityId",
        "taskList",
        "decisionTaskCompletedEventId"
      ],
      "members":{
        "activityType":{"shape":"ActivityType"},
        "activityId":{"shape":"ActivityId"},
        "input":{"shape":"Data"},
        "control":{"shape":"Data"},
        "scheduleToStartTimeout":{"shape":"DurationInSecondsOptional"},
        "scheduleToCloseTimeout":{"shape":"DurationInSecondsOptional"},
        "startToCloseTimeout":{"shape":"DurationInSecondsOptional"},
        "taskList":{"shape":"TaskList"},
        "decisionTaskCompletedEventId":{"shape":"EventId"},
        "heartbeatTimeout":{"shape":"DurationInSecondsOptional"}
      }
    },
    "ActivityTaskStartedEventAttributes":{
      "type":"structure",
      "required":["scheduledEventId"],
      "members":{
        "identity":{"shape":"Identity"},
        "scheduledEventId":{"shape":"EventId"}
      }
    },
    "ActivityTaskStatus":{
      "type":"structure",
      "required":["cancelRequested"],
      "members":{
        "cancelRequested":{"shape":"Canceled"}
      }
    },
    "ActivityTaskTimedOutEventAttributes":{
      "type":"structure",
      "required":[
        "timeoutType",
        "scheduledEventId",
        "startedEventId"
      ],
      "members":{
        "timeoutType":{"shape":"ActivityTaskTimeoutType"},
        "scheduledEventId":{"shape":"EventId"},
        "startedEventId":{"shape":"EventId"},
        "details":{"shape":"LimitedData"}
      }
    },
    "ActivityTaskTimeoutType":{
      "type":"string",
      "enum":[
        "START_TO_CLOSE",
        "SCHEDULE_TO_START",
        "SCHEDULE_TO_CLOSE",
        "HEARTBEAT"
      ]
    },
    "ActivityType":{
      "type":"structure",
      "required":[
        "name",
        "version"
      ],
      "members":{
        "name":{"shape":"Name"},
        "version":{"shape":"Version"}
      }
    },
    "ActivityTypeConfiguration":{
      "type":"structure",
      "members":{
        "defaultTaskStartToCloseTimeout":{"shape":"DurationInSecondsOptional"},
        "defaultTaskHeartbeatTimeout":{"shape":"DurationInSecondsOptional"},
        "defaultTaskList":{"shape":"TaskList"},
        "defaultTaskScheduleToStartTimeout":{"shape":"DurationInSecondsOptional"},
        "defaultTaskScheduleToCloseTimeout":{"shape":"DurationInSecondsOptional"}
      }
    },
    "ActivityTypeDetail":{
      "type":"structure",
      "required":[
        "typeInfo",
        "configuration"
      ],
      "members":{
        "typeInfo":{"shape":"ActivityTypeInfo"},
        "configuration":{"shape":"ActivityTypeConfiguration"}
      }
    },
    "ActivityTypeInfo":{
      "type":"structure",
      "required":[
        "activityType",
        "status",
        "creationDate"
      ],
      "members":{
        "activityType":{"shape":"ActivityType"},
        "status":{"shape":"RegistrationStatus"},
        "description":{"shape":"Description"},
        "creationDate":{"shape":"Timestamp"},
        "deprecationDate":{"shape":"Timestamp"}
      }
    },
    "ActivityTypeInfoList":{
      "type":"list",
      "member":{"shape":"ActivityTypeInfo"}
    },
    "ActivityTypeInfos":{
      "type":"structure",
      "required":["typeInfos"],
      "members":{
        "typeInfos":{"shape":"ActivityTypeInfoList"},
        "nextPageToken":{"shape":"PageToken"}
      }
    },
    "CancelTimerDecisionAttributes":{
      "type":"structure",
      "required":["timerId"],
      "members":{
        "timerId":{"shape":"TimerId"}
      }
    },
    "CancelTimerFailedCause":{
      "type":"string",
      "enum":[
        "TIMER_ID_UNKNOWN",
        "OPERATION_NOT_PERMITTED"
      ]
    },
    "CancelTimerFailedEventAttributes":{
      "type":"structure",
      "required":[
        "timerId",
        "cause",
        "decisionTaskCompletedEventId"
      ],
      "members":{
        "timerId":{"shape":"TimerId"},
        "cause":{"shape":"CancelTimerFailedCause"},
        "decisionTaskCompletedEventId":{"shape":"EventId"}
      }
    },
    "CancelWorkflowExecutionDecisionAttributes":{
      "type":"structure",
      "members":{
        "details":{"shape":"Data"}
      }
    },
    "CancelWorkflowExecutionFailedCause":{
      "type":"string",
      "enum":[
        "UNHANDLED_DECISION",
        "OPERATION_NOT_PERMITTED"
      ]
    },
    "CancelWorkflowExecutionFailedEventAttributes":{
      "type":"structure",
      "required":[
        "cause",
        "decisionTaskCompletedEventId"
      ],
      "members":{
        "cause":{"shape":"CancelWorkflowExecutionFailedCause"},
        "decisionTaskCompletedEventId":{"shape":"EventId"}
      }
    },
    "Canceled":{"type":"boolean"},
    "ChildPolicy":{
      "type":"string",
      "enum":[
        "TERMINATE",
        "REQUEST_CANCEL",
        "ABANDON"
      ]
    },
    "ChildWorkflowExecutionCanceledEventAttributes":{
      "type":"structure",
      "required":[
        "workflowExecution",
        "workflowType",
        "initiatedEventId",
        "startedEventId"
      ],
      "members":{
        "workflowExecution":{"shape":"WorkflowExecution"},
        "workflowType":{"shape":"WorkflowType"},
        "details":{"shape":"Data"},
        "initiatedEventId":{"shape":"EventId"},
        "startedEventId":{"shape":"EventId"}
      }
    },
    "ChildWorkflowExecutionCompletedEventAttributes":{
      "type":"structure",
      "required":[
        "workflowExecution",
        "workflowType",
        "initiatedEventId",
        "startedEventId"
      ],
      "members":{
        "workflowExecution":{"shape":"WorkflowExecution"},
        "workflowType":{"shape":"WorkflowType"},
        "result":{"shape":"Data"},
        "initiatedEventId":{"shape":"EventId"},
        "startedEventId":{"shape":"EventId"}
      }
    },
    "ChildWorkflowExecutionFailedEventAttributes":{
      "type":"structure",
      "required":[
        "workflowExecution",
        "workflowType",
        "initiatedEventId",
        "startedEventId"
      ],
      "members":{
        "workflowExecution":{"shape":"WorkflowExecution"},
        "workflowType":{"shape":"WorkflowType"},
        "reason":{"shape":"FailureReason"},
        "details":{"shape":"Data"},
        "initiatedEventId":{"shape":"EventId"},
        "startedEventId":{"shape":"EventId"}
      }
    },
    "ChildWorkflowExecutionStartedEventAttributes":{
      "type":"structure",
      "required":[
        "workflowExecution",
        "workflowType",
        "initiatedEventId"
      ],
      "members":{
        "workflowExecution":{"shape":"WorkflowExecution"},
        "workflowType":{"shape":"WorkflowType"},
        "initiatedEventId":{"shape":"EventId"}
      }
    },
    "ChildWorkflowExecutionTerminatedEventAttributes":{
      "type":"structure",
      "required":[
        "workflowExecution",
        "workflowType",
        "initiatedEventId",
        "startedEventId"
      ],
      "members":{
        "workflowExecution":{"shape":"WorkflowExecution"},
        "workflowType":{"shape":"WorkflowType"},
        "initiatedEventId":{"shape":"EventId"},
        "startedEventId":{"shape":"EventId"}
      }
    },
    "ChildWorkflowExecutionTimedOutEventAttributes":{
      "type":"structure",
      "required":[
        "workflowExecution",
        "workflowType",
        "timeoutType",
        "initiatedEventId",
        "startedEventId"
      ],
      "members":{
        "workflowExecution":{"shape":"WorkflowExecution"},
        "workflowType":{"shape":"WorkflowType"},
        "timeoutType":{"shape":"WorkflowExecutionTimeoutType"},
        "initiatedEventId":{"shape":"EventId"},
        "startedEventId":{"shape":"EventId"}
      }
    },
    "CloseStatus":{
      "type":"string",
      "enum":[
        "COMPLETED",
        "FAILED",
        "CANCELED",
        "TERMINATED",
        "CONTINUED_AS_NEW",
        "TIMED_OUT"
      ]
    },
    "CloseStatusFilter":{
      "type":"structure",
      "required":["status"],
      "members":{
        "status":{"shape":"CloseStatus"}
      }
    },
    "CompleteWorkflowExecutionDecisionAttributes":{
      "type":"structure",
      "members":{
        "result":{"shape":"Data"}
      }
    },
    "CompleteWorkflowExecutionFailedCause":{
      "type":"string",
      "enum":[
        "UNHANDLED_DECISION",
        "OPERATION_NOT_PERMITTED"
      ]
    },
    "CompleteWorkflowExecutionFailedEventAttributes":{
      "type":"structure",
      "required":[
        "cause",
        "decisionTaskCompletedEventId"
      ],
      "members":{
        "cause":{"shape":"CompleteWorkflowExecutionFailedCause"},
        "decisionTaskCompletedEventId":{"shape":"EventId"}
      }
    },
    "ContinueAsNewWorkflowExecutionDecisionAttributes":{
      "type":"structure",
      "members":{
        "input":{"shape":"Data"},
        "executionStartToCloseTimeout":{"shape":"DurationInSecondsOptional"},
        "taskList":{"shape":"TaskList"},
        "taskStartToCloseTimeout":{"shape":"DurationInSecondsOptional"},
        "childPolicy":{"shape":"ChildPolicy"},
        "tagList":{"shape":"TagList"},
        "workflowTypeVersion":{"shape":"Version"}
      }
    },
    "ContinueAsNewWorkflowExecutionFailedCause":{
      "type":"string",
      "enum":[
        "UNHANDLED_DECISION",
        "WORKFLOW_TYPE_DEPRECATED",
        "WORKFLOW_TYPE_DOES_NOT_EXIST",
        "DEFAULT_EXECUTION_START_TO_CLOSE_TIMEOUT_UNDEFINED",
        "DEFAULT_TASK_START_TO_CLOSE_TIMEOUT_UNDEFINED",
        "DEFAULT_TASK_LIST_UNDEFINED",
        "DEFAULT_CHILD_POLICY_UNDEFINED",
        "OPERATION_NOT_PERMITTED"
      ]
    },
    "ContinueAsNewWorkflowExecutionFailedEventAttributes":{
      "type":"structure",
      "required":[
        "cause",
        "decisionTaskCompletedEventId"
      ],
      "members":{
        "cause":{"shape":"ContinueAsNewWorkflowExecutionFailedCause"},
        "decisionTaskCompletedEventId":{"shape":"EventId"}
      }
    },
    "Count":{
      "type":"integer",
      "min":0
    },
    "CountClosedWorkflowExecutionsInput":{
      "type":"structure",
      "required":["domain"],
      "members":{
        "domain":{"shape":"DomainName"},
        "startTimeFilter":{"shape":"ExecutionTimeFilter"},
        "closeTimeFilter":{"shape":"ExecutionTimeFilter"},
        "executionFilter":{"shape":"WorkflowExecutionFilter"},
        "typeFilter":{"shape":"WorkflowTypeFilter"},
        "tagFilter":{"shape":"TagFilter"},
        "closeStatusFilter":{"shape":"CloseStatusFilter"}
      }
    },
    "CountOpenWorkflowExecutionsInput":{
      "type":"structure",
      "required":[
        "domain",
        "startTimeFilter"
      ],
      "members":{
        "domain":{"shape":"DomainName"},
        "startTimeFilter":{"shape":"ExecutionTimeFilter"},
        "typeFilter":{"shape":"WorkflowTypeFilter"},
        "tagFilter":{"shape":"TagFilter"},
        "executionFilter":{"shape":"WorkflowExecutionFilter"}
      }
    },
    "CountPendingActivityTasksInput":{
      "type":"structure",
      "required":[
        "domain",
        "taskList"
      ],
      "members":{
        "domain":{"shape":"DomainName"},
        "taskList":{"shape":"TaskList"}
      }
    },
    "CountPendingDecisionTasksInput":{
      "type":"structure",
      "required":[
        "domain",
        "taskList"
      ],
      "members":{
        "domain":{"shape":"DomainName"},
        "taskList":{"shape":"TaskList"}
      }
    },
    "Data":{
      "type":"string",
      "max":32768
    },
    "Decision":{
      "type":"structure",
      "required":["decisionType"],
      "members":{
        "decisionType":{"shape":"DecisionType"},
        "scheduleActivityTaskDecisionAttributes":{"shape":"ScheduleActivityTaskDecisionAttributes"},
        "requestCancelActivityTaskDecisionAttributes":{"shape":"RequestCancelActivityTaskDecisionAttributes"},
        "completeWorkflowExecutionDecisionAttributes":{"shape":"CompleteWorkflowExecutionDecisionAttributes"},
        "failWorkflowExecutionDecisionAttributes":{"shape":"FailWorkflowExecutionDecisionAttributes"},
        "cancelWorkflowExecutionDecisionAttributes":{"shape":"CancelWorkflowExecutionDecisionAttributes"},
        "continueAsNewWorkflowExecutionDecisionAttributes":{"shape":"ContinueAsNewWorkflowExecutionDecisionAttributes"},
        "recordMarkerDecisionAttributes":{"shape":"RecordMarkerDecisionAttributes"},
        "startTimerDecisionAttributes":{"shape":"StartTimerDecisionAttributes"},
        "cancelTimerDecisionAttributes":{"shape":"CancelTimerDecisionAttributes"},
        "signalExternalWorkflowExecutionDecisionAttributes":{"shape":"SignalExternalWorkflowExecutionDecisionAttributes"},
        "requestCancelExternalWorkflowExecutionDecisionAttributes":{"shape":"RequestCancelExternalWorkflowExecutionDecisionAttributes"},
        "startChildWorkflowExecutionDecisionAttributes":{"shape":"StartChildWorkflowExecutionDecisionAttributes"}
      }
    },
    "DecisionList":{
      "type":"list",
      "member":{"shape":"Decision"}
    },
    "DecisionTask":{
      "type":"structure",
      "required":[
        "taskToken",
        "startedEventId",
        "workflowExecution",
        "workflowType",
        "events"
      ],
      "members":{
        "taskToken":{"shape":"TaskToken"},
        "startedEventId":{"shape":"EventId"},
        "workflowExecution":{"shape":"WorkflowExecution"},
        "workflowType":{"shape":"WorkflowType"},
        "events":{"shape":"HistoryEventList"},
        "nextPageToken":{"shape":"PageToken"},
        "previousStartedEventId":{"shape":"EventId"}
      }
    },
    "DecisionTaskCompletedEventAttributes":{
      "type":"structure",
      "required":[
        "scheduledEventId",
        "startedEventId"
      ],
      "members":{
        "executionContext":{"shape":"Data"},
        "scheduledEventId":{"shape":"EventId"},
        "startedEventId":{"shape":"EventId"}
      }
    },
    "DecisionTaskScheduledEventAttributes":{
      "type":"structure",
      "required":["taskList"],
      "members":{
        "taskList":{"shape":"TaskList"},
        "startToCloseTimeout":{"shape":"DurationInSecondsOptional"}
      }
    },
    "DecisionTaskStartedEventAttributes":{
      "type":"structure",
      "required":["scheduledEventId"],
      "members":{
        "identity":{"shape":"Identity"},
        "scheduledEventId":{"shape":"EventId"}
      }
    },
    "DecisionTaskTimedOutEventAttributes":{
      "type":"structure",
      "required":[
        "timeoutType",
        "scheduledEventId",
        "startedEventId"
      ],
      "members":{
        "timeoutType":{"shape":"DecisionTaskTimeoutType"},
        "scheduledEventId":{"shape":"EventId"},
        "startedEventId":{"shape":"EventId"}
      }
    },
    "DecisionTaskTimeoutType":{
      "type":"string",
      "enum":["START_TO_CLOSE"]
    },
    "DecisionType":{
      "type":"string",
      "enum":[
        "ScheduleActivityTask",
        "RequestCancelActivityTask",
        "CompleteWorkflowExecution",
        "FailWorkflowExecution",
        "CancelWorkflowExecution",
        "ContinueAsNewWorkflowExecution",
        "RecordMarker",
        "StartTimer",
        "CancelTimer",
        "SignalExternalWorkflowExecution",
        "RequestCancelExternalWorkflowExecution",
        "StartChildWorkflowExecution"
      ]
    },
    "DefaultUndefinedFault":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "exception":true
    },
    "DeprecateActivityTypeInput":{
      "type":"structure",
      "required":[
        "domain",
        "activityType"
      ],
      "members":{
        "domain":{"shape":"DomainName"},
        "activityType":{"shape":"ActivityType"}
      }
    },
    "DeprecateDomainInput":{
      "type":"structure",
      "required":["name"],
      "members":{
        "name":{"shape":"DomainName"}
      }
    },
    "DeprecateWorkflowTypeInput":{
      "type":"structure",
      "required":[
        "domain",
        "workflowType"
      ],
      "members":{
        "domain":{"shape":"DomainName"},
        "workflowType":{"shape":"WorkflowType"}
      }
    },
    "DescribeActivityTypeInput":{
      "type":"structure",
      "required":[
        "domain",
        "activityType"
      ],
      "members":{
        "domain":{"shape":"DomainName"},
        "activityType":{"shape":"ActivityType"}
      }
    },
    "DescribeDomainInput":{
      "type":"structure",
      "required":["name"],
      "members":{
        "name":{"shape":"DomainName"}
      }
    },
    "DescribeWorkflowExecutionInput":{
      "type":"structure",
      "required":[
        "domain",
        "execution"
      ],
      "members":{
        "domain":{"shape":"DomainName"},
        "execution":{"shape":"WorkflowExecution"}
      }
    },
    "DescribeWorkflowTypeInput":{
      "type":"structure",
      "required":[
        "domain",
        "workflowType"
      ],
      "members":{
        "domain":{"shape":"DomainName"},
        "workflowType":{"shape":"WorkflowType"}
      }
    },
    "Description":{
      "type":"string",
      "max":1024
    },
    "DomainAlreadyExistsFault":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "exception":true
    },
    "DomainConfiguration":{
      "type":"structure",
      "required":["workflowExecutionRetentionPeriodInDays"],
      "members":{
        "workflowExecutionRetentionPeriodInDays":{"shape":"DurationInDays"}
      }
    },
    "DomainDeprecatedFault":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "exception":true
    },
    "DomainDetail":{
      "type":"structure",
      "required":[
        "domainInfo",
        "configuration"
      ],
      "members":{
        "domainInfo":{"shape":"DomainInfo"},
        "configuration":{"shape":"DomainConfiguration"}
      }
    },
    "DomainInfo":{
      "type":"structure",
      "required":[
        "name",
        "status"
      ],
      "members":{
        "name":{"shape":"DomainName"},
        "status":{"shape":"RegistrationStatus"},
        "description":{"shape":"Description"}
      }
    },
    "DomainInfoList":{
      "type":"list",
      "member":{"shape":"DomainInfo"}
    },
    "DomainInfos":{
      "type":"structure",
      "required":["domainInfos"],
      "members":{
        "domainInfos":{"shape":"DomainInfoList"},
        "nextPageToken":{"shape":"PageToken"}
      }
    },
    "DomainName":{
      "type":"string",
      "min":1,
      "max":256
    },
    "DurationInDays":{
      "type":"string",
      "min":1,
      "max":8
    },
    "DurationInSeconds":{
      "type":"string",
      "min":1,
      "max":8
    },
    "DurationInSecondsOptional":{
      "type":"string",
      "max":8
    },
    "ErrorMessage":{"type":"string"},
    "EventId":{"type":"long"},
    "EventType":{
      "type":"string",
      "enum":[
        "WorkflowExecutionStarted",
        "WorkflowExecutionCancelRequested",
        "WorkflowExecutionCompleted",
        "CompleteWorkflowExecutionFailed",
        "WorkflowExecutionFailed",
        "FailWorkflowExecutionFailed",
        "WorkflowExecutionTimedOut",
        "WorkflowExecutionCanceled",
        "CancelWorkflowExecutionFailed",
        "WorkflowExecutionContinuedAsNew",
        "ContinueAsNewWorkflowExecutionFailed",
        "WorkflowExecutionTerminated",
        "DecisionTaskScheduled",
        "DecisionTaskStarted",
        "DecisionTaskCompleted",
        "DecisionTaskTimedOut",
        "ActivityTaskScheduled",
        "ScheduleActivityTaskFailed",
        "ActivityTaskStarted",
        "ActivityTaskCompleted",
        "ActivityTaskFailed",
        "ActivityTaskTimedOut",
        "ActivityTaskCanceled",
        "ActivityTaskCancelRequested",
        "RequestCancelActivityTaskFailed",
        "WorkflowExecutionSignaled",
        "MarkerRecorded",
        "RecordMarkerFailed",
        "TimerStarted",
        "StartTimerFailed",
        "TimerFired",
        "TimerCanceled",
        "CancelTimerFailed",
        "StartChildWorkflowExecutionInitiated",
        "StartChildWorkflowExecutionFailed",
        "ChildWorkflowExecutionStarted",
        "ChildWorkflowExecutionCompleted",
        "ChildWorkflowExecutionFailed",
        "ChildWorkflowExecutionTimedOut",
        "ChildWorkflowExecutionCanceled",
        "ChildWorkflowExecutionTerminated",
        "SignalExternalWorkflowExecutionInitiated",
        "SignalExternalWorkflowExecutionFailed",
        "ExternalWorkflowExecutionSignaled",
        "RequestCancelExternalWorkflowExecutionInitiated",
        "RequestCancelExternalWorkflowExecutionFailed",
        "ExternalWorkflowExecutionCancelRequested"
      ]
    },
    "ExecutionStatus":{
      "type":"string",
      "enum":[
        "OPEN",
        "CLOSED"
      ]
    },
    "ExecutionTimeFilter":{
      "type":"structure",
      "required":["oldestDate"],
      "members":{
        "oldestDate":{"shape":"Timestamp"},
        "latestDate":{"shape":"Timestamp"}
      }
    },
    "ExternalWorkflowExecutionCancelRequestedEventAttributes":{
      "type":"structure",
      "required":[
        "workflowExecution",
        "initiatedEventId"
      ],
      "members":{
        "workflowExecution":{"shape":"WorkflowExecution"},
        "initiatedEventId":{"shape":"EventId"}
      }
    },
    "ExternalWorkflowExecutionSignaledEventAttributes":{
      "type":"structure",
      "required":[
        "workflowExecution",
        "initiatedEventId"
      ],
      "members":{
        "workflowExecution":{"shape":"WorkflowExecution"},
        "initiatedEventId":{"shape":"EventId"}
      }
    },
    "FailWorkflowExecutionDecisionAttributes":{
      "type":"structure",
      "members":{
        "reason":{"shape":"FailureReason"},
        "details":{"shape":"Data"}
      }
    },
    "FailWorkflowExecutionFailedCause":{
      "type":"string",
      "enum":[
        "UNHANDLED_DECISION",
        "OPERATION_NOT_PERMITTED"
      ]
    },
    "FailWorkflowExecutionFailedEventAttributes":{
      "type":"structure",
      "required":[
        "cause",
        "decisionTaskCompletedEventId"
      ],
      "members":{
        "cause":{"shape":"FailWorkflowExecutionFailedCause"},
        "decisionTaskCompletedEventId":{"shape":"EventId"}
      }
    },
    "FailureReason":{
      "type":"string",
      "max":256
    },
    "GetWorkflowExecutionHistoryInput":{
      "type":"structure",
      "required":[
        "domain",
        "execution"
      ],
      "members":{
        "domain":{"shape":"DomainName"},
        "execution":{"shape":"WorkflowExecution"},
        "nextPageToken":{"shape":"PageToken"},
        "maximumPageSize":{"shape":"PageSize"},
        "reverseOrder":{"shape":"ReverseOrder"}
      }
    },
    "History":{
      "type":"structure",
      "required":["events"],
      "members":{
        "events":{"shape":"HistoryEventList"},
        "nextPageToken":{"shape":"PageToken"}
      }
    },
    "HistoryEvent":{
      "type":"structure",
      "required":[
        "eventTimestamp",
        "eventType",
        "eventId"
      ],
      "members":{
        "eventTimestamp":{"shape":"Timestamp"},
        "eventType":{"shape":"EventType"},
        "eventId":{"shape":"EventId"},
        "workflowExecutionStartedEventAttributes":{"shape":"WorkflowExecutionStartedEventAttributes"},
        "workflowExecutionCompletedEventAttributes":{"shape":"WorkflowExecutionCompletedEventAttributes"},
        "completeWorkflowExecutionFailedEventAttributes":{"shape":"CompleteWorkflowExecutionFailedEventAttributes"},
        "workflowExecutionFailedEventAttributes":{"shape":"WorkflowExecutionFailedEventAttributes"},
        "failWorkflowExecutionFailedEventAttributes":{"shape":"FailWorkflowExecutionFailedEventAttributes"},
        "workflowExecutionTimedOutEventAttributes":{"shape":"WorkflowExecutionTimedOutEventAttributes"},
        "workflowExecutionCanceledEventAttributes":{"shape":"WorkflowExecutionCanceledEventAttributes"},
        "cancelWorkflowExecutionFailedEventAttributes":{"shape":"CancelWorkflowExecutionFailedEventAttributes"},
        "workflowExecutionContinuedAsNewEventAttributes":{"shape":"WorkflowExecutionContinuedAsNewEventAttributes"},
        "continueAsNewWorkflowExecutionFailedEventAttributes":{"shape":"ContinueAsNewWorkflowExecutionFailedEventAttributes"},
        "workflowExecutionTerminatedEventAttributes":{"shape":"WorkflowExecutionTerminatedEventAttributes"},
        "workflowExecutionCancelRequestedEventAttributes":{"shape":"WorkflowExecutionCancelRequestedEventAttributes"},
        "decisionTaskScheduledEventAttributes":{"shape":"DecisionTaskScheduledEventAttributes"},
        "decisionTaskStartedEventAttributes":{"shape":"DecisionTaskStartedEventAttributes"},
        "decisionTaskCompletedEventAttributes":{"shape":"DecisionTaskCompletedEventAttributes"},
        "decisionTaskTimedOutEventAttributes":{"shape":"DecisionTaskTimedOutEventAttributes"},
        "activityTaskScheduledEventAttributes":{"shape":"ActivityTaskScheduledEventAttributes"},
        "activityTaskStartedEventAttributes":{"shape":"ActivityTaskStartedEventAttributes"},
        "activityTaskCompletedEventAttributes":{"shape":"ActivityTaskCompletedEventAttributes"},
        "activityTaskFailedEventAttributes":{"shape":"ActivityTaskFailedEventAttributes"},
        "activityTaskTimedOutEventAttributes":{"shape":"ActivityTaskTimedOutEventAttributes"},
        "activityTaskCanceledEventAttributes":{"shape":"ActivityTaskCanceledEventAttributes"},
        "activityTaskCancelRequestedEventAttributes":{"shape":"ActivityTaskCancelRequestedEventAttributes"},
        "workflowExecutionSignaledEventAttributes":{"shape":"WorkflowExecutionSignaledEventAttributes"},
        "markerRecordedEventAttributes":{"shape":"MarkerRecordedEventAttributes"},
        "recordMarkerFailedEventAttributes":{"shape":"RecordMarkerFailedEventAttributes"},
        "timerStartedEventAttributes":{"shape":"TimerStartedEventAttributes"},
        "timerFiredEventAttributes":{"shape":"TimerFiredEventAttributes"},
        "timerCanceledEventAttributes":{"shape":"TimerCanceledEventAttributes"},
        "startChildWorkflowExecutionInitiatedEventAttributes":{"shape":"StartChildWorkflowExecutionInitiatedEventAttributes"},
        "childWorkflowExecutionStartedEventAttributes":{"shape":"ChildWorkflowExecutionStartedEventAttributes"},
        "childWorkflowExecutionCompletedEventAttributes":{"shape":"ChildWorkflowExecutionCompletedEventAttributes"},
        "childWorkflowExecutionFailedEventAttributes":{"shape":"ChildWorkflowExecutionFailedEventAttributes"},
        "childWorkflowExecutionTimedOutEventAttributes":{"shape":"ChildWorkflowExecutionTimedOutEventAttributes"},
        "childWorkflowExecutionCanceledEventAttributes":{"shape":"ChildWorkflowExecutionCanceledEventAttributes"},
        "childWorkflowExecutionTerminatedEventAttributes":{"shape":"ChildWorkflowExecutionTerminatedEventAttributes"},
        "signalExternalWorkflowExecutionInitiatedEventAttributes":{"shape":"SignalExternalWorkflowExecutionInitiatedEventAttributes"},
        "externalWorkflowExecutionSignaledEventAttributes":{"shape":"ExternalWorkflowExecutionSignaledEventAttributes"},
        "signalExternalWorkflowExecutionFailedEventAttributes":{"shape":"SignalExternalWorkflowExecutionFailedEventAttributes"},
        "externalWorkflowExecutionCancelRequestedEventAttributes":{"shape":"ExternalWorkflowExecutionCancelRequestedEventAttributes"},
        "requestCancelExternalWorkflowExecutionInitiatedEventAttributes":{"shape":"RequestCancelExternalWorkflowExecutionInitiatedEventAttributes"},
        "requestCancelExternalWorkflowExecutionFailedEventAttributes":{"shape":"RequestCancelExternalWorkflowExecutionFailedEventAttributes"},
        "scheduleActivityTaskFailedEventAttributes":{"shape":"ScheduleActivityTaskFailedEventAttributes"},
        "requestCancelActivityTaskFailedEventAttributes":{"shape":"RequestCancelActivityTaskFailedEventAttributes"},
        "startTimerFailedEventAttributes":{"shape":"StartTimerFailedEventAttributes"},
        "cancelTimerFailedEventAttributes":{"shape":"CancelTimerFailedEventAttributes"},
        "startChildWorkflowExecutionFailedEventAttributes":{"shape":"StartChildWorkflowExecutionFailedEventAttributes"}
      }
    },
    "HistoryEventList":{
      "type":"list",
      "member":{"shape":"HistoryEvent"}
    },
    "Identity":{
      "type":"string",
      "max":256
    },
    "LimitExceededFault":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "exception":true
    },
    "LimitedData":{
      "type":"string",
      "max":2048
    },
    "ListActivityTypesInput":{
      "type":"structure",
      "required":[
        "domain",
        "registrationStatus"
      ],
      "members":{
        "domain":{"shape":"DomainName"},
        "name":{"shape":"Name"},
        "registrationStatus":{"shape":"RegistrationStatus"},
        "nextPageToken":{"shape":"PageToken"},
        "maximumPageSize":{"shape":"PageSize"},
        "reverseOrder":{"shape":"ReverseOrder"}
      }
    },
    "ListClosedWorkflowExecutionsInput":{
      "type":"structure",
      "required":["domain"],
      "members":{
        "domain":{"shape":"DomainName"},
        "startTimeFilter":{"shape":"ExecutionTimeFilter"},
        "closeTimeFilter":{"shape":"ExecutionTimeFilter"},
        "executionFilter":{"shape":"WorkflowExecutionFilter"},
        "closeStatusFilter":{"shape":"CloseStatusFilter"},
        "typeFilter":{"shape":"WorkflowTypeFilter"},
        "tagFilter":{"shape":"TagFilter"},
        "nextPageToken":{"shape":"PageToken"},
        "maximumPageSize":{"shape":"PageSize"},
        "reverseOrder":{"shape":"ReverseOrder"}
      }
    },
    "ListDomainsInput":{
      "type":"structure",
      "required":["registrationStatus"],
      "members":{
        "nextPageToken":{"shape":"PageToken"},
        "registrationStatus":{"shape":"RegistrationStatus"},
        "maximumPageSize":{"shape":"PageSize"},
        "reverseOrder":{"shape":"ReverseOrder"}
      }
    },
    "ListOpenWorkflowExecutionsInput":{
      "type":"structure",
      "required":[
        "domain",
        "startTimeFilter"
      ],
      "members":{
        "domain":{"shape":"DomainName"},
        "startTimeFilter":{"shape":"ExecutionTimeFilter"},
        "typeFilter":{"shape":"WorkflowTypeFilter"},
        "tagFilter":{"shape":"TagFilter"},
        "nextPageToken":{"shape":"PageToken"},
        "maximumPageSize":{"shape":"PageSize"},
        "reverseOrder":{"shape":"ReverseOrder"},
        "executionFilter":{"shape":"WorkflowExecutionFilter"}
      }
    },
    "ListWorkflowTypesInput":{
      "type":"structure",
      "required":[
        "domain",
        "registrationStatus"
      ],
      "members":{
        "domain":{"shape":"DomainName"},
        "name":{"shape":"Name"},
        "registrationStatus":{"shape":"RegistrationStatus"},
        "nextPageToken":{"shape":"PageToken"},
        "maximumPageSize":{"shape":"PageSize"},
        "reverseOrder":{"shape":"ReverseOrder"}
      }
    },
    "MarkerName":{
      "type":"string",
      "min":1,
      "max":256
    },
    "MarkerRecordedEventAttributes":{
      "type":"structure",
      "required":[
        "markerName",
        "decisionTaskCompletedEventId"
      ],
      "members":{
        "markerName":{"shape":"MarkerName"},
        "details":{"shape":"Data"},
        "decisionTaskCompletedEventId":{"shape":"EventId"}
      }
    },
    "Name":{
      "type":"string",
      "min":1,
      "max":256
    },
    "OpenDecisionTasksCount":{
      "type":"integer",
      "min":0,
      "max":1
    },
    "OperationNotPermittedFault":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "exception":true
    },
    "PageSize":{
      "type":"integer",
      "min":0,
      "max":1000
    },
    "PageToken":{
      "type":"string",
      "max":2048
    },
    "PendingTaskCount":{
      "type":"structure",
      "required":["count"],
      "members":{
        "count":{"shape":"Count"},
        "truncated":{"shape":"Truncated"}
      }
    },
    "PollForActivityTaskInput":{
      "type":"structure",
      "required":[
        "domain",
        "taskList"
      ],
      "members":{
        "domain":{"shape":"DomainName"},
        "taskList":{"shape":"TaskList"},
        "identity":{"shape":"Identity"}
      }
    },
    "PollForDecisionTaskInput":{
      "type":"structure",
      "required":[
        "domain",
        "taskList"
      ],
      "members":{
        "domain":{"shape":"DomainName"},
        "taskList":{"shape":"TaskList"},
        "identity":{"shape":"Identity"},
        "nextPageToken":{"shape":"PageToken"},
        "maximumPageSize":{"shape":"PageSize"},
        "reverseOrder":{"shape":"ReverseOrder"}
      }
    },
    "RecordActivityTaskHeartbeatInput":{
      "type":"structure",
      "required":["taskToken"],
      "members":{
        "taskToken":{"shape":"TaskToken"},
        "details":{"shape":"LimitedData"}
      }
    },
    "RecordMarkerDecisionAttributes":{
      "type":"structure",
      "required":["markerName"],
      "members":{
        "markerName":{"shape":"MarkerName"},
        "details":{"shape":"Data"}
      }
    },
    "RecordMarkerFailedCause":{
      "type":"string",
      "enum":["OPERATION_NOT_PERMITTED"]
    },
    "RecordMarkerFailedEventAttributes":{
      "type":"structure",
      "required":[
        "markerName",
        "cause",
        "decisionTaskCompletedEventId"
      ],
      "members":{
        "markerName":{"shape":"MarkerName"},
        "cause":{"shape":"RecordMarkerFailedCause"},
        "decisionTaskCompletedEventId":{"shape":"EventId"}
      }
    },
    "RegisterActivityTypeInput":{
      "type":"structure",
      "required":[
        "domain",
        "name",
        "version"
      ],
      "members":{
        "domain":{"shape":"DomainName"},
        "name":{"shape":"Name"},
        "version":{"shape":"Version"},
        "description":{"shape":"Description"},
        "defaultTaskStartToCloseTimeout":{"shape":"DurationInSecondsOptional"},
        "defaultTaskHeartbeatTimeout":{"shape":"DurationInSecondsOptional"},
        "defaultTaskList":{"shape":"TaskList"},
        "defaultTaskScheduleToStartTimeout":{"shape":"DurationInSecondsOptional"},
        "defaultTaskScheduleToCloseTimeout":{"shape":"DurationInSecondsOptional"}
      }
    },
    "RegisterDomainInput":{
      "type":"structure",
      "required":[
        "name",
        "workflowExecutionRetentionPeriodInDays"
      ],
      "members":{
        "name":{"shape":"DomainName"},
        "description":{"shape":"Description"},
        "workflowExecutionRetentionPeriodInDays":{"shape":"DurationInDays"}
      }
    },
    "RegisterWorkflowTypeInput":{
      "type":"structure",
      "required":[
        "domain",
        "name",
        "version"
      ],
      "members":{
        "domain":{"shape":"DomainName"},
        "name":{"shape":"Name"},
        "version":{"shape":"Version"},
        "description":{"shape":"Description"},
        "defaultTaskStartToCloseTimeout":{"shape":"DurationInSecondsOptional"},
        "defaultExecutionStartToCloseTimeout":{"shape":"DurationInSecondsOptional"},
        "defaultTaskList":{"shape":"TaskList"},
        "defaultChildPolicy":{"shape":"ChildPolicy"}
      }
    },
    "RegistrationStatus":{
      "type":"string",
      "enum":[
        "REGISTERED",
        "DEPRECATED"
      ]
    },
    "RequestCancelActivityTaskDecisionAttributes":{
      "type":"structure",
      "required":["activityId"],
      "members":{
        "activityId":{"shape":"ActivityId"}
      }
    },
    "RequestCancelActivityTaskFailedCause":{
      "type":"string",
      "enum":[
        "ACTIVITY_ID_UNKNOWN",
        "OPERATION_NOT_PERMITTED"
      ]
    },
    "RequestCancelActivityTaskFailedEventAttributes":{
      "type":"structure",
      "required":[
        "activityId",
        "cause",
        "decisionTaskCompletedEventId"
      ],
      "members":{
        "activityId":{"shape":"ActivityId"},
        "cause":{"shape":"RequestCancelActivityTaskFailedCause"},
        "decisionTaskCompletedEventId":{"shape":"EventId"}
      }
    },
    "RequestCancelExternalWorkflowExecutionDecisionAttributes":{
      "type":"structure",
      "required":["workflowId"],
      "members":{
        "workflowId":{"shape":"WorkflowId"},
        "runId":{"shape":"RunIdOptional"},
        "control":{"shape":"Data"}
      }
    },
    "RequestCancelExternalWorkflowExecutionFailedCause":{
      "type":"string",
      "enum":[
        "UNKNOWN_EXTERNAL_WORKFLOW_EXECUTION",
        "REQUEST_CANCEL_EXTERNAL_WORKFLOW_EXECUTION_RATE_EXCEEDED",
        "OPERATION_NOT_PERMITTED"
      ]
    },
    "RequestCancelExternalWorkflowExecutionFailedEventAttributes":{
      "type":"structure",
      "required":[
        "workflowId",
        "cause",
        "initiatedEventId",
        "decisionTaskCompletedEventId"
      ],
      "members":{
        "workflowId":{"shape":"WorkflowId"},
        "runId":{"shape":"RunIdOptional"},
        "cause":{"shape":"RequestCancelExternalWorkflowExecutionFailedCause"},
        "initiatedEventId":{"shape":"EventId"},
        "decisionTaskCompletedEventId":{"shape":"EventId"},
        "control":{"shape":"Data"}
      }
    },
    "RequestCancelExternalWorkflowExecutionInitiatedEventAttributes":{
      "type":"structure",
      "required":[
        "workflowId",
        "decisionTaskCompletedEventId"
      ],
      "members":{
        "workflowId":{"shape":"WorkflowId"},
        "runId":{"shape":"RunIdOptional"},
        "decisionTaskCompletedEventId":{"shape":"EventId"},
        "control":{"shape":"Data"}
      }
    },
    "RequestCancelWorkflowExecutionInput":{
      "type":"structure",
      "required":[
        "domain",
        "workflowId"
      ],
      "members":{
        "domain":{"shape":"DomainName"},
        "workflowId":{"shape":"WorkflowId"},
        "runId":{"shape":"RunIdOptional"}
      }
    },
    "RespondActivityTaskCanceledInput":{
      "type":"structure",
      "required":["taskToken"],
      "members":{
        "taskToken":{"shape":"TaskToken"},
        "details":{"shape":"Data"}
      }
    },
    "RespondActivityTaskCompletedInput":{
      "type":"structure",
      "required":["taskToken"],
      "members":{
        "taskToken":{"shape":"TaskToken"},
        "result":{"shape":"Data"}
      }
    },
    "RespondActivityTaskFailedInput":{
      "type":"structure",
      "required":["taskToken"],
      "members":{
        "taskToken":{"shape":"TaskToken"},
        "reason":{"shape":"FailureReason"},
        "details":{"shape":"Data"}
      }
    },
    "RespondDecisionTaskCompletedInput":{
      "type":"structure",
      "required":["taskToken"],
      "members":{
        "taskToken":{"shape":"TaskToken"},
        "decisions":{"shape":"DecisionList"},
        "executionContext":{"shape":"Data"}
      }
    },
    "ReverseOrder":{"type":"boolean"},
    "Run":{
      "type":"structure",
      "members":{
        "runId":{"shape":"RunId"}
      }
    },
    "RunId":{
      "type":"string",
      "min":1,
      "max":64
    },
    "RunIdOptional":{
      "type":"string",
      "max":64
    },
    "ScheduleActivityTaskDecisionAttributes":{
      "type":"structure",
      "required":[
        "activityType",
        "activityId"
      ],
      "members":{
        "activityType":{"shape":"ActivityType"},
        "activityId":{"shape":"ActivityId"},
        "control":{"shape":"Data"},
        "input":{"shape":"Data"},
        "scheduleToCloseTimeout":{"shape":"DurationInSecondsOptional"},
        "taskList":{"shape":"TaskList"},
        "scheduleToStartTimeout":{"shape":"DurationInSecondsOptional"},
        "startToCloseTimeout":{"shape":"DurationInSecondsOptional"},
        "heartbeatTimeout":{"shape":"DurationInSecondsOptional"}
      }
    },
    "ScheduleActivityTaskFailedCause":{
      "type":"string",
      "enum":[
        "ACTIVITY_TYPE_DEPRECATED",
        "ACTIVITY_TYPE_DOES_NOT_EXIST",
        "ACTIVITY_ID_ALREADY_IN_USE",
        "OPEN_ACTIVITIES_LIMIT_EXCEEDED",
        "ACTIVITY_CREATION_RATE_EXCEEDED",
        "DEFAULT_SCHEDULE_TO_CLOSE_TIMEOUT_UNDEFINED",
        "DEFAULT_TASK_LIST_UNDEFINED",
        "DEFAULT_SCHEDULE_TO_START_TIMEOUT_UNDEFINED",
        "DEFAULT_START_TO_CLOSE_TIMEOUT_UNDEFINED",
        "DEFAULT_HEARTBEAT_TIMEOUT_UNDEFINED",
        "OPERATION_NOT_PERMITTED"
      ]
    },
    "ScheduleActivityTaskFailedEventAttributes":{
      "type":"structure",
      "required":[
        "activityType",
        "activityId",
        "cause",
        "decisionTaskCompletedEventId"
      ],
      "members":{
        "activityType":{"shape":"ActivityType"},
        "activityId":{"shape":"ActivityId"},
        "cause":{"shape":"ScheduleActivityTaskFailedCause"},
        "decisionTaskCompletedEventId":{"shape":"EventId"}
      }
    },
    "SignalExternalWorkflowExecutionDecisionAttributes":{
      "type":"structure",
      "required":[
        "workflowId",
        "signalName"
      ],
      "members":{
        "workflowId":{"shape":"WorkflowId"},
        "runId":{"shape":"RunIdOptional"},
        "signalName":{"shape":"SignalName"},
        "input":{"shape":"Data"},
        "control":{"shape":"Data"}
      }
    },
    "SignalExternalWorkflowExecutionFailedCause":{
      "type":"string",
      "enum":[
        "UNKNOWN_EXTERNAL_WORKFLOW_EXECUTION",
        "SIGNAL_EXTERNAL_WORKFLOW_EXECUTION_RATE_EXCEEDED",
        "OPERATION_NOT_PERMITTED"
      ]
    },
    "SignalExternalWorkflowExecutionFailedEventAttributes":{
      "type":"structure",
      "required":[
        "workflowId",
        "cause",
        "initiatedEventId",
        "decisionTaskCompletedEventId"
      ],
      "members":{
        "workflowId":{"shape":"WorkflowId"},
        "runId":{"shape":"RunIdOptional"},
        "cause":{"shape":"SignalExternalWorkflowExecutionFailedCause"},
        "initiatedEventId":{"shape":"EventId"},
        "decisionTaskCompletedEventId":{"shape":"EventId"},
        "control":{"shape":"Data"}
      }
    },
    "SignalExternalWorkflowExecutionInitiatedEventAttributes":{
      "type":"structure",
      "required":[
        "workflowId",
        "signalName",
        "decisionTaskCompletedEventId"
      ],
      "members":{
        "workflowId":{"shape":"WorkflowId"},
        "runId":{"shape":"RunIdOptional"},
        "signalName":{"shape":"SignalName"},
        "input":{"shape":"Data"},
        "decisionTaskCompletedEventId":{"shape":"EventId"},
        "control":{"shape":"Data"}
      }
    },
    "SignalName":{
      "type":"string",
      "min":1,
      "max":256
    },
    "SignalWorkflowExecutionInput":{
      "type":"structure",
      "required":[
        "domain",
        "workflowId",
        "signalName"
      ],
      "members":{
        "domain":{"shape":"DomainName"},
        "workflowId":{"shape":"WorkflowId"},
        "runId":{"shape":"RunIdOptional"},
        "signalName":{"shape":"SignalName"},
        "input":{"shape":"Data"}
      }
    },
    "StartChildWorkflowExecutionDecisionAttributes":{
      "type":"structure",
      "required":[
        "workflowType",
        "workflowId"
      ],
      "members":{
        "workflowType":{"shape":"WorkflowType"},
        "workflowId":{"shape":"WorkflowId"},
        "control":{"shape":"Data"},
        "input":{"shape":"Data"},
        "executionStartToCloseTimeout":{"shape":"DurationInSecondsOptional"},
        "taskList":{"shape":"TaskList"},
        "taskStartToCloseTimeout":{"shape":"DurationInSecondsOptional"},
        "childPolicy":{"shape":"ChildPolicy"},
        "tagList":{"shape":"TagList"}
      }
    },
    "StartChildWorkflowExecutionFailedCause":{
      "type":"string",
      "enum":[
        "WORKFLOW_TYPE_DOES_NOT_EXIST",
        "WORKFLOW_TYPE_DEPRECATED",
        "OPEN_CHILDREN_LIMIT_EXCEEDED",
        "OPEN_WORKFLOWS_LIMIT_EXCEEDED",
        "CHILD_CREATION_RATE_EXCEEDED",
        "WORKFLOW_ALREADY_RUNNING",
        "DEFAULT_EXECUTION_START_TO_CLOSE_TIMEOUT_UNDEFINED",
        "DEFAULT_TASK_LIST_UNDEFINED",
        "DEFAULT_TASK_START_TO_CLOSE_TIMEOUT_UNDEFINED",
        "DEFAULT_CHILD_POLICY_UNDEFINED",
        "OPERATION_NOT_PERMITTED"
      ]
    },
    "StartChildWorkflowExecutionFailedEventAttributes":{
      "type":"structure",
      "required":[
        "workflowType",
        "cause",
        "workflowId",
        "initiatedEventId",
        "decisionTaskCompletedEventId"
      ],
      "members":{
        "workflowType":{"shape":"WorkflowType"},
        "cause":{"shape":"StartChildWorkflowExecutionFailedCause"},
        "workflowId":{"shape":"WorkflowId"},
        "initiatedEventId":{"shape":"EventId"},
        "decisionTaskCompletedEventId":{"shape":"EventId"},
        "control":{"shape":"Data"}
      }
    },
    "StartChildWorkflowExecutionInitiatedEventAttributes":{
      "type":"structure",
      "required":[
        "workflowId",
        "workflowType",
        "taskList",
        "decisionTaskCompletedEventId",
        "childPolicy"
      ],
      "members":{
        "workflowId":{"shape":"WorkflowId"},
        "workflowType":{"shape":"WorkflowType"},
        "control":{"shape":"Data"},
        "input":{"shape":"Data"},
        "executionStartToCloseTimeout":{"shape":"DurationInSecondsOptional"},
        "taskList":{"shape":"TaskList"},
        "decisionTaskCompletedEventId":{"shape":"EventId"},
        "childPolicy":{"shape":"ChildPolicy"},
        "taskStartToCloseTimeout":{"shape":"DurationInSecondsOptional"},
        "tagList":{"shape":"TagList"}
      }
    },
    "StartTimerDecisionAttributes":{
      "type":"structure",
      "required":[
        "timerId",
        "startToFireTimeout"
      ],
      "members":{
        "timerId":{"shape":"TimerId"},
        "control":{"shape":"Data"},
        "startToFireTimeout":{"shape":"DurationInSeconds"}
      }
    },
    "StartTimerFailedCause":{
      "type":"string",
      "enum":[
        "TIMER_ID_ALREADY_IN_USE",
        "OPEN_TIMERS_LIMIT_EXCEEDED",
        "TIMER_CREATION_RATE_EXCEEDED",
        "OPERATION_NOT_PERMITTED"
      ]
    },
    "StartTimerFailedEventAttributes":{
      "type":"structure",
      "required":[
        "timerId",
        "cause",
        "decisionTaskCompletedEventId"
      ],
      "members":{
        "timerId":{"shape":"TimerId"},
        "cause":{"shape":"StartTimerFailedCause"},
        "decisionTaskCompletedEventId":{"shape":"EventId"}
      }
    },
    "StartWorkflowExecutionInput":{
      "type":"structure",
      "required":[
        "domain",
        "workflowId",
        "workflowType"
      ],
      "members":{
        "domain":{"shape":"DomainName"},
        "workflowId":{"shape":"WorkflowId"},
        "workflowType":{"shape":"WorkflowType"},
        "taskList":{"shape":"TaskList"},
        "input":{"shape":"Data"},
        "executionStartToCloseTimeout":{"shape":"DurationInSecondsOptional"},
        "tagList":{"shape":"TagList"},
        "taskStartToCloseTimeout":{"shape":"DurationInSecondsOptional"},
        "childPolicy":{"shape":"ChildPolicy"}
      }
    },
    "Tag":{
      "type":"string",
      "min":1,
      "max":256
    },
    "TagFilter":{
      "type":"structure",
      "required":["tag"],
      "members":{
        "tag":{"shape":"Tag"}
      }
    },
    "TagList":{
      "type":"list",
      "member":{"shape":"Tag"},
      "max":5
    },
    "TaskList":{
      "type":"structure",
      "required":["name"],
      "members":{
        "name":{"shape":"Name"}
      }
    },
    "TaskToken":{
      "type":"string",
      "min":1,
      "max":1024
    },
    "TerminateReason":{
      "type":"string",
      "max":256
    },
    "TerminateWorkflowExecutionInput":{
      "type":"structure",
      "required":[
        "domain",
        "workflowId"
      ],
      "members":{
        "domain":{"shape":"DomainName"},
        "workflowId":{"shape":"WorkflowId"},
        "runId":{"shape":"RunIdOptional"},
        "reason":{"shape":"TerminateReason"},
        "details":{"shape":"Data"},
        "childPolicy":{"shape":"ChildPolicy"}
      }
    },
    "TimerCanceledEventAttributes":{
      "type":"structure",
      "required":[
        "timerId",
        "startedEventId",
        "decisionTaskCompletedEventId"
      ],
      "members":{
        "timerId":{"shape":"TimerId"},
        "startedEventId":{"shape":"EventId"},
        "decisionTaskCompletedEventId":{"shape":"EventId"}
      }
    },
    "TimerFiredEventAttributes":{
      "type":"structure",
      "required":[
        "timerId",
        "startedEventId"
      ],
      "members":{
        "timerId":{"shape":"TimerId"},
        "startedEventId":{"shape":"EventId"}
      }
    },
    "TimerId":{
      "type":"string",
      "min":1,
      "max":256
    },
    "TimerStartedEventAttributes":{
      "type":"structure",
      "required":[
        "timerId",
        "startToFireTimeout",
        "decisionTaskCompletedEventId"
      ],
      "members":{
        "timerId":{"shape":"TimerId"},
        "control":{"shape":"Data"},
        "startToFireTimeout":{"shape":"DurationInSeconds"},
        "decisionTaskCompletedEventId":{"shape":"EventId"}
      }
    },
    "Timestamp":{"type":"timestamp"},
    "Truncated":{"type":"boolean"},
    "TypeAlreadyExistsFault":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "exception":true
    },
    "TypeDeprecatedFault":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "exception":true
    },
    "UnknownResourceFault":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "exception":true
    },
    "Version":{
      "type":"string",
      "min":1,
      "max":64
    },
    "VersionOptional":{
      "type":"string",
      "max":64
    },
    "WorkflowExecution":{
      "type":"structure",
      "required":[
        "workflowId",
        "runId"
      ],
      "members":{
        "workflowId":{"shape":"WorkflowId"},
        "runId":{"shape":"RunId"}
      }
    },
    "WorkflowExecutionAlreadyStartedFault":{
      "type":"structure",
      "members":{
        "message":{"shape":"ErrorMessage"}
      },
      "exception":true
    },
    "WorkflowExecutionCancelRequestedCause":{
      "type":"string",
      "enum":["CHILD_POLICY_APPLIED"]
    },
    "WorkflowExecutionCancelRequestedEventAttributes":{
      "type":"structure",
      "members":{
        "externalWorkflowExecution":{"shape":"WorkflowExecution"},
        "externalInitiatedEventId":{"shape":"EventId"},
        "cause":{"shape":"WorkflowExecutionCancelRequestedCause"}
      }
    },
    "WorkflowExecutionCanceledEventAttributes":{
      "type":"structure",
      "required":["decisionTaskCompletedEventId"],
      "members":{
        "details":{"shape":"Data"},
        "decisionTaskCompletedEventId":{"shape":"EventId"}
      }
    },
    "WorkflowExecutionCompletedEventAttributes":{
      "type":"structure",
      "required":["decisionTaskCompletedEventId"],
      "members":{
        "result":{"shape":"Data"},
        "decisionTaskCompletedEventId":{"shape":"EventId"}
      }
    },
    "WorkflowExecutionConfiguration":{
      "type":"structure",
      "required":[
        "taskStartToCloseTimeout",
        "executionStartToCloseTimeout",
        "taskList",
        "childPolicy"
      ],
      "members":{
        "taskStartToCloseTimeout":{"shape":"DurationInSeconds"},
        "executionStartToCloseTimeout":{"shape":"DurationInSeconds"},
        "taskList":{"shape":"TaskList"},
        "childPolicy":{"shape":"ChildPolicy"}
      }
    },
    "WorkflowExecutionContinuedAsNewEventAttributes":{
      "type":"structure",
      "required":[
        "decisionTaskCompletedEventId",
        "newExecutionRunId",
        "taskList",
        "childPolicy",
        "workflowType"
      ],
      "members":{
        "input":{"shape":"Data"},
        "decisionTaskCompletedEventId":{"shape":"EventId"},
        "newExecutionRunId":{"shape":"RunId"},
        "executionStartToCloseTimeout":{"shape":"DurationInSecondsOptional"},
        "taskList":{"shape":"TaskList"},
        "taskStartToCloseTimeout":{"shape":"DurationInSecondsOptional"},
        "childPolicy":{"shape":"ChildPolicy"},
        "tagList":{"shape":"TagList"},
        "workflowType":{"shape":"WorkflowType"}
      }
    },
    "WorkflowExecutionCount":{
      "type":"structure",
      "required":["count"],
      "members":{
        "count":{"shape":"Count"},
        "truncated":{"shape":"Truncated"}
      }
    },
    "WorkflowExecutionDetail":{
      "type":"structure",
      "required":[
        "executionInfo",
        "executionConfiguration",
        "openCounts"
      ],
      "members":{
        "executionInfo":{"shape":"WorkflowExecutionInfo"},
        "executionConfiguration":{"shape":"WorkflowExecutionConfiguration"},
        "openCounts":{"shape":"WorkflowExecutionOpenCounts"},
        "latestActivityTaskTimestamp":{"shape":"Timestamp"},
        "latestExecutionContext":{"shape":"Data"}
      }
    },
    "WorkflowExecutionFailedEventAttributes":{
      "type":"structure",
      "required":["decisionTaskCompletedEventId"],
      "members":{
        "reason":{"shape":"FailureReason"},
        "details":{"shape":"Data"},
        "decisionTaskCompletedEventId":{"shape":"EventId"}
      }
    },
    "WorkflowExecutionFilter":{
      "type":"structure",
      "required":["workflowId"],
      "members":{
        "workflowId":{"shape":"WorkflowId"}
      }
    },
    "WorkflowExecutionInfo":{
      "type":"structure",
      "required":[
        "execution",
        "workflowType",
        "startTimestamp",
        "executionStatus"
      ],
      "members":{
        "execution":{"shape":"WorkflowExecution"},
        "workflowType":{"shape":"WorkflowType"},
        "startTimestamp":{"shape":"Timestamp"},
        "closeTimestamp":{"shape":"Timestamp"},
        "executionStatus":{"shape":"ExecutionStatus"},
        "closeStatus":{"shape":"CloseStatus"},
        "parent":{"shape":"WorkflowExecution"},
        "tagList":{"shape":"TagList"},
        "cancelRequested":{"shape":"Canceled"}
      }
    },
    "WorkflowExecutionInfoList":{
      "type":"list",
      "member":{"shape":"WorkflowExecutionInfo"}
    },
    "WorkflowExecutionInfos":{
      "type":"structure",
      "required":["executionInfos"],
      "members":{
        "executionInfos":{"shape":"WorkflowExecutionInfoList"},
        "nextPageToken":{"shape":"PageToken"}
      }
    },
    "WorkflowExecutionOpenCounts":{
      "type":"structure",
      "required":[
        "openActivityTasks",
        "openDecisionTasks",
        "openTimers",
        "openChildWorkflowExecutions"
      ],
      "members":{
        "openActivityTasks":{"shape":"Count"},
        "openDecisionTasks":{"shape":"OpenDecisionTasksCount"},
        "openTimers":{"shape":"Count"},
        "openChildWorkflowExecutions":{"shape":"Count"}
      }
    },
    "WorkflowExecutionSignaledEventAttributes":{
      "type":"structure",
      "required":["signalName"],
      "members":{
        "signalName":{"shape":"SignalName"},
        "input":{"shape":"Data"},
        "externalWorkflowExecution":{"shape":"WorkflowExecution"},
        "externalInitiatedEventId":{"shape":"EventId"}
      }
    },
    "WorkflowExecutionStartedEventAttributes":{
      "type":"structure",
      "required":[
        "childPolicy",
        "taskList",
        "workflowType"
      ],
      "members":{
        "input":{"shape":"Data"},
        "executionStartToCloseTimeout":{"shape":"DurationInSecondsOptional"},
        "taskStartToCloseTimeout":{"shape":"DurationInSecondsOptional"},
        "childPolicy":{"shape":"ChildPolicy"},
        "taskList":{"shape":"TaskList"},
        "workflowType":{"shape":"WorkflowType"},
        "tagList":{"shape":"TagList"},
        "continuedExecutionRunId":{"shape":"RunIdOptional"},
        "parentWorkflowExecution":{"shape":"WorkflowExecution"},
        "parentInitiatedEventId":{"shape":"EventId"}
      }
    },
    "WorkflowExecutionTerminatedCause":{
      "type":"string",
      "enum":[
        "CHILD_POLICY_APPLIED",
        "EVENT_LIMIT_EXCEEDED",
        "OPERATOR_INITIATED"
      ]
    },
    "WorkflowExecutionTerminatedEventAttributes":{
      "type":"structure",
      "required":["childPolicy"],
      "members":{
        "reason":{"shape":"TerminateReason"},
        "details":{"shape":"Data"},
        "childPolicy":{"shape":"ChildPolicy"},
        "cause":{"shape":"WorkflowExecutionTerminatedCause"}
      }
    },
    "WorkflowExecutionTimedOutEventAttributes":{
      "type":"structure",
      "required":[
        "timeoutType",
        "childPolicy"
      ],
      "members":{
        "timeoutType":{"shape":"WorkflowExecutionTimeoutType"},
        "childPolicy":{"shape":"ChildPolicy"}
      }
    },
    "WorkflowExecutionTimeoutType":{
      "type":"string",
      "enum":["START_TO_CLOSE"]
    },
    "WorkflowId":{
      "type":"string",
      "min":1,
      "max":256
    },
    "WorkflowType":{
      "type":"structure",
      "required":[
        "name",
        "version"
      ],
      "members":{
        "name":{"shape":"Name"},
        "version":{"shape":"Version"}
      }
    },
    "WorkflowTypeConfiguration":{
      "type":"structure",
      "members":{
        "defaultTaskStartToCloseTimeout":{"shape":"DurationInSecondsOptional"},
        "defaultExecutionStartToCloseTimeout":{"shape":"DurationInSecondsOptional"},
        "defaultTaskList":{"shape":"TaskList"},
        "defaultChildPolicy":{"shape":"ChildPolicy"}
      }
    },
    "WorkflowTypeDetail":{
      "type":"structure",
      "required":[
        "typeInfo",
        "configuration"
      ],
      "members":{
        "typeInfo":{"shape":"WorkflowTypeInfo"},
        "configuration":{"shape":"WorkflowTypeConfiguration"}
      }
    },
    "WorkflowTypeFilter":{
      "type":"structure",
      "required":["name"],
      "members":{
        "name":{"shape":"Name"},
        "version":{"shape":"VersionOptional"}
      }
    },
    "WorkflowTypeInfo":{
      "type":"structure",
      "required":[
        "workflowType",
        "status",
        "creationDate"
      ],
      "members":{
        "workflowType":{"shape":"WorkflowType"},
        "status":{"shape":"RegistrationStatus"},
        "description":{"shape":"Description"},
        "creationDate":{"shape":"Timestamp"},
        "deprecationDate":{"shape":"Timestamp"}
      }
    },
    "WorkflowTypeInfoList":{
      "type":"list",
      "member":{"shape":"WorkflowTypeInfo"}
    },
    "WorkflowTypeInfos":{
      "type":"structure",
      "required":["typeInfos"],
      "members":{
        "typeInfos":{"shape":"WorkflowTypeInfoList"},
        "nextPageToken":{"shape":"PageToken"}
      }
    }
  }
}
}
