#!/usr/bin/env ruby
require 'optparse'
require_relative '../analyzer'

Version = [0, 2]
options = { paths: [Dir.pwd], cloud: 'aws' }

OptionParser.new do |opts|
  opts.banner = "Usage: analyze [options]"

  # Optional argument; multi-line description.
  opts.on('-p', '--paths [PATH1,PATH2,...]', 'Specify path to JSON files (for AWS). You may specify multiple search paths with a comma separated list') do |p|
    options[:paths] = p.split(',')
  end

  opts.on('-c', '--cloud [CLOUD]', 'Specify cloud to analyze: aws or gce') do |c|
    c = c.downcase
    if c != 'aws' && c != 'gce'
      puts "Cloud #{c} not supported, use 'aws' or 'gce'"
      exit 1
    end
    options[:cloud] = c
  end

  opts.on('-s', '--service [SERVICE]', 'Specify service to analyze, e.g. "cloud_formation"') do |s|
    options[:service] = s
  end

  opts.on('-f', '--[no-]force', 'Generate YAML event if analysis yields errors') do |f|
    options[:force] = f
  end

  opts.on('-r', '--resource-only', 'Do not generate YAML for shapes (useful for debugging)') do |r|
    options[:resource_only] = r
  end

  opts.on_tail('-h', '--help', 'Show this message') do
    puts opts
    exit
  end

  # Another typical switch to print the version.
  opts.on_tail('--version', 'Show version') do
    puts ::Version.join('.')
    exit
  end

end.parse!

service = options.delete(:service)
if service.nil?
  puts 'Specify service with --service'
  exit 1
end
a = Analyzer::Analyzer.new(options)
puts a.analyze_service(service, options)

